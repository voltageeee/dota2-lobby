// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fmatch_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fmatch_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_gcmessages.pb.h"
#include "dota_gcmessages_common_match_management.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fmatch_5fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fmatch_5fmetadata_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(int index);
class CDOTAMatchMetadata;
struct CDOTAMatchMetadataDefaultTypeInternal;
extern CDOTAMatchMetadataDefaultTypeInternal _CDOTAMatchMetadata_default_instance_;
class CDOTAMatchMetadataFile;
struct CDOTAMatchMetadataFileDefaultTypeInternal;
extern CDOTAMatchMetadataFileDefaultTypeInternal _CDOTAMatchMetadataFile_default_instance_;
class CDOTAMatchMetadata_GuildChallengeProgress;
struct CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal;
extern CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal _CDOTAMatchMetadata_GuildChallengeProgress_default_instance_;
class CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress;
struct CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal;
extern CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal _CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress_default_instance_;
class CDOTAMatchMetadata_Team;
struct CDOTAMatchMetadata_TeamDefaultTypeInternal;
extern CDOTAMatchMetadata_TeamDefaultTypeInternal _CDOTAMatchMetadata_Team_default_instance_;
class CDOTAMatchMetadata_Team_ActionGrant;
struct CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_ActionGrant_default_instance_;
class CDOTAMatchMetadata_Team_AutoStyleCriteria;
struct CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
class CDOTAMatchMetadata_Team_CandyGrant;
struct CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_CandyGrant_default_instance_;
class CDOTAMatchMetadata_Team_CavernChallengeResult;
struct CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal _CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_;
class CDOTAMatchMetadata_Team_EventData;
struct CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal _CDOTAMatchMetadata_Team_EventData_default_instance_;
class CDOTAMatchMetadata_Team_GauntletProgress;
struct CDOTAMatchMetadata_Team_GauntletProgressDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_GauntletProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_GauntletProgress_default_instance_;
class CDOTAMatchMetadata_Team_InventorySnapshot;
struct CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
class CDOTAMatchMetadata_Team_ItemPurchase;
struct CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
class CDOTAMatchMetadata_Team_Player;
struct CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_default_instance_;
class CDOTAMatchMetadata_Team_PlayerKill;
struct CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
class CDOTAMatchMetadata_Team_Player_ContractProgress;
struct CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_ContractProgress_default_instance_;
class CDOTAMatchMetadata_Team_StrangeGemProgress;
struct CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
class CDOTAMatchMetadata_Team_SubChallenge;
struct CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
class CDOTAMatchMetadata_Team_VictoryPrediction;
struct CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
class CDOTAMatchPrivateMetadata;
struct CDOTAMatchPrivateMetadataDefaultTypeInternal;
extern CDOTAMatchPrivateMetadataDefaultTypeInternal _CDOTAMatchPrivateMetadata_default_instance_;
class CDOTAMatchPrivateMetadata_StringName;
struct CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal _CDOTAMatchPrivateMetadata_StringName_default_instance_;
class CDOTAMatchPrivateMetadata_Team;
struct CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Building;
struct CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Building_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player;
struct CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord;
struct CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget;
struct CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment;
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility;
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget;
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility;
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget;
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_GoldReceived;
struct CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_GoldReceived_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_XPReceived;
struct CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_XPReceived_default_instance_;
class CMsgDOTADPCMatch;
struct CMsgDOTADPCMatchDefaultTypeInternal;
extern CMsgDOTADPCMatchDefaultTypeInternal _CMsgDOTADPCMatch_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDOTAMatchMetadata* Arena::CreateMaybeMessage<::CDOTAMatchMetadata>(Arena*);
template<> ::CDOTAMatchMetadataFile* Arena::CreateMaybeMessage<::CDOTAMatchMetadataFile>(Arena*);
template<> ::CDOTAMatchMetadata_GuildChallengeProgress* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_GuildChallengeProgress>(Arena*);
template<> ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress>(Arena*);
template<> ::CDOTAMatchMetadata_Team* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team>(Arena*);
template<> ::CDOTAMatchMetadata_Team_ActionGrant* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_ActionGrant>(Arena*);
template<> ::CDOTAMatchMetadata_Team_AutoStyleCriteria* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_AutoStyleCriteria>(Arena*);
template<> ::CDOTAMatchMetadata_Team_CandyGrant* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_CandyGrant>(Arena*);
template<> ::CDOTAMatchMetadata_Team_CavernChallengeResult* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_CavernChallengeResult>(Arena*);
template<> ::CDOTAMatchMetadata_Team_EventData* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_EventData>(Arena*);
template<> ::CDOTAMatchMetadata_Team_GauntletProgress* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_GauntletProgress>(Arena*);
template<> ::CDOTAMatchMetadata_Team_InventorySnapshot* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_InventorySnapshot>(Arena*);
template<> ::CDOTAMatchMetadata_Team_ItemPurchase* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_ItemPurchase>(Arena*);
template<> ::CDOTAMatchMetadata_Team_Player* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_Player>(Arena*);
template<> ::CDOTAMatchMetadata_Team_PlayerKill* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_PlayerKill>(Arena*);
template<> ::CDOTAMatchMetadata_Team_Player_ContractProgress* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_Player_ContractProgress>(Arena*);
template<> ::CDOTAMatchMetadata_Team_StrangeGemProgress* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_StrangeGemProgress>(Arena*);
template<> ::CDOTAMatchMetadata_Team_SubChallenge* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_SubChallenge>(Arena*);
template<> ::CDOTAMatchMetadata_Team_VictoryPrediction* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_VictoryPrediction>(Arena*);
template<> ::CDOTAMatchPrivateMetadata* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_StringName* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_StringName>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Building* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Building>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived>(Arena*);
template<> ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* Arena::CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_XPReceived>(Arena*);
template<> ::CMsgDOTADPCMatch* Arena::CreateMaybeMessage<::CMsgDOTADPCMatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CDOTAMatchMetadataFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadataFile) */ {
 public:
  inline CDOTAMatchMetadataFile() : CDOTAMatchMetadataFile(nullptr) {}
  virtual ~CDOTAMatchMetadataFile();
  explicit constexpr CDOTAMatchMetadataFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from);
  CDOTAMatchMetadataFile(CDOTAMatchMetadataFile&& from) noexcept
    : CDOTAMatchMetadataFile() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadataFile& operator=(const CDOTAMatchMetadataFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadataFile& operator=(CDOTAMatchMetadataFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadataFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadataFile* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadataFile*>(
               &_CDOTAMatchMetadataFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDOTAMatchMetadataFile& a, CDOTAMatchMetadataFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadataFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadataFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadataFile* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadataFile>(nullptr);
  }

  CDOTAMatchMetadataFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadataFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadataFile& from);
  void MergeFrom(const CDOTAMatchMetadataFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadataFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadataFile";
  }
  protected:
  explicit CDOTAMatchMetadataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateMetadataFieldNumber = 5,
    kMetadataFieldNumber = 3,
    kMatchIdFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // optional bytes private_metadata = 5;
  bool has_private_metadata() const;
  private:
  bool _internal_has_private_metadata() const;
  public:
  void clear_private_metadata();
  const std::string& private_metadata() const;
  void set_private_metadata(const std::string& value);
  void set_private_metadata(std::string&& value);
  void set_private_metadata(const char* value);
  void set_private_metadata(const void* value, size_t size);
  std::string* mutable_private_metadata();
  std::string* release_private_metadata();
  void set_allocated_private_metadata(std::string* private_metadata);
  private:
  const std::string& _internal_private_metadata() const;
  void _internal_set_private_metadata(const std::string& value);
  std::string* _internal_mutable_private_metadata();
  public:

  // optional .CDOTAMatchMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::CDOTAMatchMetadata& metadata() const;
  ::CDOTAMatchMetadata* release_metadata();
  ::CDOTAMatchMetadata* mutable_metadata();
  void set_allocated_metadata(::CDOTAMatchMetadata* metadata);
  private:
  const ::CDOTAMatchMetadata& _internal_metadata() const;
  ::CDOTAMatchMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::CDOTAMatchMetadata* metadata);
  ::CDOTAMatchMetadata* unsafe_arena_release_metadata();

  // required uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadataFile)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_metadata_;
  ::CDOTAMatchMetadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_PlayerKill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.PlayerKill) */ {
 public:
  inline CDOTAMatchMetadata_Team_PlayerKill() : CDOTAMatchMetadata_Team_PlayerKill(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_PlayerKill();
  explicit constexpr CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from);
  CDOTAMatchMetadata_Team_PlayerKill(CDOTAMatchMetadata_Team_PlayerKill&& from) noexcept
    : CDOTAMatchMetadata_Team_PlayerKill() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_PlayerKill& operator=(const CDOTAMatchMetadata_Team_PlayerKill& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_PlayerKill& operator=(CDOTAMatchMetadata_Team_PlayerKill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_PlayerKill& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_PlayerKill* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_PlayerKill*>(
               &_CDOTAMatchMetadata_Team_PlayerKill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CDOTAMatchMetadata_Team_PlayerKill& a, CDOTAMatchMetadata_Team_PlayerKill& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_PlayerKill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_PlayerKill* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_PlayerKill>(nullptr);
  }

  CDOTAMatchMetadata_Team_PlayerKill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_PlayerKill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.PlayerKill";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimSlotFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional uint32 victim_slot = 1;
  bool has_victim_slot() const;
  private:
  bool _internal_has_victim_slot() const;
  public:
  void clear_victim_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 victim_slot() const;
  void set_victim_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_victim_slot() const;
  void _internal_set_victim_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.PlayerKill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 victim_slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_ItemPurchase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.ItemPurchase) */ {
 public:
  inline CDOTAMatchMetadata_Team_ItemPurchase() : CDOTAMatchMetadata_Team_ItemPurchase(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_ItemPurchase();
  explicit constexpr CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  CDOTAMatchMetadata_Team_ItemPurchase(CDOTAMatchMetadata_Team_ItemPurchase&& from) noexcept
    : CDOTAMatchMetadata_Team_ItemPurchase() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_ItemPurchase& operator=(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_ItemPurchase& operator=(CDOTAMatchMetadata_Team_ItemPurchase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_ItemPurchase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_ItemPurchase* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_ItemPurchase*>(
               &_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CDOTAMatchMetadata_Team_ItemPurchase& a, CDOTAMatchMetadata_Team_ItemPurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_ItemPurchase* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ItemPurchase>(nullptr);
  }

  CDOTAMatchMetadata_Team_ItemPurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ItemPurchase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.ItemPurchase";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kPurchaseTimeFieldNumber = 2,
  };
  // optional uint32 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 purchase_time = 2;
  bool has_purchase_time() const;
  private:
  bool _internal_has_purchase_time() const;
  public:
  void clear_purchase_time();
  ::PROTOBUF_NAMESPACE_ID::int32 purchase_time() const;
  void set_purchase_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_purchase_time() const;
  void _internal_set_purchase_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.ItemPurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 purchase_time_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_InventorySnapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.InventorySnapshot) */ {
 public:
  inline CDOTAMatchMetadata_Team_InventorySnapshot() : CDOTAMatchMetadata_Team_InventorySnapshot(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_InventorySnapshot();
  explicit constexpr CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  CDOTAMatchMetadata_Team_InventorySnapshot(CDOTAMatchMetadata_Team_InventorySnapshot&& from) noexcept
    : CDOTAMatchMetadata_Team_InventorySnapshot() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_InventorySnapshot& operator=(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_InventorySnapshot& operator=(CDOTAMatchMetadata_Team_InventorySnapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_InventorySnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_InventorySnapshot* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_InventorySnapshot*>(
               &_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CDOTAMatchMetadata_Team_InventorySnapshot& a, CDOTAMatchMetadata_Team_InventorySnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_InventorySnapshot* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_InventorySnapshot>(nullptr);
  }

  CDOTAMatchMetadata_Team_InventorySnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_InventorySnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.InventorySnapshot";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kGameTimeFieldNumber = 2,
    kKillsFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kAssistsFieldNumber = 5,
    kLevelFieldNumber = 6,
  };
  // repeated uint32 item_id = 1;
  int item_id_size() const;
  private:
  int _internal_item_id_size() const;
  public:
  void clear_item_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_item_id() const;
  void _internal_add_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_item_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id(int index) const;
  void set_item_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      item_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_item_id();

  // optional int32 game_time = 2;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  ::PROTOBUF_NAMESPACE_ID::int32 game_time() const;
  void set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_time() const;
  void _internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 kills = 3;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills() const;
  void set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills() const;
  void _internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths() const;
  void set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deaths() const;
  void _internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 assists = 5;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  ::PROTOBUF_NAMESPACE_ID::uint32 assists() const;
  void set_assists(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assists() const;
  void _internal_set_assists(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 level = 6;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.InventorySnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > item_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assists_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_AutoStyleCriteria PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.AutoStyleCriteria) */ {
 public:
  inline CDOTAMatchMetadata_Team_AutoStyleCriteria() : CDOTAMatchMetadata_Team_AutoStyleCriteria(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_AutoStyleCriteria();
  explicit constexpr CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  CDOTAMatchMetadata_Team_AutoStyleCriteria(CDOTAMatchMetadata_Team_AutoStyleCriteria&& from) noexcept
    : CDOTAMatchMetadata_Team_AutoStyleCriteria() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_AutoStyleCriteria& operator=(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_AutoStyleCriteria& operator=(CDOTAMatchMetadata_Team_AutoStyleCriteria&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_AutoStyleCriteria& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_AutoStyleCriteria* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_AutoStyleCriteria*>(
               &_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CDOTAMatchMetadata_Team_AutoStyleCriteria& a, CDOTAMatchMetadata_Team_AutoStyleCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_AutoStyleCriteria* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_AutoStyleCriteria>(nullptr);
  }

  CDOTAMatchMetadata_Team_AutoStyleCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_AutoStyleCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.AutoStyleCriteria";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameTokenFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional uint32 name_token = 1;
  bool has_name_token() const;
  private:
  bool _internal_has_name_token() const;
  public:
  void clear_name_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 name_token() const;
  void set_name_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_name_token() const;
  void _internal_set_name_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.AutoStyleCriteria)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 name_token_;
  float value_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_StrangeGemProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.StrangeGemProgress) */ {
 public:
  inline CDOTAMatchMetadata_Team_StrangeGemProgress() : CDOTAMatchMetadata_Team_StrangeGemProgress(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_StrangeGemProgress();
  explicit constexpr CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  CDOTAMatchMetadata_Team_StrangeGemProgress(CDOTAMatchMetadata_Team_StrangeGemProgress&& from) noexcept
    : CDOTAMatchMetadata_Team_StrangeGemProgress() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_StrangeGemProgress& operator=(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_StrangeGemProgress& operator=(CDOTAMatchMetadata_Team_StrangeGemProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_StrangeGemProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_StrangeGemProgress* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_StrangeGemProgress*>(
               &_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CDOTAMatchMetadata_Team_StrangeGemProgress& a, CDOTAMatchMetadata_Team_StrangeGemProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_StrangeGemProgress* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_StrangeGemProgress>(nullptr);
  }

  CDOTAMatchMetadata_Team_StrangeGemProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_StrangeGemProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.StrangeGemProgress";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillEaterTypeFieldNumber = 1,
    kGemItemDefIndexFieldNumber = 2,
    kRequiredHeroIdFieldNumber = 3,
    kStartingValueFieldNumber = 4,
    kEndingValueFieldNumber = 5,
    kOwnerItemDefIndexFieldNumber = 6,
    kOwnerItemIdFieldNumber = 7,
  };
  // optional uint32 kill_eater_type = 1;
  bool has_kill_eater_type() const;
  private:
  bool _internal_has_kill_eater_type() const;
  public:
  void clear_kill_eater_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 kill_eater_type() const;
  void set_kill_eater_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kill_eater_type() const;
  void _internal_set_kill_eater_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gem_item_def_index = 2;
  bool has_gem_item_def_index() const;
  private:
  bool _internal_has_gem_item_def_index() const;
  public:
  void clear_gem_item_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 gem_item_def_index() const;
  void set_gem_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gem_item_def_index() const;
  void _internal_set_gem_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 required_hero_id = 3;
  bool has_required_hero_id() const;
  private:
  bool _internal_has_required_hero_id() const;
  public:
  void clear_required_hero_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 required_hero_id() const;
  void set_required_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_required_hero_id() const;
  void _internal_set_required_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 starting_value = 4;
  bool has_starting_value() const;
  private:
  bool _internal_has_starting_value() const;
  public:
  void clear_starting_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_value() const;
  void set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starting_value() const;
  void _internal_set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ending_value = 5;
  bool has_ending_value() const;
  private:
  bool _internal_has_ending_value() const;
  public:
  void clear_ending_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 ending_value() const;
  void set_ending_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ending_value() const;
  void _internal_set_ending_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_item_def_index = 6;
  bool has_owner_item_def_index() const;
  private:
  bool _internal_has_owner_item_def_index() const;
  public:
  void clear_owner_item_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_item_def_index() const;
  void set_owner_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_item_def_index() const;
  void _internal_set_owner_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 owner_item_id = 7;
  bool has_owner_item_id() const;
  private:
  bool _internal_has_owner_item_id() const;
  public:
  void clear_owner_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_item_id() const;
  void set_owner_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner_item_id() const;
  void _internal_set_owner_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.StrangeGemProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kill_eater_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gem_item_def_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 required_hero_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ending_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_item_def_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_item_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_VictoryPrediction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.VictoryPrediction) */ {
 public:
  inline CDOTAMatchMetadata_Team_VictoryPrediction() : CDOTAMatchMetadata_Team_VictoryPrediction(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_VictoryPrediction();
  explicit constexpr CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  CDOTAMatchMetadata_Team_VictoryPrediction(CDOTAMatchMetadata_Team_VictoryPrediction&& from) noexcept
    : CDOTAMatchMetadata_Team_VictoryPrediction() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_VictoryPrediction& operator=(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_VictoryPrediction& operator=(CDOTAMatchMetadata_Team_VictoryPrediction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_VictoryPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_VictoryPrediction* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_VictoryPrediction*>(
               &_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CDOTAMatchMetadata_Team_VictoryPrediction& a, CDOTAMatchMetadata_Team_VictoryPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_VictoryPrediction* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_VictoryPrediction>(nullptr);
  }

  CDOTAMatchMetadata_Team_VictoryPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_VictoryPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.VictoryPrediction";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemDefIndexFieldNumber = 2,
    kStartingValueFieldNumber = 3,
    kIsVictoryFieldNumber = 4,
  };
  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  private:
  bool _internal_has_item_def_index() const;
  public:
  void clear_item_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def_index() const;
  void set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_def_index() const;
  void _internal_set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 starting_value = 3;
  bool has_starting_value() const;
  private:
  bool _internal_has_starting_value() const;
  public:
  void clear_starting_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_value() const;
  void set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starting_value() const;
  void _internal_set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_victory = 4;
  bool has_is_victory() const;
  private:
  bool _internal_has_is_victory() const;
  public:
  void clear_is_victory();
  bool is_victory() const;
  void set_is_victory(bool value);
  private:
  bool _internal_is_victory() const;
  void _internal_set_is_victory(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.VictoryPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starting_value_;
  bool is_victory_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_SubChallenge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.SubChallenge) */ {
 public:
  inline CDOTAMatchMetadata_Team_SubChallenge() : CDOTAMatchMetadata_Team_SubChallenge(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_SubChallenge();
  explicit constexpr CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from);
  CDOTAMatchMetadata_Team_SubChallenge(CDOTAMatchMetadata_Team_SubChallenge&& from) noexcept
    : CDOTAMatchMetadata_Team_SubChallenge() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_SubChallenge& operator=(const CDOTAMatchMetadata_Team_SubChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_SubChallenge& operator=(CDOTAMatchMetadata_Team_SubChallenge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_SubChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_SubChallenge* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_SubChallenge*>(
               &_CDOTAMatchMetadata_Team_SubChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDOTAMatchMetadata_Team_SubChallenge& a, CDOTAMatchMetadata_Team_SubChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_SubChallenge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_SubChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_SubChallenge* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_SubChallenge>(nullptr);
  }

  CDOTAMatchMetadata_Team_SubChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_SubChallenge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_SubChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.SubChallenge";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotIdFieldNumber = 1,
    kStartValueFieldNumber = 2,
    kEndValueFieldNumber = 3,
    kCompletedFieldNumber = 4,
  };
  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_id() const;
  void set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_id() const;
  void _internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_value = 2;
  bool has_start_value() const;
  private:
  bool _internal_has_start_value() const;
  public:
  void clear_start_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_value() const;
  void set_start_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_value() const;
  void _internal_set_start_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 end_value = 3;
  bool has_end_value() const;
  private:
  bool _internal_has_end_value() const;
  public:
  void clear_end_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_value() const;
  void set_end_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_value() const;
  void _internal_set_end_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool completed = 4;
  bool has_completed() const;
  private:
  bool _internal_has_completed() const;
  public:
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.SubChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_value_;
  bool completed_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_CavernChallengeResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.CavernChallengeResult) */ {
 public:
  inline CDOTAMatchMetadata_Team_CavernChallengeResult() : CDOTAMatchMetadata_Team_CavernChallengeResult(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_CavernChallengeResult();
  explicit constexpr CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_CavernChallengeResult(const CDOTAMatchMetadata_Team_CavernChallengeResult& from);
  CDOTAMatchMetadata_Team_CavernChallengeResult(CDOTAMatchMetadata_Team_CavernChallengeResult&& from) noexcept
    : CDOTAMatchMetadata_Team_CavernChallengeResult() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_CavernChallengeResult& operator=(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_CavernChallengeResult& operator=(CDOTAMatchMetadata_Team_CavernChallengeResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_CavernChallengeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_CavernChallengeResult* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_CavernChallengeResult*>(
               &_CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CDOTAMatchMetadata_Team_CavernChallengeResult& a, CDOTAMatchMetadata_Team_CavernChallengeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_CavernChallengeResult* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_CavernChallengeResult>(nullptr);
  }

  CDOTAMatchMetadata_Team_CavernChallengeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_CavernChallengeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.CavernChallengeResult";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedPathIdFieldNumber = 1,
    kClaimedRoomIdFieldNumber = 2,
  };
  // optional uint32 completed_path_id = 1;
  bool has_completed_path_id() const;
  private:
  bool _internal_has_completed_path_id() const;
  public:
  void clear_completed_path_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 completed_path_id() const;
  void set_completed_path_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_completed_path_id() const;
  void _internal_set_completed_path_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 claimed_room_id = 2;
  bool has_claimed_room_id() const;
  private:
  bool _internal_has_claimed_room_id() const;
  public:
  void clear_claimed_room_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 claimed_room_id() const;
  void set_claimed_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_claimed_room_id() const;
  void _internal_set_claimed_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.CavernChallengeResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 completed_path_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 claimed_room_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_ActionGrant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.ActionGrant) */ {
 public:
  inline CDOTAMatchMetadata_Team_ActionGrant() : CDOTAMatchMetadata_Team_ActionGrant(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_ActionGrant();
  explicit constexpr CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_ActionGrant(const CDOTAMatchMetadata_Team_ActionGrant& from);
  CDOTAMatchMetadata_Team_ActionGrant(CDOTAMatchMetadata_Team_ActionGrant&& from) noexcept
    : CDOTAMatchMetadata_Team_ActionGrant() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_ActionGrant& operator=(const CDOTAMatchMetadata_Team_ActionGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_ActionGrant& operator=(CDOTAMatchMetadata_Team_ActionGrant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_ActionGrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_ActionGrant* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_ActionGrant*>(
               &_CDOTAMatchMetadata_Team_ActionGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CDOTAMatchMetadata_Team_ActionGrant& a, CDOTAMatchMetadata_Team_ActionGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_ActionGrant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_ActionGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_ActionGrant* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ActionGrant>(nullptr);
  }

  CDOTAMatchMetadata_Team_ActionGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ActionGrant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_ActionGrant& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_ActionGrant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_ActionGrant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.ActionGrant";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kAuditFieldNumber = 3,
    kRequiresWinFieldNumber = 4,
    kAuditDataFieldNumber = 5,
  };
  // optional uint32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 quantity = 2;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 audit = 3;
  bool has_audit() const;
  private:
  bool _internal_has_audit() const;
  public:
  void clear_audit();
  ::PROTOBUF_NAMESPACE_ID::uint32 audit() const;
  void set_audit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_audit() const;
  void _internal_set_audit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool requires_win = 4;
  bool has_requires_win() const;
  private:
  bool _internal_has_requires_win() const;
  public:
  void clear_requires_win();
  bool requires_win() const;
  void set_requires_win(bool value);
  private:
  bool _internal_requires_win() const;
  void _internal_set_requires_win(bool value);
  public:

  // optional uint64 audit_data = 5;
  bool has_audit_data() const;
  private:
  bool _internal_has_audit_data() const;
  public:
  void clear_audit_data();
  ::PROTOBUF_NAMESPACE_ID::uint64 audit_data() const;
  void set_audit_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_audit_data() const;
  void _internal_set_audit_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.ActionGrant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 audit_;
  bool requires_win_;
  ::PROTOBUF_NAMESPACE_ID::uint64 audit_data_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_CandyGrant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.CandyGrant) */ {
 public:
  inline CDOTAMatchMetadata_Team_CandyGrant() : CDOTAMatchMetadata_Team_CandyGrant(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_CandyGrant();
  explicit constexpr CDOTAMatchMetadata_Team_CandyGrant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_CandyGrant(const CDOTAMatchMetadata_Team_CandyGrant& from);
  CDOTAMatchMetadata_Team_CandyGrant(CDOTAMatchMetadata_Team_CandyGrant&& from) noexcept
    : CDOTAMatchMetadata_Team_CandyGrant() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_CandyGrant& operator=(const CDOTAMatchMetadata_Team_CandyGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_CandyGrant& operator=(CDOTAMatchMetadata_Team_CandyGrant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_CandyGrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_CandyGrant* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_CandyGrant*>(
               &_CDOTAMatchMetadata_Team_CandyGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CDOTAMatchMetadata_Team_CandyGrant& a, CDOTAMatchMetadata_Team_CandyGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_CandyGrant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_CandyGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_CandyGrant* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_CandyGrant>(nullptr);
  }

  CDOTAMatchMetadata_Team_CandyGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_CandyGrant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_CandyGrant& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_CandyGrant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_CandyGrant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.CandyGrant";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_CandyGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // optional uint32 points = 1;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.CandyGrant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_EventData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.EventData) */ {
 public:
  inline CDOTAMatchMetadata_Team_EventData() : CDOTAMatchMetadata_Team_EventData(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_EventData();
  explicit constexpr CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from);
  CDOTAMatchMetadata_Team_EventData(CDOTAMatchMetadata_Team_EventData&& from) noexcept
    : CDOTAMatchMetadata_Team_EventData() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_EventData& operator=(const CDOTAMatchMetadata_Team_EventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_EventData& operator=(CDOTAMatchMetadata_Team_EventData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_EventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_EventData* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_EventData*>(
               &_CDOTAMatchMetadata_Team_EventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CDOTAMatchMetadata_Team_EventData& a, CDOTAMatchMetadata_Team_EventData& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_EventData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_EventData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_EventData* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_EventData>(nullptr);
  }

  CDOTAMatchMetadata_Team_EventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_EventData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_EventData& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_EventData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_EventData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.EventData";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubChallengesWithProgressFieldNumber = 10,
    kCavernChallengeMapResultsFieldNumber = 17,
    kActionsGrantedFieldNumber = 19,
    kCandyPointsGrantedFieldNumber = 23,
    kEventIdFieldNumber = 1,
    kEventPointsFieldNumber = 2,
    kChallengeInstanceIdFieldNumber = 3,
    kChallengeQuestIdFieldNumber = 4,
    kChallengeQuestChallengeIdFieldNumber = 5,
    kChallengeRankCompletedFieldNumber = 7,
    kChallengeRankPreviouslyCompletedFieldNumber = 8,
    kWagerWinningsFieldNumber = 11,
    kCavernChallengeWinningsFieldNumber = 13,
    kChallengeCompletedFieldNumber = 6,
    kEventOwnedFieldNumber = 9,
    kCavernChallengeActiveFieldNumber = 12,
    kCavernCrawlHalfCreditFieldNumber = 25,
    kAmountWageredFieldNumber = 14,
    kPeriodicPointAdjustmentsFieldNumber = 16,
    kCavernChallengePlusShardWinningsFieldNumber = 18,
    kCavernCrawlMapVariantFieldNumber = 20,
    kTeamWagerBonusPctFieldNumber = 21,
    kWagerStreakPctFieldNumber = 22,
    kActiveSeasonIdFieldNumber = 24,
  };
  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  int sub_challenges_with_progress_size() const;
  private:
  int _internal_sub_challenges_with_progress_size() const;
  public:
  void clear_sub_challenges_with_progress();
  ::CDOTAMatchMetadata_Team_SubChallenge* mutable_sub_challenges_with_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >*
      mutable_sub_challenges_with_progress();
  private:
  const ::CDOTAMatchMetadata_Team_SubChallenge& _internal_sub_challenges_with_progress(int index) const;
  ::CDOTAMatchMetadata_Team_SubChallenge* _internal_add_sub_challenges_with_progress();
  public:
  const ::CDOTAMatchMetadata_Team_SubChallenge& sub_challenges_with_progress(int index) const;
  ::CDOTAMatchMetadata_Team_SubChallenge* add_sub_challenges_with_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >&
      sub_challenges_with_progress() const;

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  int cavern_challenge_map_results_size() const;
  private:
  int _internal_cavern_challenge_map_results_size() const;
  public:
  void clear_cavern_challenge_map_results();
  ::CDOTAMatchMetadata_Team_CavernChallengeResult* mutable_cavern_challenge_map_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >*
      mutable_cavern_challenge_map_results();
  private:
  const ::CDOTAMatchMetadata_Team_CavernChallengeResult& _internal_cavern_challenge_map_results(int index) const;
  ::CDOTAMatchMetadata_Team_CavernChallengeResult* _internal_add_cavern_challenge_map_results();
  public:
  const ::CDOTAMatchMetadata_Team_CavernChallengeResult& cavern_challenge_map_results(int index) const;
  ::CDOTAMatchMetadata_Team_CavernChallengeResult* add_cavern_challenge_map_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >&
      cavern_challenge_map_results() const;

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  int actions_granted_size() const;
  private:
  int _internal_actions_granted_size() const;
  public:
  void clear_actions_granted();
  ::CDOTAMatchMetadata_Team_ActionGrant* mutable_actions_granted(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >*
      mutable_actions_granted();
  private:
  const ::CDOTAMatchMetadata_Team_ActionGrant& _internal_actions_granted(int index) const;
  ::CDOTAMatchMetadata_Team_ActionGrant* _internal_add_actions_granted();
  public:
  const ::CDOTAMatchMetadata_Team_ActionGrant& actions_granted(int index) const;
  ::CDOTAMatchMetadata_Team_ActionGrant* add_actions_granted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >&
      actions_granted() const;

  // repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
  int candy_points_granted_size() const;
  private:
  int _internal_candy_points_granted_size() const;
  public:
  void clear_candy_points_granted();
  ::CDOTAMatchMetadata_Team_CandyGrant* mutable_candy_points_granted(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CandyGrant >*
      mutable_candy_points_granted();
  private:
  const ::CDOTAMatchMetadata_Team_CandyGrant& _internal_candy_points_granted(int index) const;
  ::CDOTAMatchMetadata_Team_CandyGrant* _internal_add_candy_points_granted();
  public:
  const ::CDOTAMatchMetadata_Team_CandyGrant& candy_points_granted(int index) const;
  ::CDOTAMatchMetadata_Team_CandyGrant* add_candy_points_granted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CandyGrant >&
      candy_points_granted() const;

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 event_points = 2;
  bool has_event_points() const;
  private:
  bool _internal_has_event_points() const;
  public:
  void clear_event_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_points() const;
  void set_event_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_points() const;
  void _internal_set_event_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id() const;
  void set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_quest_id = 4;
  bool has_challenge_quest_id() const;
  private:
  bool _internal_has_challenge_quest_id() const;
  public:
  void clear_challenge_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_quest_id() const;
  void set_challenge_quest_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_quest_id() const;
  void _internal_set_challenge_quest_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_quest_challenge_id = 5;
  bool has_challenge_quest_challenge_id() const;
  private:
  bool _internal_has_challenge_quest_challenge_id() const;
  public:
  void clear_challenge_quest_challenge_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_quest_challenge_id() const;
  void set_challenge_quest_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_quest_challenge_id() const;
  void _internal_set_challenge_quest_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_rank_completed = 7;
  bool has_challenge_rank_completed() const;
  private:
  bool _internal_has_challenge_rank_completed() const;
  public:
  void clear_challenge_rank_completed();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_rank_completed() const;
  void set_challenge_rank_completed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_rank_completed() const;
  void _internal_set_challenge_rank_completed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_rank_previously_completed = 8;
  bool has_challenge_rank_previously_completed() const;
  private:
  bool _internal_has_challenge_rank_previously_completed() const;
  public:
  void clear_challenge_rank_previously_completed();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_rank_previously_completed() const;
  void set_challenge_rank_previously_completed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_rank_previously_completed() const;
  void _internal_set_challenge_rank_previously_completed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 wager_winnings = 11;
  bool has_wager_winnings() const;
  private:
  bool _internal_has_wager_winnings() const;
  public:
  void clear_wager_winnings();
  ::PROTOBUF_NAMESPACE_ID::uint32 wager_winnings() const;
  void set_wager_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wager_winnings() const;
  void _internal_set_wager_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cavern_challenge_winnings = 13;
  bool has_cavern_challenge_winnings() const;
  private:
  bool _internal_has_cavern_challenge_winnings() const;
  public:
  void clear_cavern_challenge_winnings();
  ::PROTOBUF_NAMESPACE_ID::uint32 cavern_challenge_winnings() const;
  void set_cavern_challenge_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cavern_challenge_winnings() const;
  void _internal_set_cavern_challenge_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool challenge_completed = 6;
  bool has_challenge_completed() const;
  private:
  bool _internal_has_challenge_completed() const;
  public:
  void clear_challenge_completed();
  bool challenge_completed() const;
  void set_challenge_completed(bool value);
  private:
  bool _internal_challenge_completed() const;
  void _internal_set_challenge_completed(bool value);
  public:

  // optional bool event_owned = 9;
  bool has_event_owned() const;
  private:
  bool _internal_has_event_owned() const;
  public:
  void clear_event_owned();
  bool event_owned() const;
  void set_event_owned(bool value);
  private:
  bool _internal_event_owned() const;
  void _internal_set_event_owned(bool value);
  public:

  // optional bool cavern_challenge_active = 12;
  bool has_cavern_challenge_active() const;
  private:
  bool _internal_has_cavern_challenge_active() const;
  public:
  void clear_cavern_challenge_active();
  bool cavern_challenge_active() const;
  void set_cavern_challenge_active(bool value);
  private:
  bool _internal_cavern_challenge_active() const;
  void _internal_set_cavern_challenge_active(bool value);
  public:

  // optional bool cavern_crawl_half_credit = 25;
  bool has_cavern_crawl_half_credit() const;
  private:
  bool _internal_has_cavern_crawl_half_credit() const;
  public:
  void clear_cavern_crawl_half_credit();
  bool cavern_crawl_half_credit() const;
  void set_cavern_crawl_half_credit(bool value);
  private:
  bool _internal_cavern_crawl_half_credit() const;
  void _internal_set_cavern_crawl_half_credit(bool value);
  public:

  // optional uint32 amount_wagered = 14;
  bool has_amount_wagered() const;
  private:
  bool _internal_has_amount_wagered() const;
  public:
  void clear_amount_wagered();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_wagered() const;
  void set_amount_wagered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount_wagered() const;
  void _internal_set_amount_wagered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 periodic_point_adjustments = 16;
  bool has_periodic_point_adjustments() const;
  private:
  bool _internal_has_periodic_point_adjustments() const;
  public:
  void clear_periodic_point_adjustments();
  ::PROTOBUF_NAMESPACE_ID::uint32 periodic_point_adjustments() const;
  void set_periodic_point_adjustments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_periodic_point_adjustments() const;
  void _internal_set_periodic_point_adjustments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cavern_challenge_plus_shard_winnings = 18;
  bool has_cavern_challenge_plus_shard_winnings() const;
  private:
  bool _internal_has_cavern_challenge_plus_shard_winnings() const;
  public:
  void clear_cavern_challenge_plus_shard_winnings();
  ::PROTOBUF_NAMESPACE_ID::uint32 cavern_challenge_plus_shard_winnings() const;
  void set_cavern_challenge_plus_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cavern_challenge_plus_shard_winnings() const;
  void _internal_set_cavern_challenge_plus_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cavern_crawl_map_variant = 20;
  bool has_cavern_crawl_map_variant() const;
  private:
  bool _internal_has_cavern_crawl_map_variant() const;
  public:
  void clear_cavern_crawl_map_variant();
  ::PROTOBUF_NAMESPACE_ID::uint32 cavern_crawl_map_variant() const;
  void set_cavern_crawl_map_variant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cavern_crawl_map_variant() const;
  void _internal_set_cavern_crawl_map_variant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_wager_bonus_pct = 21;
  bool has_team_wager_bonus_pct() const;
  private:
  bool _internal_has_team_wager_bonus_pct() const;
  public:
  void clear_team_wager_bonus_pct();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_wager_bonus_pct() const;
  void set_team_wager_bonus_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_wager_bonus_pct() const;
  void _internal_set_team_wager_bonus_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 wager_streak_pct = 22;
  bool has_wager_streak_pct() const;
  private:
  bool _internal_has_wager_streak_pct() const;
  public:
  void clear_wager_streak_pct();
  ::PROTOBUF_NAMESPACE_ID::uint32 wager_streak_pct() const;
  void set_wager_streak_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wager_streak_pct() const;
  void _internal_set_wager_streak_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 active_season_id = 24;
  bool has_active_season_id() const;
  private:
  bool _internal_has_active_season_id() const;
  public:
  void clear_active_season_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_season_id() const;
  void set_active_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_season_id() const;
  void _internal_set_active_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.EventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge > sub_challenges_with_progress_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult > cavern_challenge_map_results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant > actions_granted_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CandyGrant > candy_points_granted_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_quest_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_quest_challenge_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_rank_completed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_rank_previously_completed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wager_winnings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cavern_challenge_winnings_;
  bool challenge_completed_;
  bool event_owned_;
  bool cavern_challenge_active_;
  bool cavern_crawl_half_credit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_wagered_;
  ::PROTOBUF_NAMESPACE_ID::uint32 periodic_point_adjustments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cavern_challenge_plus_shard_winnings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cavern_crawl_map_variant_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_wager_bonus_pct_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wager_streak_pct_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_season_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_GauntletProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.GauntletProgress) */ {
 public:
  inline CDOTAMatchMetadata_Team_GauntletProgress() : CDOTAMatchMetadata_Team_GauntletProgress(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_GauntletProgress();
  explicit constexpr CDOTAMatchMetadata_Team_GauntletProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_GauntletProgress(const CDOTAMatchMetadata_Team_GauntletProgress& from);
  CDOTAMatchMetadata_Team_GauntletProgress(CDOTAMatchMetadata_Team_GauntletProgress&& from) noexcept
    : CDOTAMatchMetadata_Team_GauntletProgress() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_GauntletProgress& operator=(const CDOTAMatchMetadata_Team_GauntletProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_GauntletProgress& operator=(CDOTAMatchMetadata_Team_GauntletProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_GauntletProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_GauntletProgress* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_GauntletProgress*>(
               &_CDOTAMatchMetadata_Team_GauntletProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CDOTAMatchMetadata_Team_GauntletProgress& a, CDOTAMatchMetadata_Team_GauntletProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_GauntletProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_GauntletProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_GauntletProgress* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_GauntletProgress>(nullptr);
  }

  CDOTAMatchMetadata_Team_GauntletProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_GauntletProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_GauntletProgress& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_GauntletProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_GauntletProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.GauntletProgress";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_GauntletProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGauntletTierFieldNumber = 2,
    kGauntletWinsFieldNumber = 3,
    kGauntletLossesFieldNumber = 4,
  };
  // optional uint32 gauntlet_tier = 2;
  bool has_gauntlet_tier() const;
  private:
  bool _internal_has_gauntlet_tier() const;
  public:
  void clear_gauntlet_tier();
  ::PROTOBUF_NAMESPACE_ID::uint32 gauntlet_tier() const;
  void set_gauntlet_tier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gauntlet_tier() const;
  void _internal_set_gauntlet_tier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gauntlet_wins = 3;
  bool has_gauntlet_wins() const;
  private:
  bool _internal_has_gauntlet_wins() const;
  public:
  void clear_gauntlet_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 gauntlet_wins() const;
  void set_gauntlet_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gauntlet_wins() const;
  void _internal_set_gauntlet_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gauntlet_losses = 4;
  bool has_gauntlet_losses() const;
  private:
  bool _internal_has_gauntlet_losses() const;
  public:
  void clear_gauntlet_losses();
  ::PROTOBUF_NAMESPACE_ID::uint32 gauntlet_losses() const;
  void set_gauntlet_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gauntlet_losses() const;
  void _internal_set_gauntlet_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.GauntletProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gauntlet_tier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gauntlet_wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gauntlet_losses_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_Player_ContractProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.Player.ContractProgress) */ {
 public:
  inline CDOTAMatchMetadata_Team_Player_ContractProgress() : CDOTAMatchMetadata_Team_Player_ContractProgress(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_Player_ContractProgress();
  explicit constexpr CDOTAMatchMetadata_Team_Player_ContractProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_Player_ContractProgress(const CDOTAMatchMetadata_Team_Player_ContractProgress& from);
  CDOTAMatchMetadata_Team_Player_ContractProgress(CDOTAMatchMetadata_Team_Player_ContractProgress&& from) noexcept
    : CDOTAMatchMetadata_Team_Player_ContractProgress() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_Player_ContractProgress& operator=(const CDOTAMatchMetadata_Team_Player_ContractProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_Player_ContractProgress& operator=(CDOTAMatchMetadata_Team_Player_ContractProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_Player_ContractProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_Player_ContractProgress* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_Player_ContractProgress*>(
               &_CDOTAMatchMetadata_Team_Player_ContractProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CDOTAMatchMetadata_Team_Player_ContractProgress& a, CDOTAMatchMetadata_Team_Player_ContractProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_Player_ContractProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_Player_ContractProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_Player_ContractProgress* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_Player_ContractProgress>(nullptr);
  }

  CDOTAMatchMetadata_Team_Player_ContractProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_Player_ContractProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_Player_ContractProgress& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_Player_ContractProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_Player_ContractProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.Player.ContractProgress";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_Player_ContractProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kChallengeInstanceIdFieldNumber = 3,
    kChallengeParameterFieldNumber = 4,
    kContractStarsFieldNumber = 5,
    kContractSlotFieldNumber = 6,
    kCompletedFieldNumber = 7,
  };
  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 event_id = 2;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id() const;
  void set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_parameter = 4;
  bool has_challenge_parameter() const;
  private:
  bool _internal_has_challenge_parameter() const;
  public:
  void clear_challenge_parameter();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_parameter() const;
  void set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_parameter() const;
  void _internal_set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 contract_stars = 5;
  bool has_contract_stars() const;
  private:
  bool _internal_has_contract_stars() const;
  public:
  void clear_contract_stars();
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_stars() const;
  void set_contract_stars(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contract_stars() const;
  void _internal_set_contract_stars(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 contract_slot = 6;
  bool has_contract_slot() const;
  private:
  bool _internal_has_contract_slot() const;
  public:
  void clear_contract_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_slot() const;
  void set_contract_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contract_slot() const;
  void _internal_set_contract_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool completed = 7;
  bool has_completed() const;
  private:
  bool _internal_has_completed() const;
  public:
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.Player.ContractProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_parameter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_stars_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_slot_;
  bool completed_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.Player) */ {
 public:
  inline CDOTAMatchMetadata_Team_Player() : CDOTAMatchMetadata_Team_Player(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team_Player();
  explicit constexpr CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from);
  CDOTAMatchMetadata_Team_Player(CDOTAMatchMetadata_Team_Player&& from) noexcept
    : CDOTAMatchMetadata_Team_Player() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_Player& operator=(const CDOTAMatchMetadata_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_Player& operator=(CDOTAMatchMetadata_Team_Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_Player* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_Player*>(
               &_CDOTAMatchMetadata_Team_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CDOTAMatchMetadata_Team_Player& a, CDOTAMatchMetadata_Team_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_Player* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_Player>(nullptr);
  }

  CDOTAMatchMetadata_Team_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_Player& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.Player";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team_Player_ContractProgress ContractProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityUpgradesFieldNumber = 2,
    kEquippedEconItemsFieldNumber = 4,
    kKillsFieldNumber = 5,
    kItemsFieldNumber = 6,
    kLevelUpTimesFieldNumber = 22,
    kGraphNetWorthFieldNumber = 23,
    kInventorySnapshotFieldNumber = 24,
    kAutoStyleCriteriaFieldNumber = 26,
    kEventDataFieldNumber = 29,
    kStrangeGemProgressFieldNumber = 30,
    kVictoryPredictionFieldNumber = 33,
    kContractProgressFieldNumber = 48,
    kGuildIdsFieldNumber = 49,
    kGauntletProgressFieldNumber = 47,
    kAccountIdFieldNumber = 1,
    kPlayerSlotFieldNumber = 3,
    kAvgKillsX16FieldNumber = 7,
    kAvgDeathsX16FieldNumber = 8,
    kAvgAssistsX16FieldNumber = 9,
    kAvgGpmX16FieldNumber = 10,
    kAvgXpmX16FieldNumber = 11,
    kBestKillsX16FieldNumber = 12,
    kBestAssistsX16FieldNumber = 13,
    kBestGpmX16FieldNumber = 14,
    kBestXpmX16FieldNumber = 15,
    kWinStreakFieldNumber = 16,
    kBestWinStreakFieldNumber = 17,
    kFightScoreFieldNumber = 18,
    kFarmScoreFieldNumber = 19,
    kSupportScoreFieldNumber = 20,
    kPushScoreFieldNumber = 21,
    kAvgStatsCalibratedFieldNumber = 25,
    kHeroXpFieldNumber = 31,
    kCampsStackedFieldNumber = 32,
    kLaneSelectionFlagsFieldNumber = 34,
    kRampagesFieldNumber = 35,
    kTripleKillsFieldNumber = 36,
    kAegisSnatchedFieldNumber = 37,
    kRapiersPurchasedFieldNumber = 38,
    kCouriersKilledFieldNumber = 39,
    kNetWorthRankFieldNumber = 40,
    kSupportGoldSpentFieldNumber = 41,
    kObserverWardsPlacedFieldNumber = 42,
    kSentryWardsPlacedFieldNumber = 43,
    kWardsDewardedFieldNumber = 44,
    kStunDurationFieldNumber = 45,
    kRankMmrBoostTypeFieldNumber = 46,
  };
  // repeated uint32 ability_upgrades = 2;
  int ability_upgrades_size() const;
  private:
  int _internal_ability_upgrades_size() const;
  public:
  void clear_ability_upgrades();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ability_upgrades(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ability_upgrades() const;
  void _internal_add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ability_upgrades();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ability_upgrades(int index) const;
  void set_ability_upgrades(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ability_upgrades() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ability_upgrades();

  // repeated .CSOEconItem equipped_econ_items = 4;
  int equipped_econ_items_size() const;
  private:
  int _internal_equipped_econ_items_size() const;
  public:
  void clear_equipped_econ_items();
  ::CSOEconItem* mutable_equipped_econ_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
      mutable_equipped_econ_items();
  private:
  const ::CSOEconItem& _internal_equipped_econ_items(int index) const;
  ::CSOEconItem* _internal_add_equipped_econ_items();
  public:
  const ::CSOEconItem& equipped_econ_items(int index) const;
  ::CSOEconItem* add_equipped_econ_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
      equipped_econ_items() const;

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  int kills_size() const;
  private:
  int _internal_kills_size() const;
  public:
  void clear_kills();
  ::CDOTAMatchMetadata_Team_PlayerKill* mutable_kills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >*
      mutable_kills();
  private:
  const ::CDOTAMatchMetadata_Team_PlayerKill& _internal_kills(int index) const;
  ::CDOTAMatchMetadata_Team_PlayerKill* _internal_add_kills();
  public:
  const ::CDOTAMatchMetadata_Team_PlayerKill& kills(int index) const;
  ::CDOTAMatchMetadata_Team_PlayerKill* add_kills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >&
      kills() const;

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CDOTAMatchMetadata_Team_ItemPurchase* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >*
      mutable_items();
  private:
  const ::CDOTAMatchMetadata_Team_ItemPurchase& _internal_items(int index) const;
  ::CDOTAMatchMetadata_Team_ItemPurchase* _internal_add_items();
  public:
  const ::CDOTAMatchMetadata_Team_ItemPurchase& items(int index) const;
  ::CDOTAMatchMetadata_Team_ItemPurchase* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >&
      items() const;

  // repeated uint32 level_up_times = 22;
  int level_up_times_size() const;
  private:
  int _internal_level_up_times_size() const;
  public:
  void clear_level_up_times();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level_up_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_level_up_times() const;
  void _internal_add_level_up_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_level_up_times();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 level_up_times(int index) const;
  void set_level_up_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_level_up_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      level_up_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_level_up_times();

  // repeated float graph_net_worth = 23;
  int graph_net_worth_size() const;
  private:
  int _internal_graph_net_worth_size() const;
  public:
  void clear_graph_net_worth();
  private:
  float _internal_graph_net_worth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_net_worth() const;
  void _internal_add_graph_net_worth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_net_worth();
  public:
  float graph_net_worth(int index) const;
  void set_graph_net_worth(int index, float value);
  void add_graph_net_worth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_net_worth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_net_worth();

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  int inventory_snapshot_size() const;
  private:
  int _internal_inventory_snapshot_size() const;
  public:
  void clear_inventory_snapshot();
  ::CDOTAMatchMetadata_Team_InventorySnapshot* mutable_inventory_snapshot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >*
      mutable_inventory_snapshot();
  private:
  const ::CDOTAMatchMetadata_Team_InventorySnapshot& _internal_inventory_snapshot(int index) const;
  ::CDOTAMatchMetadata_Team_InventorySnapshot* _internal_add_inventory_snapshot();
  public:
  const ::CDOTAMatchMetadata_Team_InventorySnapshot& inventory_snapshot(int index) const;
  ::CDOTAMatchMetadata_Team_InventorySnapshot* add_inventory_snapshot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >&
      inventory_snapshot() const;

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  int auto_style_criteria_size() const;
  private:
  int _internal_auto_style_criteria_size() const;
  public:
  void clear_auto_style_criteria();
  ::CDOTAMatchMetadata_Team_AutoStyleCriteria* mutable_auto_style_criteria(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
      mutable_auto_style_criteria();
  private:
  const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& _internal_auto_style_criteria(int index) const;
  ::CDOTAMatchMetadata_Team_AutoStyleCriteria* _internal_add_auto_style_criteria();
  public:
  const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& auto_style_criteria(int index) const;
  ::CDOTAMatchMetadata_Team_AutoStyleCriteria* add_auto_style_criteria();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
      auto_style_criteria() const;

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  int event_data_size() const;
  private:
  int _internal_event_data_size() const;
  public:
  void clear_event_data();
  ::CDOTAMatchMetadata_Team_EventData* mutable_event_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >*
      mutable_event_data();
  private:
  const ::CDOTAMatchMetadata_Team_EventData& _internal_event_data(int index) const;
  ::CDOTAMatchMetadata_Team_EventData* _internal_add_event_data();
  public:
  const ::CDOTAMatchMetadata_Team_EventData& event_data(int index) const;
  ::CDOTAMatchMetadata_Team_EventData* add_event_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >&
      event_data() const;

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  int strange_gem_progress_size() const;
  private:
  int _internal_strange_gem_progress_size() const;
  public:
  void clear_strange_gem_progress();
  ::CDOTAMatchMetadata_Team_StrangeGemProgress* mutable_strange_gem_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >*
      mutable_strange_gem_progress();
  private:
  const ::CDOTAMatchMetadata_Team_StrangeGemProgress& _internal_strange_gem_progress(int index) const;
  ::CDOTAMatchMetadata_Team_StrangeGemProgress* _internal_add_strange_gem_progress();
  public:
  const ::CDOTAMatchMetadata_Team_StrangeGemProgress& strange_gem_progress(int index) const;
  ::CDOTAMatchMetadata_Team_StrangeGemProgress* add_strange_gem_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >&
      strange_gem_progress() const;

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  int victory_prediction_size() const;
  private:
  int _internal_victory_prediction_size() const;
  public:
  void clear_victory_prediction();
  ::CDOTAMatchMetadata_Team_VictoryPrediction* mutable_victory_prediction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >*
      mutable_victory_prediction();
  private:
  const ::CDOTAMatchMetadata_Team_VictoryPrediction& _internal_victory_prediction(int index) const;
  ::CDOTAMatchMetadata_Team_VictoryPrediction* _internal_add_victory_prediction();
  public:
  const ::CDOTAMatchMetadata_Team_VictoryPrediction& victory_prediction(int index) const;
  ::CDOTAMatchMetadata_Team_VictoryPrediction* add_victory_prediction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >&
      victory_prediction() const;

  // repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
  int contract_progress_size() const;
  private:
  int _internal_contract_progress_size() const;
  public:
  void clear_contract_progress();
  ::CDOTAMatchMetadata_Team_Player_ContractProgress* mutable_contract_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player_ContractProgress >*
      mutable_contract_progress();
  private:
  const ::CDOTAMatchMetadata_Team_Player_ContractProgress& _internal_contract_progress(int index) const;
  ::CDOTAMatchMetadata_Team_Player_ContractProgress* _internal_add_contract_progress();
  public:
  const ::CDOTAMatchMetadata_Team_Player_ContractProgress& contract_progress(int index) const;
  ::CDOTAMatchMetadata_Team_Player_ContractProgress* add_contract_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player_ContractProgress >&
      contract_progress() const;

  // repeated uint32 guild_ids = 49;
  int guild_ids_size() const;
  private:
  int _internal_guild_ids_size() const;
  public:
  void clear_guild_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_guild_ids() const;
  void _internal_add_guild_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_guild_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_ids(int index) const;
  void set_guild_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_guild_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      guild_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_guild_ids();

  // optional .CDOTAMatchMetadata.Team.GauntletProgress gauntlet_progress = 47;
  bool has_gauntlet_progress() const;
  private:
  bool _internal_has_gauntlet_progress() const;
  public:
  void clear_gauntlet_progress();
  const ::CDOTAMatchMetadata_Team_GauntletProgress& gauntlet_progress() const;
  ::CDOTAMatchMetadata_Team_GauntletProgress* release_gauntlet_progress();
  ::CDOTAMatchMetadata_Team_GauntletProgress* mutable_gauntlet_progress();
  void set_allocated_gauntlet_progress(::CDOTAMatchMetadata_Team_GauntletProgress* gauntlet_progress);
  private:
  const ::CDOTAMatchMetadata_Team_GauntletProgress& _internal_gauntlet_progress() const;
  ::CDOTAMatchMetadata_Team_GauntletProgress* _internal_mutable_gauntlet_progress();
  public:
  void unsafe_arena_set_allocated_gauntlet_progress(
      ::CDOTAMatchMetadata_Team_GauntletProgress* gauntlet_progress);
  ::CDOTAMatchMetadata_Team_GauntletProgress* unsafe_arena_release_gauntlet_progress();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_slot = 3;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_slot() const;
  void set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_slot() const;
  void _internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_kills_x16 = 7;
  bool has_avg_kills_x16() const;
  private:
  bool _internal_has_avg_kills_x16() const;
  public:
  void clear_avg_kills_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_kills_x16() const;
  void set_avg_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_kills_x16() const;
  void _internal_set_avg_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_deaths_x16 = 8;
  bool has_avg_deaths_x16() const;
  private:
  bool _internal_has_avg_deaths_x16() const;
  public:
  void clear_avg_deaths_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_deaths_x16() const;
  void set_avg_deaths_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_deaths_x16() const;
  void _internal_set_avg_deaths_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_assists_x16 = 9;
  bool has_avg_assists_x16() const;
  private:
  bool _internal_has_avg_assists_x16() const;
  public:
  void clear_avg_assists_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_assists_x16() const;
  void set_avg_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_assists_x16() const;
  void _internal_set_avg_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_gpm_x16 = 10;
  bool has_avg_gpm_x16() const;
  private:
  bool _internal_has_avg_gpm_x16() const;
  public:
  void clear_avg_gpm_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_gpm_x16() const;
  void set_avg_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_gpm_x16() const;
  void _internal_set_avg_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_xpm_x16 = 11;
  bool has_avg_xpm_x16() const;
  private:
  bool _internal_has_avg_xpm_x16() const;
  public:
  void clear_avg_xpm_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_xpm_x16() const;
  void set_avg_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_xpm_x16() const;
  void _internal_set_avg_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 best_kills_x16 = 12;
  bool has_best_kills_x16() const;
  private:
  bool _internal_has_best_kills_x16() const;
  public:
  void clear_best_kills_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 best_kills_x16() const;
  void set_best_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_best_kills_x16() const;
  void _internal_set_best_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 best_assists_x16 = 13;
  bool has_best_assists_x16() const;
  private:
  bool _internal_has_best_assists_x16() const;
  public:
  void clear_best_assists_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 best_assists_x16() const;
  void set_best_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_best_assists_x16() const;
  void _internal_set_best_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 best_gpm_x16 = 14;
  bool has_best_gpm_x16() const;
  private:
  bool _internal_has_best_gpm_x16() const;
  public:
  void clear_best_gpm_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 best_gpm_x16() const;
  void set_best_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_best_gpm_x16() const;
  void _internal_set_best_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 best_xpm_x16 = 15;
  bool has_best_xpm_x16() const;
  private:
  bool _internal_has_best_xpm_x16() const;
  public:
  void clear_best_xpm_x16();
  ::PROTOBUF_NAMESPACE_ID::uint32 best_xpm_x16() const;
  void set_best_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_best_xpm_x16() const;
  void _internal_set_best_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 win_streak = 16;
  bool has_win_streak() const;
  private:
  bool _internal_has_win_streak() const;
  public:
  void clear_win_streak();
  ::PROTOBUF_NAMESPACE_ID::uint32 win_streak() const;
  void set_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_win_streak() const;
  void _internal_set_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 best_win_streak = 17;
  bool has_best_win_streak() const;
  private:
  bool _internal_has_best_win_streak() const;
  public:
  void clear_best_win_streak();
  ::PROTOBUF_NAMESPACE_ID::uint32 best_win_streak() const;
  void set_best_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_best_win_streak() const;
  void _internal_set_best_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float fight_score = 18;
  bool has_fight_score() const;
  private:
  bool _internal_has_fight_score() const;
  public:
  void clear_fight_score();
  float fight_score() const;
  void set_fight_score(float value);
  private:
  float _internal_fight_score() const;
  void _internal_set_fight_score(float value);
  public:

  // optional float farm_score = 19;
  bool has_farm_score() const;
  private:
  bool _internal_has_farm_score() const;
  public:
  void clear_farm_score();
  float farm_score() const;
  void set_farm_score(float value);
  private:
  float _internal_farm_score() const;
  void _internal_set_farm_score(float value);
  public:

  // optional float support_score = 20;
  bool has_support_score() const;
  private:
  bool _internal_has_support_score() const;
  public:
  void clear_support_score();
  float support_score() const;
  void set_support_score(float value);
  private:
  float _internal_support_score() const;
  void _internal_set_support_score(float value);
  public:

  // optional float push_score = 21;
  bool has_push_score() const;
  private:
  bool _internal_has_push_score() const;
  public:
  void clear_push_score();
  float push_score() const;
  void set_push_score(float value);
  private:
  float _internal_push_score() const;
  void _internal_set_push_score(float value);
  public:

  // optional bool avg_stats_calibrated = 25;
  bool has_avg_stats_calibrated() const;
  private:
  bool _internal_has_avg_stats_calibrated() const;
  public:
  void clear_avg_stats_calibrated();
  bool avg_stats_calibrated() const;
  void set_avg_stats_calibrated(bool value);
  private:
  bool _internal_avg_stats_calibrated() const;
  void _internal_set_avg_stats_calibrated(bool value);
  public:

  // optional uint32 hero_xp = 31;
  bool has_hero_xp() const;
  private:
  bool _internal_has_hero_xp() const;
  public:
  void clear_hero_xp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_xp() const;
  void set_hero_xp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hero_xp() const;
  void _internal_set_hero_xp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 camps_stacked = 32;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  ::PROTOBUF_NAMESPACE_ID::uint32 camps_stacked() const;
  void set_camps_stacked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camps_stacked() const;
  void _internal_set_camps_stacked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lane_selection_flags = 34;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rampages = 35;
  bool has_rampages() const;
  private:
  bool _internal_has_rampages() const;
  public:
  void clear_rampages();
  ::PROTOBUF_NAMESPACE_ID::uint32 rampages() const;
  void set_rampages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rampages() const;
  void _internal_set_rampages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 triple_kills = 36;
  bool has_triple_kills() const;
  private:
  bool _internal_has_triple_kills() const;
  public:
  void clear_triple_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 triple_kills() const;
  void set_triple_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_triple_kills() const;
  void _internal_set_triple_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 aegis_snatched = 37;
  bool has_aegis_snatched() const;
  private:
  bool _internal_has_aegis_snatched() const;
  public:
  void clear_aegis_snatched();
  ::PROTOBUF_NAMESPACE_ID::uint32 aegis_snatched() const;
  void set_aegis_snatched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aegis_snatched() const;
  void _internal_set_aegis_snatched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rapiers_purchased = 38;
  bool has_rapiers_purchased() const;
  private:
  bool _internal_has_rapiers_purchased() const;
  public:
  void clear_rapiers_purchased();
  ::PROTOBUF_NAMESPACE_ID::uint32 rapiers_purchased() const;
  void set_rapiers_purchased(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rapiers_purchased() const;
  void _internal_set_rapiers_purchased(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 couriers_killed = 39;
  bool has_couriers_killed() const;
  private:
  bool _internal_has_couriers_killed() const;
  public:
  void clear_couriers_killed();
  ::PROTOBUF_NAMESPACE_ID::uint32 couriers_killed() const;
  void set_couriers_killed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_couriers_killed() const;
  void _internal_set_couriers_killed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 net_worth_rank = 40;
  bool has_net_worth_rank() const;
  private:
  bool _internal_has_net_worth_rank() const;
  public:
  void clear_net_worth_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 net_worth_rank() const;
  void set_net_worth_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_net_worth_rank() const;
  void _internal_set_net_worth_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support_gold_spent = 41;
  bool has_support_gold_spent() const;
  private:
  bool _internal_has_support_gold_spent() const;
  public:
  void clear_support_gold_spent();
  ::PROTOBUF_NAMESPACE_ID::uint32 support_gold_spent() const;
  void set_support_gold_spent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support_gold_spent() const;
  void _internal_set_support_gold_spent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 observer_wards_placed = 42;
  bool has_observer_wards_placed() const;
  private:
  bool _internal_has_observer_wards_placed() const;
  public:
  void clear_observer_wards_placed();
  ::PROTOBUF_NAMESPACE_ID::uint32 observer_wards_placed() const;
  void set_observer_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_observer_wards_placed() const;
  void _internal_set_observer_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sentry_wards_placed = 43;
  bool has_sentry_wards_placed() const;
  private:
  bool _internal_has_sentry_wards_placed() const;
  public:
  void clear_sentry_wards_placed();
  ::PROTOBUF_NAMESPACE_ID::uint32 sentry_wards_placed() const;
  void set_sentry_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sentry_wards_placed() const;
  void _internal_set_sentry_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 wards_dewarded = 44;
  bool has_wards_dewarded() const;
  private:
  bool _internal_has_wards_dewarded() const;
  public:
  void clear_wards_dewarded();
  ::PROTOBUF_NAMESPACE_ID::uint32 wards_dewarded() const;
  void set_wards_dewarded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wards_dewarded() const;
  void _internal_set_wards_dewarded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float stun_duration = 45;
  bool has_stun_duration() const;
  private:
  bool _internal_has_stun_duration() const;
  public:
  void clear_stun_duration();
  float stun_duration() const;
  void set_stun_duration(float value);
  private:
  float _internal_stun_duration() const;
  void _internal_set_stun_duration(float value);
  public:

  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  bool has_rank_mmr_boost_type() const;
  private:
  bool _internal_has_rank_mmr_boost_type() const;
  public:
  void clear_rank_mmr_boost_type();
  ::EDOTAMMRBoostType rank_mmr_boost_type() const;
  void set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  private:
  ::EDOTAMMRBoostType _internal_rank_mmr_boost_type() const;
  void _internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ability_upgrades_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem > equipped_econ_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill > kills_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase > items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > level_up_times_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_net_worth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot > inventory_snapshot_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria > auto_style_criteria_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData > event_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress > strange_gem_progress_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction > victory_prediction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player_ContractProgress > contract_progress_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > guild_ids_;
  ::CDOTAMatchMetadata_Team_GauntletProgress* gauntlet_progress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_kills_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_deaths_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_assists_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_gpm_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_xpm_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 best_kills_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 best_assists_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 best_gpm_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 best_xpm_x16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 win_streak_;
  ::PROTOBUF_NAMESPACE_ID::uint32 best_win_streak_;
  float fight_score_;
  float farm_score_;
  float support_score_;
  float push_score_;
  bool avg_stats_calibrated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_xp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camps_stacked_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rampages_;
  ::PROTOBUF_NAMESPACE_ID::uint32 triple_kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 aegis_snatched_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rapiers_purchased_;
  ::PROTOBUF_NAMESPACE_ID::uint32 couriers_killed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 net_worth_rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_gold_spent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 observer_wards_placed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sentry_wards_placed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wards_dewarded_;
  float stun_duration_;
  int rank_mmr_boost_type_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team) */ {
 public:
  inline CDOTAMatchMetadata_Team() : CDOTAMatchMetadata_Team(nullptr) {}
  virtual ~CDOTAMatchMetadata_Team();
  explicit constexpr CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from);
  CDOTAMatchMetadata_Team(CDOTAMatchMetadata_Team&& from) noexcept
    : CDOTAMatchMetadata_Team() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team& operator=(const CDOTAMatchMetadata_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team& operator=(CDOTAMatchMetadata_Team&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team*>(
               &_CDOTAMatchMetadata_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CDOTAMatchMetadata_Team& a, CDOTAMatchMetadata_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team>(nullptr);
  }

  CDOTAMatchMetadata_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team& from);
  void MergeFrom(const CDOTAMatchMetadata_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team";
  }
  protected:
  explicit CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team_PlayerKill PlayerKill;
  typedef CDOTAMatchMetadata_Team_ItemPurchase ItemPurchase;
  typedef CDOTAMatchMetadata_Team_InventorySnapshot InventorySnapshot;
  typedef CDOTAMatchMetadata_Team_AutoStyleCriteria AutoStyleCriteria;
  typedef CDOTAMatchMetadata_Team_StrangeGemProgress StrangeGemProgress;
  typedef CDOTAMatchMetadata_Team_VictoryPrediction VictoryPrediction;
  typedef CDOTAMatchMetadata_Team_SubChallenge SubChallenge;
  typedef CDOTAMatchMetadata_Team_CavernChallengeResult CavernChallengeResult;
  typedef CDOTAMatchMetadata_Team_ActionGrant ActionGrant;
  typedef CDOTAMatchMetadata_Team_CandyGrant CandyGrant;
  typedef CDOTAMatchMetadata_Team_EventData EventData;
  typedef CDOTAMatchMetadata_Team_GauntletProgress GauntletProgress;
  typedef CDOTAMatchMetadata_Team_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kGraphExperienceFieldNumber = 3,
    kGraphGoldEarnedFieldNumber = 4,
    kGraphNetWorthFieldNumber = 5,
    kCmBansFieldNumber = 8,
    kCmPicksFieldNumber = 9,
    kDotaTeamFieldNumber = 1,
    kCmFirstPickFieldNumber = 6,
    kCmCaptainPlayerIdFieldNumber = 7,
    kCmPenaltyFieldNumber = 10,
  };
  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CDOTAMatchMetadata_Team_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >*
      mutable_players();
  private:
  const ::CDOTAMatchMetadata_Team_Player& _internal_players(int index) const;
  ::CDOTAMatchMetadata_Team_Player* _internal_add_players();
  public:
  const ::CDOTAMatchMetadata_Team_Player& players(int index) const;
  ::CDOTAMatchMetadata_Team_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >&
      players() const;

  // repeated float graph_experience = 3;
  int graph_experience_size() const;
  private:
  int _internal_graph_experience_size() const;
  public:
  void clear_graph_experience();
  private:
  float _internal_graph_experience(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_experience() const;
  void _internal_add_graph_experience(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_experience();
  public:
  float graph_experience(int index) const;
  void set_graph_experience(int index, float value);
  void add_graph_experience(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_experience() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_experience();

  // repeated float graph_gold_earned = 4;
  int graph_gold_earned_size() const;
  private:
  int _internal_graph_gold_earned_size() const;
  public:
  void clear_graph_gold_earned();
  private:
  float _internal_graph_gold_earned(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_gold_earned() const;
  void _internal_add_graph_gold_earned(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_gold_earned();
  public:
  float graph_gold_earned(int index) const;
  void set_graph_gold_earned(int index, float value);
  void add_graph_gold_earned(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_gold_earned() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_gold_earned();

  // repeated float graph_net_worth = 5;
  int graph_net_worth_size() const;
  private:
  int _internal_graph_net_worth_size() const;
  public:
  void clear_graph_net_worth();
  private:
  float _internal_graph_net_worth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_net_worth() const;
  void _internal_add_graph_net_worth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_net_worth();
  public:
  float graph_net_worth(int index) const;
  void set_graph_net_worth(int index, float value);
  void add_graph_net_worth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_net_worth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_net_worth();

  // repeated uint32 cm_bans = 8;
  int cm_bans_size() const;
  private:
  int _internal_cm_bans_size() const;
  public:
  void clear_cm_bans();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cm_bans(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cm_bans() const;
  void _internal_add_cm_bans(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cm_bans();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_bans(int index) const;
  void set_cm_bans(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cm_bans(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cm_bans() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cm_bans();

  // repeated uint32 cm_picks = 9;
  int cm_picks_size() const;
  private:
  int _internal_cm_picks_size() const;
  public:
  void clear_cm_picks();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cm_picks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cm_picks() const;
  void _internal_add_cm_picks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cm_picks();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_picks(int index) const;
  void set_cm_picks(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cm_picks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cm_picks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cm_picks();

  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  private:
  bool _internal_has_dota_team() const;
  public:
  void clear_dota_team();
  ::PROTOBUF_NAMESPACE_ID::uint32 dota_team() const;
  void set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dota_team() const;
  void _internal_set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool cm_first_pick = 6;
  bool has_cm_first_pick() const;
  private:
  bool _internal_has_cm_first_pick() const;
  public:
  void clear_cm_first_pick();
  bool cm_first_pick() const;
  void set_cm_first_pick(bool value);
  private:
  bool _internal_cm_first_pick() const;
  void _internal_set_cm_first_pick(bool value);
  public:

  // optional uint32 cm_captain_player_id = 7;
  bool has_cm_captain_player_id() const;
  private:
  bool _internal_has_cm_captain_player_id() const;
  public:
  void clear_cm_captain_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_captain_player_id() const;
  void set_cm_captain_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cm_captain_player_id() const;
  void _internal_set_cm_captain_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cm_penalty = 10;
  bool has_cm_penalty() const;
  private:
  bool _internal_has_cm_penalty() const;
  public:
  void clear_cm_penalty();
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_penalty() const;
  void set_cm_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cm_penalty() const;
  void _internal_set_cm_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_experience_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_gold_earned_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_net_worth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cm_bans_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cm_picks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dota_team_;
  bool cm_first_pick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_captain_player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_penalty_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress) */ {
 public:
  inline CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress() : CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(nullptr) {}
  virtual ~CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress();
  explicit constexpr CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from);
  CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress&& from) noexcept
    : CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& operator=(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& operator=(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress*>(
               &_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& a, CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress>(nullptr);
  }

  CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from);
  void MergeFrom(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress";
  }
  protected:
  explicit CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::uint32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 progress_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_GuildChallengeProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.GuildChallengeProgress) */ {
 public:
  inline CDOTAMatchMetadata_GuildChallengeProgress() : CDOTAMatchMetadata_GuildChallengeProgress(nullptr) {}
  virtual ~CDOTAMatchMetadata_GuildChallengeProgress();
  explicit constexpr CDOTAMatchMetadata_GuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_GuildChallengeProgress(const CDOTAMatchMetadata_GuildChallengeProgress& from);
  CDOTAMatchMetadata_GuildChallengeProgress(CDOTAMatchMetadata_GuildChallengeProgress&& from) noexcept
    : CDOTAMatchMetadata_GuildChallengeProgress() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_GuildChallengeProgress& operator=(const CDOTAMatchMetadata_GuildChallengeProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_GuildChallengeProgress& operator=(CDOTAMatchMetadata_GuildChallengeProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata_GuildChallengeProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_GuildChallengeProgress* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_GuildChallengeProgress*>(
               &_CDOTAMatchMetadata_GuildChallengeProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CDOTAMatchMetadata_GuildChallengeProgress& a, CDOTAMatchMetadata_GuildChallengeProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_GuildChallengeProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_GuildChallengeProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_GuildChallengeProgress* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_GuildChallengeProgress>(nullptr);
  }

  CDOTAMatchMetadata_GuildChallengeProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_GuildChallengeProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_GuildChallengeProgress& from);
  void MergeFrom(const CDOTAMatchMetadata_GuildChallengeProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_GuildChallengeProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.GuildChallengeProgress";
  }
  protected:
  explicit CDOTAMatchMetadata_GuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress IndividualProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kIndividualProgressFieldNumber = 8,
    kGuildIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kChallengeInstanceIdFieldNumber = 3,
    kChallengeParameterFieldNumber = 4,
    kChallengeTimestampFieldNumber = 5,
    kChallengeProgressAtStartFieldNumber = 6,
    kChallengeProgressAccumulatedFieldNumber = 7,
  };
  // repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
  int individual_progress_size() const;
  private:
  int _internal_individual_progress_size() const;
  public:
  void clear_individual_progress();
  ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* mutable_individual_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >*
      mutable_individual_progress();
  private:
  const ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& _internal_individual_progress(int index) const;
  ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* _internal_add_individual_progress();
  public:
  const ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& individual_progress(int index) const;
  ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* add_individual_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >&
      individual_progress() const;

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id() const;
  void set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_parameter = 4;
  bool has_challenge_parameter() const;
  private:
  bool _internal_has_challenge_parameter() const;
  public:
  void clear_challenge_parameter();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_parameter() const;
  void set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_parameter() const;
  void _internal_set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_timestamp = 5;
  bool has_challenge_timestamp() const;
  private:
  bool _internal_has_challenge_timestamp() const;
  public:
  void clear_challenge_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_timestamp() const;
  void set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_timestamp() const;
  void _internal_set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_progress_at_start = 6;
  bool has_challenge_progress_at_start() const;
  private:
  bool _internal_has_challenge_progress_at_start() const;
  public:
  void clear_challenge_progress_at_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_progress_at_start() const;
  void set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_progress_at_start() const;
  void _internal_set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_progress_accumulated = 7;
  bool has_challenge_progress_accumulated() const;
  private:
  bool _internal_has_challenge_progress_accumulated() const;
  public:
  void clear_challenge_progress_accumulated();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_progress_accumulated() const;
  void set_challenge_progress_accumulated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_progress_accumulated() const;
  void _internal_set_challenge_progress_accumulated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.GuildChallengeProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress > individual_progress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id_;
  int event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_parameter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_progress_at_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_progress_accumulated_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata) */ {
 public:
  inline CDOTAMatchMetadata() : CDOTAMatchMetadata(nullptr) {}
  virtual ~CDOTAMatchMetadata();
  explicit constexpr CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata(const CDOTAMatchMetadata& from);
  CDOTAMatchMetadata(CDOTAMatchMetadata&& from) noexcept
    : CDOTAMatchMetadata() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata& operator=(const CDOTAMatchMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata& operator=(CDOTAMatchMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata*>(
               &_CDOTAMatchMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CDOTAMatchMetadata& a, CDOTAMatchMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata>(nullptr);
  }

  CDOTAMatchMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata& from);
  void MergeFrom(const CDOTAMatchMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata";
  }
  protected:
  explicit CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team Team;
  typedef CDOTAMatchMetadata_GuildChallengeProgress GuildChallengeProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
    kItemRewardsFieldNumber = 2,
    kMatchTipsFieldNumber = 7,
    kGuildChallengeProgressFieldNumber = 10,
    kEventGameCustomTableFieldNumber = 5,
    kMatchmakingStatsFieldNumber = 8,
    kMvpDataFieldNumber = 9,
    kLobbyIdFieldNumber = 3,
    kReportUntilTimeFieldNumber = 4,
    kPrimaryEventIdFieldNumber = 6,
  };
  // repeated .CDOTAMatchMetadata.Team teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CDOTAMatchMetadata_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >*
      mutable_teams();
  private:
  const ::CDOTAMatchMetadata_Team& _internal_teams(int index) const;
  ::CDOTAMatchMetadata_Team* _internal_add_teams();
  public:
  const ::CDOTAMatchMetadata_Team& teams(int index) const;
  ::CDOTAMatchMetadata_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >&
      teams() const;

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  int item_rewards_size() const;
  private:
  int _internal_item_rewards_size() const;
  public:
  void clear_item_rewards();
  ::CLobbyTimedRewardDetails* mutable_item_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_item_rewards();
  private:
  const ::CLobbyTimedRewardDetails& _internal_item_rewards(int index) const;
  ::CLobbyTimedRewardDetails* _internal_add_item_rewards();
  public:
  const ::CLobbyTimedRewardDetails& item_rewards(int index) const;
  ::CLobbyTimedRewardDetails* add_item_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      item_rewards() const;

  // repeated .CMsgMatchTips match_tips = 7;
  int match_tips_size() const;
  private:
  int _internal_match_tips_size() const;
  public:
  void clear_match_tips();
  ::CMsgMatchTips* mutable_match_tips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >*
      mutable_match_tips();
  private:
  const ::CMsgMatchTips& _internal_match_tips(int index) const;
  ::CMsgMatchTips* _internal_add_match_tips();
  public:
  const ::CMsgMatchTips& match_tips(int index) const;
  ::CMsgMatchTips* add_match_tips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >&
      match_tips() const;

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
  int guild_challenge_progress_size() const;
  private:
  int _internal_guild_challenge_progress_size() const;
  public:
  void clear_guild_challenge_progress();
  ::CDOTAMatchMetadata_GuildChallengeProgress* mutable_guild_challenge_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress >*
      mutable_guild_challenge_progress();
  private:
  const ::CDOTAMatchMetadata_GuildChallengeProgress& _internal_guild_challenge_progress(int index) const;
  ::CDOTAMatchMetadata_GuildChallengeProgress* _internal_add_guild_challenge_progress();
  public:
  const ::CDOTAMatchMetadata_GuildChallengeProgress& guild_challenge_progress(int index) const;
  ::CDOTAMatchMetadata_GuildChallengeProgress* add_guild_challenge_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress >&
      guild_challenge_progress() const;

  // optional bytes event_game_custom_table = 5;
  bool has_event_game_custom_table() const;
  private:
  bool _internal_has_event_game_custom_table() const;
  public:
  void clear_event_game_custom_table();
  const std::string& event_game_custom_table() const;
  void set_event_game_custom_table(const std::string& value);
  void set_event_game_custom_table(std::string&& value);
  void set_event_game_custom_table(const char* value);
  void set_event_game_custom_table(const void* value, size_t size);
  std::string* mutable_event_game_custom_table();
  std::string* release_event_game_custom_table();
  void set_allocated_event_game_custom_table(std::string* event_game_custom_table);
  private:
  const std::string& _internal_event_game_custom_table() const;
  void _internal_set_event_game_custom_table(const std::string& value);
  std::string* _internal_mutable_event_game_custom_table();
  public:

  // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
  bool has_matchmaking_stats() const;
  private:
  bool _internal_has_matchmaking_stats() const;
  public:
  void clear_matchmaking_stats();
  const ::CMsgMatchMatchmakingStats& matchmaking_stats() const;
  ::CMsgMatchMatchmakingStats* release_matchmaking_stats();
  ::CMsgMatchMatchmakingStats* mutable_matchmaking_stats();
  void set_allocated_matchmaking_stats(::CMsgMatchMatchmakingStats* matchmaking_stats);
  private:
  const ::CMsgMatchMatchmakingStats& _internal_matchmaking_stats() const;
  ::CMsgMatchMatchmakingStats* _internal_mutable_matchmaking_stats();
  public:
  void unsafe_arena_set_allocated_matchmaking_stats(
      ::CMsgMatchMatchmakingStats* matchmaking_stats);
  ::CMsgMatchMatchmakingStats* unsafe_arena_release_matchmaking_stats();

  // optional .CMvpData mvp_data = 9;
  bool has_mvp_data() const;
  private:
  bool _internal_has_mvp_data() const;
  public:
  void clear_mvp_data();
  const ::CMvpData& mvp_data() const;
  ::CMvpData* release_mvp_data();
  ::CMvpData* mutable_mvp_data();
  void set_allocated_mvp_data(::CMvpData* mvp_data);
  private:
  const ::CMvpData& _internal_mvp_data() const;
  ::CMvpData* _internal_mutable_mvp_data();
  public:
  void unsafe_arena_set_allocated_mvp_data(
      ::CMvpData* mvp_data);
  ::CMvpData* unsafe_arena_release_mvp_data();

  // optional fixed64 lobby_id = 3;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 report_until_time = 4;
  bool has_report_until_time() const;
  private:
  bool _internal_has_report_until_time() const;
  public:
  void clear_report_until_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 report_until_time() const;
  void set_report_until_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_report_until_time() const;
  void _internal_set_report_until_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 primary_event_id = 6;
  bool has_primary_event_id() const;
  private:
  bool _internal_has_primary_event_id() const;
  public:
  void clear_primary_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 primary_event_id() const;
  void set_primary_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_primary_event_id() const;
  void _internal_set_primary_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team > teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails > item_rewards_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips > match_tips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress > guild_challenge_progress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_game_custom_table_;
  ::CMsgMatchMatchmakingStats* matchmaking_stats_;
  ::CMvpData* mvp_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 report_until_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 primary_event_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_StringName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.StringName) */ {
 public:
  inline CDOTAMatchPrivateMetadata_StringName() : CDOTAMatchPrivateMetadata_StringName(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_StringName();
  explicit constexpr CDOTAMatchPrivateMetadata_StringName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_StringName(const CDOTAMatchPrivateMetadata_StringName& from);
  CDOTAMatchPrivateMetadata_StringName(CDOTAMatchPrivateMetadata_StringName&& from) noexcept
    : CDOTAMatchPrivateMetadata_StringName() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_StringName& operator=(const CDOTAMatchPrivateMetadata_StringName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_StringName& operator=(CDOTAMatchPrivateMetadata_StringName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_StringName& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_StringName* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_StringName*>(
               &_CDOTAMatchPrivateMetadata_StringName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CDOTAMatchPrivateMetadata_StringName& a, CDOTAMatchPrivateMetadata_StringName& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_StringName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_StringName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_StringName* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_StringName>(nullptr);
  }

  CDOTAMatchPrivateMetadata_StringName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_StringName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_StringName& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_StringName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_StringName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.StringName";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_StringName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.StringName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget() : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from);
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id() const;
  void set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hero_id() const;
  void _internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage = 2;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility() : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from);
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget ByHeroTarget;

  // accessors -------------------------------------------------------

  enum : int {
    kByHeroTargetsFieldNumber = 2,
    kAbilityIdFieldNumber = 1,
    kSourceUnitIndexFieldNumber = 3,
  };
  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  int by_hero_targets_size() const;
  private:
  int _internal_by_hero_targets_size() const;
  public:
  void clear_by_hero_targets();
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* mutable_by_hero_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >*
      mutable_by_hero_targets();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& _internal_by_hero_targets(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* _internal_add_by_hero_targets();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& by_hero_targets(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* add_by_hero_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >&
      by_hero_targets() const;

  // optional uint32 ability_id = 1;
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ability_id() const;
  void set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ability_id() const;
  void _internal_set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 source_unit_index = 3;
  bool has_source_unit_index() const;
  private:
  bool _internal_has_source_unit_index() const;
  public:
  void clear_source_unit_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_unit_index() const;
  void set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source_unit_index() const;
  void _internal_set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget > by_hero_targets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ability_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_unit_index_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget() : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from);
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kHealingFieldNumber = 2,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id() const;
  void set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hero_id() const;
  void _internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing = 2;
  bool has_healing() const;
  private:
  bool _internal_has_healing() const;
  public:
  void clear_healing();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing() const;
  void set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing() const;
  void _internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility() : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from);
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget ByHeroTarget;

  // accessors -------------------------------------------------------

  enum : int {
    kByHeroTargetsFieldNumber = 2,
    kAbilityIdFieldNumber = 1,
    kSourceUnitIndexFieldNumber = 3,
  };
  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
  int by_hero_targets_size() const;
  private:
  int _internal_by_hero_targets_size() const;
  public:
  void clear_by_hero_targets();
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* mutable_by_hero_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >*
      mutable_by_hero_targets();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& _internal_by_hero_targets(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* _internal_add_by_hero_targets();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& by_hero_targets(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* add_by_hero_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >&
      by_hero_targets() const;

  // optional uint32 ability_id = 1;
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ability_id() const;
  void set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ability_id() const;
  void _internal_set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 source_unit_index = 3;
  bool has_source_unit_index() const;
  private:
  bool _internal_has_source_unit_index() const;
  public:
  void clear_source_unit_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_unit_index() const;
  void set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source_unit_index() const;
  void _internal_set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget > by_hero_targets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ability_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_unit_index_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment() : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from);
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.CombatSegment";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility DamageByAbility;
  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility HealingByAbility;

  // accessors -------------------------------------------------------

  enum : int {
    kDamageByAbilityFieldNumber = 2,
    kHealingByAbilityFieldNumber = 3,
    kGameTimeFieldNumber = 1,
  };
  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  int damage_by_ability_size() const;
  private:
  int _internal_damage_by_ability_size() const;
  public:
  void clear_damage_by_ability();
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* mutable_damage_by_ability(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >*
      mutable_damage_by_ability();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& _internal_damage_by_ability(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* _internal_add_damage_by_ability();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& damage_by_ability(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* add_damage_by_ability();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >&
      damage_by_ability() const;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
  int healing_by_ability_size() const;
  private:
  int _internal_healing_by_ability_size() const;
  public:
  void clear_healing_by_ability();
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* mutable_healing_by_ability(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >*
      mutable_healing_by_ability();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& _internal_healing_by_ability(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* _internal_add_healing_by_ability();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& healing_by_ability(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* add_healing_by_ability();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >&
      healing_by_ability() const;

  // optional int32 game_time = 1;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  ::PROTOBUF_NAMESPACE_ID::int32 game_time() const;
  void set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_time() const;
  void _internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility > damage_by_ability_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility > healing_by_ability_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_time_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget() : CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from);
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& operator=(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& operator=(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& a, CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kElapsedDurationFieldNumber = 2,
    kIsHiddenFieldNumber = 3,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id() const;
  void set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hero_id() const;
  void _internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float elapsed_duration = 2;
  bool has_elapsed_duration() const;
  private:
  bool _internal_has_elapsed_duration() const;
  public:
  void clear_elapsed_duration();
  float elapsed_duration() const;
  void set_elapsed_duration(float value);
  private:
  float _internal_elapsed_duration() const;
  void _internal_set_elapsed_duration(float value);
  public:

  // optional bool is_hidden = 3;
  bool has_is_hidden() const;
  private:
  bool _internal_has_is_hidden() const;
  public:
  void clear_is_hidden();
  bool is_hidden() const;
  void set_is_hidden(bool value);
  private:
  bool _internal_is_hidden() const;
  void _internal_set_is_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id_;
  float elapsed_duration_;
  bool is_hidden_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord() : CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from);
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_BuffRecord() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& operator=(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& operator=(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& a, CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.BuffRecord";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget ByHeroTarget;

  // accessors -------------------------------------------------------

  enum : int {
    kByHeroTargetsFieldNumber = 2,
    kBuffModifierNameFieldNumber = 3,
    kBuffAbilityIdFieldNumber = 1,
  };
  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  int by_hero_targets_size() const;
  private:
  int _internal_by_hero_targets_size() const;
  public:
  void clear_by_hero_targets();
  ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* mutable_by_hero_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >*
      mutable_by_hero_targets();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& _internal_by_hero_targets(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* _internal_add_by_hero_targets();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& by_hero_targets(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* add_by_hero_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >&
      by_hero_targets() const;

  // optional string buff_modifier_name = 3;
  bool has_buff_modifier_name() const;
  private:
  bool _internal_has_buff_modifier_name() const;
  public:
  void clear_buff_modifier_name();
  const std::string& buff_modifier_name() const;
  void set_buff_modifier_name(const std::string& value);
  void set_buff_modifier_name(std::string&& value);
  void set_buff_modifier_name(const char* value);
  void set_buff_modifier_name(const char* value, size_t size);
  std::string* mutable_buff_modifier_name();
  std::string* release_buff_modifier_name();
  void set_allocated_buff_modifier_name(std::string* buff_modifier_name);
  private:
  const std::string& _internal_buff_modifier_name() const;
  void _internal_set_buff_modifier_name(const std::string& value);
  std::string* _internal_mutable_buff_modifier_name();
  public:

  // optional uint32 buff_ability_id = 1;
  bool has_buff_ability_id() const;
  private:
  bool _internal_has_buff_ability_id() const;
  public:
  void clear_buff_ability_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 buff_ability_id() const;
  void set_buff_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buff_ability_id() const;
  void _internal_set_buff_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget > by_hero_targets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buff_modifier_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buff_ability_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_GoldReceived PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_GoldReceived() : CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_GoldReceived();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from);
  CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_GoldReceived() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& operator=(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& operator=(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& a, CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_GoldReceived>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_GoldReceived>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.GoldReceived";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreepFieldNumber = 1,
    kHeroesFieldNumber = 2,
    kBountyRunesFieldNumber = 3,
    kPassiveFieldNumber = 4,
    kBuildingsFieldNumber = 5,
    kAbilitiesFieldNumber = 6,
    kWardsFieldNumber = 7,
    kOtherFieldNumber = 8,
  };
  // optional uint32 creep = 1;
  bool has_creep() const;
  private:
  bool _internal_has_creep() const;
  public:
  void clear_creep();
  ::PROTOBUF_NAMESPACE_ID::uint32 creep() const;
  void set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_creep() const;
  void _internal_set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 heroes = 2;
  bool has_heroes() const;
  private:
  bool _internal_has_heroes() const;
  public:
  void clear_heroes();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroes() const;
  void set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroes() const;
  void _internal_set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bounty_runes = 3;
  bool has_bounty_runes() const;
  private:
  bool _internal_has_bounty_runes() const;
  public:
  void clear_bounty_runes();
  ::PROTOBUF_NAMESPACE_ID::uint32 bounty_runes() const;
  void set_bounty_runes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bounty_runes() const;
  void _internal_set_bounty_runes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 passive = 4;
  bool has_passive() const;
  private:
  bool _internal_has_passive() const;
  public:
  void clear_passive();
  ::PROTOBUF_NAMESPACE_ID::uint32 passive() const;
  void set_passive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_passive() const;
  void _internal_set_passive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 buildings = 5;
  bool has_buildings() const;
  private:
  bool _internal_has_buildings() const;
  public:
  void clear_buildings();
  ::PROTOBUF_NAMESPACE_ID::uint32 buildings() const;
  void set_buildings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buildings() const;
  void _internal_set_buildings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 abilities = 6;
  bool has_abilities() const;
  private:
  bool _internal_has_abilities() const;
  public:
  void clear_abilities();
  ::PROTOBUF_NAMESPACE_ID::uint32 abilities() const;
  void set_abilities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_abilities() const;
  void _internal_set_abilities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 wards = 7;
  bool has_wards() const;
  private:
  bool _internal_has_wards() const;
  public:
  void clear_wards();
  ::PROTOBUF_NAMESPACE_ID::uint32 wards() const;
  void set_wards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wards() const;
  void _internal_set_wards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 other = 8;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  ::PROTOBUF_NAMESPACE_ID::uint32 other() const;
  void set_other(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_other() const;
  void _internal_set_other(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 creep_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bounty_runes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 passive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buildings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 abilities_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 other_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_XPReceived PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player.XPReceived) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player_XPReceived() : CDOTAMatchPrivateMetadata_Team_Player_XPReceived(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_XPReceived();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player_XPReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player_XPReceived(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from);
  CDOTAMatchPrivateMetadata_Team_Player_XPReceived(CDOTAMatchPrivateMetadata_Team_Player_XPReceived&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_XPReceived() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_XPReceived& operator=(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player_XPReceived& operator=(CDOTAMatchPrivateMetadata_Team_Player_XPReceived&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player_XPReceived* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_XPReceived*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_XPReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_XPReceived& a, CDOTAMatchPrivateMetadata_Team_Player_XPReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player_XPReceived* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player_XPReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_XPReceived* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_XPReceived>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_XPReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_XPReceived>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_XPReceived* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player.XPReceived";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player_XPReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreepFieldNumber = 1,
    kHeroesFieldNumber = 2,
    kRoshanFieldNumber = 3,
    kTomeOfKnowledgeFieldNumber = 4,
    kOutpostFieldNumber = 5,
    kOtherFieldNumber = 6,
  };
  // optional uint32 creep = 1;
  bool has_creep() const;
  private:
  bool _internal_has_creep() const;
  public:
  void clear_creep();
  ::PROTOBUF_NAMESPACE_ID::uint32 creep() const;
  void set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_creep() const;
  void _internal_set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 heroes = 2;
  bool has_heroes() const;
  private:
  bool _internal_has_heroes() const;
  public:
  void clear_heroes();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroes() const;
  void set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroes() const;
  void _internal_set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 roshan = 3;
  bool has_roshan() const;
  private:
  bool _internal_has_roshan() const;
  public:
  void clear_roshan();
  ::PROTOBUF_NAMESPACE_ID::uint32 roshan() const;
  void set_roshan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roshan() const;
  void _internal_set_roshan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tome_of_knowledge = 4;
  bool has_tome_of_knowledge() const;
  private:
  bool _internal_has_tome_of_knowledge() const;
  public:
  void clear_tome_of_knowledge();
  ::PROTOBUF_NAMESPACE_ID::uint32 tome_of_knowledge() const;
  void set_tome_of_knowledge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tome_of_knowledge() const;
  void _internal_set_tome_of_knowledge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 outpost = 5;
  bool has_outpost() const;
  private:
  bool _internal_has_outpost() const;
  public:
  void clear_outpost();
  ::PROTOBUF_NAMESPACE_ID::uint32 outpost() const;
  void set_outpost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outpost() const;
  void _internal_set_outpost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 other = 6;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  ::PROTOBUF_NAMESPACE_ID::uint32 other() const;
  void set_other(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_other() const;
  void _internal_set_other(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 creep_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roshan_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tome_of_knowledge_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outpost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 other_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Player) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Player() : CDOTAMatchPrivateMetadata_Team_Player(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Player();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from);
  CDOTAMatchPrivateMetadata_Team_Player(CDOTAMatchPrivateMetadata_Team_Player&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player& operator=(const CDOTAMatchPrivateMetadata_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Player& operator=(CDOTAMatchPrivateMetadata_Team_Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Player* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Player& a, CDOTAMatchPrivateMetadata_Team_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Player";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment CombatSegment;
  typedef CDOTAMatchPrivateMetadata_Team_Player_BuffRecord BuffRecord;
  typedef CDOTAMatchPrivateMetadata_Team_Player_GoldReceived GoldReceived;
  typedef CDOTAMatchPrivateMetadata_Team_Player_XPReceived XPReceived;

  // accessors -------------------------------------------------------

  enum : int {
    kCombatSegmentsFieldNumber = 4,
    kDamageUnitNamesFieldNumber = 5,
    kBuffRecordsFieldNumber = 6,
    kGraphKillsFieldNumber = 7,
    kGraphDeathsFieldNumber = 8,
    kGraphAssistsFieldNumber = 9,
    kGraphLasthitsFieldNumber = 10,
    kGraphDeniesFieldNumber = 11,
    kPositionStreamFieldNumber = 3,
    kGoldReceivedFieldNumber = 12,
    kXpReceivedFieldNumber = 13,
    kAccountIdFieldNumber = 1,
    kPlayerSlotFieldNumber = 2,
  };
  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  int combat_segments_size() const;
  private:
  int _internal_combat_segments_size() const;
  public:
  void clear_combat_segments();
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* mutable_combat_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >*
      mutable_combat_segments();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& _internal_combat_segments(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* _internal_add_combat_segments();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& combat_segments(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* add_combat_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >&
      combat_segments() const;

  // repeated string damage_unit_names = 5;
  int damage_unit_names_size() const;
  private:
  int _internal_damage_unit_names_size() const;
  public:
  void clear_damage_unit_names();
  const std::string& damage_unit_names(int index) const;
  std::string* mutable_damage_unit_names(int index);
  void set_damage_unit_names(int index, const std::string& value);
  void set_damage_unit_names(int index, std::string&& value);
  void set_damage_unit_names(int index, const char* value);
  void set_damage_unit_names(int index, const char* value, size_t size);
  std::string* add_damage_unit_names();
  void add_damage_unit_names(const std::string& value);
  void add_damage_unit_names(std::string&& value);
  void add_damage_unit_names(const char* value);
  void add_damage_unit_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& damage_unit_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_damage_unit_names();
  private:
  const std::string& _internal_damage_unit_names(int index) const;
  std::string* _internal_add_damage_unit_names();
  public:

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  int buff_records_size() const;
  private:
  int _internal_buff_records_size() const;
  public:
  void clear_buff_records();
  ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* mutable_buff_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >*
      mutable_buff_records();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& _internal_buff_records(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* _internal_add_buff_records();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& buff_records(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* add_buff_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >&
      buff_records() const;

  // repeated float graph_kills = 7;
  int graph_kills_size() const;
  private:
  int _internal_graph_kills_size() const;
  public:
  void clear_graph_kills();
  private:
  float _internal_graph_kills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_kills() const;
  void _internal_add_graph_kills(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_kills();
  public:
  float graph_kills(int index) const;
  void set_graph_kills(int index, float value);
  void add_graph_kills(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_kills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_kills();

  // repeated float graph_deaths = 8;
  int graph_deaths_size() const;
  private:
  int _internal_graph_deaths_size() const;
  public:
  void clear_graph_deaths();
  private:
  float _internal_graph_deaths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_deaths() const;
  void _internal_add_graph_deaths(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_deaths();
  public:
  float graph_deaths(int index) const;
  void set_graph_deaths(int index, float value);
  void add_graph_deaths(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_deaths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_deaths();

  // repeated float graph_assists = 9;
  int graph_assists_size() const;
  private:
  int _internal_graph_assists_size() const;
  public:
  void clear_graph_assists();
  private:
  float _internal_graph_assists(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_assists() const;
  void _internal_add_graph_assists(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_assists();
  public:
  float graph_assists(int index) const;
  void set_graph_assists(int index, float value);
  void add_graph_assists(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_assists() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_assists();

  // repeated float graph_lasthits = 10;
  int graph_lasthits_size() const;
  private:
  int _internal_graph_lasthits_size() const;
  public:
  void clear_graph_lasthits();
  private:
  float _internal_graph_lasthits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_lasthits() const;
  void _internal_add_graph_lasthits(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_lasthits();
  public:
  float graph_lasthits(int index) const;
  void set_graph_lasthits(int index, float value);
  void add_graph_lasthits(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_lasthits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_lasthits();

  // repeated float graph_denies = 11;
  int graph_denies_size() const;
  private:
  int _internal_graph_denies_size() const;
  public:
  void clear_graph_denies();
  private:
  float _internal_graph_denies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_denies() const;
  void _internal_add_graph_denies(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_denies();
  public:
  float graph_denies(int index) const;
  void set_graph_denies(int index, float value);
  void add_graph_denies(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_denies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_denies();

  // optional bytes position_stream = 3;
  bool has_position_stream() const;
  private:
  bool _internal_has_position_stream() const;
  public:
  void clear_position_stream();
  const std::string& position_stream() const;
  void set_position_stream(const std::string& value);
  void set_position_stream(std::string&& value);
  void set_position_stream(const char* value);
  void set_position_stream(const void* value, size_t size);
  std::string* mutable_position_stream();
  std::string* release_position_stream();
  void set_allocated_position_stream(std::string* position_stream);
  private:
  const std::string& _internal_position_stream() const;
  void _internal_set_position_stream(const std::string& value);
  std::string* _internal_mutable_position_stream();
  public:

  // optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
  bool has_gold_received() const;
  private:
  bool _internal_has_gold_received() const;
  public:
  void clear_gold_received();
  const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& gold_received() const;
  ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* release_gold_received();
  ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* mutable_gold_received();
  void set_allocated_gold_received(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* gold_received);
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& _internal_gold_received() const;
  ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* _internal_mutable_gold_received();
  public:
  void unsafe_arena_set_allocated_gold_received(
      ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* gold_received);
  ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* unsafe_arena_release_gold_received();

  // optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
  bool has_xp_received() const;
  private:
  bool _internal_has_xp_received() const;
  public:
  void clear_xp_received();
  const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived& xp_received() const;
  ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* release_xp_received();
  ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* mutable_xp_received();
  void set_allocated_xp_received(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* xp_received);
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived& _internal_xp_received() const;
  ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* _internal_mutable_xp_received();
  public:
  void unsafe_arena_set_allocated_xp_received(
      ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* xp_received);
  ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* unsafe_arena_release_xp_received();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_slot = 2;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_slot() const;
  void set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_slot() const;
  void _internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment > combat_segments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> damage_unit_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord > buff_records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_kills_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_deaths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_assists_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_lasthits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_denies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_stream_;
  ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* gold_received_;
  ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* xp_received_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_slot_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Building PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team.Building) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team_Building() : CDOTAMatchPrivateMetadata_Team_Building(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team_Building();
  explicit constexpr CDOTAMatchPrivateMetadata_Team_Building(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from);
  CDOTAMatchPrivateMetadata_Team_Building(CDOTAMatchPrivateMetadata_Team_Building&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Building() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Building& operator=(const CDOTAMatchPrivateMetadata_Team_Building& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team_Building& operator=(CDOTAMatchPrivateMetadata_Team_Building&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team_Building& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team_Building* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Building*>(
               &_CDOTAMatchPrivateMetadata_Team_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CDOTAMatchPrivateMetadata_Team_Building& a, CDOTAMatchPrivateMetadata_Team_Building& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team_Building* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team_Building* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Building* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Building>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Building* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Building>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Building* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team.Building";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team_Building(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitNameFieldNumber = 1,
    kPositionQuantXFieldNumber = 2,
    kPositionQuantYFieldNumber = 3,
    kDeathTimeFieldNumber = 4,
  };
  // optional string unit_name = 1;
  bool has_unit_name() const;
  private:
  bool _internal_has_unit_name() const;
  public:
  void clear_unit_name();
  const std::string& unit_name() const;
  void set_unit_name(const std::string& value);
  void set_unit_name(std::string&& value);
  void set_unit_name(const char* value);
  void set_unit_name(const char* value, size_t size);
  std::string* mutable_unit_name();
  std::string* release_unit_name();
  void set_allocated_unit_name(std::string* unit_name);
  private:
  const std::string& _internal_unit_name() const;
  void _internal_set_unit_name(const std::string& value);
  std::string* _internal_mutable_unit_name();
  public:

  // optional uint32 position_quant_x = 2;
  bool has_position_quant_x() const;
  private:
  bool _internal_has_position_quant_x() const;
  public:
  void clear_position_quant_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_quant_x() const;
  void set_position_quant_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_quant_x() const;
  void _internal_set_position_quant_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 position_quant_y = 3;
  bool has_position_quant_y() const;
  private:
  bool _internal_has_position_quant_y() const;
  public:
  void clear_position_quant_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_quant_y() const;
  void set_position_quant_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_quant_y() const;
  void _internal_set_position_quant_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float death_time = 4;
  bool has_death_time() const;
  private:
  bool _internal_has_death_time() const;
  public:
  void clear_death_time();
  float death_time() const;
  void set_death_time(float value);
  private:
  float _internal_death_time() const;
  void _internal_set_death_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Building)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_quant_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_quant_y_;
  float death_time_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata.Team) */ {
 public:
  inline CDOTAMatchPrivateMetadata_Team() : CDOTAMatchPrivateMetadata_Team(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata_Team();
  explicit constexpr CDOTAMatchPrivateMetadata_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from);
  CDOTAMatchPrivateMetadata_Team(CDOTAMatchPrivateMetadata_Team&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team& operator=(const CDOTAMatchPrivateMetadata_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata_Team& operator=(CDOTAMatchPrivateMetadata_Team&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata_Team* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team*>(
               &_CDOTAMatchPrivateMetadata_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CDOTAMatchPrivateMetadata_Team& a, CDOTAMatchPrivateMetadata_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata_Team* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata.Team";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player Player;
  typedef CDOTAMatchPrivateMetadata_Team_Building Building;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kBuildingsFieldNumber = 3,
    kDotaTeamFieldNumber = 1,
  };
  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CDOTAMatchPrivateMetadata_Team_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >*
      mutable_players();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Player& _internal_players(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player* _internal_add_players();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Player& players(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >&
      players() const;

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  int buildings_size() const;
  private:
  int _internal_buildings_size() const;
  public:
  void clear_buildings();
  ::CDOTAMatchPrivateMetadata_Team_Building* mutable_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >*
      mutable_buildings();
  private:
  const ::CDOTAMatchPrivateMetadata_Team_Building& _internal_buildings(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Building* _internal_add_buildings();
  public:
  const ::CDOTAMatchPrivateMetadata_Team_Building& buildings(int index) const;
  ::CDOTAMatchPrivateMetadata_Team_Building* add_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >&
      buildings() const;

  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  private:
  bool _internal_has_dota_team() const;
  public:
  void clear_dota_team();
  ::PROTOBUF_NAMESPACE_ID::uint32 dota_team() const;
  void set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dota_team() const;
  void _internal_set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building > buildings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dota_team_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchPrivateMetadata) */ {
 public:
  inline CDOTAMatchPrivateMetadata() : CDOTAMatchPrivateMetadata(nullptr) {}
  virtual ~CDOTAMatchPrivateMetadata();
  explicit constexpr CDOTAMatchPrivateMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from);
  CDOTAMatchPrivateMetadata(CDOTAMatchPrivateMetadata&& from) noexcept
    : CDOTAMatchPrivateMetadata() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata& operator=(const CDOTAMatchPrivateMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchPrivateMetadata& operator=(CDOTAMatchPrivateMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTAMatchPrivateMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchPrivateMetadata* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata*>(
               &_CDOTAMatchPrivateMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CDOTAMatchPrivateMetadata& a, CDOTAMatchPrivateMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchPrivateMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchPrivateMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata>(nullptr);
  }

  CDOTAMatchPrivateMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchPrivateMetadata";
  }
  protected:
  explicit CDOTAMatchPrivateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_StringName StringName;
  typedef CDOTAMatchPrivateMetadata_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
    kGraphWinProbabilityFieldNumber = 2,
    kStringNamesFieldNumber = 3,
  };
  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CDOTAMatchPrivateMetadata_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >*
      mutable_teams();
  private:
  const ::CDOTAMatchPrivateMetadata_Team& _internal_teams(int index) const;
  ::CDOTAMatchPrivateMetadata_Team* _internal_add_teams();
  public:
  const ::CDOTAMatchPrivateMetadata_Team& teams(int index) const;
  ::CDOTAMatchPrivateMetadata_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >&
      teams() const;

  // repeated float graph_win_probability = 2;
  int graph_win_probability_size() const;
  private:
  int _internal_graph_win_probability_size() const;
  public:
  void clear_graph_win_probability();
  private:
  float _internal_graph_win_probability(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_win_probability() const;
  void _internal_add_graph_win_probability(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_win_probability();
  public:
  float graph_win_probability(int index) const;
  void set_graph_win_probability(int index, float value);
  void add_graph_win_probability(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_win_probability() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_win_probability();

  // repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
  int string_names_size() const;
  private:
  int _internal_string_names_size() const;
  public:
  void clear_string_names();
  ::CDOTAMatchPrivateMetadata_StringName* mutable_string_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_StringName >*
      mutable_string_names();
  private:
  const ::CDOTAMatchPrivateMetadata_StringName& _internal_string_names(int index) const;
  ::CDOTAMatchPrivateMetadata_StringName* _internal_add_string_names();
  public:
  const ::CDOTAMatchPrivateMetadata_StringName& string_names(int index) const;
  ::CDOTAMatchPrivateMetadata_StringName* add_string_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_StringName >&
      string_names() const;

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team > teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_win_probability_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_StringName > string_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCMatch) */ {
 public:
  inline CMsgDOTADPCMatch() : CMsgDOTADPCMatch(nullptr) {}
  virtual ~CMsgDOTADPCMatch();
  explicit constexpr CMsgDOTADPCMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCMatch(const CMsgDOTADPCMatch& from);
  CMsgDOTADPCMatch(CMsgDOTADPCMatch&& from) noexcept
    : CMsgDOTADPCMatch() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCMatch& operator=(const CMsgDOTADPCMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCMatch& operator=(CMsgDOTADPCMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCMatch*>(
               &_CMsgDOTADPCMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgDOTADPCMatch& a, CMsgDOTADPCMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCMatch* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCMatch>(nullptr);
  }

  CMsgDOTADPCMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCMatch& from);
  void MergeFrom(const CMsgDOTADPCMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCMatch";
  }
  protected:
  explicit CMsgDOTADPCMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // optional .CMsgDOTAMatch match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::CMsgDOTAMatch& match() const;
  ::CMsgDOTAMatch* release_match();
  ::CMsgDOTAMatch* mutable_match();
  void set_allocated_match(::CMsgDOTAMatch* match);
  private:
  const ::CMsgDOTAMatch& _internal_match() const;
  ::CMsgDOTAMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::CMsgDOTAMatch* match);
  ::CMsgDOTAMatch* unsafe_arena_release_match();

  // optional .CDOTAMatchMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::CDOTAMatchMetadata& metadata() const;
  ::CDOTAMatchMetadata* release_metadata();
  ::CDOTAMatchMetadata* mutable_metadata();
  void set_allocated_metadata(::CDOTAMatchMetadata* metadata);
  private:
  const ::CDOTAMatchMetadata& _internal_metadata() const;
  ::CDOTAMatchMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::CDOTAMatchMetadata* metadata);
  ::CDOTAMatchMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgDOTAMatch* match_;
  ::CDOTAMatchMetadata* metadata_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDOTAMatchMetadataFile

// required int32 version = 1;
inline bool CDOTAMatchMetadataFile::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadataFile::has_version() const {
  return _internal_has_version();
}
inline void CDOTAMatchMetadataFile::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchMetadataFile::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchMetadataFile::version() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.version)
  return _internal_version();
}
inline void CDOTAMatchMetadataFile::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
}
inline void CDOTAMatchMetadataFile::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadataFile.version)
}

// required uint64 match_id = 2;
inline bool CDOTAMatchMetadataFile::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadataFile::has_match_id() const {
  return _internal_has_match_id();
}
inline void CDOTAMatchMetadataFile::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadataFile::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadataFile::match_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.match_id)
  return _internal_match_id();
}
inline void CDOTAMatchMetadataFile::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  match_id_ = value;
}
inline void CDOTAMatchMetadataFile::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadataFile.match_id)
}

// optional .CDOTAMatchMetadata metadata = 3;
inline bool CDOTAMatchMetadataFile::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool CDOTAMatchMetadataFile::has_metadata() const {
  return _internal_has_metadata();
}
inline void CDOTAMatchMetadataFile::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CDOTAMatchMetadata& CDOTAMatchMetadataFile::_internal_metadata() const {
  const ::CDOTAMatchMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMatchMetadata&>(
      ::_CDOTAMatchMetadata_default_instance_);
}
inline const ::CDOTAMatchMetadata& CDOTAMatchMetadataFile::metadata() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.metadata)
  return _internal_metadata();
}
inline void CDOTAMatchMetadataFile::unsafe_arena_set_allocated_metadata(
    ::CDOTAMatchMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMatchMetadataFile.metadata)
}
inline ::CDOTAMatchMetadata* CDOTAMatchMetadataFile::release_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CDOTAMatchMetadata* CDOTAMatchMetadataFile::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadataFile.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::CDOTAMatchMetadata* CDOTAMatchMetadataFile::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMatchMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::CDOTAMatchMetadata* CDOTAMatchMetadataFile::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadataFile.metadata)
  return _internal_mutable_metadata();
}
inline void CDOTAMatchMetadataFile::set_allocated_metadata(::CDOTAMatchMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadataFile.metadata)
}

// optional bytes private_metadata = 5;
inline bool CDOTAMatchMetadataFile::_internal_has_private_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadataFile::has_private_metadata() const {
  return _internal_has_private_metadata();
}
inline void CDOTAMatchMetadataFile::clear_private_metadata() {
  private_metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMatchMetadataFile::private_metadata() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.private_metadata)
  return _internal_private_metadata();
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const std::string& value) {
  _internal_set_private_metadata(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadataFile.private_metadata)
}
inline std::string* CDOTAMatchMetadataFile::mutable_private_metadata() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadataFile.private_metadata)
  return _internal_mutable_private_metadata();
}
inline const std::string& CDOTAMatchMetadataFile::_internal_private_metadata() const {
  return private_metadata_.Get();
}
inline void CDOTAMatchMetadataFile::_internal_set_private_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTAMatchMetadataFile::set_private_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTAMatchMetadataFile.private_metadata)
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTAMatchMetadataFile.private_metadata)
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchMetadataFile.private_metadata)
}
inline std::string* CDOTAMatchMetadataFile::_internal_mutable_private_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return private_metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTAMatchMetadataFile::release_private_metadata() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadataFile.private_metadata)
  if (!_internal_has_private_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTAMatchMetadataFile::set_allocated_private_metadata(std::string* private_metadata) {
  if (private_metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadataFile.private_metadata)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_PlayerKill

// optional uint32 victim_slot = 1;
inline bool CDOTAMatchMetadata_Team_PlayerKill::_internal_has_victim_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_victim_slot() const {
  return _internal_has_victim_slot();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_victim_slot() {
  victim_slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_PlayerKill::_internal_victim_slot() const {
  return victim_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_PlayerKill::victim_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
  return _internal_victim_slot();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::_internal_set_victim_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  victim_slot_ = value;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_victim_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_victim_slot(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
}

// optional uint32 count = 2;
inline bool CDOTAMatchMetadata_Team_PlayerKill::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_count() const {
  return _internal_has_count();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_PlayerKill::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_PlayerKill::count() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.PlayerKill.count)
  return _internal_count();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.PlayerKill.count)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_ItemPurchase

// optional uint32 item_id = 1;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_item_id() const {
  return _internal_has_item_id();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_item_id() {
  item_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ItemPurchase::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ItemPurchase::item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ItemPurchase.item_id)
  return _internal_item_id();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ItemPurchase.item_id)
}

// optional int32 purchase_time = 2;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::_internal_has_purchase_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_purchase_time() const {
  return _internal_has_purchase_time();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_purchase_time() {
  purchase_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchMetadata_Team_ItemPurchase::_internal_purchase_time() const {
  return purchase_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchMetadata_Team_ItemPurchase::purchase_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
  return _internal_purchase_time();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::_internal_set_purchase_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  purchase_time_ = value;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_purchase_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_purchase_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_InventorySnapshot

// repeated uint32 item_id = 1;
inline int CDOTAMatchMetadata_Team_InventorySnapshot::_internal_item_id_size() const {
  return item_id_.size();
}
inline int CDOTAMatchMetadata_Team_InventorySnapshot::item_id_size() const {
  return _internal_item_id_size();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_item_id() {
  item_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::_internal_item_id(int index) const {
  return item_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::item_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return _internal_item_id(index);
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_item_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_add_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  item_id_.Add(value);
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::add_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_item_id(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_InventorySnapshot::_internal_item_id() const {
  return item_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_InventorySnapshot::item_id() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return _internal_item_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_InventorySnapshot::_internal_mutable_item_id() {
  return &item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_InventorySnapshot::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return _internal_mutable_item_id();
}

// optional int32 game_time = 2;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_game_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_game_time() const {
  return _internal_has_game_time();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchMetadata_Team_InventorySnapshot::_internal_game_time() const {
  return game_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchMetadata_Team_InventorySnapshot::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
  return _internal_game_time();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_time_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
}

// optional uint32 kills = 3;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_kills() const {
  return _internal_has_kills();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::_internal_kills() const {
  return kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::kills() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.kills)
  return _internal_kills();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.kills)
}

// optional uint32 deaths = 4;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_deaths() const {
  return _internal_has_deaths();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::_internal_deaths() const {
  return deaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::deaths() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
  return _internal_deaths();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  deaths_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
}

// optional uint32 assists = 5;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_assists() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_assists() const {
  return _internal_has_assists();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::_internal_assists() const {
  return assists_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::assists() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.assists)
  return _internal_assists();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_assists(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  assists_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_assists(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.assists)
}

// optional uint32 level = 6;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_level() const {
  return _internal_has_level();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::level() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.level)
  return _internal_level();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.level)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_AutoStyleCriteria

// optional uint32 name_token = 1;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_has_name_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_name_token() const {
  return _internal_has_name_token();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_name_token() {
  name_token_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_name_token() const {
  return name_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_AutoStyleCriteria::name_token() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
  return _internal_name_token();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_set_name_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  name_token_ = value;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_name_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_name_token(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
}

// optional float value = 2;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_value() const {
  return _internal_has_value();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_value() const {
  return value_;
}
inline float CDOTAMatchMetadata_Team_AutoStyleCriteria::value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
  return _internal_value();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_StrangeGemProgress

// optional uint32 kill_eater_type = 1;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_kill_eater_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_kill_eater_type() const {
  return _internal_has_kill_eater_type();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_kill_eater_type() {
  kill_eater_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_kill_eater_type() const {
  return kill_eater_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::kill_eater_type() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.kill_eater_type)
  return _internal_kill_eater_type();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_kill_eater_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  kill_eater_type_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_kill_eater_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kill_eater_type(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.kill_eater_type)
}

// optional uint32 gem_item_def_index = 2;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_gem_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_gem_item_def_index() const {
  return _internal_has_gem_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_gem_item_def_index() {
  gem_item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_gem_item_def_index() const {
  return gem_item_def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::gem_item_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.gem_item_def_index)
  return _internal_gem_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_gem_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gem_item_def_index_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_gem_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gem_item_def_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.gem_item_def_index)
}

// optional uint32 required_hero_id = 3;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_required_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_required_hero_id() const {
  return _internal_has_required_hero_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_required_hero_id() {
  required_hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_required_hero_id() const {
  return required_hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::required_hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.required_hero_id)
  return _internal_required_hero_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_required_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  required_hero_id_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_required_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_required_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.required_hero_id)
}

// optional uint32 starting_value = 4;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_starting_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_starting_value() const {
  return _internal_has_starting_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_starting_value() {
  starting_value_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_starting_value() const {
  return starting_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::starting_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.starting_value)
  return _internal_starting_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  starting_value_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starting_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.starting_value)
}

// optional uint32 ending_value = 5;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_ending_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_ending_value() const {
  return _internal_has_ending_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_ending_value() {
  ending_value_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_ending_value() const {
  return ending_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::ending_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.ending_value)
  return _internal_ending_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_ending_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ending_value_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_ending_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ending_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.ending_value)
}

// optional uint32 owner_item_def_index = 6;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_owner_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_owner_item_def_index() const {
  return _internal_has_owner_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_owner_item_def_index() {
  owner_item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_owner_item_def_index() const {
  return owner_item_def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_def_index)
  return _internal_owner_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_owner_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  owner_item_def_index_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_owner_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_item_def_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_def_index)
}

// optional uint64 owner_item_id = 7;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_owner_item_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_owner_item_id() const {
  return _internal_has_owner_item_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_owner_item_id() {
  owner_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_owner_item_id() const {
  return owner_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_id)
  return _internal_owner_item_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_owner_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  owner_item_id_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_owner_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner_item_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_id)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_VictoryPrediction

// optional uint64 item_id = 1;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_item_id() const {
  return _internal_has_item_id();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata_Team_VictoryPrediction::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata_Team_VictoryPrediction::item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.item_id)
  return _internal_item_id();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.item_id)
}

// optional uint32 item_def_index = 2;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_item_def_index() const {
  return _internal_has_item_def_index();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_item_def_index() {
  item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_VictoryPrediction::_internal_item_def_index() const {
  return item_def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_VictoryPrediction::item_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.item_def_index)
  return _internal_item_def_index();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  item_def_index_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_def_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.item_def_index)
}

// optional uint32 starting_value = 3;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_starting_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_starting_value() const {
  return _internal_has_starting_value();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_starting_value() {
  starting_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_VictoryPrediction::_internal_starting_value() const {
  return starting_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_VictoryPrediction::starting_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.starting_value)
  return _internal_starting_value();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  starting_value_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_starting_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starting_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.starting_value)
}

// optional bool is_victory = 4;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_is_victory() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_is_victory() const {
  return _internal_has_is_victory();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_is_victory() {
  is_victory_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_is_victory() const {
  return is_victory_;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::is_victory() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.is_victory)
  return _internal_is_victory();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_is_victory(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_victory_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_is_victory(bool value) {
  _internal_set_is_victory(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.is_victory)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_SubChallenge

// optional uint32 slot_id = 1;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_slot_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_slot_id() {
  slot_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_SubChallenge::_internal_slot_id() const {
  return slot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_SubChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.slot_id)
  return _internal_slot_id();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_id_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.slot_id)
}

// optional uint32 start_value = 2;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_start_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_start_value() const {
  return _internal_has_start_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_start_value() {
  start_value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_SubChallenge::_internal_start_value() const {
  return start_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_SubChallenge::start_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.start_value)
  return _internal_start_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_start_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  start_value_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_start_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.start_value)
}

// optional uint32 end_value = 3;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_end_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_end_value() const {
  return _internal_has_end_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_end_value() {
  end_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_SubChallenge::_internal_end_value() const {
  return end_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_SubChallenge::end_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.end_value)
  return _internal_end_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_end_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  end_value_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_end_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.end_value)
}

// optional bool completed = 4;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_completed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_completed() const {
  return _internal_has_completed();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_completed() {
  completed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_completed() const {
  return completed_;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.completed)
  return _internal_completed();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_completed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  completed_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.completed)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_CavernChallengeResult

// optional uint32 completed_path_id = 1;
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_has_completed_path_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::has_completed_path_id() const {
  return _internal_has_completed_path_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::clear_completed_path_id() {
  completed_path_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_completed_path_id() const {
  return completed_path_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CavernChallengeResult::completed_path_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.CavernChallengeResult.completed_path_id)
  return _internal_completed_path_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_set_completed_path_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  completed_path_id_ = value;
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::set_completed_path_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_completed_path_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.CavernChallengeResult.completed_path_id)
}

// optional uint32 claimed_room_id = 2;
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_has_claimed_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::has_claimed_room_id() const {
  return _internal_has_claimed_room_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::clear_claimed_room_id() {
  claimed_room_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_claimed_room_id() const {
  return claimed_room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CavernChallengeResult::claimed_room_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.CavernChallengeResult.claimed_room_id)
  return _internal_claimed_room_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_set_claimed_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  claimed_room_id_ = value;
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::set_claimed_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_claimed_room_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.CavernChallengeResult.claimed_room_id)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_ActionGrant

// optional uint32 action_id = 1;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_action_id() const {
  return _internal_has_action_id();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_action_id() {
  action_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ActionGrant::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ActionGrant::action_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.action_id)
  return _internal_action_id();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  action_id_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.action_id)
}

// optional uint32 quantity = 2;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_quantity() const {
  return _internal_has_quantity();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_quantity() {
  quantity_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ActionGrant::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ActionGrant::quantity() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.quantity)
  return _internal_quantity();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  quantity_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.quantity)
}

// optional uint32 audit = 3;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_audit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_audit() const {
  return _internal_has_audit();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_audit() {
  audit_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ActionGrant::_internal_audit() const {
  return audit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_ActionGrant::audit() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.audit)
  return _internal_audit();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_audit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  audit_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_audit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_audit(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.audit)
}

// optional bool requires_win = 4;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_requires_win() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_requires_win() const {
  return _internal_has_requires_win();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_requires_win() {
  requires_win_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_requires_win() const {
  return requires_win_;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::requires_win() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.requires_win)
  return _internal_requires_win();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_requires_win(bool value) {
  _has_bits_[0] |= 0x00000008u;
  requires_win_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_requires_win(bool value) {
  _internal_set_requires_win(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.requires_win)
}

// optional uint64 audit_data = 5;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_audit_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_audit_data() const {
  return _internal_has_audit_data();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_audit_data() {
  audit_data_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata_Team_ActionGrant::_internal_audit_data() const {
  return audit_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata_Team_ActionGrant::audit_data() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.audit_data)
  return _internal_audit_data();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_audit_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  audit_data_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_audit_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_audit_data(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.audit_data)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_CandyGrant

// optional uint32 points = 1;
inline bool CDOTAMatchMetadata_Team_CandyGrant::_internal_has_points() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_CandyGrant::has_points() const {
  return _internal_has_points();
}
inline void CDOTAMatchMetadata_Team_CandyGrant::clear_points() {
  points_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CandyGrant::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CandyGrant::points() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.CandyGrant.points)
  return _internal_points();
}
inline void CDOTAMatchMetadata_Team_CandyGrant::_internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  points_ = value;
}
inline void CDOTAMatchMetadata_Team_CandyGrant::set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.CandyGrant.points)
}

// optional uint32 reason = 2;
inline bool CDOTAMatchMetadata_Team_CandyGrant::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_CandyGrant::has_reason() const {
  return _internal_has_reason();
}
inline void CDOTAMatchMetadata_Team_CandyGrant::clear_reason() {
  reason_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CandyGrant::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_CandyGrant::reason() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.CandyGrant.reason)
  return _internal_reason();
}
inline void CDOTAMatchMetadata_Team_CandyGrant::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void CDOTAMatchMetadata_Team_CandyGrant::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.CandyGrant.reason)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_EventData

// optional uint32 event_id = 1;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.event_id)
  return _internal_event_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.event_id)
}

// optional uint32 event_points = 2;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_event_points() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_event_points() const {
  return _internal_has_event_points();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_points() {
  event_points_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_event_points() const {
  return event_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::event_points() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.event_points)
  return _internal_event_points();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_event_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_points_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_points(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.event_points)
}

// optional uint32 challenge_instance_id = 3;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_instance_id() {
  challenge_instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_challenge_instance_id() const {
  return challenge_instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_instance_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_instance_id)
}

// optional uint32 challenge_quest_id = 4;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_quest_id() const {
  return _internal_has_challenge_quest_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_quest_id() {
  challenge_quest_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_challenge_quest_id() const {
  return challenge_quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::challenge_quest_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_quest_id)
  return _internal_challenge_quest_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_quest_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  challenge_quest_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_quest_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_quest_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_quest_id)
}

// optional uint32 challenge_quest_challenge_id = 5;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_quest_challenge_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_quest_challenge_id() const {
  return _internal_has_challenge_quest_challenge_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_quest_challenge_id() {
  challenge_quest_challenge_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_challenge_quest_challenge_id() const {
  return challenge_quest_challenge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::challenge_quest_challenge_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_quest_challenge_id)
  return _internal_challenge_quest_challenge_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_quest_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  challenge_quest_challenge_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_quest_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_quest_challenge_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_quest_challenge_id)
}

// optional bool challenge_completed = 6;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_completed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_completed() const {
  return _internal_has_challenge_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_completed() {
  challenge_completed_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CDOTAMatchMetadata_Team_EventData::_internal_challenge_completed() const {
  return challenge_completed_;
}
inline bool CDOTAMatchMetadata_Team_EventData::challenge_completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_completed)
  return _internal_challenge_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_completed(bool value) {
  _has_bits_[0] |= 0x00000200u;
  challenge_completed_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_completed(bool value) {
  _internal_set_challenge_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_completed)
}

// optional uint32 challenge_rank_completed = 7;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_rank_completed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_rank_completed() const {
  return _internal_has_challenge_rank_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_rank_completed() {
  challenge_rank_completed_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_challenge_rank_completed() const {
  return challenge_rank_completed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::challenge_rank_completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_rank_completed)
  return _internal_challenge_rank_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_rank_completed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  challenge_rank_completed_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_rank_completed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_rank_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_rank_completed)
}

// optional uint32 challenge_rank_previously_completed = 8;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_rank_previously_completed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_rank_previously_completed() const {
  return _internal_has_challenge_rank_previously_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_rank_previously_completed() {
  challenge_rank_previously_completed_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_challenge_rank_previously_completed() const {
  return challenge_rank_previously_completed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::challenge_rank_previously_completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_rank_previously_completed)
  return _internal_challenge_rank_previously_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_rank_previously_completed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  challenge_rank_previously_completed_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_rank_previously_completed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_rank_previously_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_rank_previously_completed)
}

// optional bool event_owned = 9;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_event_owned() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_event_owned() const {
  return _internal_has_event_owned();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_owned() {
  event_owned_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CDOTAMatchMetadata_Team_EventData::_internal_event_owned() const {
  return event_owned_;
}
inline bool CDOTAMatchMetadata_Team_EventData::event_owned() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.event_owned)
  return _internal_event_owned();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_event_owned(bool value) {
  _has_bits_[0] |= 0x00000400u;
  event_owned_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_owned(bool value) {
  _internal_set_event_owned(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.event_owned)
}

// repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
inline int CDOTAMatchMetadata_Team_EventData::_internal_sub_challenges_with_progress_size() const {
  return sub_challenges_with_progress_.size();
}
inline int CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress_size() const {
  return _internal_sub_challenges_with_progress_size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_sub_challenges_with_progress() {
  sub_challenges_with_progress_.Clear();
}
inline ::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::mutable_sub_challenges_with_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >*
CDOTAMatchMetadata_Team_EventData::mutable_sub_challenges_with_progress() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return &sub_challenges_with_progress_;
}
inline const ::CDOTAMatchMetadata_Team_SubChallenge& CDOTAMatchMetadata_Team_EventData::_internal_sub_challenges_with_progress(int index) const {
  return sub_challenges_with_progress_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_SubChallenge& CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return _internal_sub_challenges_with_progress(index);
}
inline ::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::_internal_add_sub_challenges_with_progress() {
  return sub_challenges_with_progress_.Add();
}
inline ::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::add_sub_challenges_with_progress() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return _internal_add_sub_challenges_with_progress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >&
CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_;
}

// optional uint32 wager_winnings = 11;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_wager_winnings() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_wager_winnings() const {
  return _internal_has_wager_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_wager_winnings() {
  wager_winnings_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_wager_winnings() const {
  return wager_winnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::wager_winnings() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.wager_winnings)
  return _internal_wager_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_wager_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  wager_winnings_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_wager_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wager_winnings(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.wager_winnings)
}

// optional bool cavern_challenge_active = 12;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_challenge_active() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_active() const {
  return _internal_has_cavern_challenge_active();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_active() {
  cavern_challenge_active_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_active() const {
  return cavern_challenge_active_;
}
inline bool CDOTAMatchMetadata_Team_EventData::cavern_challenge_active() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_active)
  return _internal_cavern_challenge_active();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_challenge_active(bool value) {
  _has_bits_[0] |= 0x00000800u;
  cavern_challenge_active_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_active(bool value) {
  _internal_set_cavern_challenge_active(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_challenge_active)
}

// optional uint32 cavern_challenge_winnings = 13;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_challenge_winnings() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_winnings() const {
  return _internal_has_cavern_challenge_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_winnings() {
  cavern_challenge_winnings_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_winnings() const {
  return cavern_challenge_winnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::cavern_challenge_winnings() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_winnings)
  return _internal_cavern_challenge_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_challenge_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  cavern_challenge_winnings_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cavern_challenge_winnings(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_challenge_winnings)
}

// optional uint32 amount_wagered = 14;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_amount_wagered() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_amount_wagered() const {
  return _internal_has_amount_wagered();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_amount_wagered() {
  amount_wagered_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_amount_wagered() const {
  return amount_wagered_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::amount_wagered() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.amount_wagered)
  return _internal_amount_wagered();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_amount_wagered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  amount_wagered_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_amount_wagered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount_wagered(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.amount_wagered)
}

// optional uint32 periodic_point_adjustments = 16;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_periodic_point_adjustments() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_periodic_point_adjustments() const {
  return _internal_has_periodic_point_adjustments();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_periodic_point_adjustments() {
  periodic_point_adjustments_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_periodic_point_adjustments() const {
  return periodic_point_adjustments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::periodic_point_adjustments() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.periodic_point_adjustments)
  return _internal_periodic_point_adjustments();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_periodic_point_adjustments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  periodic_point_adjustments_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_periodic_point_adjustments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_periodic_point_adjustments(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.periodic_point_adjustments)
}

// repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
inline int CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_map_results_size() const {
  return cavern_challenge_map_results_.size();
}
inline int CDOTAMatchMetadata_Team_EventData::cavern_challenge_map_results_size() const {
  return _internal_cavern_challenge_map_results_size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_map_results() {
  cavern_challenge_map_results_.Clear();
}
inline ::CDOTAMatchMetadata_Team_CavernChallengeResult* CDOTAMatchMetadata_Team_EventData::mutable_cavern_challenge_map_results(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return cavern_challenge_map_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >*
CDOTAMatchMetadata_Team_EventData::mutable_cavern_challenge_map_results() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return &cavern_challenge_map_results_;
}
inline const ::CDOTAMatchMetadata_Team_CavernChallengeResult& CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_map_results(int index) const {
  return cavern_challenge_map_results_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_CavernChallengeResult& CDOTAMatchMetadata_Team_EventData::cavern_challenge_map_results(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return _internal_cavern_challenge_map_results(index);
}
inline ::CDOTAMatchMetadata_Team_CavernChallengeResult* CDOTAMatchMetadata_Team_EventData::_internal_add_cavern_challenge_map_results() {
  return cavern_challenge_map_results_.Add();
}
inline ::CDOTAMatchMetadata_Team_CavernChallengeResult* CDOTAMatchMetadata_Team_EventData::add_cavern_challenge_map_results() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return _internal_add_cavern_challenge_map_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >&
CDOTAMatchMetadata_Team_EventData::cavern_challenge_map_results() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return cavern_challenge_map_results_;
}

// optional uint32 cavern_challenge_plus_shard_winnings = 18;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_challenge_plus_shard_winnings() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_plus_shard_winnings() const {
  return _internal_has_cavern_challenge_plus_shard_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_plus_shard_winnings() {
  cavern_challenge_plus_shard_winnings_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_plus_shard_winnings() const {
  return cavern_challenge_plus_shard_winnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::cavern_challenge_plus_shard_winnings() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_plus_shard_winnings)
  return _internal_cavern_challenge_plus_shard_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_challenge_plus_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  cavern_challenge_plus_shard_winnings_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_plus_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cavern_challenge_plus_shard_winnings(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_challenge_plus_shard_winnings)
}

// repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
inline int CDOTAMatchMetadata_Team_EventData::_internal_actions_granted_size() const {
  return actions_granted_.size();
}
inline int CDOTAMatchMetadata_Team_EventData::actions_granted_size() const {
  return _internal_actions_granted_size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_actions_granted() {
  actions_granted_.Clear();
}
inline ::CDOTAMatchMetadata_Team_ActionGrant* CDOTAMatchMetadata_Team_EventData::mutable_actions_granted(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return actions_granted_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >*
CDOTAMatchMetadata_Team_EventData::mutable_actions_granted() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return &actions_granted_;
}
inline const ::CDOTAMatchMetadata_Team_ActionGrant& CDOTAMatchMetadata_Team_EventData::_internal_actions_granted(int index) const {
  return actions_granted_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_ActionGrant& CDOTAMatchMetadata_Team_EventData::actions_granted(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return _internal_actions_granted(index);
}
inline ::CDOTAMatchMetadata_Team_ActionGrant* CDOTAMatchMetadata_Team_EventData::_internal_add_actions_granted() {
  return actions_granted_.Add();
}
inline ::CDOTAMatchMetadata_Team_ActionGrant* CDOTAMatchMetadata_Team_EventData::add_actions_granted() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return _internal_add_actions_granted();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >&
CDOTAMatchMetadata_Team_EventData::actions_granted() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return actions_granted_;
}

// optional uint32 cavern_crawl_map_variant = 20;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_crawl_map_variant() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_crawl_map_variant() const {
  return _internal_has_cavern_crawl_map_variant();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_crawl_map_variant() {
  cavern_crawl_map_variant_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_cavern_crawl_map_variant() const {
  return cavern_crawl_map_variant_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::cavern_crawl_map_variant() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_crawl_map_variant)
  return _internal_cavern_crawl_map_variant();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_crawl_map_variant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  cavern_crawl_map_variant_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_crawl_map_variant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cavern_crawl_map_variant(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_crawl_map_variant)
}

// optional uint32 team_wager_bonus_pct = 21;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_team_wager_bonus_pct() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_team_wager_bonus_pct() const {
  return _internal_has_team_wager_bonus_pct();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_team_wager_bonus_pct() {
  team_wager_bonus_pct_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_team_wager_bonus_pct() const {
  return team_wager_bonus_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::team_wager_bonus_pct() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.team_wager_bonus_pct)
  return _internal_team_wager_bonus_pct();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_team_wager_bonus_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  team_wager_bonus_pct_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_team_wager_bonus_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_wager_bonus_pct(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.team_wager_bonus_pct)
}

// optional uint32 wager_streak_pct = 22;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_wager_streak_pct() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_wager_streak_pct() const {
  return _internal_has_wager_streak_pct();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_wager_streak_pct() {
  wager_streak_pct_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_wager_streak_pct() const {
  return wager_streak_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::wager_streak_pct() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.wager_streak_pct)
  return _internal_wager_streak_pct();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_wager_streak_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  wager_streak_pct_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_wager_streak_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wager_streak_pct(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.wager_streak_pct)
}

// repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
inline int CDOTAMatchMetadata_Team_EventData::_internal_candy_points_granted_size() const {
  return candy_points_granted_.size();
}
inline int CDOTAMatchMetadata_Team_EventData::candy_points_granted_size() const {
  return _internal_candy_points_granted_size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_candy_points_granted() {
  candy_points_granted_.Clear();
}
inline ::CDOTAMatchMetadata_Team_CandyGrant* CDOTAMatchMetadata_Team_EventData::mutable_candy_points_granted(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.EventData.candy_points_granted)
  return candy_points_granted_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CandyGrant >*
CDOTAMatchMetadata_Team_EventData::mutable_candy_points_granted() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.EventData.candy_points_granted)
  return &candy_points_granted_;
}
inline const ::CDOTAMatchMetadata_Team_CandyGrant& CDOTAMatchMetadata_Team_EventData::_internal_candy_points_granted(int index) const {
  return candy_points_granted_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_CandyGrant& CDOTAMatchMetadata_Team_EventData::candy_points_granted(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.candy_points_granted)
  return _internal_candy_points_granted(index);
}
inline ::CDOTAMatchMetadata_Team_CandyGrant* CDOTAMatchMetadata_Team_EventData::_internal_add_candy_points_granted() {
  return candy_points_granted_.Add();
}
inline ::CDOTAMatchMetadata_Team_CandyGrant* CDOTAMatchMetadata_Team_EventData::add_candy_points_granted() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.EventData.candy_points_granted)
  return _internal_add_candy_points_granted();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CandyGrant >&
CDOTAMatchMetadata_Team_EventData::candy_points_granted() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.EventData.candy_points_granted)
  return candy_points_granted_;
}

// optional uint32 active_season_id = 24;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_active_season_id() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_active_season_id() const {
  return _internal_has_active_season_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_active_season_id() {
  active_season_id_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::_internal_active_season_id() const {
  return active_season_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_EventData::active_season_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.active_season_id)
  return _internal_active_season_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_active_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  active_season_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_active_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_season_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.active_season_id)
}

// optional bool cavern_crawl_half_credit = 25;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_crawl_half_credit() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_crawl_half_credit() const {
  return _internal_has_cavern_crawl_half_credit();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_crawl_half_credit() {
  cavern_crawl_half_credit_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CDOTAMatchMetadata_Team_EventData::_internal_cavern_crawl_half_credit() const {
  return cavern_crawl_half_credit_;
}
inline bool CDOTAMatchMetadata_Team_EventData::cavern_crawl_half_credit() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_crawl_half_credit)
  return _internal_cavern_crawl_half_credit();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_crawl_half_credit(bool value) {
  _has_bits_[0] |= 0x00001000u;
  cavern_crawl_half_credit_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_crawl_half_credit(bool value) {
  _internal_set_cavern_crawl_half_credit(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_crawl_half_credit)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_GauntletProgress

// optional uint32 gauntlet_tier = 2;
inline bool CDOTAMatchMetadata_Team_GauntletProgress::_internal_has_gauntlet_tier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_GauntletProgress::has_gauntlet_tier() const {
  return _internal_has_gauntlet_tier();
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::clear_gauntlet_tier() {
  gauntlet_tier_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_GauntletProgress::_internal_gauntlet_tier() const {
  return gauntlet_tier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_GauntletProgress::gauntlet_tier() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.GauntletProgress.gauntlet_tier)
  return _internal_gauntlet_tier();
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::_internal_set_gauntlet_tier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  gauntlet_tier_ = value;
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::set_gauntlet_tier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gauntlet_tier(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.GauntletProgress.gauntlet_tier)
}

// optional uint32 gauntlet_wins = 3;
inline bool CDOTAMatchMetadata_Team_GauntletProgress::_internal_has_gauntlet_wins() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_GauntletProgress::has_gauntlet_wins() const {
  return _internal_has_gauntlet_wins();
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::clear_gauntlet_wins() {
  gauntlet_wins_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_GauntletProgress::_internal_gauntlet_wins() const {
  return gauntlet_wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_GauntletProgress::gauntlet_wins() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.GauntletProgress.gauntlet_wins)
  return _internal_gauntlet_wins();
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::_internal_set_gauntlet_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gauntlet_wins_ = value;
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::set_gauntlet_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gauntlet_wins(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.GauntletProgress.gauntlet_wins)
}

// optional uint32 gauntlet_losses = 4;
inline bool CDOTAMatchMetadata_Team_GauntletProgress::_internal_has_gauntlet_losses() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_GauntletProgress::has_gauntlet_losses() const {
  return _internal_has_gauntlet_losses();
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::clear_gauntlet_losses() {
  gauntlet_losses_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_GauntletProgress::_internal_gauntlet_losses() const {
  return gauntlet_losses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_GauntletProgress::gauntlet_losses() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.GauntletProgress.gauntlet_losses)
  return _internal_gauntlet_losses();
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::_internal_set_gauntlet_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  gauntlet_losses_ = value;
}
inline void CDOTAMatchMetadata_Team_GauntletProgress::set_gauntlet_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gauntlet_losses(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.GauntletProgress.gauntlet_losses)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_Player_ContractProgress

// optional uint32 guild_id = 1;
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_has_guild_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::clear_guild_id() {
  guild_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::guild_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ContractProgress.guild_id)
  return _internal_guild_id();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  guild_id_ = value;
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ContractProgress.guild_id)
}

// optional uint32 event_id = 2;
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ContractProgress.event_id)
  return _internal_event_id();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_id_ = value;
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ContractProgress.event_id)
}

// optional uint32 challenge_instance_id = 3;
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_has_challenge_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::clear_challenge_instance_id() {
  challenge_instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_challenge_instance_id() const {
  return challenge_instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ContractProgress.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_instance_id_ = value;
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ContractProgress.challenge_instance_id)
}

// optional uint32 challenge_parameter = 4;
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_has_challenge_parameter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::has_challenge_parameter() const {
  return _internal_has_challenge_parameter();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::clear_challenge_parameter() {
  challenge_parameter_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_challenge_parameter() const {
  return challenge_parameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::challenge_parameter() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ContractProgress.challenge_parameter)
  return _internal_challenge_parameter();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  challenge_parameter_ = value;
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_parameter(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ContractProgress.challenge_parameter)
}

// optional uint32 contract_stars = 5;
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_has_contract_stars() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::has_contract_stars() const {
  return _internal_has_contract_stars();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::clear_contract_stars() {
  contract_stars_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_contract_stars() const {
  return contract_stars_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::contract_stars() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ContractProgress.contract_stars)
  return _internal_contract_stars();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_set_contract_stars(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  contract_stars_ = value;
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::set_contract_stars(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contract_stars(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ContractProgress.contract_stars)
}

// optional uint32 contract_slot = 6;
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_has_contract_slot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::has_contract_slot() const {
  return _internal_has_contract_slot();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::clear_contract_slot() {
  contract_slot_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_contract_slot() const {
  return contract_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player_ContractProgress::contract_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ContractProgress.contract_slot)
  return _internal_contract_slot();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_set_contract_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  contract_slot_ = value;
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::set_contract_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contract_slot(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ContractProgress.contract_slot)
}

// optional bool completed = 7;
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_has_completed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::has_completed() const {
  return _internal_has_completed();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::clear_completed() {
  completed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_completed() const {
  return completed_;
}
inline bool CDOTAMatchMetadata_Team_Player_ContractProgress::completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ContractProgress.completed)
  return _internal_completed();
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::_internal_set_completed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  completed_ = value;
}
inline void CDOTAMatchMetadata_Team_Player_ContractProgress::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ContractProgress.completed)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_Player

// optional uint32 account_id = 1;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CDOTAMatchMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.account_id)
  return _internal_account_id();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.account_id)
}

// repeated uint32 ability_upgrades = 2;
inline int CDOTAMatchMetadata_Team_Player::_internal_ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline int CDOTAMatchMetadata_Team_Player::ability_upgrades_size() const {
  return _internal_ability_upgrades_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_ability_upgrades(int index) const {
  return ability_upgrades_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return _internal_ability_upgrades(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_ability_upgrades(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ability_upgrades_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline void CDOTAMatchMetadata_Team_Player::_internal_add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ability_upgrades_.Add(value);
}
inline void CDOTAMatchMetadata_Team_Player::add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ability_upgrades(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_Player::_internal_ability_upgrades() const {
  return ability_upgrades_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return _internal_ability_upgrades();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_Player::_internal_mutable_ability_upgrades() {
  return &ability_upgrades_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return _internal_mutable_ability_upgrades();
}

// optional uint32 player_slot = 3;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_player_slot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CDOTAMatchMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_player_slot() const {
  return player_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.player_slot)
  return _internal_player_slot();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_slot_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.player_slot)
}

// repeated .CSOEconItem equipped_econ_items = 4;
inline int CDOTAMatchMetadata_Team_Player::_internal_equipped_econ_items_size() const {
  return equipped_econ_items_.size();
}
inline int CDOTAMatchMetadata_Team_Player::equipped_econ_items_size() const {
  return _internal_equipped_econ_items_size();
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return &equipped_econ_items_;
}
inline const ::CSOEconItem& CDOTAMatchMetadata_Team_Player::_internal_equipped_econ_items(int index) const {
  return equipped_econ_items_.Get(index);
}
inline const ::CSOEconItem& CDOTAMatchMetadata_Team_Player::equipped_econ_items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return _internal_equipped_econ_items(index);
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::_internal_add_equipped_econ_items() {
  return equipped_econ_items_.Add();
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::add_equipped_econ_items() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return _internal_add_equipped_econ_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
CDOTAMatchMetadata_Team_Player::equipped_econ_items() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_;
}

// repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
inline int CDOTAMatchMetadata_Team_Player::_internal_kills_size() const {
  return kills_.size();
}
inline int CDOTAMatchMetadata_Team_Player::kills_size() const {
  return _internal_kills_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_kills() {
  kills_.Clear();
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >*
CDOTAMatchMetadata_Team_Player::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.kills)
  return &kills_;
}
inline const ::CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_Player::_internal_kills(int index) const {
  return kills_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_Player::kills(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.kills)
  return _internal_kills(index);
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::_internal_add_kills() {
  return kills_.Add();
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::add_kills() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.kills)
  return _internal_add_kills();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >&
CDOTAMatchMetadata_Team_Player::kills() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.kills)
  return kills_;
}

// repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
inline int CDOTAMatchMetadata_Team_Player::_internal_items_size() const {
  return items_.size();
}
inline int CDOTAMatchMetadata_Team_Player::items_size() const {
  return _internal_items_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_items() {
  items_.Clear();
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >*
CDOTAMatchMetadata_Team_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.items)
  return &items_;
}
inline const ::CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_Player::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.items)
  return _internal_items(index);
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::_internal_add_items() {
  return items_.Add();
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::add_items() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >&
CDOTAMatchMetadata_Team_Player::items() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.items)
  return items_;
}

// optional uint32 avg_kills_x16 = 7;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_kills_x16() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_kills_x16() const {
  return _internal_has_avg_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_kills_x16() {
  avg_kills_x16_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_avg_kills_x16() const {
  return avg_kills_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::avg_kills_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_kills_x16)
  return _internal_avg_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  avg_kills_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_kills_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_kills_x16)
}

// optional uint32 avg_deaths_x16 = 8;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_deaths_x16() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_deaths_x16() const {
  return _internal_has_avg_deaths_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_deaths_x16() {
  avg_deaths_x16_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_avg_deaths_x16() const {
  return avg_deaths_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::avg_deaths_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
  return _internal_avg_deaths_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_deaths_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  avg_deaths_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_deaths_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_deaths_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
}

// optional uint32 avg_assists_x16 = 9;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_assists_x16() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_assists_x16() const {
  return _internal_has_avg_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_assists_x16() {
  avg_assists_x16_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_avg_assists_x16() const {
  return avg_assists_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::avg_assists_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_assists_x16)
  return _internal_avg_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  avg_assists_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_assists_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_assists_x16)
}

// optional uint32 avg_gpm_x16 = 10;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_gpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_gpm_x16() const {
  return _internal_has_avg_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_gpm_x16() {
  avg_gpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_avg_gpm_x16() const {
  return avg_gpm_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::avg_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
  return _internal_avg_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  avg_gpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_gpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
}

// optional uint32 avg_xpm_x16 = 11;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_xpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_xpm_x16() const {
  return _internal_has_avg_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_xpm_x16() {
  avg_xpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_avg_xpm_x16() const {
  return avg_xpm_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::avg_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
  return _internal_avg_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  avg_xpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_xpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
}

// optional uint32 best_kills_x16 = 12;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_kills_x16() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_kills_x16() const {
  return _internal_has_best_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_kills_x16() {
  best_kills_x16_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_best_kills_x16() const {
  return best_kills_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::best_kills_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_kills_x16)
  return _internal_best_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  best_kills_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_kills_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_best_kills_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_kills_x16)
}

// optional uint32 best_assists_x16 = 13;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_assists_x16() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_assists_x16() const {
  return _internal_has_best_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_assists_x16() {
  best_assists_x16_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_best_assists_x16() const {
  return best_assists_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::best_assists_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_assists_x16)
  return _internal_best_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  best_assists_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_assists_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_best_assists_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_assists_x16)
}

// optional uint32 best_gpm_x16 = 14;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_gpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_gpm_x16() const {
  return _internal_has_best_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_gpm_x16() {
  best_gpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_best_gpm_x16() const {
  return best_gpm_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::best_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_gpm_x16)
  return _internal_best_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  best_gpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_gpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_best_gpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_gpm_x16)
}

// optional uint32 best_xpm_x16 = 15;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_xpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_xpm_x16() const {
  return _internal_has_best_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_xpm_x16() {
  best_xpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_best_xpm_x16() const {
  return best_xpm_x16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::best_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_xpm_x16)
  return _internal_best_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  best_xpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_xpm_x16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_best_xpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_xpm_x16)
}

// optional uint32 win_streak = 16;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_win_streak() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_win_streak() const {
  return _internal_has_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::clear_win_streak() {
  win_streak_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_win_streak() const {
  return win_streak_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::win_streak() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.win_streak)
  return _internal_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  win_streak_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_win_streak(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.win_streak)
}

// optional uint32 best_win_streak = 17;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_win_streak() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_win_streak() const {
  return _internal_has_best_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_win_streak() {
  best_win_streak_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_best_win_streak() const {
  return best_win_streak_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::best_win_streak() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_win_streak)
  return _internal_best_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  best_win_streak_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_win_streak(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_best_win_streak(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_win_streak)
}

// optional float fight_score = 18;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_fight_score() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_fight_score() const {
  return _internal_has_fight_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_fight_score() {
  fight_score_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_fight_score() const {
  return fight_score_;
}
inline float CDOTAMatchMetadata_Team_Player::fight_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.fight_score)
  return _internal_fight_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_fight_score(float value) {
  _has_bits_[0] |= 0x00004000u;
  fight_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_fight_score(float value) {
  _internal_set_fight_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.fight_score)
}

// optional float farm_score = 19;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_farm_score() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_farm_score() const {
  return _internal_has_farm_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_farm_score() {
  farm_score_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_farm_score() const {
  return farm_score_;
}
inline float CDOTAMatchMetadata_Team_Player::farm_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.farm_score)
  return _internal_farm_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_farm_score(float value) {
  _has_bits_[0] |= 0x00008000u;
  farm_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_farm_score(float value) {
  _internal_set_farm_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.farm_score)
}

// optional float support_score = 20;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_support_score() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_support_score() const {
  return _internal_has_support_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_support_score() {
  support_score_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_support_score() const {
  return support_score_;
}
inline float CDOTAMatchMetadata_Team_Player::support_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.support_score)
  return _internal_support_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_support_score(float value) {
  _has_bits_[0] |= 0x00010000u;
  support_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_support_score(float value) {
  _internal_set_support_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.support_score)
}

// optional float push_score = 21;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_push_score() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_push_score() const {
  return _internal_has_push_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_push_score() {
  push_score_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_push_score() const {
  return push_score_;
}
inline float CDOTAMatchMetadata_Team_Player::push_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.push_score)
  return _internal_push_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_push_score(float value) {
  _has_bits_[0] |= 0x00020000u;
  push_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_push_score(float value) {
  _internal_set_push_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.push_score)
}

// repeated uint32 level_up_times = 22;
inline int CDOTAMatchMetadata_Team_Player::_internal_level_up_times_size() const {
  return level_up_times_.size();
}
inline int CDOTAMatchMetadata_Team_Player::level_up_times_size() const {
  return _internal_level_up_times_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_level_up_times() {
  level_up_times_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_level_up_times(int index) const {
  return level_up_times_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::level_up_times(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.level_up_times)
  return _internal_level_up_times(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_level_up_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  level_up_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline void CDOTAMatchMetadata_Team_Player::_internal_add_level_up_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  level_up_times_.Add(value);
}
inline void CDOTAMatchMetadata_Team_Player::add_level_up_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_level_up_times(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_Player::_internal_level_up_times() const {
  return level_up_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_Player::level_up_times() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.level_up_times)
  return _internal_level_up_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_Player::_internal_mutable_level_up_times() {
  return &level_up_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_level_up_times() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.level_up_times)
  return _internal_mutable_level_up_times();
}

// repeated float graph_net_worth = 23;
inline int CDOTAMatchMetadata_Team_Player::_internal_graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline int CDOTAMatchMetadata_Team_Player::graph_net_worth_size() const {
  return _internal_graph_net_worth_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team_Player::_internal_graph_net_worth(int index) const {
  return graph_net_worth_.Get(index);
}
inline float CDOTAMatchMetadata_Team_Player::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return _internal_graph_net_worth(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team_Player::_internal_add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
}
inline void CDOTAMatchMetadata_Team_Player::add_graph_net_worth(float value) {
  _internal_add_graph_net_worth(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team_Player::_internal_graph_net_worth() const {
  return graph_net_worth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team_Player::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return _internal_graph_net_worth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team_Player::_internal_mutable_graph_net_worth() {
  return &graph_net_worth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team_Player::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return _internal_mutable_graph_net_worth();
}

// repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
inline int CDOTAMatchMetadata_Team_Player::_internal_inventory_snapshot_size() const {
  return inventory_snapshot_.size();
}
inline int CDOTAMatchMetadata_Team_Player::inventory_snapshot_size() const {
  return _internal_inventory_snapshot_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_inventory_snapshot() {
  inventory_snapshot_.Clear();
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >*
CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return &inventory_snapshot_;
}
inline const ::CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_Player::_internal_inventory_snapshot(int index) const {
  return inventory_snapshot_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_Player::inventory_snapshot(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return _internal_inventory_snapshot(index);
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::_internal_add_inventory_snapshot() {
  return inventory_snapshot_.Add();
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::add_inventory_snapshot() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return _internal_add_inventory_snapshot();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >&
CDOTAMatchMetadata_Team_Player::inventory_snapshot() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_;
}

// optional bool avg_stats_calibrated = 25;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_stats_calibrated() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_stats_calibrated() const {
  return _internal_has_avg_stats_calibrated();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_stats_calibrated() {
  avg_stats_calibrated_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CDOTAMatchMetadata_Team_Player::_internal_avg_stats_calibrated() const {
  return avg_stats_calibrated_;
}
inline bool CDOTAMatchMetadata_Team_Player::avg_stats_calibrated() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
  return _internal_avg_stats_calibrated();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_stats_calibrated(bool value) {
  _has_bits_[0] |= 0x00040000u;
  avg_stats_calibrated_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_stats_calibrated(bool value) {
  _internal_set_avg_stats_calibrated(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
}

// repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
inline int CDOTAMatchMetadata_Team_Player::_internal_auto_style_criteria_size() const {
  return auto_style_criteria_.size();
}
inline int CDOTAMatchMetadata_Team_Player::auto_style_criteria_size() const {
  return _internal_auto_style_criteria_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_auto_style_criteria() {
  auto_style_criteria_.Clear();
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return &auto_style_criteria_;
}
inline const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_Player::_internal_auto_style_criteria(int index) const {
  return auto_style_criteria_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_Player::auto_style_criteria(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return _internal_auto_style_criteria(index);
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::_internal_add_auto_style_criteria() {
  return auto_style_criteria_.Add();
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::add_auto_style_criteria() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return _internal_add_auto_style_criteria();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
CDOTAMatchMetadata_Team_Player::auto_style_criteria() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_;
}

// repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
inline int CDOTAMatchMetadata_Team_Player::_internal_event_data_size() const {
  return event_data_.size();
}
inline int CDOTAMatchMetadata_Team_Player::event_data_size() const {
  return _internal_event_data_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_event_data() {
  event_data_.Clear();
}
inline ::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::mutable_event_data(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >*
CDOTAMatchMetadata_Team_Player::mutable_event_data() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.event_data)
  return &event_data_;
}
inline const ::CDOTAMatchMetadata_Team_EventData& CDOTAMatchMetadata_Team_Player::_internal_event_data(int index) const {
  return event_data_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_EventData& CDOTAMatchMetadata_Team_Player::event_data(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.event_data)
  return _internal_event_data(index);
}
inline ::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::_internal_add_event_data() {
  return event_data_.Add();
}
inline ::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::add_event_data() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.event_data)
  return _internal_add_event_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >&
CDOTAMatchMetadata_Team_Player::event_data() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_;
}

// repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
inline int CDOTAMatchMetadata_Team_Player::_internal_strange_gem_progress_size() const {
  return strange_gem_progress_.size();
}
inline int CDOTAMatchMetadata_Team_Player::strange_gem_progress_size() const {
  return _internal_strange_gem_progress_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_strange_gem_progress() {
  strange_gem_progress_.Clear();
}
inline ::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::mutable_strange_gem_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >*
CDOTAMatchMetadata_Team_Player::mutable_strange_gem_progress() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return &strange_gem_progress_;
}
inline const ::CDOTAMatchMetadata_Team_StrangeGemProgress& CDOTAMatchMetadata_Team_Player::_internal_strange_gem_progress(int index) const {
  return strange_gem_progress_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_StrangeGemProgress& CDOTAMatchMetadata_Team_Player::strange_gem_progress(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return _internal_strange_gem_progress(index);
}
inline ::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::_internal_add_strange_gem_progress() {
  return strange_gem_progress_.Add();
}
inline ::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::add_strange_gem_progress() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return _internal_add_strange_gem_progress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >&
CDOTAMatchMetadata_Team_Player::strange_gem_progress() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_;
}

// optional uint32 hero_xp = 31;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_hero_xp() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_hero_xp() const {
  return _internal_has_hero_xp();
}
inline void CDOTAMatchMetadata_Team_Player::clear_hero_xp() {
  hero_xp_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_hero_xp() const {
  return hero_xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::hero_xp() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.hero_xp)
  return _internal_hero_xp();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_hero_xp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  hero_xp_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_hero_xp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hero_xp(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.hero_xp)
}

// optional uint32 camps_stacked = 32;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_camps_stacked() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CDOTAMatchMetadata_Team_Player::clear_camps_stacked() {
  camps_stacked_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_camps_stacked() const {
  return camps_stacked_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.camps_stacked)
  return _internal_camps_stacked();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_camps_stacked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  camps_stacked_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_camps_stacked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camps_stacked(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.camps_stacked)
}

// repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
inline int CDOTAMatchMetadata_Team_Player::_internal_victory_prediction_size() const {
  return victory_prediction_.size();
}
inline int CDOTAMatchMetadata_Team_Player::victory_prediction_size() const {
  return _internal_victory_prediction_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_victory_prediction() {
  victory_prediction_.Clear();
}
inline ::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::mutable_victory_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >*
CDOTAMatchMetadata_Team_Player::mutable_victory_prediction() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return &victory_prediction_;
}
inline const ::CDOTAMatchMetadata_Team_VictoryPrediction& CDOTAMatchMetadata_Team_Player::_internal_victory_prediction(int index) const {
  return victory_prediction_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_VictoryPrediction& CDOTAMatchMetadata_Team_Player::victory_prediction(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return _internal_victory_prediction(index);
}
inline ::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::_internal_add_victory_prediction() {
  return victory_prediction_.Add();
}
inline ::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::add_victory_prediction() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return _internal_add_victory_prediction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >&
CDOTAMatchMetadata_Team_Player::victory_prediction() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_;
}

// optional uint32 lane_selection_flags = 34;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_lane_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CDOTAMatchMetadata_Team_Player::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_lane_selection_flags() const {
  return lane_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  lane_selection_flags_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.lane_selection_flags)
}

// optional uint32 rampages = 35;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_rampages() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_rampages() const {
  return _internal_has_rampages();
}
inline void CDOTAMatchMetadata_Team_Player::clear_rampages() {
  rampages_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_rampages() const {
  return rampages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::rampages() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.rampages)
  return _internal_rampages();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_rampages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  rampages_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_rampages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rampages(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.rampages)
}

// optional uint32 triple_kills = 36;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_triple_kills() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_triple_kills() const {
  return _internal_has_triple_kills();
}
inline void CDOTAMatchMetadata_Team_Player::clear_triple_kills() {
  triple_kills_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_triple_kills() const {
  return triple_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::triple_kills() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.triple_kills)
  return _internal_triple_kills();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_triple_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  triple_kills_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_triple_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_triple_kills(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.triple_kills)
}

// optional uint32 aegis_snatched = 37;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_aegis_snatched() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_aegis_snatched() const {
  return _internal_has_aegis_snatched();
}
inline void CDOTAMatchMetadata_Team_Player::clear_aegis_snatched() {
  aegis_snatched_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_aegis_snatched() const {
  return aegis_snatched_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::aegis_snatched() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.aegis_snatched)
  return _internal_aegis_snatched();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_aegis_snatched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  aegis_snatched_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_aegis_snatched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_aegis_snatched(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.aegis_snatched)
}

// optional uint32 rapiers_purchased = 38;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_rapiers_purchased() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_rapiers_purchased() const {
  return _internal_has_rapiers_purchased();
}
inline void CDOTAMatchMetadata_Team_Player::clear_rapiers_purchased() {
  rapiers_purchased_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_rapiers_purchased() const {
  return rapiers_purchased_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::rapiers_purchased() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.rapiers_purchased)
  return _internal_rapiers_purchased();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_rapiers_purchased(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  rapiers_purchased_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_rapiers_purchased(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rapiers_purchased(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.rapiers_purchased)
}

// optional uint32 couriers_killed = 39;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_couriers_killed() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_couriers_killed() const {
  return _internal_has_couriers_killed();
}
inline void CDOTAMatchMetadata_Team_Player::clear_couriers_killed() {
  couriers_killed_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_couriers_killed() const {
  return couriers_killed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::couriers_killed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.couriers_killed)
  return _internal_couriers_killed();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_couriers_killed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  couriers_killed_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_couriers_killed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_couriers_killed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.couriers_killed)
}

// optional uint32 net_worth_rank = 40;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_net_worth_rank() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_net_worth_rank() const {
  return _internal_has_net_worth_rank();
}
inline void CDOTAMatchMetadata_Team_Player::clear_net_worth_rank() {
  net_worth_rank_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_net_worth_rank() const {
  return net_worth_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::net_worth_rank() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.net_worth_rank)
  return _internal_net_worth_rank();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_net_worth_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  net_worth_rank_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_net_worth_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_net_worth_rank(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.net_worth_rank)
}

// optional uint32 support_gold_spent = 41;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_support_gold_spent() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_support_gold_spent() const {
  return _internal_has_support_gold_spent();
}
inline void CDOTAMatchMetadata_Team_Player::clear_support_gold_spent() {
  support_gold_spent_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_support_gold_spent() const {
  return support_gold_spent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::support_gold_spent() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.support_gold_spent)
  return _internal_support_gold_spent();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_support_gold_spent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  support_gold_spent_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_support_gold_spent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support_gold_spent(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.support_gold_spent)
}

// optional uint32 observer_wards_placed = 42;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_observer_wards_placed() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_observer_wards_placed() const {
  return _internal_has_observer_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::clear_observer_wards_placed() {
  observer_wards_placed_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_observer_wards_placed() const {
  return observer_wards_placed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::observer_wards_placed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.observer_wards_placed)
  return _internal_observer_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_observer_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  observer_wards_placed_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_observer_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_observer_wards_placed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.observer_wards_placed)
}

// optional uint32 sentry_wards_placed = 43;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_sentry_wards_placed() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_sentry_wards_placed() const {
  return _internal_has_sentry_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::clear_sentry_wards_placed() {
  sentry_wards_placed_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_sentry_wards_placed() const {
  return sentry_wards_placed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::sentry_wards_placed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.sentry_wards_placed)
  return _internal_sentry_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_sentry_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  sentry_wards_placed_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_sentry_wards_placed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sentry_wards_placed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.sentry_wards_placed)
}

// optional uint32 wards_dewarded = 44;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_wards_dewarded() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_wards_dewarded() const {
  return _internal_has_wards_dewarded();
}
inline void CDOTAMatchMetadata_Team_Player::clear_wards_dewarded() {
  wards_dewarded_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_wards_dewarded() const {
  return wards_dewarded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::wards_dewarded() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.wards_dewarded)
  return _internal_wards_dewarded();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_wards_dewarded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  wards_dewarded_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_wards_dewarded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wards_dewarded(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.wards_dewarded)
}

// optional float stun_duration = 45;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_stun_duration() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_stun_duration() const {
  return _internal_has_stun_duration();
}
inline void CDOTAMatchMetadata_Team_Player::clear_stun_duration() {
  stun_duration_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_stun_duration() const {
  return stun_duration_;
}
inline float CDOTAMatchMetadata_Team_Player::stun_duration() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.stun_duration)
  return _internal_stun_duration();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_stun_duration(float value) {
  _has_bits_[1] |= 0x00000001u;
  stun_duration_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_stun_duration(float value) {
  _internal_set_stun_duration(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.stun_duration)
}

// optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_rank_mmr_boost_type() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_rank_mmr_boost_type() const {
  return _internal_has_rank_mmr_boost_type();
}
inline void CDOTAMatchMetadata_Team_Player::clear_rank_mmr_boost_type() {
  rank_mmr_boost_type_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::EDOTAMMRBoostType CDOTAMatchMetadata_Team_Player::_internal_rank_mmr_boost_type() const {
  return static_cast< ::EDOTAMMRBoostType >(rank_mmr_boost_type_);
}
inline ::EDOTAMMRBoostType CDOTAMatchMetadata_Team_Player::rank_mmr_boost_type() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.rank_mmr_boost_type)
  return _internal_rank_mmr_boost_type();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  assert(::EDOTAMMRBoostType_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  rank_mmr_boost_type_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  _internal_set_rank_mmr_boost_type(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.rank_mmr_boost_type)
}

// optional .CDOTAMatchMetadata.Team.GauntletProgress gauntlet_progress = 47;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_gauntlet_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || gauntlet_progress_ != nullptr);
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_gauntlet_progress() const {
  return _internal_has_gauntlet_progress();
}
inline void CDOTAMatchMetadata_Team_Player::clear_gauntlet_progress() {
  if (gauntlet_progress_ != nullptr) gauntlet_progress_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CDOTAMatchMetadata_Team_GauntletProgress& CDOTAMatchMetadata_Team_Player::_internal_gauntlet_progress() const {
  const ::CDOTAMatchMetadata_Team_GauntletProgress* p = gauntlet_progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMatchMetadata_Team_GauntletProgress&>(
      ::_CDOTAMatchMetadata_Team_GauntletProgress_default_instance_);
}
inline const ::CDOTAMatchMetadata_Team_GauntletProgress& CDOTAMatchMetadata_Team_Player::gauntlet_progress() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.gauntlet_progress)
  return _internal_gauntlet_progress();
}
inline void CDOTAMatchMetadata_Team_Player::unsafe_arena_set_allocated_gauntlet_progress(
    ::CDOTAMatchMetadata_Team_GauntletProgress* gauntlet_progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gauntlet_progress_);
  }
  gauntlet_progress_ = gauntlet_progress;
  if (gauntlet_progress) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMatchMetadata.Team.Player.gauntlet_progress)
}
inline ::CDOTAMatchMetadata_Team_GauntletProgress* CDOTAMatchMetadata_Team_Player::release_gauntlet_progress() {
  _has_bits_[0] &= ~0x00000001u;
  ::CDOTAMatchMetadata_Team_GauntletProgress* temp = gauntlet_progress_;
  gauntlet_progress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CDOTAMatchMetadata_Team_GauntletProgress* CDOTAMatchMetadata_Team_Player::unsafe_arena_release_gauntlet_progress() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadata.Team.Player.gauntlet_progress)
  _has_bits_[0] &= ~0x00000001u;
  ::CDOTAMatchMetadata_Team_GauntletProgress* temp = gauntlet_progress_;
  gauntlet_progress_ = nullptr;
  return temp;
}
inline ::CDOTAMatchMetadata_Team_GauntletProgress* CDOTAMatchMetadata_Team_Player::_internal_mutable_gauntlet_progress() {
  _has_bits_[0] |= 0x00000001u;
  if (gauntlet_progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMatchMetadata_Team_GauntletProgress>(GetArena());
    gauntlet_progress_ = p;
  }
  return gauntlet_progress_;
}
inline ::CDOTAMatchMetadata_Team_GauntletProgress* CDOTAMatchMetadata_Team_Player::mutable_gauntlet_progress() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.gauntlet_progress)
  return _internal_mutable_gauntlet_progress();
}
inline void CDOTAMatchMetadata_Team_Player::set_allocated_gauntlet_progress(::CDOTAMatchMetadata_Team_GauntletProgress* gauntlet_progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gauntlet_progress_;
  }
  if (gauntlet_progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gauntlet_progress);
    if (message_arena != submessage_arena) {
      gauntlet_progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauntlet_progress, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gauntlet_progress_ = gauntlet_progress;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadata.Team.Player.gauntlet_progress)
}

// repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
inline int CDOTAMatchMetadata_Team_Player::_internal_contract_progress_size() const {
  return contract_progress_.size();
}
inline int CDOTAMatchMetadata_Team_Player::contract_progress_size() const {
  return _internal_contract_progress_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_contract_progress() {
  contract_progress_.Clear();
}
inline ::CDOTAMatchMetadata_Team_Player_ContractProgress* CDOTAMatchMetadata_Team_Player::mutable_contract_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.contract_progress)
  return contract_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player_ContractProgress >*
CDOTAMatchMetadata_Team_Player::mutable_contract_progress() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.contract_progress)
  return &contract_progress_;
}
inline const ::CDOTAMatchMetadata_Team_Player_ContractProgress& CDOTAMatchMetadata_Team_Player::_internal_contract_progress(int index) const {
  return contract_progress_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_Player_ContractProgress& CDOTAMatchMetadata_Team_Player::contract_progress(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.contract_progress)
  return _internal_contract_progress(index);
}
inline ::CDOTAMatchMetadata_Team_Player_ContractProgress* CDOTAMatchMetadata_Team_Player::_internal_add_contract_progress() {
  return contract_progress_.Add();
}
inline ::CDOTAMatchMetadata_Team_Player_ContractProgress* CDOTAMatchMetadata_Team_Player::add_contract_progress() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.contract_progress)
  return _internal_add_contract_progress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player_ContractProgress >&
CDOTAMatchMetadata_Team_Player::contract_progress() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.contract_progress)
  return contract_progress_;
}

// repeated uint32 guild_ids = 49;
inline int CDOTAMatchMetadata_Team_Player::_internal_guild_ids_size() const {
  return guild_ids_.size();
}
inline int CDOTAMatchMetadata_Team_Player::guild_ids_size() const {
  return _internal_guild_ids_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_guild_ids() {
  guild_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::_internal_guild_ids(int index) const {
  return guild_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team_Player::guild_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.guild_ids)
  return _internal_guild_ids(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_guild_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  guild_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.guild_ids)
}
inline void CDOTAMatchMetadata_Team_Player::_internal_add_guild_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  guild_ids_.Add(value);
}
inline void CDOTAMatchMetadata_Team_Player::add_guild_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_guild_ids(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.guild_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_Player::_internal_guild_ids() const {
  return guild_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team_Player::guild_ids() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.guild_ids)
  return _internal_guild_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_Player::_internal_mutable_guild_ids() {
  return &guild_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_guild_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.guild_ids)
  return _internal_mutable_guild_ids();
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team

// optional uint32 dota_team = 1;
inline bool CDOTAMatchMetadata_Team::_internal_has_dota_team() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_dota_team() const {
  return _internal_has_dota_team();
}
inline void CDOTAMatchMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::_internal_dota_team() const {
  return dota_team_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.dota_team)
  return _internal_dota_team();
}
inline void CDOTAMatchMetadata_Team::_internal_set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dota_team_ = value;
}
inline void CDOTAMatchMetadata_Team::set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dota_team(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.dota_team)
}

// repeated .CDOTAMatchMetadata.Team.Player players = 2;
inline int CDOTAMatchMetadata_Team::_internal_players_size() const {
  return players_.size();
}
inline int CDOTAMatchMetadata_Team::players_size() const {
  return _internal_players_size();
}
inline void CDOTAMatchMetadata_Team::clear_players() {
  players_.Clear();
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >*
CDOTAMatchMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.players)
  return &players_;
}
inline const ::CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.players)
  return _internal_players(index);
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::_internal_add_players() {
  return players_.Add();
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >&
CDOTAMatchMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.players)
  return players_;
}

// repeated float graph_experience = 3;
inline int CDOTAMatchMetadata_Team::_internal_graph_experience_size() const {
  return graph_experience_.size();
}
inline int CDOTAMatchMetadata_Team::graph_experience_size() const {
  return _internal_graph_experience_size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_experience() {
  graph_experience_.Clear();
}
inline float CDOTAMatchMetadata_Team::_internal_graph_experience(int index) const {
  return graph_experience_.Get(index);
}
inline float CDOTAMatchMetadata_Team::graph_experience(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_experience)
  return _internal_graph_experience(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_experience(int index, float value) {
  graph_experience_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_experience)
}
inline void CDOTAMatchMetadata_Team::_internal_add_graph_experience(float value) {
  graph_experience_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_graph_experience(float value) {
  _internal_add_graph_experience(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_experience)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::_internal_graph_experience() const {
  return graph_experience_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_experience() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_experience)
  return _internal_graph_experience();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::_internal_mutable_graph_experience() {
  return &graph_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_experience() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_experience)
  return _internal_mutable_graph_experience();
}

// repeated float graph_gold_earned = 4;
inline int CDOTAMatchMetadata_Team::_internal_graph_gold_earned_size() const {
  return graph_gold_earned_.size();
}
inline int CDOTAMatchMetadata_Team::graph_gold_earned_size() const {
  return _internal_graph_gold_earned_size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_gold_earned() {
  graph_gold_earned_.Clear();
}
inline float CDOTAMatchMetadata_Team::_internal_graph_gold_earned(int index) const {
  return graph_gold_earned_.Get(index);
}
inline float CDOTAMatchMetadata_Team::graph_gold_earned(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_gold_earned)
  return _internal_graph_gold_earned(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_gold_earned(int index, float value) {
  graph_gold_earned_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline void CDOTAMatchMetadata_Team::_internal_add_graph_gold_earned(float value) {
  graph_gold_earned_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_graph_gold_earned(float value) {
  _internal_add_graph_gold_earned(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::_internal_graph_gold_earned() const {
  return graph_gold_earned_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_gold_earned() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_gold_earned)
  return _internal_graph_gold_earned();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::_internal_mutable_graph_gold_earned() {
  return &graph_gold_earned_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_gold_earned() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_gold_earned)
  return _internal_mutable_graph_gold_earned();
}

// repeated float graph_net_worth = 5;
inline int CDOTAMatchMetadata_Team::_internal_graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline int CDOTAMatchMetadata_Team::graph_net_worth_size() const {
  return _internal_graph_net_worth_size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team::_internal_graph_net_worth(int index) const {
  return graph_net_worth_.Get(index);
}
inline float CDOTAMatchMetadata_Team::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_net_worth)
  return _internal_graph_net_worth(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team::_internal_add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_graph_net_worth(float value) {
  _internal_add_graph_net_worth(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_net_worth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::_internal_graph_net_worth() const {
  return graph_net_worth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_net_worth)
  return _internal_graph_net_worth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::_internal_mutable_graph_net_worth() {
  return &graph_net_worth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_net_worth)
  return _internal_mutable_graph_net_worth();
}

// optional bool cm_first_pick = 6;
inline bool CDOTAMatchMetadata_Team::_internal_has_cm_first_pick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_cm_first_pick() const {
  return _internal_has_cm_first_pick();
}
inline void CDOTAMatchMetadata_Team::clear_cm_first_pick() {
  cm_first_pick_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAMatchMetadata_Team::_internal_cm_first_pick() const {
  return cm_first_pick_;
}
inline bool CDOTAMatchMetadata_Team::cm_first_pick() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_first_pick)
  return _internal_cm_first_pick();
}
inline void CDOTAMatchMetadata_Team::_internal_set_cm_first_pick(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cm_first_pick_ = value;
}
inline void CDOTAMatchMetadata_Team::set_cm_first_pick(bool value) {
  _internal_set_cm_first_pick(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_first_pick)
}

// optional uint32 cm_captain_player_id = 7;
inline bool CDOTAMatchMetadata_Team::_internal_has_cm_captain_player_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_cm_captain_player_id() const {
  return _internal_has_cm_captain_player_id();
}
inline void CDOTAMatchMetadata_Team::clear_cm_captain_player_id() {
  cm_captain_player_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::_internal_cm_captain_player_id() const {
  return cm_captain_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::cm_captain_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_captain_player_id)
  return _internal_cm_captain_player_id();
}
inline void CDOTAMatchMetadata_Team::_internal_set_cm_captain_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cm_captain_player_id_ = value;
}
inline void CDOTAMatchMetadata_Team::set_cm_captain_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cm_captain_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_captain_player_id)
}

// repeated uint32 cm_bans = 8;
inline int CDOTAMatchMetadata_Team::_internal_cm_bans_size() const {
  return cm_bans_.size();
}
inline int CDOTAMatchMetadata_Team::cm_bans_size() const {
  return _internal_cm_bans_size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_bans() {
  cm_bans_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::_internal_cm_bans(int index) const {
  return cm_bans_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::cm_bans(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_bans)
  return _internal_cm_bans(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_bans(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cm_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_bans)
}
inline void CDOTAMatchMetadata_Team::_internal_add_cm_bans(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cm_bans_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_cm_bans(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cm_bans(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.cm_bans)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team::_internal_cm_bans() const {
  return cm_bans_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team::cm_bans() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.cm_bans)
  return _internal_cm_bans();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team::_internal_mutable_cm_bans() {
  return &cm_bans_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_bans() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.cm_bans)
  return _internal_mutable_cm_bans();
}

// repeated uint32 cm_picks = 9;
inline int CDOTAMatchMetadata_Team::_internal_cm_picks_size() const {
  return cm_picks_.size();
}
inline int CDOTAMatchMetadata_Team::cm_picks_size() const {
  return _internal_cm_picks_size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_picks() {
  cm_picks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::_internal_cm_picks(int index) const {
  return cm_picks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::cm_picks(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_picks)
  return _internal_cm_picks(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_picks(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cm_picks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_picks)
}
inline void CDOTAMatchMetadata_Team::_internal_add_cm_picks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cm_picks_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_cm_picks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cm_picks(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.cm_picks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team::_internal_cm_picks() const {
  return cm_picks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CDOTAMatchMetadata_Team::cm_picks() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.cm_picks)
  return _internal_cm_picks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team::_internal_mutable_cm_picks() {
  return &cm_picks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_picks() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.cm_picks)
  return _internal_mutable_cm_picks();
}

// optional uint32 cm_penalty = 10;
inline bool CDOTAMatchMetadata_Team::_internal_has_cm_penalty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_cm_penalty() const {
  return _internal_has_cm_penalty();
}
inline void CDOTAMatchMetadata_Team::clear_cm_penalty() {
  cm_penalty_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::_internal_cm_penalty() const {
  return cm_penalty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_Team::cm_penalty() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_penalty)
  return _internal_cm_penalty();
}
inline void CDOTAMatchMetadata_Team::_internal_set_cm_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  cm_penalty_ = value;
}
inline void CDOTAMatchMetadata_Team::set_cm_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cm_penalty(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_penalty)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress

// optional uint32 account_id = 1;
inline bool CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::has_account_id() const {
  return _internal_has_account_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress.account_id)
  return _internal_account_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress.account_id)
}

// optional uint32 progress = 2;
inline bool CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::has_progress() const {
  return _internal_has_progress();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::clear_progress() {
  progress_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::progress() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress.progress)
  return _internal_progress();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  progress_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress.progress)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_GuildChallengeProgress

// optional uint32 guild_id = 1;
inline bool CDOTAMatchMetadata_GuildChallengeProgress::_internal_has_guild_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_guild_id() {
  guild_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::guild_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.guild_id)
  return _internal_guild_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  guild_id_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.guild_id)
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CDOTAMatchMetadata_GuildChallengeProgress::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CDOTAMatchMetadata_GuildChallengeProgress::_internal_event_id() const {
  return static_cast< ::EEvent >(event_id_);
}
inline ::EEvent CDOTAMatchMetadata_GuildChallengeProgress::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.event_id)
  return _internal_event_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  event_id_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.event_id)
}

// optional uint32 challenge_instance_id = 3;
inline bool CDOTAMatchMetadata_GuildChallengeProgress::_internal_has_challenge_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_challenge_instance_id() {
  challenge_instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::_internal_challenge_instance_id() const {
  return challenge_instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::_internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_instance_id_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.challenge_instance_id)
}

// optional uint32 challenge_parameter = 4;
inline bool CDOTAMatchMetadata_GuildChallengeProgress::_internal_has_challenge_parameter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress::has_challenge_parameter() const {
  return _internal_has_challenge_parameter();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_challenge_parameter() {
  challenge_parameter_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::_internal_challenge_parameter() const {
  return challenge_parameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::challenge_parameter() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.challenge_parameter)
  return _internal_challenge_parameter();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::_internal_set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  challenge_parameter_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_parameter(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.challenge_parameter)
}

// optional uint32 challenge_timestamp = 5;
inline bool CDOTAMatchMetadata_GuildChallengeProgress::_internal_has_challenge_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress::has_challenge_timestamp() const {
  return _internal_has_challenge_timestamp();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_challenge_timestamp() {
  challenge_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::_internal_challenge_timestamp() const {
  return challenge_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::challenge_timestamp() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.challenge_timestamp)
  return _internal_challenge_timestamp();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::_internal_set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  challenge_timestamp_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_timestamp(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.challenge_timestamp)
}

// optional uint32 challenge_progress_at_start = 6;
inline bool CDOTAMatchMetadata_GuildChallengeProgress::_internal_has_challenge_progress_at_start() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress::has_challenge_progress_at_start() const {
  return _internal_has_challenge_progress_at_start();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_challenge_progress_at_start() {
  challenge_progress_at_start_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::_internal_challenge_progress_at_start() const {
  return challenge_progress_at_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::challenge_progress_at_start() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.challenge_progress_at_start)
  return _internal_challenge_progress_at_start();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::_internal_set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  challenge_progress_at_start_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_progress_at_start(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.challenge_progress_at_start)
}

// optional uint32 challenge_progress_accumulated = 7;
inline bool CDOTAMatchMetadata_GuildChallengeProgress::_internal_has_challenge_progress_accumulated() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_GuildChallengeProgress::has_challenge_progress_accumulated() const {
  return _internal_has_challenge_progress_accumulated();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_challenge_progress_accumulated() {
  challenge_progress_accumulated_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::_internal_challenge_progress_accumulated() const {
  return challenge_progress_accumulated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata_GuildChallengeProgress::challenge_progress_accumulated() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.challenge_progress_accumulated)
  return _internal_challenge_progress_accumulated();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::_internal_set_challenge_progress_accumulated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  challenge_progress_accumulated_ = value;
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::set_challenge_progress_accumulated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_progress_accumulated(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.GuildChallengeProgress.challenge_progress_accumulated)
}

// repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
inline int CDOTAMatchMetadata_GuildChallengeProgress::_internal_individual_progress_size() const {
  return individual_progress_.size();
}
inline int CDOTAMatchMetadata_GuildChallengeProgress::individual_progress_size() const {
  return _internal_individual_progress_size();
}
inline void CDOTAMatchMetadata_GuildChallengeProgress::clear_individual_progress() {
  individual_progress_.Clear();
}
inline ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* CDOTAMatchMetadata_GuildChallengeProgress::mutable_individual_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.GuildChallengeProgress.individual_progress)
  return individual_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >*
CDOTAMatchMetadata_GuildChallengeProgress::mutable_individual_progress() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.GuildChallengeProgress.individual_progress)
  return &individual_progress_;
}
inline const ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& CDOTAMatchMetadata_GuildChallengeProgress::_internal_individual_progress(int index) const {
  return individual_progress_.Get(index);
}
inline const ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& CDOTAMatchMetadata_GuildChallengeProgress::individual_progress(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.GuildChallengeProgress.individual_progress)
  return _internal_individual_progress(index);
}
inline ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* CDOTAMatchMetadata_GuildChallengeProgress::_internal_add_individual_progress() {
  return individual_progress_.Add();
}
inline ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* CDOTAMatchMetadata_GuildChallengeProgress::add_individual_progress() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.GuildChallengeProgress.individual_progress)
  return _internal_add_individual_progress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >&
CDOTAMatchMetadata_GuildChallengeProgress::individual_progress() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.GuildChallengeProgress.individual_progress)
  return individual_progress_;
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata

// repeated .CDOTAMatchMetadata.Team teams = 1;
inline int CDOTAMatchMetadata::_internal_teams_size() const {
  return teams_.size();
}
inline int CDOTAMatchMetadata::teams_size() const {
  return _internal_teams_size();
}
inline void CDOTAMatchMetadata::clear_teams() {
  teams_.Clear();
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >*
CDOTAMatchMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.teams)
  return &teams_;
}
inline const ::CDOTAMatchMetadata_Team& CDOTAMatchMetadata::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team& CDOTAMatchMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.teams)
  return _internal_teams(index);
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::_internal_add_teams() {
  return teams_.Add();
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.teams)
  return _internal_add_teams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >&
CDOTAMatchMetadata::teams() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.teams)
  return teams_;
}

// repeated .CLobbyTimedRewardDetails item_rewards = 2;
inline int CDOTAMatchMetadata::_internal_item_rewards_size() const {
  return item_rewards_.size();
}
inline int CDOTAMatchMetadata::item_rewards_size() const {
  return _internal_item_rewards_size();
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::mutable_item_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CDOTAMatchMetadata::mutable_item_rewards() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.item_rewards)
  return &item_rewards_;
}
inline const ::CLobbyTimedRewardDetails& CDOTAMatchMetadata::_internal_item_rewards(int index) const {
  return item_rewards_.Get(index);
}
inline const ::CLobbyTimedRewardDetails& CDOTAMatchMetadata::item_rewards(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.item_rewards)
  return _internal_item_rewards(index);
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::_internal_add_item_rewards() {
  return item_rewards_.Add();
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::add_item_rewards() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.item_rewards)
  return _internal_add_item_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CDOTAMatchMetadata::item_rewards() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.item_rewards)
  return item_rewards_;
}

// optional fixed64 lobby_id = 3;
inline bool CDOTAMatchMetadata::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CDOTAMatchMetadata::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata::lobby_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.lobby_id)
  return _internal_lobby_id();
}
inline void CDOTAMatchMetadata::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  lobby_id_ = value;
}
inline void CDOTAMatchMetadata::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.lobby_id)
}

// optional fixed64 report_until_time = 4;
inline bool CDOTAMatchMetadata::_internal_has_report_until_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_report_until_time() const {
  return _internal_has_report_until_time();
}
inline void CDOTAMatchMetadata::clear_report_until_time() {
  report_until_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata::_internal_report_until_time() const {
  return report_until_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTAMatchMetadata::report_until_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.report_until_time)
  return _internal_report_until_time();
}
inline void CDOTAMatchMetadata::_internal_set_report_until_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  report_until_time_ = value;
}
inline void CDOTAMatchMetadata::set_report_until_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_report_until_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.report_until_time)
}

// optional bytes event_game_custom_table = 5;
inline bool CDOTAMatchMetadata::_internal_has_event_game_custom_table() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_event_game_custom_table() const {
  return _internal_has_event_game_custom_table();
}
inline void CDOTAMatchMetadata::clear_event_game_custom_table() {
  event_game_custom_table_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMatchMetadata::event_game_custom_table() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.event_game_custom_table)
  return _internal_event_game_custom_table();
}
inline void CDOTAMatchMetadata::set_event_game_custom_table(const std::string& value) {
  _internal_set_event_game_custom_table(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.event_game_custom_table)
}
inline std::string* CDOTAMatchMetadata::mutable_event_game_custom_table() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.event_game_custom_table)
  return _internal_mutable_event_game_custom_table();
}
inline const std::string& CDOTAMatchMetadata::_internal_event_game_custom_table() const {
  return event_game_custom_table_.Get();
}
inline void CDOTAMatchMetadata::_internal_set_event_game_custom_table(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTAMatchMetadata::set_event_game_custom_table(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTAMatchMetadata.event_game_custom_table)
}
inline void CDOTAMatchMetadata::set_event_game_custom_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTAMatchMetadata.event_game_custom_table)
}
inline void CDOTAMatchMetadata::set_event_game_custom_table(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchMetadata.event_game_custom_table)
}
inline std::string* CDOTAMatchMetadata::_internal_mutable_event_game_custom_table() {
  _has_bits_[0] |= 0x00000001u;
  return event_game_custom_table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTAMatchMetadata::release_event_game_custom_table() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadata.event_game_custom_table)
  if (!_internal_has_event_game_custom_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_game_custom_table_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTAMatchMetadata::set_allocated_event_game_custom_table(std::string* event_game_custom_table) {
  if (event_game_custom_table != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_game_custom_table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_game_custom_table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadata.event_game_custom_table)
}

// optional uint32 primary_event_id = 6;
inline bool CDOTAMatchMetadata::_internal_has_primary_event_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_primary_event_id() const {
  return _internal_has_primary_event_id();
}
inline void CDOTAMatchMetadata::clear_primary_event_id() {
  primary_event_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata::_internal_primary_event_id() const {
  return primary_event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchMetadata::primary_event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.primary_event_id)
  return _internal_primary_event_id();
}
inline void CDOTAMatchMetadata::_internal_set_primary_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  primary_event_id_ = value;
}
inline void CDOTAMatchMetadata::set_primary_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_primary_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.primary_event_id)
}

// repeated .CMsgMatchTips match_tips = 7;
inline int CDOTAMatchMetadata::_internal_match_tips_size() const {
  return match_tips_.size();
}
inline int CDOTAMatchMetadata::match_tips_size() const {
  return _internal_match_tips_size();
}
inline ::CMsgMatchTips* CDOTAMatchMetadata::mutable_match_tips(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.match_tips)
  return match_tips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >*
CDOTAMatchMetadata::mutable_match_tips() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.match_tips)
  return &match_tips_;
}
inline const ::CMsgMatchTips& CDOTAMatchMetadata::_internal_match_tips(int index) const {
  return match_tips_.Get(index);
}
inline const ::CMsgMatchTips& CDOTAMatchMetadata::match_tips(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.match_tips)
  return _internal_match_tips(index);
}
inline ::CMsgMatchTips* CDOTAMatchMetadata::_internal_add_match_tips() {
  return match_tips_.Add();
}
inline ::CMsgMatchTips* CDOTAMatchMetadata::add_match_tips() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.match_tips)
  return _internal_add_match_tips();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >&
CDOTAMatchMetadata::match_tips() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.match_tips)
  return match_tips_;
}

// optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
inline bool CDOTAMatchMetadata::_internal_has_matchmaking_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || matchmaking_stats_ != nullptr);
  return value;
}
inline bool CDOTAMatchMetadata::has_matchmaking_stats() const {
  return _internal_has_matchmaking_stats();
}
inline const ::CMsgMatchMatchmakingStats& CDOTAMatchMetadata::_internal_matchmaking_stats() const {
  const ::CMsgMatchMatchmakingStats* p = matchmaking_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgMatchMatchmakingStats&>(
      ::_CMsgMatchMatchmakingStats_default_instance_);
}
inline const ::CMsgMatchMatchmakingStats& CDOTAMatchMetadata::matchmaking_stats() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.matchmaking_stats)
  return _internal_matchmaking_stats();
}
inline void CDOTAMatchMetadata::unsafe_arena_set_allocated_matchmaking_stats(
    ::CMsgMatchMatchmakingStats* matchmaking_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matchmaking_stats_);
  }
  matchmaking_stats_ = matchmaking_stats;
  if (matchmaking_stats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMatchMetadata.matchmaking_stats)
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::release_matchmaking_stats() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgMatchMatchmakingStats* temp = matchmaking_stats_;
  matchmaking_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::unsafe_arena_release_matchmaking_stats() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadata.matchmaking_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgMatchMatchmakingStats* temp = matchmaking_stats_;
  matchmaking_stats_ = nullptr;
  return temp;
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::_internal_mutable_matchmaking_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (matchmaking_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgMatchMatchmakingStats>(GetArena());
    matchmaking_stats_ = p;
  }
  return matchmaking_stats_;
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::mutable_matchmaking_stats() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.matchmaking_stats)
  return _internal_mutable_matchmaking_stats();
}
inline void CDOTAMatchMetadata::set_allocated_matchmaking_stats(::CMsgMatchMatchmakingStats* matchmaking_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(matchmaking_stats_);
  }
  if (matchmaking_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matchmaking_stats)->GetArena();
    if (message_arena != submessage_arena) {
      matchmaking_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchmaking_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  matchmaking_stats_ = matchmaking_stats;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadata.matchmaking_stats)
}

// optional .CMvpData mvp_data = 9;
inline bool CDOTAMatchMetadata::_internal_has_mvp_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || mvp_data_ != nullptr);
  return value;
}
inline bool CDOTAMatchMetadata::has_mvp_data() const {
  return _internal_has_mvp_data();
}
inline const ::CMvpData& CDOTAMatchMetadata::_internal_mvp_data() const {
  const ::CMvpData* p = mvp_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMvpData&>(
      ::_CMvpData_default_instance_);
}
inline const ::CMvpData& CDOTAMatchMetadata::mvp_data() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.mvp_data)
  return _internal_mvp_data();
}
inline void CDOTAMatchMetadata::unsafe_arena_set_allocated_mvp_data(
    ::CMvpData* mvp_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mvp_data_);
  }
  mvp_data_ = mvp_data;
  if (mvp_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMatchMetadata.mvp_data)
}
inline ::CMvpData* CDOTAMatchMetadata::release_mvp_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMvpData* temp = mvp_data_;
  mvp_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMvpData* CDOTAMatchMetadata::unsafe_arena_release_mvp_data() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadata.mvp_data)
  _has_bits_[0] &= ~0x00000004u;
  ::CMvpData* temp = mvp_data_;
  mvp_data_ = nullptr;
  return temp;
}
inline ::CMvpData* CDOTAMatchMetadata::_internal_mutable_mvp_data() {
  _has_bits_[0] |= 0x00000004u;
  if (mvp_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMvpData>(GetArena());
    mvp_data_ = p;
  }
  return mvp_data_;
}
inline ::CMvpData* CDOTAMatchMetadata::mutable_mvp_data() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.mvp_data)
  return _internal_mutable_mvp_data();
}
inline void CDOTAMatchMetadata::set_allocated_mvp_data(::CMvpData* mvp_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mvp_data_);
  }
  if (mvp_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mvp_data)->GetArena();
    if (message_arena != submessage_arena) {
      mvp_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mvp_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mvp_data_ = mvp_data;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadata.mvp_data)
}

// repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
inline int CDOTAMatchMetadata::_internal_guild_challenge_progress_size() const {
  return guild_challenge_progress_.size();
}
inline int CDOTAMatchMetadata::guild_challenge_progress_size() const {
  return _internal_guild_challenge_progress_size();
}
inline void CDOTAMatchMetadata::clear_guild_challenge_progress() {
  guild_challenge_progress_.Clear();
}
inline ::CDOTAMatchMetadata_GuildChallengeProgress* CDOTAMatchMetadata::mutable_guild_challenge_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.guild_challenge_progress)
  return guild_challenge_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress >*
CDOTAMatchMetadata::mutable_guild_challenge_progress() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.guild_challenge_progress)
  return &guild_challenge_progress_;
}
inline const ::CDOTAMatchMetadata_GuildChallengeProgress& CDOTAMatchMetadata::_internal_guild_challenge_progress(int index) const {
  return guild_challenge_progress_.Get(index);
}
inline const ::CDOTAMatchMetadata_GuildChallengeProgress& CDOTAMatchMetadata::guild_challenge_progress(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.guild_challenge_progress)
  return _internal_guild_challenge_progress(index);
}
inline ::CDOTAMatchMetadata_GuildChallengeProgress* CDOTAMatchMetadata::_internal_add_guild_challenge_progress() {
  return guild_challenge_progress_.Add();
}
inline ::CDOTAMatchMetadata_GuildChallengeProgress* CDOTAMatchMetadata::add_guild_challenge_progress() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.guild_challenge_progress)
  return _internal_add_guild_challenge_progress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_GuildChallengeProgress >&
CDOTAMatchMetadata::guild_challenge_progress() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.guild_challenge_progress)
  return guild_challenge_progress_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_StringName

// optional uint32 id = 1;
inline bool CDOTAMatchPrivateMetadata_StringName::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_StringName::has_id() const {
  return _internal_has_id();
}
inline void CDOTAMatchPrivateMetadata_StringName::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_StringName::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_StringName::id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.StringName.id)
  return _internal_id();
}
inline void CDOTAMatchPrivateMetadata_StringName::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CDOTAMatchPrivateMetadata_StringName::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.StringName.id)
}

// optional string name = 2;
inline bool CDOTAMatchPrivateMetadata_StringName::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_StringName::has_name() const {
  return _internal_has_name();
}
inline void CDOTAMatchPrivateMetadata_StringName::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMatchPrivateMetadata_StringName::name() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.StringName.name)
  return _internal_name();
}
inline void CDOTAMatchPrivateMetadata_StringName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.StringName.name)
}
inline std::string* CDOTAMatchPrivateMetadata_StringName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.StringName.name)
  return _internal_mutable_name();
}
inline const std::string& CDOTAMatchPrivateMetadata_StringName::_internal_name() const {
  return name_.Get();
}
inline void CDOTAMatchPrivateMetadata_StringName::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTAMatchPrivateMetadata_StringName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTAMatchPrivateMetadata.StringName.name)
}
inline void CDOTAMatchPrivateMetadata_StringName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTAMatchPrivateMetadata.StringName.name)
}
inline void CDOTAMatchPrivateMetadata_StringName::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchPrivateMetadata.StringName.name)
}
inline std::string* CDOTAMatchPrivateMetadata_StringName::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTAMatchPrivateMetadata_StringName::release_name() {
  // @@protoc_insertion_point(field_release:CDOTAMatchPrivateMetadata.StringName.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTAMatchPrivateMetadata_StringName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.StringName.name)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget

// optional uint32 hero_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_internal_hero_id() const {
  return hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.hero_id)
  return _internal_hero_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.hero_id)
}

// optional uint32 damage = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_internal_has_damage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::has_damage() const {
  return _internal_has_damage();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::clear_damage() {
  damage_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::damage() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.damage)
  return _internal_damage();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  damage_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.damage)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility

// optional uint32 source_unit_index = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_has_source_unit_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::has_source_unit_index() const {
  return _internal_has_source_unit_index();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::clear_source_unit_index() {
  source_unit_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_source_unit_index() const {
  return source_unit_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::source_unit_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.source_unit_index)
  return _internal_source_unit_index();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  source_unit_index_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source_unit_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.source_unit_index)
}

// optional uint32 ability_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_has_ability_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::clear_ability_id() {
  ability_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_ability_id() const {
  return ability_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ability_id)
  return _internal_ability_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ability_id_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ability_id)
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_by_hero_targets_size() const {
  return by_hero_targets_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::by_hero_targets_size() const {
  return _internal_by_hero_targets_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::clear_by_hero_targets() {
  by_hero_targets_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::mutable_by_hero_targets(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return by_hero_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >*
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::mutable_by_hero_targets() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return &by_hero_targets_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_by_hero_targets(int index) const {
  return by_hero_targets_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::by_hero_targets(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return _internal_by_hero_targets(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_internal_add_by_hero_targets() {
  return by_hero_targets_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::add_by_hero_targets() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return _internal_add_by_hero_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >&
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::by_hero_targets() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return by_hero_targets_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget

// optional uint32 hero_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_internal_hero_id() const {
  return hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget.hero_id)
  return _internal_hero_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget.hero_id)
}

// optional uint32 healing = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_internal_has_healing() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::has_healing() const {
  return _internal_has_healing();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::clear_healing() {
  healing_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_internal_healing() const {
  return healing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::healing() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget.healing)
  return _internal_healing();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  healing_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget.healing)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility

// optional uint32 source_unit_index = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_has_source_unit_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::has_source_unit_index() const {
  return _internal_has_source_unit_index();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::clear_source_unit_index() {
  source_unit_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_source_unit_index() const {
  return source_unit_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::source_unit_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.source_unit_index)
  return _internal_source_unit_index();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  source_unit_index_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::set_source_unit_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source_unit_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.source_unit_index)
}

// optional uint32 ability_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_has_ability_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::clear_ability_id() {
  ability_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_ability_id() const {
  return ability_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ability_id)
  return _internal_ability_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ability_id_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::set_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ability_id)
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_by_hero_targets_size() const {
  return by_hero_targets_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::by_hero_targets_size() const {
  return _internal_by_hero_targets_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::clear_by_hero_targets() {
  by_hero_targets_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::mutable_by_hero_targets(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.by_hero_targets)
  return by_hero_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >*
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::mutable_by_hero_targets() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.by_hero_targets)
  return &by_hero_targets_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_by_hero_targets(int index) const {
  return by_hero_targets_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::by_hero_targets(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.by_hero_targets)
  return _internal_by_hero_targets(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_internal_add_by_hero_targets() {
  return by_hero_targets_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::add_by_hero_targets() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.by_hero_targets)
  return _internal_add_by_hero_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >&
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::by_hero_targets() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.by_hero_targets)
  return by_hero_targets_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment

// optional int32 game_time = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_has_game_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::has_game_time() const {
  return _internal_has_game_time();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_game_time() const {
  return game_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.game_time)
  return _internal_game_time();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_time_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.game_time)
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_damage_by_ability_size() const {
  return damage_by_ability_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::damage_by_ability_size() const {
  return _internal_damage_by_ability_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::clear_damage_by_ability() {
  damage_by_ability_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::mutable_damage_by_ability(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return damage_by_ability_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >*
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::mutable_damage_by_ability() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return &damage_by_ability_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_damage_by_ability(int index) const {
  return damage_by_ability_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::damage_by_ability(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return _internal_damage_by_ability(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_add_damage_by_ability() {
  return damage_by_ability_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::add_damage_by_ability() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return _internal_add_damage_by_ability();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >&
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::damage_by_ability() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return damage_by_ability_;
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_healing_by_ability_size() const {
  return healing_by_ability_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::healing_by_ability_size() const {
  return _internal_healing_by_ability_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::clear_healing_by_ability() {
  healing_by_ability_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::mutable_healing_by_ability(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.healing_by_ability)
  return healing_by_ability_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >*
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::mutable_healing_by_ability() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.healing_by_ability)
  return &healing_by_ability_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_healing_by_ability(int index) const {
  return healing_by_ability_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::healing_by_ability(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.healing_by_ability)
  return _internal_healing_by_ability(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_internal_add_healing_by_ability() {
  return healing_by_ability_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::add_healing_by_ability() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.healing_by_ability)
  return _internal_add_healing_by_ability();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >&
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::healing_by_ability() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.healing_by_ability)
  return healing_by_ability_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget

// optional uint32 hero_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_hero_id() const {
  return hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.hero_id)
  return _internal_hero_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.hero_id)
}

// optional float elapsed_duration = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_has_elapsed_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::has_elapsed_duration() const {
  return _internal_has_elapsed_duration();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::clear_elapsed_duration() {
  elapsed_duration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_elapsed_duration() const {
  return elapsed_duration_;
}
inline float CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::elapsed_duration() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.elapsed_duration)
  return _internal_elapsed_duration();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_set_elapsed_duration(float value) {
  _has_bits_[0] |= 0x00000002u;
  elapsed_duration_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::set_elapsed_duration(float value) {
  _internal_set_elapsed_duration(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.elapsed_duration)
}

// optional bool is_hidden = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_has_is_hidden() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::has_is_hidden() const {
  return _internal_has_is_hidden();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::clear_is_hidden() {
  is_hidden_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_is_hidden() const {
  return is_hidden_;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::is_hidden() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.is_hidden)
  return _internal_is_hidden();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_internal_set_is_hidden(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_hidden_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::set_is_hidden(bool value) {
  _internal_set_is_hidden(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.is_hidden)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_BuffRecord

// optional uint32 buff_ability_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_has_buff_ability_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::has_buff_ability_id() const {
  return _internal_has_buff_ability_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::clear_buff_ability_id() {
  buff_ability_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_buff_ability_id() const {
  return buff_ability_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::buff_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_ability_id)
  return _internal_buff_ability_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_set_buff_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  buff_ability_id_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_ability_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buff_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_ability_id)
}

// optional string buff_modifier_name = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_has_buff_modifier_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::has_buff_modifier_name() const {
  return _internal_has_buff_modifier_name();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::clear_buff_modifier_name() {
  buff_modifier_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::buff_modifier_name() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
  return _internal_buff_modifier_name();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(const std::string& value) {
  _internal_set_buff_modifier_name(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::mutable_buff_modifier_name() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
  return _internal_mutable_buff_modifier_name();
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_buff_modifier_name() const {
  return buff_modifier_name_.Get();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_set_buff_modifier_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_mutable_buff_modifier_name() {
  _has_bits_[0] |= 0x00000001u;
  return buff_modifier_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::release_buff_modifier_name() {
  // @@protoc_insertion_point(field_release:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
  if (!_internal_has_buff_modifier_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buff_modifier_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_allocated_buff_modifier_name(std::string* buff_modifier_name) {
  if (buff_modifier_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buff_modifier_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buff_modifier_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
inline int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_by_hero_targets_size() const {
  return by_hero_targets_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::by_hero_targets_size() const {
  return _internal_by_hero_targets_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::clear_by_hero_targets() {
  by_hero_targets_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::mutable_by_hero_targets(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return by_hero_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >*
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::mutable_by_hero_targets() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return &by_hero_targets_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_by_hero_targets(int index) const {
  return by_hero_targets_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::by_hero_targets(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return _internal_by_hero_targets(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_internal_add_by_hero_targets() {
  return by_hero_targets_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::add_by_hero_targets() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return _internal_add_by_hero_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >&
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::by_hero_targets() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return by_hero_targets_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_GoldReceived

// optional uint32 creep = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_creep() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_creep() const {
  return _internal_has_creep();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_creep() {
  creep_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_creep() const {
  return creep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::creep() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.creep)
  return _internal_creep();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  creep_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_creep(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.creep)
}

// optional uint32 heroes = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_heroes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_heroes() const {
  return _internal_has_heroes();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_heroes() {
  heroes_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_heroes() const {
  return heroes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::heroes() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.heroes)
  return _internal_heroes();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  heroes_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroes(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.heroes)
}

// optional uint32 bounty_runes = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_bounty_runes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_bounty_runes() const {
  return _internal_has_bounty_runes();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_bounty_runes() {
  bounty_runes_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_bounty_runes() const {
  return bounty_runes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::bounty_runes() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.bounty_runes)
  return _internal_bounty_runes();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_bounty_runes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bounty_runes_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_bounty_runes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bounty_runes(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.bounty_runes)
}

// optional uint32 passive = 4;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_passive() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_passive() const {
  return _internal_has_passive();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_passive() {
  passive_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_passive() const {
  return passive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::passive() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.passive)
  return _internal_passive();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_passive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  passive_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_passive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_passive(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.passive)
}

// optional uint32 buildings = 5;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_buildings() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_buildings() const {
  return _internal_has_buildings();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_buildings() {
  buildings_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_buildings() const {
  return buildings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::buildings() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.buildings)
  return _internal_buildings();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_buildings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  buildings_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_buildings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buildings(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.buildings)
}

// optional uint32 abilities = 6;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_abilities() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_abilities() const {
  return _internal_has_abilities();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_abilities() {
  abilities_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_abilities() const {
  return abilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::abilities() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.abilities)
  return _internal_abilities();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_abilities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  abilities_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_abilities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_abilities(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.abilities)
}

// optional uint32 wards = 7;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_wards() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_wards() const {
  return _internal_has_wards();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_wards() {
  wards_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_wards() const {
  return wards_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::wards() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.wards)
  return _internal_wards();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_wards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  wards_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_wards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wards(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.wards)
}

// optional uint32 other = 8;
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_has_other() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::has_other() const {
  return _internal_has_other();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::clear_other() {
  other_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_other() const {
  return other_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::other() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.other)
  return _internal_other();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_internal_set_other(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  other_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::set_other(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_other(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived.other)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_XPReceived

// optional uint32 creep = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_has_creep() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::has_creep() const {
  return _internal_has_creep();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::clear_creep() {
  creep_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_creep() const {
  return creep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::creep() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.creep)
  return _internal_creep();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  creep_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::set_creep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_creep(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.creep)
}

// optional uint32 heroes = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_has_heroes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::has_heroes() const {
  return _internal_has_heroes();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::clear_heroes() {
  heroes_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_heroes() const {
  return heroes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::heroes() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.heroes)
  return _internal_heroes();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  heroes_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::set_heroes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroes(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.heroes)
}

// optional uint32 roshan = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_has_roshan() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::has_roshan() const {
  return _internal_has_roshan();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::clear_roshan() {
  roshan_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_roshan() const {
  return roshan_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::roshan() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.roshan)
  return _internal_roshan();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_set_roshan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  roshan_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::set_roshan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roshan(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.roshan)
}

// optional uint32 tome_of_knowledge = 4;
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_has_tome_of_knowledge() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::has_tome_of_knowledge() const {
  return _internal_has_tome_of_knowledge();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::clear_tome_of_knowledge() {
  tome_of_knowledge_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_tome_of_knowledge() const {
  return tome_of_knowledge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::tome_of_knowledge() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.tome_of_knowledge)
  return _internal_tome_of_knowledge();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_set_tome_of_knowledge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tome_of_knowledge_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::set_tome_of_knowledge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tome_of_knowledge(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.tome_of_knowledge)
}

// optional uint32 outpost = 5;
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_has_outpost() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::has_outpost() const {
  return _internal_has_outpost();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::clear_outpost() {
  outpost_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_outpost() const {
  return outpost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::outpost() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.outpost)
  return _internal_outpost();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_set_outpost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  outpost_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::set_outpost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outpost(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.outpost)
}

// optional uint32 other = 6;
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_has_other() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::has_other() const {
  return _internal_has_other();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::clear_other() {
  other_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_other() const {
  return other_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player_XPReceived::other() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.other)
  return _internal_other();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_internal_set_other(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  other_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::set_other(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_other(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.XPReceived.other)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player

// optional uint32 account_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.account_id)
  return _internal_account_id();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.account_id)
}

// optional uint32 player_slot = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player::_internal_has_player_slot() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player::_internal_player_slot() const {
  return player_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.player_slot)
  return _internal_player_slot();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  player_slot_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_player_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.player_slot)
}

// optional bytes position_stream = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player::_internal_has_position_stream() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_position_stream() const {
  return _internal_has_position_stream();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_position_stream() {
  position_stream_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Player::position_stream() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return _internal_position_stream();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const std::string& value) {
  _internal_set_position_stream(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player::mutable_position_stream() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return _internal_mutable_position_stream();
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Player::_internal_position_stream() const {
  return position_stream_.Get();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_set_position_stream(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  position_stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  position_stream_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  position_stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  position_stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_position_stream() {
  _has_bits_[0] |= 0x00000001u;
  return position_stream_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player::release_position_stream() {
  // @@protoc_insertion_point(field_release:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  if (!_internal_has_position_stream()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return position_stream_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_allocated_position_stream(std::string* position_stream) {
  if (position_stream != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_stream_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position_stream,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_combat_segments_size() const {
  return combat_segments_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::combat_segments_size() const {
  return _internal_combat_segments_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_combat_segments() {
  combat_segments_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* CDOTAMatchPrivateMetadata_Team_Player::mutable_combat_segments(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return combat_segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_combat_segments() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return &combat_segments_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& CDOTAMatchPrivateMetadata_Team_Player::_internal_combat_segments(int index) const {
  return combat_segments_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& CDOTAMatchPrivateMetadata_Team_Player::combat_segments(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return _internal_combat_segments(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* CDOTAMatchPrivateMetadata_Team_Player::_internal_add_combat_segments() {
  return combat_segments_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* CDOTAMatchPrivateMetadata_Team_Player::add_combat_segments() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return _internal_add_combat_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >&
CDOTAMatchPrivateMetadata_Team_Player::combat_segments() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return combat_segments_;
}

// repeated string damage_unit_names = 5;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_damage_unit_names_size() const {
  return damage_unit_names_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::damage_unit_names_size() const {
  return _internal_damage_unit_names_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_damage_unit_names() {
  damage_unit_names_.Clear();
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names() {
  // @@protoc_insertion_point(field_add_mutable:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return _internal_add_damage_unit_names();
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Player::_internal_damage_unit_names(int index) const {
  return damage_unit_names_.Get(index);
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Player::damage_unit_names(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return _internal_damage_unit_names(index);
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player::mutable_damage_unit_names(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return damage_unit_names_.Mutable(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  damage_unit_names_.Mutable(index)->assign(value);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  damage_unit_names_.Mutable(index)->assign(std::move(value));
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  damage_unit_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, const char* value, size_t size) {
  damage_unit_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Player::_internal_add_damage_unit_names() {
  return damage_unit_names_.Add();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(const std::string& value) {
  damage_unit_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(std::string&& value) {
  damage_unit_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  damage_unit_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(const char* value, size_t size) {
  damage_unit_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CDOTAMatchPrivateMetadata_Team_Player::damage_unit_names() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return damage_unit_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CDOTAMatchPrivateMetadata_Team_Player::mutable_damage_unit_names() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return &damage_unit_names_;
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_buff_records_size() const {
  return buff_records_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::buff_records_size() const {
  return _internal_buff_records_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_buff_records() {
  buff_records_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* CDOTAMatchPrivateMetadata_Team_Player::mutable_buff_records(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return buff_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_buff_records() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return &buff_records_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& CDOTAMatchPrivateMetadata_Team_Player::_internal_buff_records(int index) const {
  return buff_records_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& CDOTAMatchPrivateMetadata_Team_Player::buff_records(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return _internal_buff_records(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* CDOTAMatchPrivateMetadata_Team_Player::_internal_add_buff_records() {
  return buff_records_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* CDOTAMatchPrivateMetadata_Team_Player::add_buff_records() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return _internal_add_buff_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >&
CDOTAMatchPrivateMetadata_Team_Player::buff_records() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return buff_records_;
}

// repeated float graph_kills = 7;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_kills_size() const {
  return graph_kills_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_kills_size() const {
  return _internal_graph_kills_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_kills() {
  graph_kills_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_kills(int index) const {
  return graph_kills_.Get(index);
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_kills(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
  return _internal_graph_kills(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_kills(int index, float value) {
  graph_kills_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_add_graph_kills(float value) {
  graph_kills_.Add(value);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_kills(float value) {
  _internal_add_graph_kills(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_kills() const {
  return graph_kills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_kills() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
  return _internal_graph_kills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_graph_kills() {
  return &graph_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_kills() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
  return _internal_mutable_graph_kills();
}

// repeated float graph_deaths = 8;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_deaths_size() const {
  return graph_deaths_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_deaths_size() const {
  return _internal_graph_deaths_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_deaths() {
  graph_deaths_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_deaths(int index) const {
  return graph_deaths_.Get(index);
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_deaths(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
  return _internal_graph_deaths(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_deaths(int index, float value) {
  graph_deaths_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_add_graph_deaths(float value) {
  graph_deaths_.Add(value);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_deaths(float value) {
  _internal_add_graph_deaths(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_deaths() const {
  return graph_deaths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_deaths() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
  return _internal_graph_deaths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_graph_deaths() {
  return &graph_deaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_deaths() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
  return _internal_mutable_graph_deaths();
}

// repeated float graph_assists = 9;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_assists_size() const {
  return graph_assists_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_assists_size() const {
  return _internal_graph_assists_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_assists() {
  graph_assists_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_assists(int index) const {
  return graph_assists_.Get(index);
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_assists(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
  return _internal_graph_assists(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_assists(int index, float value) {
  graph_assists_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_add_graph_assists(float value) {
  graph_assists_.Add(value);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_assists(float value) {
  _internal_add_graph_assists(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_assists() const {
  return graph_assists_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_assists() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
  return _internal_graph_assists();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_graph_assists() {
  return &graph_assists_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_assists() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
  return _internal_mutable_graph_assists();
}

// repeated float graph_lasthits = 10;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_lasthits_size() const {
  return graph_lasthits_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_lasthits_size() const {
  return _internal_graph_lasthits_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_lasthits() {
  graph_lasthits_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_lasthits(int index) const {
  return graph_lasthits_.Get(index);
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_lasthits(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
  return _internal_graph_lasthits(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_lasthits(int index, float value) {
  graph_lasthits_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_add_graph_lasthits(float value) {
  graph_lasthits_.Add(value);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_lasthits(float value) {
  _internal_add_graph_lasthits(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_lasthits() const {
  return graph_lasthits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_lasthits() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
  return _internal_graph_lasthits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_graph_lasthits() {
  return &graph_lasthits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_lasthits() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
  return _internal_mutable_graph_lasthits();
}

// repeated float graph_denies = 11;
inline int CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_denies_size() const {
  return graph_denies_.size();
}
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_denies_size() const {
  return _internal_graph_denies_size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_denies() {
  graph_denies_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_denies(int index) const {
  return graph_denies_.Get(index);
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_denies(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
  return _internal_graph_denies(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_denies(int index, float value) {
  graph_denies_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::_internal_add_graph_denies(float value) {
  graph_denies_.Add(value);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_denies(float value) {
  _internal_add_graph_denies(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::_internal_graph_denies() const {
  return graph_denies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_denies() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
  return _internal_graph_denies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_graph_denies() {
  return &graph_denies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_denies() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
  return _internal_mutable_graph_denies();
}

// optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
inline bool CDOTAMatchPrivateMetadata_Team_Player::_internal_has_gold_received() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gold_received_ != nullptr);
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_gold_received() const {
  return _internal_has_gold_received();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_gold_received() {
  if (gold_received_ != nullptr) gold_received_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& CDOTAMatchPrivateMetadata_Team_Player::_internal_gold_received() const {
  const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* p = gold_received_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived&>(
      ::_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived_default_instance_);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& CDOTAMatchPrivateMetadata_Team_Player::gold_received() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.gold_received)
  return _internal_gold_received();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::unsafe_arena_set_allocated_gold_received(
    ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* gold_received) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gold_received_);
  }
  gold_received_ = gold_received;
  if (gold_received) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMatchPrivateMetadata.Team.Player.gold_received)
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* CDOTAMatchPrivateMetadata_Team_Player::release_gold_received() {
  _has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* temp = gold_received_;
  gold_received_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* CDOTAMatchPrivateMetadata_Team_Player::unsafe_arena_release_gold_received() {
  // @@protoc_insertion_point(field_release:CDOTAMatchPrivateMetadata.Team.Player.gold_received)
  _has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* temp = gold_received_;
  gold_received_ = nullptr;
  return temp;
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_gold_received() {
  _has_bits_[0] |= 0x00000002u;
  if (gold_received_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived>(GetArena());
    gold_received_ = p;
  }
  return gold_received_;
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* CDOTAMatchPrivateMetadata_Team_Player::mutable_gold_received() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.gold_received)
  return _internal_mutable_gold_received();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_allocated_gold_received(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* gold_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gold_received_;
  }
  if (gold_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gold_received);
    if (message_arena != submessage_arena) {
      gold_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gold_received, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gold_received_ = gold_received;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.Team.Player.gold_received)
}

// optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
inline bool CDOTAMatchPrivateMetadata_Team_Player::_internal_has_xp_received() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || xp_received_ != nullptr);
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_xp_received() const {
  return _internal_has_xp_received();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_xp_received() {
  if (xp_received_ != nullptr) xp_received_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived& CDOTAMatchPrivateMetadata_Team_Player::_internal_xp_received() const {
  const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* p = xp_received_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived&>(
      ::_CDOTAMatchPrivateMetadata_Team_Player_XPReceived_default_instance_);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived& CDOTAMatchPrivateMetadata_Team_Player::xp_received() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.xp_received)
  return _internal_xp_received();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::unsafe_arena_set_allocated_xp_received(
    ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* xp_received) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xp_received_);
  }
  xp_received_ = xp_received;
  if (xp_received) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMatchPrivateMetadata.Team.Player.xp_received)
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* CDOTAMatchPrivateMetadata_Team_Player::release_xp_received() {
  _has_bits_[0] &= ~0x00000004u;
  ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* temp = xp_received_;
  xp_received_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* CDOTAMatchPrivateMetadata_Team_Player::unsafe_arena_release_xp_received() {
  // @@protoc_insertion_point(field_release:CDOTAMatchPrivateMetadata.Team.Player.xp_received)
  _has_bits_[0] &= ~0x00000004u;
  ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* temp = xp_received_;
  xp_received_ = nullptr;
  return temp;
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* CDOTAMatchPrivateMetadata_Team_Player::_internal_mutable_xp_received() {
  _has_bits_[0] |= 0x00000004u;
  if (xp_received_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMatchPrivateMetadata_Team_Player_XPReceived>(GetArena());
    xp_received_ = p;
  }
  return xp_received_;
}
inline ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* CDOTAMatchPrivateMetadata_Team_Player::mutable_xp_received() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.xp_received)
  return _internal_mutable_xp_received();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_allocated_xp_received(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* xp_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete xp_received_;
  }
  if (xp_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(xp_received);
    if (message_arena != submessage_arena) {
      xp_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xp_received, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  xp_received_ = xp_received;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.Team.Player.xp_received)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Building

// optional string unit_name = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Building::_internal_has_unit_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_unit_name() const {
  return _internal_has_unit_name();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_unit_name() {
  unit_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Building::unit_name() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return _internal_unit_name();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const std::string& value) {
  _internal_set_unit_name(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Building::mutable_unit_name() {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return _internal_mutable_unit_name();
}
inline const std::string& CDOTAMatchPrivateMetadata_Team_Building::_internal_unit_name() const {
  return unit_name_.Get();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::_internal_set_unit_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Building::_internal_mutable_unit_name() {
  _has_bits_[0] |= 0x00000001u;
  return unit_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTAMatchPrivateMetadata_Team_Building::release_unit_name() {
  // @@protoc_insertion_point(field_release:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  if (!_internal_has_unit_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unit_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_allocated_unit_name(std::string* unit_name) {
  if (unit_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unit_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}

// optional uint32 position_quant_x = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Building::_internal_has_position_quant_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_x() const {
  return _internal_has_position_quant_x();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_x() {
  position_quant_x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Building::_internal_position_quant_x() const {
  return position_quant_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_x() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
  return _internal_position_quant_x();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::_internal_set_position_quant_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  position_quant_x_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_quant_x(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
}

// optional uint32 position_quant_y = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Building::_internal_has_position_quant_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_y() const {
  return _internal_has_position_quant_y();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_y() {
  position_quant_y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Building::_internal_position_quant_y() const {
  return position_quant_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_y() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
  return _internal_position_quant_y();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::_internal_set_position_quant_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  position_quant_y_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_quant_y(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
}

// optional float death_time = 4;
inline bool CDOTAMatchPrivateMetadata_Team_Building::_internal_has_death_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_death_time() const {
  return _internal_has_death_time();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_death_time() {
  death_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CDOTAMatchPrivateMetadata_Team_Building::_internal_death_time() const {
  return death_time_;
}
inline float CDOTAMatchPrivateMetadata_Team_Building::death_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.death_time)
  return _internal_death_time();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::_internal_set_death_time(float value) {
  _has_bits_[0] |= 0x00000008u;
  death_time_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_death_time(float value) {
  _internal_set_death_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.death_time)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team

// optional uint32 dota_team = 1;
inline bool CDOTAMatchPrivateMetadata_Team::_internal_has_dota_team() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchPrivateMetadata_Team::has_dota_team() const {
  return _internal_has_dota_team();
}
inline void CDOTAMatchPrivateMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team::_internal_dota_team() const {
  return dota_team_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTAMatchPrivateMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.dota_team)
  return _internal_dota_team();
}
inline void CDOTAMatchPrivateMetadata_Team::_internal_set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dota_team_ = value;
}
inline void CDOTAMatchPrivateMetadata_Team::set_dota_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dota_team(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.dota_team)
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
inline int CDOTAMatchPrivateMetadata_Team::_internal_players_size() const {
  return players_.size();
}
inline int CDOTAMatchPrivateMetadata_Team::players_size() const {
  return _internal_players_size();
}
inline void CDOTAMatchPrivateMetadata_Team::clear_players() {
  players_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >*
CDOTAMatchPrivateMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.players)
  return &players_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.players)
  return _internal_players(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::_internal_add_players() {
  return players_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >&
CDOTAMatchPrivateMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.players)
  return players_;
}

// repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
inline int CDOTAMatchPrivateMetadata_Team::_internal_buildings_size() const {
  return buildings_.size();
}
inline int CDOTAMatchPrivateMetadata_Team::buildings_size() const {
  return _internal_buildings_size();
}
inline void CDOTAMatchPrivateMetadata_Team::clear_buildings() {
  buildings_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >*
CDOTAMatchPrivateMetadata_Team::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.buildings)
  return &buildings_;
}
inline const ::CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team::_internal_buildings(int index) const {
  return buildings_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.buildings)
  return _internal_buildings(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::_internal_add_buildings() {
  return buildings_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::add_buildings() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.buildings)
  return _internal_add_buildings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >&
CDOTAMatchPrivateMetadata_Team::buildings() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata

// repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
inline int CDOTAMatchPrivateMetadata::_internal_teams_size() const {
  return teams_.size();
}
inline int CDOTAMatchPrivateMetadata::teams_size() const {
  return _internal_teams_size();
}
inline void CDOTAMatchPrivateMetadata::clear_teams() {
  teams_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >*
CDOTAMatchPrivateMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.teams)
  return &teams_;
}
inline const ::CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.teams)
  return _internal_teams(index);
}
inline ::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::_internal_add_teams() {
  return teams_.Add();
}
inline ::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.teams)
  return _internal_add_teams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >&
CDOTAMatchPrivateMetadata::teams() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.teams)
  return teams_;
}

// repeated float graph_win_probability = 2;
inline int CDOTAMatchPrivateMetadata::_internal_graph_win_probability_size() const {
  return graph_win_probability_.size();
}
inline int CDOTAMatchPrivateMetadata::graph_win_probability_size() const {
  return _internal_graph_win_probability_size();
}
inline void CDOTAMatchPrivateMetadata::clear_graph_win_probability() {
  graph_win_probability_.Clear();
}
inline float CDOTAMatchPrivateMetadata::_internal_graph_win_probability(int index) const {
  return graph_win_probability_.Get(index);
}
inline float CDOTAMatchPrivateMetadata::graph_win_probability(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.graph_win_probability)
  return _internal_graph_win_probability(index);
}
inline void CDOTAMatchPrivateMetadata::set_graph_win_probability(int index, float value) {
  graph_win_probability_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.graph_win_probability)
}
inline void CDOTAMatchPrivateMetadata::_internal_add_graph_win_probability(float value) {
  graph_win_probability_.Add(value);
}
inline void CDOTAMatchPrivateMetadata::add_graph_win_probability(float value) {
  _internal_add_graph_win_probability(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.graph_win_probability)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata::_internal_graph_win_probability() const {
  return graph_win_probability_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchPrivateMetadata::graph_win_probability() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.graph_win_probability)
  return _internal_graph_win_probability();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata::_internal_mutable_graph_win_probability() {
  return &graph_win_probability_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchPrivateMetadata::mutable_graph_win_probability() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.graph_win_probability)
  return _internal_mutable_graph_win_probability();
}

// repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
inline int CDOTAMatchPrivateMetadata::_internal_string_names_size() const {
  return string_names_.size();
}
inline int CDOTAMatchPrivateMetadata::string_names_size() const {
  return _internal_string_names_size();
}
inline void CDOTAMatchPrivateMetadata::clear_string_names() {
  string_names_.Clear();
}
inline ::CDOTAMatchPrivateMetadata_StringName* CDOTAMatchPrivateMetadata::mutable_string_names(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.string_names)
  return string_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_StringName >*
CDOTAMatchPrivateMetadata::mutable_string_names() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.string_names)
  return &string_names_;
}
inline const ::CDOTAMatchPrivateMetadata_StringName& CDOTAMatchPrivateMetadata::_internal_string_names(int index) const {
  return string_names_.Get(index);
}
inline const ::CDOTAMatchPrivateMetadata_StringName& CDOTAMatchPrivateMetadata::string_names(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.string_names)
  return _internal_string_names(index);
}
inline ::CDOTAMatchPrivateMetadata_StringName* CDOTAMatchPrivateMetadata::_internal_add_string_names() {
  return string_names_.Add();
}
inline ::CDOTAMatchPrivateMetadata_StringName* CDOTAMatchPrivateMetadata::add_string_names() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.string_names)
  return _internal_add_string_names();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_StringName >&
CDOTAMatchPrivateMetadata::string_names() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.string_names)
  return string_names_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCMatch

// optional .CMsgDOTAMatch match = 1;
inline bool CMsgDOTADPCMatch::_internal_has_match() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || match_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCMatch::has_match() const {
  return _internal_has_match();
}
inline const ::CMsgDOTAMatch& CMsgDOTADPCMatch::_internal_match() const {
  const ::CMsgDOTAMatch* p = match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAMatch&>(
      ::_CMsgDOTAMatch_default_instance_);
}
inline const ::CMsgDOTAMatch& CMsgDOTADPCMatch::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCMatch.match)
  return _internal_match();
}
inline void CMsgDOTADPCMatch::unsafe_arena_set_allocated_match(
    ::CMsgDOTAMatch* match) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_);
  }
  match_ = match;
  if (match) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCMatch.match)
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::release_match() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatch* temp = match_;
  match_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCMatch.match)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatch* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::_internal_mutable_match() {
  _has_bits_[0] |= 0x00000001u;
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAMatch>(GetArena());
    match_ = p;
  }
  return match_;
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::mutable_match() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCMatch.match)
  return _internal_mutable_match();
}
inline void CMsgDOTADPCMatch::set_allocated_match(::CMsgDOTAMatch* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_);
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match)->GetArena();
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCMatch.match)
}

// optional .CDOTAMatchMetadata metadata = 2;
inline bool CMsgDOTADPCMatch::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCMatch::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgDOTADPCMatch::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CDOTAMatchMetadata& CMsgDOTADPCMatch::_internal_metadata() const {
  const ::CDOTAMatchMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMatchMetadata&>(
      ::_CDOTAMatchMetadata_default_instance_);
}
inline const ::CDOTAMatchMetadata& CMsgDOTADPCMatch::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCMatch.metadata)
  return _internal_metadata();
}
inline void CMsgDOTADPCMatch::unsafe_arena_set_allocated_metadata(
    ::CDOTAMatchMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCMatch.metadata)
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::release_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCMatch.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMatchMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCMatch.metadata)
  return _internal_mutable_metadata();
}
inline void CMsgDOTADPCMatch::set_allocated_metadata(::CDOTAMatchMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCMatch.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fmatch_5fmetadata_2eproto
