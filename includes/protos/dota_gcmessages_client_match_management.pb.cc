// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_match_management.proto

#include "dota_gcmessages_client_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgStartFindingMatch::CMsgStartFindingMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_language_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ping_data_(nullptr)
  , client_version_(0u)
  , match_type_(0)

  , team_id_(0u)
  , game_language_enum_(0)

  , region_select_flags_(0u)
  , bot_script_index_(0u)
  , steam_clan_account_id_(0u)
  , solo_queue_(false)
  , is_challenge_match_(false)
  , high_priority_disabled_(false)
  , disable_experimental_gameplay_(false)
  , lane_selection_flags_(0u)
  , custom_game_difficulty_mask_(0u)
  , matchgroups_(4294967295u)
  , game_modes_(4294967295u)
  , bot_difficulty_(3)

  , matchlanguages_(4294967295u){}
struct CMsgStartFindingMatchDefaultTypeInternal {
  constexpr CMsgStartFindingMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStartFindingMatchDefaultTypeInternal() {}
  union {
    CMsgStartFindingMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStartFindingMatchDefaultTypeInternal _CMsgStartFindingMatch_default_instance_;
constexpr CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responsible_party_members_()
  , error_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , debug_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)

  , result_metadata_(0u)
  , legacy_generic_eresult_(2u){}
struct CMsgStartFindingMatchResultDefaultTypeInternal {
  constexpr CMsgStartFindingMatchResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStartFindingMatchResultDefaultTypeInternal() {}
  union {
    CMsgStartFindingMatchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStartFindingMatchResultDefaultTypeInternal _CMsgStartFindingMatchResult_default_instance_;
constexpr CMsgStopFindingMatch::CMsgStopFindingMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accept_cooldown_(false){}
struct CMsgStopFindingMatchDefaultTypeInternal {
  constexpr CMsgStopFindingMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStopFindingMatchDefaultTypeInternal() {}
  union {
    CMsgStopFindingMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStopFindingMatchDefaultTypeInternal _CMsgStopFindingMatch_default_instance_;
constexpr CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_slots_(0u)
  , match_type_(0)

  , matchgroups_(0u)
  , client_version_(0u)
  , language_(0)
{}
struct CMsgPartyBuilderOptionsDefaultTypeInternal {
  constexpr CMsgPartyBuilderOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyBuilderOptionsDefaultTypeInternal() {}
  union {
    CMsgPartyBuilderOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyBuilderOptionsDefaultTypeInternal _CMsgPartyBuilderOptions_default_instance_;
constexpr CMsgReadyUp::CMsgReadyUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hardware_specs_(nullptr)
  , ready_up_key_(PROTOBUF_ULONGLONG(0))
  , state_(0)
{}
struct CMsgReadyUpDefaultTypeInternal {
  constexpr CMsgReadyUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReadyUpDefaultTypeInternal() {}
  union {
    CMsgReadyUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReadyUpDefaultTypeInternal _CMsgReadyUp_default_instance_;
constexpr CMsgReadyUpStatus::CMsgReadyUpStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accepted_ids_()
  , declined_ids_()
  , lobby_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgReadyUpStatusDefaultTypeInternal {
  constexpr CMsgReadyUpStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReadyUpStatusDefaultTypeInternal() {}
  union {
    CMsgReadyUpStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReadyUpStatusDefaultTypeInternal _CMsgReadyUpStatus_default_instance_;
constexpr CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgAbandonCurrentGameDefaultTypeInternal {
  constexpr CMsgAbandonCurrentGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAbandonCurrentGameDefaultTypeInternal() {}
  union {
    CMsgAbandonCurrentGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAbandonCurrentGameDefaultTypeInternal _CMsgAbandonCurrentGame_default_instance_;
constexpr CMsgLobbyScenarioSave::CMsgLobbyScenarioSave(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct CMsgLobbyScenarioSaveDefaultTypeInternal {
  constexpr CMsgLobbyScenarioSaveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyScenarioSaveDefaultTypeInternal() {}
  union {
    CMsgLobbyScenarioSave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyScenarioSaveDefaultTypeInternal _CMsgLobbyScenarioSave_default_instance_;
constexpr CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_details_()
  , requested_hero_ids_()
  , game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pass_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_game_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lan_host_ping_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scenario_save_(nullptr)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , server_region_(0u)
  , game_mode_(0u)
  , cm_pick_(0)

  , bot_difficulty_radiant_(0)

  , allow_cheats_(false)
  , fill_with_bots_(false)
  , intro_mode_(false)
  , allow_spectating_(false)
  , game_version_(0)

  , leagueid_(0u)
  , penalty_level_radiant_(0u)
  , penalty_level_dire_(0u)
  , load_game_id_(0u)
  , series_type_(0u)
  , radiant_series_wins_(0u)
  , dire_series_wins_(0u)
  , custom_difficulty_(0u)
  , custom_game_id_(PROTOBUF_ULONGLONG(0))
  , custom_min_players_(0u)
  , custom_max_players_(0u)
  , allchat_(false)
  , lan_(false)
  , custom_game_penalties_(false)
  , visibility_(0)

  , custom_game_crc_(PROTOBUF_ULONGLONG(0))
  , previous_match_override_(PROTOBUF_ULONGLONG(0))
  , custom_game_timestamp_(0u)
  , pause_setting_(0)

  , bot_radiant_(PROTOBUF_ULONGLONG(0))
  , league_node_id_(0u)
  , bot_difficulty_dire_(0)

  , selection_priority_rules_(0)

  , bot_dire_(PROTOBUF_ULONGLONG(0))
  , dota_tv_delay_(1)
{}
struct CMsgPracticeLobbySetDetailsDefaultTypeInternal {
  constexpr CMsgPracticeLobbySetDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbySetDetailsDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbySetDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbySetDetailsDefaultTypeInternal _CMsgPracticeLobbySetDetails_default_instance_;
constexpr CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , signature_(PROTOBUF_ULONGLONG(0))
  , version_(0){}
struct CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal {
  constexpr CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyCreate_SaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal _CMsgPracticeLobbyCreate_SaveGame_default_instance_;
constexpr CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pass_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lobby_details_(nullptr)
  , save_game_(nullptr)
  , client_version_(0u){}
struct CMsgPracticeLobbyCreateDefaultTypeInternal {
  constexpr CMsgPracticeLobbyCreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyCreateDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyCreateDefaultTypeInternal _CMsgPracticeLobbyCreate_default_instance_;
constexpr CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(0)

  , slot_(0u)
  , bot_difficulty_(0)
{}
struct CMsgPracticeLobbySetTeamSlotDefaultTypeInternal {
  constexpr CMsgPracticeLobbySetTeamSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbySetTeamSlotDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbySetTeamSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbySetTeamSlotDefaultTypeInternal _CMsgPracticeLobbySetTeamSlot_default_instance_;
constexpr CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(0)
{}
struct CMsgPracticeLobbySetCoachDefaultTypeInternal {
  constexpr CMsgPracticeLobbySetCoachDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbySetCoachDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbySetCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbySetCoachDefaultTypeInternal _CMsgPracticeLobbySetCoach_default_instance_;
constexpr CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferred_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preferred_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preferred_language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(0u){}
struct CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal {
  constexpr CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyJoinBroadcastChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_;
constexpr CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(0u){}
struct CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal {
  constexpr CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyCloseBroadcastChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal _CMsgPracticeLobbyCloseBroadcastChannel_default_instance_;
constexpr CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal {
  constexpr CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_;
constexpr CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgPracticeLobbyKickDefaultTypeInternal {
  constexpr CMsgPracticeLobbyKickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyKickDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyKick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyKickDefaultTypeInternal _CMsgPracticeLobbyKick_default_instance_;
constexpr CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgPracticeLobbyKickFromTeamDefaultTypeInternal {
  constexpr CMsgPracticeLobbyKickFromTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyKickFromTeamDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyKickFromTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyKickFromTeamDefaultTypeInternal _CMsgPracticeLobbyKickFromTeam_default_instance_;
constexpr CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPracticeLobbyLeaveDefaultTypeInternal {
  constexpr CMsgPracticeLobbyLeaveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyLeaveDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyLeave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyLeaveDefaultTypeInternal _CMsgPracticeLobbyLeave_default_instance_;
constexpr CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_version_(0u){}
struct CMsgPracticeLobbyLaunchDefaultTypeInternal {
  constexpr CMsgPracticeLobbyLaunchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyLaunchDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyLaunch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyLaunchDefaultTypeInternal _CMsgPracticeLobbyLaunch_default_instance_;
constexpr CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u){}
struct CMsgApplyTeamToPracticeLobbyDefaultTypeInternal {
  constexpr CMsgApplyTeamToPracticeLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyTeamToPracticeLobbyDefaultTypeInternal() {}
  union {
    CMsgApplyTeamToPracticeLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyTeamToPracticeLobbyDefaultTypeInternal _CMsgApplyTeamToPracticeLobby_default_instance_;
constexpr CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClearPracticeLobbyTeamDefaultTypeInternal {
  constexpr CMsgClearPracticeLobbyTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClearPracticeLobbyTeamDefaultTypeInternal() {}
  union {
    CMsgClearPracticeLobbyTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClearPracticeLobbyTeamDefaultTypeInternal _CMsgClearPracticeLobbyTeam_default_instance_;
constexpr CMsgPracticeLobbyList::CMsgPracticeLobbyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pass_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_(0u)
  , game_mode_(0)
{}
struct CMsgPracticeLobbyListDefaultTypeInternal {
  constexpr CMsgPracticeLobbyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyListDefaultTypeInternal _CMsgPracticeLobbyList_default_instance_;
constexpr CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u){}
struct CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal {
  constexpr CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyListResponseEntry_CLobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_;
constexpr CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_game_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lan_host_ping_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_ULONGLONG(0))
  , leader_account_id_(0u)
  , requires_pass_key_(false)
  , friend_present_(false)
  , game_mode_(0)

  , players_(0u)
  , league_id_(0u)
  , max_player_count_(0u)
  , server_region_(0u){}
struct CMsgPracticeLobbyListResponseEntryDefaultTypeInternal {
  constexpr CMsgPracticeLobbyListResponseEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListResponseEntryDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyListResponseEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyListResponseEntryDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_default_instance_;
constexpr CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobbies_(){}
struct CMsgPracticeLobbyListResponseDefaultTypeInternal {
  constexpr CMsgPracticeLobbyListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyListResponseDefaultTypeInternal _CMsgPracticeLobbyListResponse_default_instance_;
constexpr CMsgLobbyList::CMsgLobbyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_region_(0u)
  , game_mode_(0)
{}
struct CMsgLobbyListDefaultTypeInternal {
  constexpr CMsgLobbyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyListDefaultTypeInternal() {}
  union {
    CMsgLobbyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyListDefaultTypeInternal _CMsgLobbyList_default_instance_;
constexpr CMsgLobbyListResponse::CMsgLobbyListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobbies_(){}
struct CMsgLobbyListResponseDefaultTypeInternal {
  constexpr CMsgLobbyListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyListResponseDefaultTypeInternal _CMsgLobbyListResponse_default_instance_;
constexpr CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pass_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , client_version_(0u)
  , custom_game_timestamp_(0u)
  , custom_game_crc_(PROTOBUF_ULONGLONG(0)){}
struct CMsgPracticeLobbyJoinDefaultTypeInternal {
  constexpr CMsgPracticeLobbyJoinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyJoinDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyJoin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyJoinDefaultTypeInternal _CMsgPracticeLobbyJoin_default_instance_;
constexpr CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgPracticeLobbyJoinResponseDefaultTypeInternal {
  constexpr CMsgPracticeLobbyJoinResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyJoinResponseDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyJoinResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPracticeLobbyJoinResponseDefaultTypeInternal _CMsgPracticeLobbyJoinResponse_default_instance_;
constexpr CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friends_(){}
struct CMsgFriendPracticeLobbyListRequestDefaultTypeInternal {
  constexpr CMsgFriendPracticeLobbyListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFriendPracticeLobbyListRequestDefaultTypeInternal() {}
  union {
    CMsgFriendPracticeLobbyListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFriendPracticeLobbyListRequestDefaultTypeInternal _CMsgFriendPracticeLobbyListRequest_default_instance_;
constexpr CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobbies_(){}
struct CMsgFriendPracticeLobbyListResponseDefaultTypeInternal {
  constexpr CMsgFriendPracticeLobbyListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFriendPracticeLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgFriendPracticeLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFriendPracticeLobbyListResponseDefaultTypeInternal _CMsgFriendPracticeLobbyListResponse_default_instance_;
constexpr CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_region_(0u){}
struct CMsgJoinableCustomGameModesRequestDefaultTypeInternal {
  constexpr CMsgJoinableCustomGameModesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJoinableCustomGameModesRequestDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomGameModesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJoinableCustomGameModesRequestDefaultTypeInternal _CMsgJoinableCustomGameModesRequest_default_instance_;
constexpr CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_game_id_(PROTOBUF_ULONGLONG(0))
  , lobby_count_(0u)
  , player_count_(0u){}
struct CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal {
  constexpr CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomGameModesResponseEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal _CMsgJoinableCustomGameModesResponseEntry_default_instance_;
constexpr CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_modes_(){}
struct CMsgJoinableCustomGameModesResponseDefaultTypeInternal {
  constexpr CMsgJoinableCustomGameModesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJoinableCustomGameModesResponseDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomGameModesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJoinableCustomGameModesResponseDefaultTypeInternal _CMsgJoinableCustomGameModesResponse_default_instance_;
constexpr CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_game_id_(PROTOBUF_ULONGLONG(0))
  , server_region_(0u){}
struct CMsgJoinableCustomLobbiesRequestDefaultTypeInternal {
  constexpr CMsgJoinableCustomLobbiesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJoinableCustomLobbiesRequestDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomLobbiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJoinableCustomLobbiesRequestDefaultTypeInternal _CMsgJoinableCustomLobbiesRequest_default_instance_;
constexpr CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leader_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lan_host_ping_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , custom_game_id_(PROTOBUF_ULONGLONG(0))
  , member_count_(0u)
  , leader_account_id_(0u)
  , max_player_count_(0u)
  , server_region_(0u)
  , has_pass_key_(false){}
struct CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal {
  constexpr CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomLobbiesResponseEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal _CMsgJoinableCustomLobbiesResponseEntry_default_instance_;
constexpr CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobbies_(){}
struct CMsgJoinableCustomLobbiesResponseDefaultTypeInternal {
  constexpr CMsgJoinableCustomLobbiesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJoinableCustomLobbiesResponseDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomLobbiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJoinableCustomLobbiesResponseDefaultTypeInternal _CMsgJoinableCustomLobbiesResponse_default_instance_;
constexpr CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_region_(0u)
  , ping_(0u)
  , region_code_(0u){}
struct CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal {
  constexpr CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal() {}
  union {
    CMsgQuickJoinCustomLobby_LegacyRegionPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal _CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_;
constexpr CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : legacy_region_pings_()
  , create_lobby_details_(nullptr)
  , ping_data_(nullptr)
  , custom_game_id_(PROTOBUF_ULONGLONG(0))
  , legacy_server_region_(0u)
  , client_version_(0u)
  , allow_any_map_(false){}
struct CMsgQuickJoinCustomLobbyDefaultTypeInternal {
  constexpr CMsgQuickJoinCustomLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuickJoinCustomLobbyDefaultTypeInternal() {}
  union {
    CMsgQuickJoinCustomLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuickJoinCustomLobbyDefaultTypeInternal _CMsgQuickJoinCustomLobby_default_instance_;
constexpr CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal {
  constexpr CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal() {}
  union {
    CMsgQuickJoinCustomLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal _CMsgQuickJoinCustomLobbyResponse_default_instance_;
constexpr CMsgBotGameCreate::CMsgBotGameCreate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_version_(0u)
  , difficulty_radiant_(0)

  , team_(0)

  , game_mode_(0u)
  , difficulty_dire_(0)
{}
struct CMsgBotGameCreateDefaultTypeInternal {
  constexpr CMsgBotGameCreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotGameCreateDefaultTypeInternal() {}
  union {
    CMsgBotGameCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotGameCreateDefaultTypeInternal _CMsgBotGameCreate_default_instance_;
constexpr CMsgCustomGameCreate::CMsgCustomGameCreate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_version_(0u)
  , difficulty_(0u)
  , custom_game_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgCustomGameCreateDefaultTypeInternal {
  constexpr CMsgCustomGameCreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCustomGameCreateDefaultTypeInternal() {}
  union {
    CMsgCustomGameCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCustomGameCreateDefaultTypeInternal _CMsgCustomGameCreate_default_instance_;
constexpr CMsgEventGameCreate::CMsgEventGameCreate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_version_(0u)
  , difficulty_(0u)
  , custom_game_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgEventGameCreateDefaultTypeInternal {
  constexpr CMsgEventGameCreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgEventGameCreateDefaultTypeInternal() {}
  union {
    CMsgEventGameCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgEventGameCreateDefaultTypeInternal _CMsgEventGameCreate_default_instance_;
constexpr CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wants_coach_(false){}
struct CMsgDOTAPartyMemberSetCoachDefaultTypeInternal {
  constexpr CMsgDOTAPartyMemberSetCoachDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPartyMemberSetCoachDefaultTypeInternal() {}
  union {
    CMsgDOTAPartyMemberSetCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPartyMemberSetCoachDefaultTypeInternal _CMsgDOTAPartyMemberSetCoach_default_instance_;
constexpr CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_leader_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTASetGroupLeaderDefaultTypeInternal {
  constexpr CMsgDOTASetGroupLeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASetGroupLeaderDefaultTypeInternal() {}
  union {
    CMsgDOTASetGroupLeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASetGroupLeaderDefaultTypeInternal _CMsgDOTASetGroupLeader_default_instance_;
constexpr CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invited_steamids_()
  , invited_groupids_(){}
struct CMsgDOTACancelGroupInvitesDefaultTypeInternal {
  constexpr CMsgDOTACancelGroupInvitesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTACancelGroupInvitesDefaultTypeInternal() {}
  union {
    CMsgDOTACancelGroupInvites _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTACancelGroupInvitesDefaultTypeInternal _CMsgDOTACancelGroupInvites_default_instance_;
constexpr CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : open_(false){}
struct CMsgDOTASetGroupOpenStatusDefaultTypeInternal {
  constexpr CMsgDOTASetGroupOpenStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASetGroupOpenStatusDefaultTypeInternal() {}
  union {
    CMsgDOTASetGroupOpenStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASetGroupOpenStatusDefaultTypeInternal _CMsgDOTASetGroupOpenStatus_default_instance_;
constexpr CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_group_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAGroupMergeInviteDefaultTypeInternal {
  constexpr CMsgDOTAGroupMergeInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAGroupMergeInviteDefaultTypeInternal() {}
  union {
    CMsgDOTAGroupMergeInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAGroupMergeInviteDefaultTypeInternal _CMsgDOTAGroupMergeInvite_default_instance_;
constexpr CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : initiator_group_id_(PROTOBUF_ULONGLONG(0))
  , accept_(false){}
struct CMsgDOTAGroupMergeResponseDefaultTypeInternal {
  constexpr CMsgDOTAGroupMergeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAGroupMergeResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAGroupMergeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAGroupMergeResponseDefaultTypeInternal _CMsgDOTAGroupMergeResponse_default_instance_;
constexpr CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAGroupMergeReplyDefaultTypeInternal {
  constexpr CMsgDOTAGroupMergeReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAGroupMergeReplyDefaultTypeInternal() {}
  union {
    CMsgDOTAGroupMergeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAGroupMergeReplyDefaultTypeInternal _CMsgDOTAGroupMergeReply_default_instance_;
constexpr CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , team_id_(0u){}
struct CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal {
  constexpr CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyGameDetails_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal _CMsgSpectatorLobbyGameDetails_Team_default_instance_;
constexpr CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stream_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , radiant_team_(nullptr)
  , dire_team_(nullptr)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , language_(0u)
  , league_id_(0u)
  , series_type_(0u)
  , series_game_(0u){}
struct CMsgSpectatorLobbyGameDetailsDefaultTypeInternal {
  constexpr CMsgSpectatorLobbyGameDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyGameDetailsDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyGameDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpectatorLobbyGameDetailsDefaultTypeInternal _CMsgSpectatorLobbyGameDetails_default_instance_;
constexpr CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pass_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_details_(nullptr)
  , lobby_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSetSpectatorLobbyDetailsDefaultTypeInternal {
  constexpr CMsgSetSpectatorLobbyDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetSpectatorLobbyDetailsDefaultTypeInternal() {}
  union {
    CMsgSetSpectatorLobbyDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetSpectatorLobbyDetailsDefaultTypeInternal _CMsgSetSpectatorLobbyDetails_default_instance_;
constexpr CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_(nullptr)
  , client_version_(0u){}
struct CMsgCreateSpectatorLobbyDefaultTypeInternal {
  constexpr CMsgCreateSpectatorLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCreateSpectatorLobbyDefaultTypeInternal() {}
  union {
    CMsgCreateSpectatorLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCreateSpectatorLobbyDefaultTypeInternal _CMsgCreateSpectatorLobby_default_instance_;
constexpr CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgSpectatorLobbyListDefaultTypeInternal {
  constexpr CMsgSpectatorLobbyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyListDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpectatorLobbyListDefaultTypeInternal _CMsgSpectatorLobbyList_default_instance_;
constexpr CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_details_(nullptr)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , requires_pass_key_(false)
  , leader_account_id_(0u)
  , member_count_(0u){}
struct CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal {
  constexpr CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyListResponse_SpectatorLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_;
constexpr CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobbies_(){}
struct CMsgSpectatorLobbyListResponseDefaultTypeInternal {
  constexpr CMsgSpectatorLobbyListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpectatorLobbyListResponseDefaultTypeInternal _CMsgSpectatorLobbyListResponse_default_instance_;
constexpr CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal {
  constexpr CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestSteamDatagramTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal _CMsgClientToGCRequestSteamDatagramTicket_default_instance_;
constexpr CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal {
  constexpr CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestSteamDatagramTicketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal _CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_;
constexpr CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : legacy_extra_fields_()
  , legacy_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialized_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_authorized_steam_id_(PROTOBUF_ULONGLONG(0))
  , legacy_time_expiry_(0u)
  , legacy_authorized_public_ip_(0u)
  , legacy_gameserver_steam_id_(PROTOBUF_ULONGLONG(0))
  , legacy_gameserver_net_id_(PROTOBUF_ULONGLONG(0))
  , legacy_app_id_(0u){}
struct CMsgGCToClientSteamDatagramTicketDefaultTypeInternal {
  constexpr CMsgGCToClientSteamDatagramTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientSteamDatagramTicketDefaultTypeInternal() {}
  union {
    CMsgGCToClientSteamDatagramTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientSteamDatagramTicketDefaultTypeInternal _CMsgGCToClientSteamDatagramTicket_default_instance_;
constexpr CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToClientRequestLaneSelectionDefaultTypeInternal {
  constexpr CMsgGCToClientRequestLaneSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientRequestLaneSelectionDefaultTypeInternal() {}
  union {
    CMsgGCToClientRequestLaneSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientRequestLaneSelectionDefaultTypeInternal _CMsgGCToClientRequestLaneSelection_default_instance_;
constexpr CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_selection_flags_(0u)
  , high_priority_disabled_(false){}
struct CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal {
  constexpr CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientRequestLaneSelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal _CMsgGCToClientRequestLaneSelectionResponse_default_instance_;
constexpr CMsgGCToClientRequestMMInfo::CMsgGCToClientRequestMMInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToClientRequestMMInfoDefaultTypeInternal {
  constexpr CMsgGCToClientRequestMMInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientRequestMMInfoDefaultTypeInternal() {}
  union {
    CMsgGCToClientRequestMMInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientRequestMMInfoDefaultTypeInternal _CMsgGCToClientRequestMMInfo_default_instance_;
constexpr CMsgClientToGCMMInfo::CMsgClientToGCMMInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_selection_flags_(0u)
  , high_priority_disabled_(false){}
struct CMsgClientToGCMMInfoDefaultTypeInternal {
  constexpr CMsgClientToGCMMInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCMMInfoDefaultTypeInternal() {}
  union {
    CMsgClientToGCMMInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCMMInfoDefaultTypeInternal _CMsgClientToGCMMInfo_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[65];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, key_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, matchgroups_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, game_modes_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, match_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, matchlanguages_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, game_language_enum_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, game_language_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, ping_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, region_select_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, solo_queue_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, bot_script_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, steam_clan_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, high_priority_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, disable_experimental_gameplay_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, custom_game_difficulty_mask_),
  0,
  16,
  3,
  17,
  18,
  4,
  19,
  5,
  6,
  1,
  2,
  7,
  10,
  8,
  9,
  11,
  14,
  12,
  13,
  15,
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, legacy_generic_eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, error_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, debug_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, responsible_party_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, result_metadata_),
  4,
  2,
  0,
  1,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgStopFindingMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStopFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStopFindingMatch, accept_cooldown_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, additional_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, match_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, matchgroups_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, language_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, state_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, ready_up_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, hardware_specs_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, accepted_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, declined_ids_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAbandonCurrentGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, game_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, team_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, cm_pick_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, fill_with_bots_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, intro_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, allow_spectating_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, game_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, leagueid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, penalty_level_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, penalty_level_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, load_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, radiant_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, dire_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, allchat_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, dota_tv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, lan_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_min_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_max_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, visibility_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, previous_match_override_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, pause_setting_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, bot_difficulty_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, bot_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, bot_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, selection_priority_rules_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, custom_game_penalties_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, requested_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, scenario_save_),
  6,
  0,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  1,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  27,
  40,
  28,
  2,
  3,
  23,
  24,
  25,
  26,
  30,
  31,
  33,
  32,
  34,
  37,
  35,
  39,
  38,
  29,
  4,
  36,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, data_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, signature_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, lobby_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, save_game_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, bot_difficulty_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetCoach, team_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, preferred_description_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, preferred_country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, preferred_language_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCloseBroadcastChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCloseBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCloseBroadcastChannel, channel_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKick, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKickFromTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKickFromTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKickFromTeam, account_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLaunch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLaunch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLaunch, client_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyTeamToPracticeLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyTeamToPracticeLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyTeamToPracticeLobby, team_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClearPracticeLobbyTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, game_mode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, members_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, friend_present_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, max_player_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, lan_host_ping_location_),
  4,
  ~0u,
  6,
  5,
  0,
  1,
  8,
  7,
  9,
  2,
  11,
  12,
  10,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponse, lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, game_mode_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyListResponse, lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, custom_game_timestamp_),
  1,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinResponse, result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListRequest, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListResponse, lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesRequest, server_region_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, lobby_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, player_count_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponse, game_modes_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, custom_game_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, lobby_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, member_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, leader_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, max_player_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, has_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, lan_host_ping_location_),
  4,
  5,
  0,
  6,
  7,
  1,
  2,
  8,
  9,
  10,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponse, lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, region_code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, legacy_server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, create_lobby_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, allow_any_map_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, legacy_region_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, ping_data_),
  3,
  2,
  4,
  0,
  5,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobbyResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, difficulty_dire_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameCreate, custom_game_id_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgEventGameCreate, custom_game_id_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPartyMemberSetCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPartyMemberSetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPartyMemberSetCoach, wants_coach_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupLeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupLeader, new_leader_steamid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACancelGroupInvites, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACancelGroupInvites, invited_steamids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACancelGroupInvites, invited_groupids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupOpenStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupOpenStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupOpenStatus, open_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeInvite, other_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, initiator_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, accept_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeReply, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, team_logo_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, language_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, stream_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, stream_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, series_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, radiant_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, dire_team_),
  6,
  4,
  5,
  0,
  1,
  7,
  8,
  9,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, lobby_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, game_details_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, details_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, game_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, member_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, game_details_),
  2,
  0,
  3,
  4,
  5,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse, lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicket, server_steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, serialized_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, message_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_time_expiry_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_authorized_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_authorized_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_gameserver_net_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_signature_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, legacy_extra_fields_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, serialized_ticket_),
  3,
  2,
  4,
  5,
  6,
  0,
  7,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, high_priority_disabled_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestMMInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, high_priority_disabled_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::CMsgStartFindingMatch)},
  { 45, 56, sizeof(::CMsgStartFindingMatchResult)},
  { 62, 68, sizeof(::CMsgStopFindingMatch)},
  { 69, 79, sizeof(::CMsgPartyBuilderOptions)},
  { 84, 92, sizeof(::CMsgReadyUp)},
  { 95, 103, sizeof(::CMsgReadyUpStatus)},
  { 106, -1, sizeof(::CMsgAbandonCurrentGame)},
  { 111, 118, sizeof(::CMsgLobbyScenarioSave)},
  { 120, 168, sizeof(::CMsgPracticeLobbySetDetails)},
  { 211, 220, sizeof(::CMsgPracticeLobbyCreate_SaveGame)},
  { 224, 234, sizeof(::CMsgPracticeLobbyCreate)},
  { 239, 247, sizeof(::CMsgPracticeLobbySetTeamSlot)},
  { 250, 256, sizeof(::CMsgPracticeLobbySetCoach)},
  { 257, 266, sizeof(::CMsgPracticeLobbyJoinBroadcastChannel)},
  { 270, 276, sizeof(::CMsgPracticeLobbyCloseBroadcastChannel)},
  { 277, -1, sizeof(::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)},
  { 282, 288, sizeof(::CMsgPracticeLobbyKick)},
  { 289, 295, sizeof(::CMsgPracticeLobbyKickFromTeam)},
  { 296, -1, sizeof(::CMsgPracticeLobbyLeave)},
  { 301, 307, sizeof(::CMsgPracticeLobbyLaunch)},
  { 308, 314, sizeof(::CMsgApplyTeamToPracticeLobby)},
  { 315, -1, sizeof(::CMsgClearPracticeLobbyTeam)},
  { 320, 328, sizeof(::CMsgPracticeLobbyList)},
  { 331, 338, sizeof(::CMsgPracticeLobbyListResponseEntry_CLobbyMember)},
  { 340, 359, sizeof(::CMsgPracticeLobbyListResponseEntry)},
  { 373, -1, sizeof(::CMsgPracticeLobbyListResponse)},
  { 379, 386, sizeof(::CMsgLobbyList)},
  { 388, -1, sizeof(::CMsgLobbyListResponse)},
  { 394, 404, sizeof(::CMsgPracticeLobbyJoin)},
  { 409, 415, sizeof(::CMsgPracticeLobbyJoinResponse)},
  { 416, -1, sizeof(::CMsgFriendPracticeLobbyListRequest)},
  { 422, -1, sizeof(::CMsgFriendPracticeLobbyListResponse)},
  { 428, 434, sizeof(::CMsgJoinableCustomGameModesRequest)},
  { 435, 443, sizeof(::CMsgJoinableCustomGameModesResponseEntry)},
  { 446, -1, sizeof(::CMsgJoinableCustomGameModesResponse)},
  { 452, 459, sizeof(::CMsgJoinableCustomLobbiesRequest)},
  { 461, 477, sizeof(::CMsgJoinableCustomLobbiesResponseEntry)},
  { 488, -1, sizeof(::CMsgJoinableCustomLobbiesResponse)},
  { 494, 502, sizeof(::CMsgQuickJoinCustomLobby_LegacyRegionPing)},
  { 505, 517, sizeof(::CMsgQuickJoinCustomLobby)},
  { 524, 530, sizeof(::CMsgQuickJoinCustomLobbyResponse)},
  { 531, 542, sizeof(::CMsgBotGameCreate)},
  { 548, 559, sizeof(::CMsgCustomGameCreate)},
  { 565, 576, sizeof(::CMsgEventGameCreate)},
  { 582, 588, sizeof(::CMsgDOTAPartyMemberSetCoach)},
  { 589, 595, sizeof(::CMsgDOTASetGroupLeader)},
  { 596, -1, sizeof(::CMsgDOTACancelGroupInvites)},
  { 603, 609, sizeof(::CMsgDOTASetGroupOpenStatus)},
  { 610, 616, sizeof(::CMsgDOTAGroupMergeInvite)},
  { 617, 624, sizeof(::CMsgDOTAGroupMergeResponse)},
  { 626, 632, sizeof(::CMsgDOTAGroupMergeReply)},
  { 633, 641, sizeof(::CMsgSpectatorLobbyGameDetails_Team)},
  { 644, 659, sizeof(::CMsgSpectatorLobbyGameDetails)},
  { 669, 678, sizeof(::CMsgSetSpectatorLobbyDetails)},
  { 682, 689, sizeof(::CMsgCreateSpectatorLobby)},
  { 691, -1, sizeof(::CMsgSpectatorLobbyList)},
  { 696, 707, sizeof(::CMsgSpectatorLobbyListResponse_SpectatorLobby)},
  { 713, -1, sizeof(::CMsgSpectatorLobbyListResponse)},
  { 719, 725, sizeof(::CMsgClientToGCRequestSteamDatagramTicket)},
  { 726, 733, sizeof(::CMsgClientToGCRequestSteamDatagramTicketResponse)},
  { 735, 749, sizeof(::CMsgGCToClientSteamDatagramTicket)},
  { 758, -1, sizeof(::CMsgGCToClientRequestLaneSelection)},
  { 763, 770, sizeof(::CMsgGCToClientRequestLaneSelectionResponse)},
  { 772, -1, sizeof(::CMsgGCToClientRequestMMInfo)},
  { 777, 784, sizeof(::CMsgClientToGCMMInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStartFindingMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStartFindingMatchResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStopFindingMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyBuilderOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReadyUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReadyUpStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAbandonCurrentGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyScenarioSave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbySetDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyCreate_SaveGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbySetTeamSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbySetCoach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyJoinBroadcastChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyCloseBroadcastChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyKick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyKickFromTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyLeave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyLaunch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyTeamToPracticeLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClearPracticeLobbyTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyListResponseEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyJoin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPracticeLobbyJoinResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFriendPracticeLobbyListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFriendPracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJoinableCustomGameModesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJoinableCustomGameModesResponseEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJoinableCustomGameModesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJoinableCustomLobbiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJoinableCustomLobbiesResponseEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJoinableCustomLobbiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuickJoinCustomLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuickJoinCustomLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotGameCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCustomGameCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgEventGameCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPartyMemberSetCoach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASetGroupLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTACancelGroupInvites_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASetGroupOpenStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAGroupMergeInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAGroupMergeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAGroupMergeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpectatorLobbyGameDetails_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpectatorLobbyGameDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetSpectatorLobbyDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCreateSpectatorLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpectatorLobbyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpectatorLobbyListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestSteamDatagramTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientSteamDatagramTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientRequestLaneSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientRequestLaneSelectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientRequestMMInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCMMInfo_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-dota_gcmessages_client_match_managemen"
  "t.proto\032\023steammessages.proto\032\027dota_share"
  "d_enums.proto\032\027dota_client_enums.proto\032\025"
  "base_gcmessages.proto\032-dota_gcmessages_c"
  "ommon_match_management.proto\"\277\005\n\025CMsgSta"
  "rtFindingMatch\022\013\n\003key\030\001 \001(\t\022\037\n\013matchgrou"
  "ps\030\002 \001(\r:\n4294967295\022\026\n\016client_version\030\003"
  " \001(\r\022\036\n\ngame_modes\030\004 \001(\r:\n4294967295\022\?\n\016"
  "bot_difficulty\030\005 \001(\0162\022.DOTABotDifficulty"
  ":\023BOT_DIFFICULTY_HARD\0221\n\nmatch_type\030\006 \001("
  "\0162\n.MatchType:\021MATCH_TYPE_CASUAL\022\"\n\016matc"
  "hlanguages\030\007 \001(\r:\n4294967295\022\017\n\007team_id\030"
  "\010 \001(\r\022C\n\022game_language_enum\030\n \001(\0162\017.Matc"
  "hLanguages:\026MATCH_LANGUAGE_INVALID\022\032\n\022ga"
  "me_language_name\030\013 \001(\t\022&\n\tping_data\030\014 \001("
  "\0132\023.CMsgClientPingData\022\033\n\023region_select_"
  "flags\030\r \001(\r\022\022\n\nsolo_queue\030\016 \001(\010\022\030\n\020bot_s"
  "cript_index\030\017 \001(\r\022\035\n\025steam_clan_account_"
  "id\030\020 \001(\r\022\032\n\022is_challenge_match\030\021 \001(\010\022\034\n\024"
  "lane_selection_flags\030\022 \001(\r\022\036\n\026high_prior"
  "ity_disabled\030\023 \001(\010\022%\n\035disable_experiment"
  "al_gameplay\030\024 \001(\010\022#\n\033custom_game_difficu"
  "lty_mask\030\025 \001(\r\"\367\001\n\033CMsgStartFindingMatch"
  "Result\022!\n\026legacy_generic_eresult\030\001 \001(\r:\001"
  "2\022M\n\006result\030\002 \001(\0162\031.EStartFindingMatchRe"
  "sult:\"k_EStartFindingMatchResult_Invalid"
  "\022\023\n\013error_token\030\003 \001(\t\022\025\n\rdebug_message\030\004"
  " \001(\t\022!\n\031responsible_party_members\030\005 \003(\006\022"
  "\027\n\017result_metadata\030\006 \001(\r\"/\n\024CMsgStopFind"
  "ingMatch\022\027\n\017accept_cooldown\030\001 \001(\010\"\316\001\n\027CM"
  "sgPartyBuilderOptions\022\030\n\020additional_slot"
  "s\030\001 \001(\r\0221\n\nmatch_type\030\002 \001(\0162\n.MatchType:"
  "\021MATCH_TYPE_CASUAL\022\023\n\013matchgroups\030\003 \001(\r\022"
  "\026\n\016client_version\030\004 \001(\r\0229\n\010language\030\005 \001("
  "\0162\017.MatchLanguages:\026MATCH_LANGUAGE_INVAL"
  "ID\"\233\001\n\013CMsgReadyUp\022C\n\005state\030\001 \001(\0162\024.DOTA"
  "LobbyReadyState:\036DOTALobbyReadyState_UND"
  "ECLARED\022\024\n\014ready_up_key\030\002 \001(\006\0221\n\016hardwar"
  "e_specs\030\003 \001(\0132\031.CDOTAClientHardwareSpecs"
  "\"Q\n\021CMsgReadyUpStatus\022\020\n\010lobby_id\030\001 \001(\006\022"
  "\024\n\014accepted_ids\030\002 \003(\r\022\024\n\014declined_ids\030\003 "
  "\003(\r\"\030\n\026CMsgAbandonCurrentGame\"6\n\025CMsgLob"
  "byScenarioSave\022\017\n\007version\030\001 \001(\005\022\014\n\004data\030"
  "\002 \001(\014\"\320\013\n\033CMsgPracticeLobbySetDetails\022\020\n"
  "\010lobby_id\030\001 \001(\004\022\021\n\tgame_name\030\002 \001(\t\022(\n\014te"
  "am_details\030\003 \003(\0132\022.CLobbyTeamDetails\022\025\n\r"
  "server_region\030\004 \001(\r\022\021\n\tgame_mode\030\005 \001(\r\022."
  "\n\007cm_pick\030\006 \001(\0162\r.DOTA_CM_PICK:\016DOTA_CM_"
  "RANDOM\022J\n\026bot_difficulty_radiant\030\t \001(\0162\022"
  ".DOTABotDifficulty:\026BOT_DIFFICULTY_PASSI"
  "VE\022\024\n\014allow_cheats\030\n \001(\010\022\026\n\016fill_with_bo"
  "ts\030\013 \001(\010\022\022\n\nintro_mode\030\014 \001(\010\022\030\n\020allow_sp"
  "ectating\030\r \001(\010\022<\n\014game_version\030\016 \001(\0162\020.D"
  "OTAGameVersion:\024GAME_VERSION_CURRENT\022\020\n\010"
  "pass_key\030\017 \001(\t\022\020\n\010leagueid\030\020 \001(\r\022\035\n\025pena"
  "lty_level_radiant\030\021 \001(\r\022\032\n\022penalty_level"
  "_dire\030\022 \001(\r\022\024\n\014load_game_id\030\023 \001(\r\022\023\n\013ser"
  "ies_type\030\024 \001(\r\022\033\n\023radiant_series_wins\030\025 "
  "\001(\r\022\030\n\020dire_series_wins\030\026 \001(\r\022\026\n\007allchat"
  "\030\027 \001(\010:\005false\0229\n\rdota_tv_delay\030\030 \001(\0162\021.L"
  "obbyDotaTVDelay:\017LobbyDotaTV_120\022\013\n\003lan\030"
  "\031 \001(\010\022\030\n\020custom_game_mode\030\032 \001(\t\022\027\n\017custo"
  "m_map_name\030\033 \001(\t\022\031\n\021custom_difficulty\030\034 "
  "\001(\r\022\026\n\016custom_game_id\030\035 \001(\004\022\032\n\022custom_mi"
  "n_players\030\036 \001(\r\022\032\n\022custom_max_players\030\037 "
  "\001(\r\022D\n\nvisibility\030! \001(\0162\024.DOTALobbyVisib"
  "ility:\032DOTALobbyVisibility_Public\022\027\n\017cus"
  "tom_game_crc\030\" \001(\006\022\035\n\025custom_game_timest"
  "amp\030% \001(\007\022\037\n\027previous_match_override\030& \001"
  "(\004\022N\n\rpause_setting\030* \001(\0162\026.LobbyDotaPau"
  "seSetting:\037LobbyDotaPauseSetting_Unlimit"
  "ed\022G\n\023bot_difficulty_dire\030+ \001(\0162\022.DOTABo"
  "tDifficulty:\026BOT_DIFFICULTY_PASSIVE\022\023\n\013b"
  "ot_radiant\030, \001(\004\022\020\n\010bot_dire\030- \001(\004\022b\n\030se"
  "lection_priority_rules\030. \001(\0162\033.DOTASelec"
  "tionPriorityRules:#k_DOTASelectionPriori"
  "tyRules_Manual\022\035\n\025custom_game_penalties\030"
  "/ \001(\010\022\036\n\026lan_host_ping_location\0300 \001(\t\022\026\n"
  "\016league_node_id\0301 \001(\r\022\032\n\022requested_hero_"
  "ids\0302 \003(\r\022-\n\rscenario_save\0303 \001(\0132\026.CMsgL"
  "obbyScenarioSave\"\222\002\n\027CMsgPracticeLobbyCr"
  "eate\022\022\n\nsearch_key\030\001 \001(\t\022\020\n\010pass_key\030\005 \001"
  "(\t\022\026\n\016client_version\030\006 \001(\r\0223\n\rlobby_deta"
  "ils\030\007 \001(\0132\034.CMsgPracticeLobbySetDetails\022"
  "4\n\tsave_game\030\010 \001(\0132!.CMsgPracticeLobbyCr"
  "eate.SaveGame\032N\n\010SaveGame\022\014\n\004data\030\001 \001(\014\022"
  "\017\n\007version\030\002 \001(\005\022\020\n\010steam_id\030\003 \001(\006\022\021\n\tsi"
  "gnature\030\004 \001(\006\"\245\001\n\034CMsgPracticeLobbySetTe"
  "amSlot\0223\n\004team\030\001 \001(\0162\r.DOTA_GC_TEAM:\026DOT"
  "A_GC_TEAM_GOOD_GUYS\022\014\n\004slot\030\002 \001(\r\022B\n\016bot"
  "_difficulty\030\003 \001(\0162\022.DOTABotDifficulty:\026B"
  "OT_DIFFICULTY_PASSIVE\"P\n\031CMsgPracticeLob"
  "bySetCoach\0223\n\004team\030\001 \001(\0162\r.DOTA_GC_TEAM:"
  "\026DOTA_GC_TEAM_GOOD_GUYS\"\230\001\n%CMsgPractice"
  "LobbyJoinBroadcastChannel\022\017\n\007channel\030\001 \001"
  "(\r\022\035\n\025preferred_description\030\002 \001(\t\022\036\n\026pre"
  "ferred_country_code\030\003 \001(\t\022\037\n\027preferred_l"
  "anguage_code\030\004 \001(\t\"9\n&CMsgPracticeLobbyC"
  "loseBroadcastChannel\022\017\n\007channel\030\001 \001(\r\"8\n"
  "6CMsgPracticeLobbyToggleBroadcastChannel"
  "CameramanStatus\"+\n\025CMsgPracticeLobbyKick"
  "\022\022\n\naccount_id\030\003 \001(\r\"3\n\035CMsgPracticeLobb"
  "yKickFromTeam\022\022\n\naccount_id\030\001 \001(\r\"\030\n\026CMs"
  "gPracticeLobbyLeave\"1\n\027CMsgPracticeLobby"
  "Launch\022\026\n\016client_version\030\005 \001(\r\"/\n\034CMsgAp"
  "plyTeamToPracticeLobby\022\017\n\007team_id\030\001 \001(\r\""
  "\034\n\032CMsgClearPracticeLobbyTeam\"p\n\025CMsgPra"
  "cticeLobbyList\022\020\n\010pass_key\030\002 \001(\t\022\016\n\006regi"
  "on\030\003 \001(\r\0225\n\tgame_mode\030\004 \001(\0162\016.DOTA_GameM"
  "ode:\022DOTA_GAMEMODE_NONE\"\355\003\n\"CMsgPractice"
  "LobbyListResponseEntry\022\020\n\002id\030\001 \001(\004B\004\200\246\035\001"
  "\022A\n\007members\030\005 \003(\01320.CMsgPracticeLobbyLis"
  "tResponseEntry.CLobbyMember\022\031\n\021requires_"
  "pass_key\030\006 \001(\010\022\031\n\021leader_account_id\030\007 \001("
  "\r\022\014\n\004name\030\n \001(\t\022\030\n\020custom_game_mode\030\013 \001("
  "\t\0225\n\tgame_mode\030\014 \001(\0162\016.DOTA_GameMode:\022DO"
  "TA_GAMEMODE_NONE\022\026\n\016friend_present\030\r \001(\010"
  "\022\017\n\007players\030\016 \001(\r\022\027\n\017custom_map_name\030\017 \001"
  "(\t\022\030\n\020max_player_count\030\020 \001(\r\022\025\n\rserver_r"
  "egion\030\021 \001(\r\022\021\n\tleague_id\030\023 \001(\r\022\036\n\026lan_ho"
  "st_ping_location\030\024 \001(\t\0327\n\014CLobbyMember\022\022"
  "\n\naccount_id\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t\""
  "U\n\035CMsgPracticeLobbyListResponse\0224\n\007lobb"
  "ies\030\002 \003(\0132#.CMsgPracticeLobbyListRespons"
  "eEntry\"`\n\rCMsgLobbyList\022\030\n\rserver_region"
  "\030\001 \001(\r:\0010\0225\n\tgame_mode\030\002 \001(\0162\016.DOTA_Game"
  "Mode:\022DOTA_GAMEMODE_NONE\"M\n\025CMsgLobbyLis"
  "tResponse\0224\n\007lobbies\030\001 \003(\0132#.CMsgPractic"
  "eLobbyListResponseEntry\"\213\001\n\025CMsgPractice"
  "LobbyJoin\022\020\n\010lobby_id\030\001 \001(\004\022\026\n\016client_ve"
  "rsion\030\002 \001(\r\022\020\n\010pass_key\030\003 \001(\t\022\027\n\017custom_"
  "game_crc\030\004 \001(\006\022\035\n\025custom_game_timestamp\030"
  "\005 \001(\007\"_\n\035CMsgPracticeLobbyJoinResponse\022>"
  "\n\006result\030\001 \001(\0162\024.DOTAJoinLobbyResult:\030DO"
  "TA_JOIN_RESULT_SUCCESS\"5\n\"CMsgFriendPrac"
  "ticeLobbyListRequest\022\017\n\007friends\030\001 \003(\r\"[\n"
  "#CMsgFriendPracticeLobbyListResponse\0224\n\007"
  "lobbies\030\001 \003(\0132#.CMsgPracticeLobbyListRes"
  "ponseEntry\";\n\"CMsgJoinableCustomGameMode"
  "sRequest\022\025\n\rserver_region\030\001 \001(\r\"m\n(CMsgJ"
  "oinableCustomGameModesResponseEntry\022\026\n\016c"
  "ustom_game_id\030\001 \001(\004\022\023\n\013lobby_count\030\002 \001(\r"
  "\022\024\n\014player_count\030\003 \001(\r\"d\n#CMsgJoinableCu"
  "stomGameModesResponse\022=\n\ngame_modes\030\001 \003("
  "\0132).CMsgJoinableCustomGameModesResponseE"
  "ntry\"Q\n CMsgJoinableCustomLobbiesRequest"
  "\022\025\n\rserver_region\030\001 \001(\r\022\026\n\016custom_game_i"
  "d\030\002 \001(\004\"\254\002\n&CMsgJoinableCustomLobbiesRes"
  "ponseEntry\022\020\n\010lobby_id\030\001 \001(\006\022\026\n\016custom_g"
  "ame_id\030\002 \001(\004\022\022\n\nlobby_name\030\003 \001(\t\022\024\n\014memb"
  "er_count\030\004 \001(\r\022\031\n\021leader_account_id\030\005 \001("
  "\r\022\023\n\013leader_name\030\006 \001(\t\022\027\n\017custom_map_nam"
  "e\030\007 \001(\t\022\030\n\020max_player_count\030\010 \001(\r\022\025\n\rser"
  "ver_region\030\t \001(\r\022\024\n\014has_pass_key\030\013 \001(\010\022\036"
  "\n\026lan_host_ping_location\030\014 \001(\t\"]\n!CMsgJo"
  "inableCustomLobbiesResponse\0228\n\007lobbies\030\001"
  " \003(\0132\'.CMsgJoinableCustomLobbiesResponse"
  "Entry\"\372\002\n\030CMsgQuickJoinCustomLobby\022\034\n\024le"
  "gacy_server_region\030\001 \001(\r\022\026\n\016custom_game_"
  "id\030\002 \001(\004\022\026\n\016client_version\030\003 \001(\r\022:\n\024crea"
  "te_lobby_details\030\004 \001(\0132\034.CMsgPracticeLob"
  "bySetDetails\022\025\n\rallow_any_map\030\005 \001(\010\022G\n\023l"
  "egacy_region_pings\030\006 \003(\0132*.CMsgQuickJoin"
  "CustomLobby.LegacyRegionPing\022&\n\tping_dat"
  "a\030\007 \001(\0132\023.CMsgClientPingData\032L\n\020LegacyRe"
  "gionPing\022\025\n\rserver_region\030\001 \001(\r\022\014\n\004ping\030"
  "\002 \001(\r\022\023\n\013region_code\030\003 \001(\007\"b\n CMsgQuickJ"
  "oinCustomLobbyResponse\022>\n\006result\030\001 \001(\0162\024"
  ".DOTAJoinLobbyResult:\030DOTA_JOIN_RESULT_S"
  "UCCESS\"\224\002\n\021CMsgBotGameCreate\022\022\n\nsearch_k"
  "ey\030\001 \001(\t\022\026\n\016client_version\030\002 \001(\r\022F\n\022diff"
  "iculty_radiant\030\003 \001(\0162\022.DOTABotDifficulty"
  ":\026BOT_DIFFICULTY_PASSIVE\0223\n\004team\030\004 \001(\0162\r"
  ".DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\021\n"
  "\tgame_mode\030\005 \001(\r\022C\n\017difficulty_dire\030\006 \001("
  "\0162\022.DOTABotDifficulty:\026BOT_DIFFICULTY_PA"
  "SSIVE\"\216\001\n\024CMsgCustomGameCreate\022\022\n\nsearch"
  "_key\030\001 \001(\t\022\026\n\016client_version\030\002 \001(\r\022\022\n\ndi"
  "fficulty\030\003 \001(\r\022\021\n\tgame_mode\030\004 \001(\t\022\013\n\003map"
  "\030\005 \001(\t\022\026\n\016custom_game_id\030\007 \001(\004\"\215\001\n\023CMsgE"
  "ventGameCreate\022\022\n\nsearch_key\030\001 \001(\t\022\026\n\016cl"
  "ient_version\030\002 \001(\r\022\022\n\ndifficulty\030\003 \001(\r\022\021"
  "\n\tgame_mode\030\004 \001(\t\022\013\n\003map\030\005 \001(\t\022\026\n\016custom"
  "_game_id\030\007 \001(\004\"2\n\033CMsgDOTAPartyMemberSet"
  "Coach\022\023\n\013wants_coach\030\001 \001(\010\"4\n\026CMsgDOTASe"
  "tGroupLeader\022\032\n\022new_leader_steamid\030\001 \001(\006"
  "\"P\n\032CMsgDOTACancelGroupInvites\022\030\n\020invite"
  "d_steamids\030\001 \003(\006\022\030\n\020invited_groupids\030\002 \003"
  "(\006\"*\n\032CMsgDOTASetGroupOpenStatus\022\014\n\004open"
  "\030\001 \001(\010\"2\n\030CMsgDOTAGroupMergeInvite\022\026\n\016ot"
  "her_group_id\030\001 \001(\006\"H\n\032CMsgDOTAGroupMerge"
  "Response\022\032\n\022initiator_group_id\030\001 \001(\006\022\016\n\006"
  "accept\030\002 \001(\010\"]\n\027CMsgDOTAGroupMergeReply\022"
  "B\n\006result\030\001 \001(\0162\026.EDOTAGroupMergeResult:"
  "\032k_EDOTAGroupMergeResult_OK\"\364\002\n\035CMsgSpec"
  "tatorLobbyGameDetails\022\020\n\010language\030\001 \001(\r\022"
  "\020\n\010match_id\030\002 \001(\004\022\027\n\017server_steam_id\030\003 \001"
  "(\006\022\022\n\nstream_url\030\004 \001(\t\022\023\n\013stream_name\030\005 "
  "\001(\t\022\021\n\tleague_id\030\006 \001(\r\022\023\n\013series_type\030\007 "
  "\001(\r\022\023\n\013series_game\030\010 \001(\r\0229\n\014radiant_team"
  "\030\t \001(\0132#.CMsgSpectatorLobbyGameDetails.T"
  "eam\0226\n\tdire_team\030\n \001(\0132#.CMsgSpectatorLo"
  "bbyGameDetails.Team\032=\n\004Team\022\017\n\007team_id\030\001"
  " \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\021\n\tteam_logo\030\003 \001"
  "(\006\"\214\001\n\034CMsgSetSpectatorLobbyDetails\022\020\n\010l"
  "obby_id\030\001 \001(\004\022\022\n\nlobby_name\030\002 \001(\t\022\020\n\010pas"
  "s_key\030\003 \001(\t\0224\n\014game_details\030\004 \001(\0132\036.CMsg"
  "SpectatorLobbyGameDetails\"b\n\030CMsgCreateS"
  "pectatorLobby\022\026\n\016client_version\030\001 \001(\r\022.\n"
  "\007details\030\002 \001(\0132\035.CMsgSetSpectatorLobbyDe"
  "tails\"\030\n\026CMsgSpectatorLobbyList\"\233\002\n\036CMsg"
  "SpectatorLobbyListResponse\022\?\n\007lobbies\030\001 "
  "\003(\0132..CMsgSpectatorLobbyListResponse.Spe"
  "ctatorLobby\032\267\001\n\016SpectatorLobby\022\020\n\010lobby_"
  "id\030\001 \001(\004\022\021\n\tgame_name\030\002 \001(\t\022\031\n\021requires_"
  "pass_key\030\003 \001(\010\022\031\n\021leader_account_id\030\004 \001("
  "\r\022\024\n\014member_count\030\005 \001(\r\0224\n\014game_details\030"
  "\007 \001(\0132\036.CMsgSpectatorLobbyGameDetails\"C\n"
  "(CMsgClientToGCRequestSteamDatagramTicke"
  "t\022\027\n\017server_steam_id\030\001 \001(\006\"^\n0CMsgClient"
  "ToGCRequestSteamDatagramTicketResponse\022\031"
  "\n\021serialized_ticket\030\001 \001(\014\022\017\n\007message\030\002 \001"
  "(\t\"\267\002\n!CMsgGCToClientSteamDatagramTicket"
  "\022\032\n\022legacy_time_expiry\030\001 \001(\007\022\"\n\032legacy_a"
  "uthorized_steam_id\030\002 \001(\006\022#\n\033legacy_autho"
  "rized_public_ip\030\003 \001(\007\022\"\n\032legacy_gameserv"
  "er_steam_id\030\004 \001(\006\022 \n\030legacy_gameserver_n"
  "et_id\030\005 \001(\006\022\030\n\020legacy_signature\030\006 \001(\014\022\025\n"
  "\rlegacy_app_id\030\007 \001(\r\022\033\n\023legacy_extra_fie"
  "lds\030\010 \003(\014\022\031\n\021serialized_ticket\030\020 \001(\014\"$\n\""
  "CMsgGCToClientRequestLaneSelection\"j\n*CM"
  "sgGCToClientRequestLaneSelectionResponse"
  "\022\034\n\024lane_selection_flags\030\001 \001(\r\022\036\n\026high_p"
  "riority_disabled\030\002 \001(\010\"\035\n\033CMsgGCToClient"
  "RequestMMInfo\"T\n\024CMsgClientToGCMMInfo\022\034\n"
  "\024lane_selection_flags\030\001 \001(\r\022\036\n\026high_prio"
  "rity_disabled\030\002 \001(\010*\274\020\n\030EStartFindingMat"
  "chResult\022&\n\"k_EStartFindingMatchResult_I"
  "nvalid\020\000\022!\n\035k_EStartFindingMatchResult_O"
  "K\020\001\022/\n+k_EStartFindingMatchResult_Alread"
  "ySearching\020\002\022*\n&k_EStartFindingMatchResu"
  "lt_FailGeneric\020d\022+\n\'k_EStartFindingMatch"
  "Result_FailedIgnore\020e\0222\n.k_EStartFinding"
  "MatchResult_MatchmakingDisabled\020f\022,\n(k_E"
  "StartFindingMatchResult_RegionOffline\020g\022"
  "2\n.k_EStartFindingMatchResult_Matchmakin"
  "gCooldown\020h\022.\n*k_EStartFindingMatchResul"
  "t_ClientOutOfDate\020i\0227\n3k_EStartFindingMa"
  "tchResult_CompetitiveNoLowPriority\020j\0225\n1"
  "k_EStartFindingMatchResult_CompetitiveNo"
  "tUnlocked\020k\0222\n.k_EStartFindingMatchResul"
  "t_GameModeNotUnlocked\020l\022;\n7k_EStartFindi"
  "ngMatchResult_CompetitiveNotEnoughPlayTi"
  "me\020m\0222\n.k_EStartFindingMatchResult_Missi"
  "ngInitialSkill\020n\022<\n8k_EStartFindingMatch"
  "Result_CompetitiveRankSpreadTooLarge\020o\0223"
  "\n/k_EStartFindingMatchResult_MemberAlrea"
  "dyInLobby\020p\0223\n/k_EStartFindingMatchResul"
  "t_MemberNotVACVerified\020q\0229\n5k_EStartFind"
  "ingMatchResult_WeekendTourneyBadPartySiz"
  "e\020r\022>\n:k_EStartFindingMatchResult_Weeken"
  "dTourneyTeamBuyInTooSmall\020s\022D\n@k_EStartF"
  "indingMatchResult_WeekendTourneyIndividu"
  "alBuyInTooLarge\020t\022>\n:k_EStartFindingMatc"
  "hResult_WeekendTourneyTeamBuyInTooLarge\020"
  "u\022:\n6k_EStartFindingMatchResult_MemberMi"
  "ssingEventOwnership\020v\0228\n4k_EStartFinding"
  "MatchResult_WeekendTourneyNotUnlocked\020w\022"
  "@\n<k_EStartFindingMatchResult_WeekendTou"
  "rneyRecentParticipation\020x\022\?\n;k_EStartFin"
  "dingMatchResult_MemberMissingAnchoredPho"
  "neNumber\020y\022.\n*k_EStartFindingMatchResult"
  "_NotMemberOfClan\020z\022;\n7k_EStartFindingMat"
  "chResult_CoachesChallengeBadPartySize\020{\022"
  "A\n=k_EStartFindingMatchResult_CoachesCha"
  "llengeRequirementsNotMet\020|\0224\n0k_EStartFi"
  "ndingMatchResult_InvalidRoleSelections\020}"
  "\0225\n1k_EStartFindingMatchResult_PhoneNumb"
  "erDiscrepancy\020~\022,\n(k_EStartFindingMatchR"
  "esult_NoQueuePoints\020\177\0229\n4k_EStartFinding"
  "MatchResult_MemberMissingGauntletFlag\020\200\001"
  "\0227\n2k_EStartFindingMatchResult_MemberGau"
  "ntletTooRecent\020\201\001\0225\n0k_EStartFindingMatc"
  "hResult_DifficultyNotUnlocked\020\202\001\0228\n3k_ES"
  "tartFindingMatchResult_CoachesNotAllowed"
  "InParty\020\203\001\022/\n*k_EStartFindingMatchResult"
  "_MatchmakingBusy\020\204\001\0220\n+k_EStartFindingMa"
  "tchResult_SteamChinaBanned\020\205\001\022;\n6k_EStar"
  "tFindingMatchResult_SteamChinaInvalidMix"
  "edParty\020\206\001B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_deps[5] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fclient_5fenums_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = {
  false, false, 11577, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, "dota_gcmessages_client_match_management.proto", 
  &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_deps, 5, 65,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartFindingMatchResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[0];
}
bool EStartFindingMatchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgStartFindingMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartFindingMatch>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchgroups(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_modes(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_matchlanguages(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_language_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_language_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgStartFindingMatch* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region_select_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_solo_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bot_script_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steam_clan_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_challenge_match(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_disable_experimental_gameplay(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_custom_game_difficulty_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgClientPingData&
CMsgStartFindingMatch::_Internal::ping_data(const CMsgStartFindingMatch* msg) {
  return *msg->ping_data_;
}
void CMsgStartFindingMatch::clear_ping_data() {
  if (ping_data_ != nullptr) ping_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgStartFindingMatch::CMsgStartFindingMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStartFindingMatch)
}
CMsgStartFindingMatch::CMsgStartFindingMatch(const CMsgStartFindingMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  game_language_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_language_name()) {
    game_language_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_language_name(), 
      GetArena());
  }
  if (from._internal_has_ping_data()) {
    ping_data_ = new ::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchlanguages_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(matchlanguages_));
  // @@protoc_insertion_point(copy_constructor:CMsgStartFindingMatch)
}

void CMsgStartFindingMatch::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_language_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ping_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_difficulty_mask_) -
    reinterpret_cast<char*>(&ping_data_)) + sizeof(custom_game_difficulty_mask_));
matchgroups_ = 4294967295u;
game_modes_ = 4294967295u;
bot_difficulty_ = 3;
matchlanguages_ = 4294967295u;
}

CMsgStartFindingMatch::~CMsgStartFindingMatch() {
  // @@protoc_insertion_point(destructor:CMsgStartFindingMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStartFindingMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_language_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgStartFindingMatch::ArenaDtor(void* object) {
  CMsgStartFindingMatch* _this = reinterpret_cast< CMsgStartFindingMatch* >(object);
  (void)_this;
}
void CMsgStartFindingMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStartFindingMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStartFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartFindingMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_language_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ping_data_ != nullptr);
      ping_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_select_flags_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(region_select_flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bot_script_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_difficulty_mask_) -
        reinterpret_cast<char*>(&bot_script_index_)) + sizeof(custom_game_difficulty_mask_));
  }
  if (cached_has_bits & 0x000f0000u) {
    matchgroups_ = 4294967295u;
    game_modes_ = 4294967295u;
    bot_difficulty_ = 3;
    matchlanguages_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartFindingMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartFindingMatch.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matchgroups = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matchgroups(&has_bits);
          matchgroups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_modes = 4 [default = 4294967295];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_modes(&has_bits);
          game_modes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 matchlanguages = 7 [default = 4294967295];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_matchlanguages(&has_bits);
          matchlanguages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchLanguages_IsValid(val))) {
            _internal_set_game_language_enum(static_cast<::MatchLanguages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string game_language_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_game_language_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartFindingMatch.game_language_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region_select_flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_region_select_flags(&has_bits);
          region_select_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool solo_queue = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_solo_queue(&has_bits);
          solo_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_script_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_bot_script_index(&has_bits);
          bot_script_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 steam_clan_account_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_steam_clan_account_id(&has_bits);
          steam_clan_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_challenge_match = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_challenge_match(&has_bits);
          is_challenge_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_experimental_gameplay = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_disable_experimental_gameplay(&has_bits);
          disable_experimental_gameplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_game_difficulty_mask = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_custom_game_difficulty_mask(&has_bits);
          custom_game_difficulty_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStartFindingMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartFindingMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatch.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matchgroups(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_modes(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_bot_difficulty(), target);
  }

  // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_match_type(), target);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_matchlanguages(), target);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_team_id(), target);
  }

  // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_game_language_enum(), target);
  }

  // optional string game_language_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_language_name().data(), static_cast<int>(this->_internal_game_language_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatch.game_language_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_game_language_name(), target);
  }

  // optional .CMsgClientPingData ping_data = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::ping_data(this), target, stream);
  }

  // optional uint32 region_select_flags = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_region_select_flags(), target);
  }

  // optional bool solo_queue = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_solo_queue(), target);
  }

  // optional uint32 bot_script_index = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_bot_script_index(), target);
  }

  // optional uint32 steam_clan_account_id = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_steam_clan_account_id(), target);
  }

  // optional bool is_challenge_match = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_challenge_match(), target);
  }

  // optional uint32 lane_selection_flags = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_lane_selection_flags(), target);
  }

  // optional bool high_priority_disabled = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_high_priority_disabled(), target);
  }

  // optional bool disable_experimental_gameplay = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_disable_experimental_gameplay(), target);
  }

  // optional uint32 custom_game_difficulty_mask = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_custom_game_difficulty_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartFindingMatch)
  return target;
}

size_t CMsgStartFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartFindingMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string game_language_name = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_language_name());
    }

    // optional .CMsgClientPingData ping_data = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional uint32 team_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_language_enum());
    }

    // optional uint32 region_select_flags = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region_select_flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 bot_script_index = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_script_index());
    }

    // optional uint32 steam_clan_account_id = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steam_clan_account_id());
    }

    // optional bool solo_queue = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_challenge_match = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool high_priority_disabled = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool disable_experimental_gameplay = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 lane_selection_flags = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 custom_game_difficulty_mask = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_game_difficulty_mask());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 matchgroups = 2 [default = 4294967295];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchgroups());
    }

    // optional uint32 game_modes = 4 [default = 4294967295];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_modes());
    }

    // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty());
    }

    // optional uint32 matchlanguages = 7 [default = 4294967295];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchlanguages());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartFindingMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStartFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartFindingMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStartFindingMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStartFindingMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStartFindingMatch)
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatch::MergeFrom(const CMsgStartFindingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_language_name(from._internal_game_language_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_language_enum_ = from.game_language_enum_;
    }
    if (cached_has_bits & 0x00000080u) {
      region_select_flags_ = from.region_select_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bot_script_index_ = from.bot_script_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      steam_clan_account_id_ = from.steam_clan_account_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      solo_queue_ = from.solo_queue_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_challenge_match_ = from.is_challenge_match_;
    }
    if (cached_has_bits & 0x00001000u) {
      high_priority_disabled_ = from.high_priority_disabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      disable_experimental_gameplay_ = from.disable_experimental_gameplay_;
    }
    if (cached_has_bits & 0x00004000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00008000u) {
      custom_game_difficulty_mask_ = from.custom_game_difficulty_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      matchgroups_ = from.matchgroups_;
    }
    if (cached_has_bits & 0x00020000u) {
      game_modes_ = from.game_modes_;
    }
    if (cached_has_bits & 0x00040000u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00080000u) {
      matchlanguages_ = from.matchlanguages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartFindingMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStartFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatch::CopyFrom(const CMsgStartFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatch::InternalSwap(CMsgStartFindingMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_language_name_.Swap(&other->game_language_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatch, custom_game_difficulty_mask_)
      + sizeof(CMsgStartFindingMatch::custom_game_difficulty_mask_)
      - PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatch, ping_data_)>(
          reinterpret_cast<char*>(&ping_data_),
          reinterpret_cast<char*>(&other->ping_data_));
  swap(matchgroups_, other->matchgroups_);
  swap(game_modes_, other->game_modes_);
  swap(bot_difficulty_, other->bot_difficulty_);
  swap(matchlanguages_, other->matchlanguages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartFindingMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStartFindingMatchResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartFindingMatchResult>()._has_bits_);
  static void set_has_legacy_generic_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_debug_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responsible_party_members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStartFindingMatchResult)
}
CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(const CMsgStartFindingMatchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      responsible_party_members_(from.responsible_party_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_token()) {
    error_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_token(), 
      GetArena());
  }
  debug_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_debug_message()) {
    debug_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_debug_message(), 
      GetArena());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_generic_eresult_) -
    reinterpret_cast<char*>(&result_)) + sizeof(legacy_generic_eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgStartFindingMatchResult)
}

void CMsgStartFindingMatchResult::SharedCtor() {
error_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
debug_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_metadata_) -
    reinterpret_cast<char*>(&result_)) + sizeof(result_metadata_));
legacy_generic_eresult_ = 2u;
}

CMsgStartFindingMatchResult::~CMsgStartFindingMatchResult() {
  // @@protoc_insertion_point(destructor:CMsgStartFindingMatchResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStartFindingMatchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgStartFindingMatchResult::ArenaDtor(void* object) {
  CMsgStartFindingMatchResult* _this = reinterpret_cast< CMsgStartFindingMatchResult* >(object);
  (void)_this;
}
void CMsgStartFindingMatchResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStartFindingMatchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStartFindingMatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartFindingMatchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responsible_party_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      debug_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_metadata_) -
        reinterpret_cast<char*>(&result_)) + sizeof(result_metadata_));
    legacy_generic_eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartFindingMatchResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_generic_eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_legacy_generic_eresult(&has_bits);
          legacy_generic_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStartFindingMatchResult_IsValid(val))) {
            _internal_set_result(static_cast<::EStartFindingMatchResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string error_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartFindingMatchResult.error_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string debug_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_debug_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartFindingMatchResult.debug_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 responsible_party_members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_responsible_party_members(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_responsible_party_members(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 result_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_result_metadata(&has_bits);
          result_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStartFindingMatchResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartFindingMatchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_legacy_generic_eresult(), target);
  }

  // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // optional string error_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_token().data(), static_cast<int>(this->_internal_error_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatchResult.error_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_token(), target);
  }

  // optional string debug_message = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug_message().data(), static_cast<int>(this->_internal_debug_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatchResult.debug_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_debug_message(), target);
  }

  // repeated fixed64 responsible_party_members = 5;
  for (int i = 0, n = this->_internal_responsible_party_members_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_responsible_party_members(i), target);
  }

  // optional uint32 result_metadata = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartFindingMatchResult)
  return target;
}

size_t CMsgStartFindingMatchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartFindingMatchResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 responsible_party_members = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_responsible_party_members_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_responsible_party_members_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string error_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_token());
    }

    // optional string debug_message = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug_message());
    }

    // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 result_metadata = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result_metadata());
    }

    // optional uint32 legacy_generic_eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_generic_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartFindingMatchResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStartFindingMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartFindingMatchResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStartFindingMatchResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStartFindingMatchResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStartFindingMatchResult)
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatchResult::MergeFrom(const CMsgStartFindingMatchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartFindingMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responsible_party_members_.MergeFrom(from.responsible_party_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_token(from._internal_error_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_debug_message(from._internal_debug_message());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_metadata_ = from.result_metadata_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_generic_eresult_ = from.legacy_generic_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartFindingMatchResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStartFindingMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatchResult::CopyFrom(const CMsgStartFindingMatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartFindingMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatchResult::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatchResult::InternalSwap(CMsgStartFindingMatchResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  responsible_party_members_.InternalSwap(&other->responsible_party_members_);
  error_token_.Swap(&other->error_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  debug_message_.Swap(&other->debug_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatchResult, result_metadata_)
      + sizeof(CMsgStartFindingMatchResult::result_metadata_)
      - PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatchResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
  swap(legacy_generic_eresult_, other->legacy_generic_eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartFindingMatchResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStopFindingMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStopFindingMatch>()._has_bits_);
  static void set_has_accept_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgStopFindingMatch::CMsgStopFindingMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStopFindingMatch)
}
CMsgStopFindingMatch::CMsgStopFindingMatch(const CMsgStopFindingMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accept_cooldown_ = from.accept_cooldown_;
  // @@protoc_insertion_point(copy_constructor:CMsgStopFindingMatch)
}

void CMsgStopFindingMatch::SharedCtor() {
accept_cooldown_ = false;
}

CMsgStopFindingMatch::~CMsgStopFindingMatch() {
  // @@protoc_insertion_point(destructor:CMsgStopFindingMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStopFindingMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgStopFindingMatch::ArenaDtor(void* object) {
  CMsgStopFindingMatch* _this = reinterpret_cast< CMsgStopFindingMatch* >(object);
  (void)_this;
}
void CMsgStopFindingMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStopFindingMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStopFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStopFindingMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accept_cooldown_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStopFindingMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool accept_cooldown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accept_cooldown(&has_bits);
          accept_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStopFindingMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStopFindingMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool accept_cooldown = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accept_cooldown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStopFindingMatch)
  return target;
}

size_t CMsgStopFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStopFindingMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool accept_cooldown = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStopFindingMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStopFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopFindingMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStopFindingMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStopFindingMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStopFindingMatch)
    MergeFrom(*source);
  }
}

void CMsgStopFindingMatch::MergeFrom(const CMsgStopFindingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStopFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accept_cooldown()) {
    _internal_set_accept_cooldown(from._internal_accept_cooldown());
  }
}

void CMsgStopFindingMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStopFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFindingMatch::CopyFrom(const CMsgStopFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStopFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStopFindingMatch::InternalSwap(CMsgStopFindingMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accept_cooldown_, other->accept_cooldown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStopFindingMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPartyBuilderOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyBuilderOptions>()._has_bits_);
  static void set_has_additional_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matchgroups(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyBuilderOptions)
}
CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(const CMsgPartyBuilderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&additional_slots_, &from.additional_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&additional_slots_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyBuilderOptions)
}

void CMsgPartyBuilderOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&additional_slots_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&additional_slots_)) + sizeof(language_));
}

CMsgPartyBuilderOptions::~CMsgPartyBuilderOptions() {
  // @@protoc_insertion_point(destructor:CMsgPartyBuilderOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyBuilderOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPartyBuilderOptions::ArenaDtor(void* object) {
  CMsgPartyBuilderOptions* _this = reinterpret_cast< CMsgPartyBuilderOptions* >(object);
  (void)_this;
}
void CMsgPartyBuilderOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&additional_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&additional_slots_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyBuilderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 additional_slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_additional_slots(&has_bits);
          additional_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 matchgroups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_matchgroups(&has_bits);
          matchgroups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchLanguages_IsValid(val))) {
            _internal_set_language(static_cast<::MatchLanguages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyBuilderOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_additional_slots(), target);
  }

  // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_type(), target);
  }

  // optional uint32 matchgroups = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_matchgroups(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_client_version(), target);
  }

  // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyBuilderOptions)
  return target;
}

size_t CMsgPartyBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyBuilderOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 additional_slots = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_additional_slots());
    }

    // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional uint32 matchgroups = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchgroups());
    }

    // optional uint32 client_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyBuilderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyBuilderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyBuilderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyBuilderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyBuilderOptions)
    MergeFrom(*source);
  }
}

void CMsgPartyBuilderOptions::MergeFrom(const CMsgPartyBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      additional_slots_ = from.additional_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      matchgroups_ = from.matchgroups_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyBuilderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyBuilderOptions::CopyFrom(const CMsgPartyBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyBuilderOptions::IsInitialized() const {
  return true;
}

void CMsgPartyBuilderOptions::InternalSwap(CMsgPartyBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyBuilderOptions, language_)
      + sizeof(CMsgPartyBuilderOptions::language_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyBuilderOptions, additional_slots_)>(
          reinterpret_cast<char*>(&additional_slots_),
          reinterpret_cast<char*>(&other->additional_slots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyBuilderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgReadyUp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyUp>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ready_up_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAClientHardwareSpecs& hardware_specs(const CMsgReadyUp* msg);
  static void set_has_hardware_specs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAClientHardwareSpecs&
CMsgReadyUp::_Internal::hardware_specs(const CMsgReadyUp* msg) {
  return *msg->hardware_specs_;
}
void CMsgReadyUp::clear_hardware_specs() {
  if (hardware_specs_ != nullptr) hardware_specs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgReadyUp::CMsgReadyUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyUp)
}
CMsgReadyUp::CMsgReadyUp(const CMsgReadyUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hardware_specs()) {
    hardware_specs_ = new ::CDOTAClientHardwareSpecs(*from.hardware_specs_);
  } else {
    hardware_specs_ = nullptr;
  }
  ::memcpy(&ready_up_key_, &from.ready_up_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&ready_up_key_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CMsgReadyUp)
}

void CMsgReadyUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hardware_specs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&hardware_specs_)) + sizeof(state_));
}

CMsgReadyUp::~CMsgReadyUp() {
  // @@protoc_insertion_point(destructor:CMsgReadyUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReadyUp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hardware_specs_;
}

void CMsgReadyUp::ArenaDtor(void* object) {
  CMsgReadyUp* _this = reinterpret_cast< CMsgReadyUp* >(object);
  (void)_this;
}
void CMsgReadyUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReadyUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReadyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(hardware_specs_ != nullptr);
    hardware_specs_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ready_up_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&ready_up_key_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALobbyReadyState_IsValid(val))) {
            _internal_set_state(static_cast<::DOTALobbyReadyState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 ready_up_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ready_up_key(&has_bits);
          ready_up_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware_specs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReadyUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional fixed64 ready_up_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_ready_up_key(), target);
  }

  // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hardware_specs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyUp)
  return target;
}

size_t CMsgReadyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hardware_specs_);
    }

    // optional fixed64 ready_up_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReadyUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReadyUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReadyUp)
    MergeFrom(*source);
  }
}

void CMsgReadyUp::MergeFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hardware_specs()->::CDOTAClientHardwareSpecs::MergeFrom(from._internal_hardware_specs());
    }
    if (cached_has_bits & 0x00000002u) {
      ready_up_key_ = from.ready_up_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReadyUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUp::CopyFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUp::IsInitialized() const {
  return true;
}

void CMsgReadyUp::InternalSwap(CMsgReadyUp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgReadyUp, state_)
      + sizeof(CMsgReadyUp::state_)
      - PROTOBUF_FIELD_OFFSET(CMsgReadyUp, hardware_specs_)>(
          reinterpret_cast<char*>(&hardware_specs_),
          reinterpret_cast<char*>(&other->hardware_specs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgReadyUpStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyUpStatus>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgReadyUpStatus::CMsgReadyUpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accepted_ids_(arena),
  declined_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyUpStatus)
}
CMsgReadyUpStatus::CMsgReadyUpStatus(const CMsgReadyUpStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      accepted_ids_(from.accepted_ids_),
      declined_ids_(from.declined_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgReadyUpStatus)
}

void CMsgReadyUpStatus::SharedCtor() {
lobby_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgReadyUpStatus::~CMsgReadyUpStatus() {
  // @@protoc_insertion_point(destructor:CMsgReadyUpStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReadyUpStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgReadyUpStatus::ArenaDtor(void* object) {
  CMsgReadyUpStatus* _this = reinterpret_cast< CMsgReadyUpStatus* >(object);
  (void)_this;
}
void CMsgReadyUpStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReadyUpStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReadyUpStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyUpStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accepted_ids_.Clear();
  declined_ids_.Clear();
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyUpStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated uint32 accepted_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_accepted_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_accepted_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 declined_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_declined_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_declined_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReadyUpStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyUpStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // repeated uint32 accepted_ids = 2;
  for (int i = 0, n = this->_internal_accepted_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accepted_ids(i), target);
  }

  // repeated uint32 declined_ids = 3;
  for (int i = 0, n = this->_internal_declined_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_declined_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyUpStatus)
  return target;
}

size_t CMsgReadyUpStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyUpStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 accepted_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->accepted_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_accepted_ids_size());
    total_size += data_size;
  }

  // repeated uint32 declined_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->declined_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_declined_ids_size());
    total_size += data_size;
  }

  // optional fixed64 lobby_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyUpStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReadyUpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyUpStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReadyUpStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReadyUpStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReadyUpStatus)
    MergeFrom(*source);
  }
}

void CMsgReadyUpStatus::MergeFrom(const CMsgReadyUpStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyUpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accepted_ids_.MergeFrom(from.accepted_ids_);
  declined_ids_.MergeFrom(from.declined_ids_);
  if (from._internal_has_lobby_id()) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
}

void CMsgReadyUpStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReadyUpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUpStatus::CopyFrom(const CMsgReadyUpStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyUpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUpStatus::IsInitialized() const {
  return true;
}

void CMsgReadyUpStatus::InternalSwap(CMsgReadyUpStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accepted_ids_.InternalSwap(&other->accepted_ids_);
  declined_ids_.InternalSwap(&other->declined_ids_);
  swap(lobby_id_, other->lobby_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyUpStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAbandonCurrentGame::_Internal {
 public:
};

CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAbandonCurrentGame)
}
CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAbandonCurrentGame)
}

void CMsgAbandonCurrentGame::SharedCtor() {
}

CMsgAbandonCurrentGame::~CMsgAbandonCurrentGame() {
  // @@protoc_insertion_point(destructor:CMsgAbandonCurrentGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAbandonCurrentGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAbandonCurrentGame::ArenaDtor(void* object) {
  CMsgAbandonCurrentGame* _this = reinterpret_cast< CMsgAbandonCurrentGame* >(object);
  (void)_this;
}
void CMsgAbandonCurrentGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAbandonCurrentGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAbandonCurrentGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAbandonCurrentGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAbandonCurrentGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAbandonCurrentGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAbandonCurrentGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAbandonCurrentGame)
  return target;
}

size_t CMsgAbandonCurrentGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAbandonCurrentGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAbandonCurrentGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAbandonCurrentGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAbandonCurrentGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAbandonCurrentGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAbandonCurrentGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAbandonCurrentGame)
    MergeFrom(*source);
  }
}

void CMsgAbandonCurrentGame::MergeFrom(const CMsgAbandonCurrentGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAbandonCurrentGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgAbandonCurrentGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAbandonCurrentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAbandonCurrentGame::CopyFrom(const CMsgAbandonCurrentGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAbandonCurrentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAbandonCurrentGame::IsInitialized() const {
  return true;
}

void CMsgAbandonCurrentGame::InternalSwap(CMsgAbandonCurrentGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAbandonCurrentGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyScenarioSave::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyScenarioSave>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyScenarioSave::CMsgLobbyScenarioSave(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyScenarioSave)
}
CMsgLobbyScenarioSave::CMsgLobbyScenarioSave(const CMsgLobbyScenarioSave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyScenarioSave)
}

void CMsgLobbyScenarioSave::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 0;
}

CMsgLobbyScenarioSave::~CMsgLobbyScenarioSave() {
  // @@protoc_insertion_point(destructor:CMsgLobbyScenarioSave)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyScenarioSave::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLobbyScenarioSave::ArenaDtor(void* object) {
  CMsgLobbyScenarioSave* _this = reinterpret_cast< CMsgLobbyScenarioSave* >(object);
  (void)_this;
}
void CMsgLobbyScenarioSave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyScenarioSave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyScenarioSave::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyScenarioSave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyScenarioSave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyScenarioSave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyScenarioSave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyScenarioSave)
  return target;
}

size_t CMsgLobbyScenarioSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyScenarioSave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyScenarioSave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyScenarioSave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyScenarioSave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyScenarioSave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyScenarioSave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyScenarioSave)
    MergeFrom(*source);
  }
}

void CMsgLobbyScenarioSave::MergeFrom(const CMsgLobbyScenarioSave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyScenarioSave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyScenarioSave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyScenarioSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyScenarioSave::CopyFrom(const CMsgLobbyScenarioSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyScenarioSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyScenarioSave::IsInitialized() const {
  return true;
}

void CMsgLobbyScenarioSave::InternalSwap(CMsgLobbyScenarioSave* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyScenarioSave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbySetDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbySetDetails>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cm_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bot_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_allow_cheats(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fill_with_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_intro_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_allow_spectating(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_game_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leagueid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_penalty_level_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_penalty_level_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_load_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_radiant_series_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_dire_series_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_allchat(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_dota_tv_delay(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_lan(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_custom_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_custom_min_players(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_custom_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_previous_match_override(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_pause_setting(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_bot_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_bot_radiant(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_bot_dire(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_selection_priority_rules(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_custom_game_penalties(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::CMsgLobbyScenarioSave& scenario_save(const CMsgPracticeLobbySetDetails* msg);
  static void set_has_scenario_save(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgLobbyScenarioSave&
CMsgPracticeLobbySetDetails::_Internal::scenario_save(const CMsgPracticeLobbySetDetails* msg) {
  return *msg->scenario_save_;
}
void CMsgPracticeLobbySetDetails::clear_team_details() {
  team_details_.Clear();
}
CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_details_(arena),
  requested_hero_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbySetDetails)
}
CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      team_details_(from.team_details_),
      requested_hero_ids_(from.requested_hero_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArena());
  }
  pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pass_key()) {
    pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pass_key(), 
      GetArena());
  }
  custom_game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_game_mode()) {
    custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_game_mode(), 
      GetArena());
  }
  custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_map_name()) {
    custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_map_name(), 
      GetArena());
  }
  lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lan_host_ping_location()) {
    lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lan_host_ping_location(), 
      GetArena());
  }
  if (from._internal_has_scenario_save()) {
    scenario_save_ = new ::CMsgLobbyScenarioSave(*from.scenario_save_);
  } else {
    scenario_save_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dota_tv_delay_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(dota_tv_delay_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetDetails)
}

void CMsgPracticeLobbySetDetails::SharedCtor() {
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scenario_save_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bot_dire_) -
    reinterpret_cast<char*>(&scenario_save_)) + sizeof(bot_dire_));
dota_tv_delay_ = 1;
}

CMsgPracticeLobbySetDetails::~CMsgPracticeLobbySetDetails() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbySetDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scenario_save_;
}

void CMsgPracticeLobbySetDetails::ArenaDtor(void* object) {
  CMsgPracticeLobbySetDetails* _this = reinterpret_cast< CMsgPracticeLobbySetDetails* >(object);
  (void)_this;
}
void CMsgPracticeLobbySetDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbySetDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbySetDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbySetDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_details_.Clear();
  requested_hero_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(scenario_save_ != nullptr);
      scenario_save_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(server_region_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_version_) -
        reinterpret_cast<char*>(&game_mode_)) + sizeof(game_version_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&leagueid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_difficulty_) -
        reinterpret_cast<char*>(&leagueid_)) + sizeof(custom_difficulty_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_crc_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(custom_game_crc_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&previous_match_override_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_dire_) -
        reinterpret_cast<char*>(&previous_match_override_)) + sizeof(bot_dire_));
  }
  dota_tv_delay_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbySetDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_id(&_has_bits_);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyTeamDetails team_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 server_region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_region(&_has_bits_);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_game_mode(&_has_bits_);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_CM_PICK_IsValid(val))) {
            _internal_set_cm_pick(static_cast<::DOTA_CM_PICK>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool allow_cheats = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_allow_cheats(&_has_bits_);
          allow_cheats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fill_with_bots = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fill_with_bots(&_has_bits_);
          fill_with_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool intro_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_intro_mode(&_has_bits_);
          intro_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_spectating = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_allow_spectating(&_has_bits_);
          allow_spectating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAGameVersion_IsValid(val))) {
            _internal_set_game_version(static_cast<::DOTAGameVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string pass_key = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.pass_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leagueid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_leagueid(&_has_bits_);
          leagueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_level_radiant = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_penalty_level_radiant(&_has_bits_);
          penalty_level_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_level_dire = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_penalty_level_dire(&_has_bits_);
          penalty_level_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 load_game_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_load_game_id(&_has_bits_);
          load_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_series_type(&_has_bits_);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_series_wins = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_radiant_series_wins(&_has_bits_);
          radiant_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_series_wins = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_dire_series_wins(&_has_bits_);
          dire_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allchat = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_allchat(&_has_bits_);
          allchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaTVDelay_IsValid(val))) {
            _internal_set_dota_tv_delay(static_cast<::LobbyDotaTVDelay>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool lan = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_lan(&_has_bits_);
          lan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_game_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_custom_game_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.custom_game_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_map_name = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.custom_map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_difficulty = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_custom_difficulty(&_has_bits_);
          custom_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_custom_game_id(&_has_bits_);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_min_players = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_custom_min_players(&_has_bits_);
          custom_min_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_max_players = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_custom_max_players(&_has_bits_);
          custom_max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALobbyVisibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::DOTALobbyVisibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_custom_game_crc(&_has_bits_);
          custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_custom_game_timestamp(&_has_bits_);
          custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint64 previous_match_override = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_previous_match_override(&_has_bits_);
          previous_match_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaPauseSetting_IsValid(val))) {
            _internal_set_pause_setting(static_cast<::LobbyDotaPauseSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(42, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(43, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 bot_radiant = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bot_radiant(&_has_bits_);
          bot_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bot_dire = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bot_dire(&_has_bits_);
          bot_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityRules_IsValid(val))) {
            _internal_set_selection_priority_rules(static_cast<::DOTASelectionPriorityRules>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool custom_game_penalties = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_custom_game_penalties(&_has_bits_);
          custom_game_penalties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.lan_host_ping_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_league_node_id(&_has_bits_);
          league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 requested_hero_ids = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<400>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_requested_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLobbyScenarioSave scenario_save = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario_save(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbySetDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // repeated .CLobbyTeamDetails team_details = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_team_details(i), target, stream);
  }

  // optional uint32 server_region = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_region(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_game_mode(), target);
  }

  // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cm_pick(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_bot_difficulty_radiant(), target);
  }

  // optional bool allow_cheats = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_cheats(), target);
  }

  // optional bool fill_with_bots = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_fill_with_bots(), target);
  }

  // optional bool intro_mode = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_intro_mode(), target);
  }

  // optional bool allow_spectating = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_allow_spectating(), target);
  }

  // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_game_version(), target);
  }

  // optional string pass_key = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.pass_key");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_pass_key(), target);
  }

  // optional uint32 leagueid = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_load_game_id(), target);
  }

  // optional uint32 series_type = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_series_type(), target);
  }

  // optional uint32 radiant_series_wins = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_dire_series_wins(), target);
  }

  // optional bool allchat = 23 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_allchat(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_dota_tv_delay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool lan = 25;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_lan(), target);
  }

  // optional string custom_game_mode = 26;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_game_mode().data(), static_cast<int>(this->_internal_custom_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.custom_game_mode");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_custom_game_mode(), target);
  }

  // optional string custom_map_name = 27;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_custom_map_name(), target);
  }

  // optional uint32 custom_difficulty = 28;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_custom_difficulty(), target);
  }

  // optional uint64 custom_game_id = 29;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(29, this->_internal_custom_game_id(), target);
  }

  // optional uint32 custom_min_players = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 31;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_custom_max_players(), target);
  }

  // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->_internal_visibility(), target);
  }

  // optional fixed64 custom_game_crc = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(34, this->_internal_custom_game_crc(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 custom_game_timestamp = 37;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(37, this->_internal_custom_game_timestamp(), target);
  }

  // optional uint64 previous_match_override = 38;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(38, this->_internal_previous_match_override(), target);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      42, this->_internal_pause_setting(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      43, this->_internal_bot_difficulty_dire(), target);
  }

  // optional uint64 bot_radiant = 44;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(44, this->_internal_bot_radiant(), target);
  }

  // optional uint64 bot_dire = 45;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(45, this->_internal_bot_dire(), target);
  }

  // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_selection_priority_rules(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool custom_game_penalties = 47;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_custom_game_penalties(), target);
  }

  // optional string lan_host_ping_location = 48;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_lan_host_ping_location(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 league_node_id = 49;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_league_node_id(), target);
  }

  // repeated uint32 requested_hero_ids = 50;
  for (int i = 0, n = this->_internal_requested_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_requested_hero_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgLobbyScenarioSave scenario_save = 51;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::scenario_save(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetDetails)
  return target;
}

size_t CMsgPracticeLobbySetDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbySetDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLobbyTeamDetails team_details = 3;
  total_size += 1UL * this->_internal_team_details_size();
  for (const auto& msg : this->team_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 requested_hero_ids = 50;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->requested_hero_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_requested_hero_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional string pass_key = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional string custom_game_mode = 26;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_game_mode());
    }

    // optional string custom_map_name = 27;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 48;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional .CMsgLobbyScenarioSave scenario_save = 51;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_save_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint32 server_region = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 game_mode = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cm_pick());
    }

    // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool allow_spectating = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_version());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 leagueid = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leagueid());
    }

    // optional uint32 penalty_level_radiant = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_dire());
    }

    // optional uint32 load_game_id = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_load_game_id());
    }

    // optional uint32 series_type = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 radiant_series_wins = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_series_wins());
    }

    // optional uint32 custom_difficulty = 28;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_difficulty());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint64 custom_game_id = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional uint32 custom_min_players = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_min_players());
    }

    // optional uint32 custom_max_players = 31;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_max_players());
    }

    // optional bool allchat = 23 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool lan = 25;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_game_penalties = 47;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
    }

    // optional fixed64 custom_game_crc = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 previous_match_override = 38;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_previous_match_override());
    }

    // optional fixed32 custom_game_timestamp = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pause_setting());
    }

    // optional uint64 bot_radiant = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bot_radiant());
    }

    // optional uint32 league_node_id = 49;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

    // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty_dire());
    }

    // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_priority_rules());
    }

    // optional uint64 bot_dire = 45;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bot_dire());
    }

  }
  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dota_tv_delay());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbySetDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbySetDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbySetDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbySetDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbySetDetails)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetDetails::MergeFrom(const CMsgPracticeLobbySetDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbySetDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_details_.MergeFrom(from.team_details_);
  requested_hero_ids_.MergeFrom(from.requested_hero_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_custom_game_mode(from._internal_custom_game_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_scenario_save()->::CMsgLobbyScenarioSave::MergeFrom(from._internal_scenario_save());
    }
    if (cached_has_bits & 0x00000040u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      cm_pick_ = from.cm_pick_;
    }
    if (cached_has_bits & 0x00000400u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000800u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00001000u) {
      fill_with_bots_ = from.fill_with_bots_;
    }
    if (cached_has_bits & 0x00002000u) {
      intro_mode_ = from.intro_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      allow_spectating_ = from.allow_spectating_;
    }
    if (cached_has_bits & 0x00008000u) {
      game_version_ = from.game_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00020000u) {
      penalty_level_radiant_ = from.penalty_level_radiant_;
    }
    if (cached_has_bits & 0x00040000u) {
      penalty_level_dire_ = from.penalty_level_dire_;
    }
    if (cached_has_bits & 0x00080000u) {
      load_game_id_ = from.load_game_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      radiant_series_wins_ = from.radiant_series_wins_;
    }
    if (cached_has_bits & 0x00400000u) {
      dire_series_wins_ = from.dire_series_wins_;
    }
    if (cached_has_bits & 0x00800000u) {
      custom_difficulty_ = from.custom_difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      custom_min_players_ = from.custom_min_players_;
    }
    if (cached_has_bits & 0x04000000u) {
      custom_max_players_ = from.custom_max_players_;
    }
    if (cached_has_bits & 0x08000000u) {
      allchat_ = from.allchat_;
    }
    if (cached_has_bits & 0x10000000u) {
      lan_ = from.lan_;
    }
    if (cached_has_bits & 0x20000000u) {
      custom_game_penalties_ = from.custom_game_penalties_;
    }
    if (cached_has_bits & 0x40000000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x80000000u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      previous_match_override_ = from.previous_match_override_;
    }
    if (cached_has_bits & 0x00000002u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      pause_setting_ = from.pause_setting_;
    }
    if (cached_has_bits & 0x00000008u) {
      bot_radiant_ = from.bot_radiant_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    if (cached_has_bits & 0x00000040u) {
      selection_priority_rules_ = from.selection_priority_rules_;
    }
    if (cached_has_bits & 0x00000080u) {
      bot_dire_ = from.bot_dire_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_dota_tv_delay(from._internal_dota_tv_delay());
  }
}

void CMsgPracticeLobbySetDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbySetDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetDetails::CopyFrom(const CMsgPracticeLobbySetDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbySetDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetDetails::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetDetails::InternalSwap(CMsgPracticeLobbySetDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  team_details_.InternalSwap(&other->team_details_);
  requested_hero_ids_.InternalSwap(&other->requested_hero_ids_);
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pass_key_.Swap(&other->pass_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_game_mode_.Swap(&other->custom_game_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_map_name_.Swap(&other->custom_map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_dire_)
      + sizeof(CMsgPracticeLobbySetDetails::bot_dire_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetDetails, scenario_save_)>(
          reinterpret_cast<char*>(&scenario_save_),
          reinterpret_cast<char*>(&other->scenario_save_));
  swap(dota_tv_delay_, other->dota_tv_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbySetDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyCreate_SaveGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyCreate_SaveGame>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyCreate.SaveGame)
}
CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCreate.SaveGame)
}

void CMsgPracticeLobbyCreate_SaveGame::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
}

CMsgPracticeLobbyCreate_SaveGame::~CMsgPracticeLobbyCreate_SaveGame() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCreate.SaveGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyCreate_SaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyCreate_SaveGame::ArenaDtor(void* object) {
  CMsgPracticeLobbyCreate_SaveGame* _this = reinterpret_cast< CMsgPracticeLobbyCreate_SaveGame* >(object);
  (void)_this;
}
void CMsgPracticeLobbyCreate_SaveGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyCreate_SaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyCreate_SaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyCreate.SaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyCreate_SaveGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyCreate_SaveGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCreate.SaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id(), target);
  }

  // optional fixed64 signature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCreate.SaveGame)
  return target;
}

size_t CMsgPracticeLobbyCreate_SaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyCreate.SaveGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional fixed64 steam_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyCreate.SaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate_SaveGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyCreate_SaveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyCreate.SaveGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyCreate.SaveGame)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyCreate.SaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyCreate.SaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyCreate.SaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate_SaveGame::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate_SaveGame::InternalSwap(CMsgPracticeLobbyCreate_SaveGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, version_)
      + sizeof(CMsgPracticeLobbyCreate_SaveGame::version_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyCreate_SaveGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyCreate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyCreate>()._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgPracticeLobbySetDetails& lobby_details(const CMsgPracticeLobbyCreate* msg);
  static void set_has_lobby_details(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgPracticeLobbyCreate_SaveGame& save_game(const CMsgPracticeLobbyCreate* msg);
  static void set_has_save_game(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgPracticeLobbySetDetails&
CMsgPracticeLobbyCreate::_Internal::lobby_details(const CMsgPracticeLobbyCreate* msg) {
  return *msg->lobby_details_;
}
const ::CMsgPracticeLobbyCreate_SaveGame&
CMsgPracticeLobbyCreate::_Internal::save_game(const CMsgPracticeLobbyCreate* msg) {
  return *msg->save_game_;
}
CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyCreate)
}
CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_search_key()) {
    search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_key(), 
      GetArena());
  }
  pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pass_key()) {
    pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pass_key(), 
      GetArena());
  }
  if (from._internal_has_lobby_details()) {
    lobby_details_ = new ::CMsgPracticeLobbySetDetails(*from.lobby_details_);
  } else {
    lobby_details_ = nullptr;
  }
  if (from._internal_has_save_game()) {
    save_game_ = new ::CMsgPracticeLobbyCreate_SaveGame(*from.save_game_);
  } else {
    save_game_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCreate)
}

void CMsgPracticeLobbyCreate::SharedCtor() {
search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&lobby_details_)) + sizeof(client_version_));
}

CMsgPracticeLobbyCreate::~CMsgPracticeLobbyCreate() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lobby_details_;
  if (this != internal_default_instance()) delete save_game_;
}

void CMsgPracticeLobbyCreate::ArenaDtor(void* object) {
  CMsgPracticeLobbyCreate* _this = reinterpret_cast< CMsgPracticeLobbyCreate* >(object);
  (void)_this;
}
void CMsgPracticeLobbyCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lobby_details_ != nullptr);
      lobby_details_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(save_game_ != nullptr);
      save_game_->Clear();
    }
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyCreate.search_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pass_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyCreate.pass_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobby_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyCreate.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional string pass_key = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyCreate.pass_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pass_key(), target);
  }

  // optional uint32 client_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_client_version(), target);
  }

  // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lobby_details(this), target, stream);
  }

  // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::save_game(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCreate)
  return target;
}

size_t CMsgPracticeLobbyCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional string pass_key = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lobby_details_);
    }

    // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *save_game_);
    }

    // optional uint32 client_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyCreate)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate::MergeFrom(const CMsgPracticeLobbyCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lobby_details()->::CMsgPracticeLobbySetDetails::MergeFrom(from._internal_lobby_details());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_save_game()->::CMsgPracticeLobbyCreate_SaveGame::MergeFrom(from._internal_save_game());
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate::CopyFrom(const CMsgPracticeLobbyCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate::InternalSwap(CMsgPracticeLobbyCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pass_key_.Swap(&other->pass_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate, client_version_)
      + sizeof(CMsgPracticeLobbyCreate::client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate, lobby_details_)>(
          reinterpret_cast<char*>(&lobby_details_),
          reinterpret_cast<char*>(&other->lobby_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbySetTeamSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbySetTeamSlot>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbySetTeamSlot)
}
CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_) -
    reinterpret_cast<char*>(&team_)) + sizeof(bot_difficulty_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetTeamSlot)
}

void CMsgPracticeLobbySetTeamSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_) -
    reinterpret_cast<char*>(&team_)) + sizeof(bot_difficulty_));
}

CMsgPracticeLobbySetTeamSlot::~CMsgPracticeLobbySetTeamSlot() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetTeamSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbySetTeamSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbySetTeamSlot::ArenaDtor(void* object) {
  CMsgPracticeLobbySetTeamSlot* _this = reinterpret_cast< CMsgPracticeLobbySetTeamSlot* >(object);
  (void)_this;
}
void CMsgPracticeLobbySetTeamSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbySetTeamSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbySetTeamSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbySetTeamSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_difficulty_) -
        reinterpret_cast<char*>(&team_)) + sizeof(bot_difficulty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbySetTeamSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbySetTeamSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetTeamSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_bot_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetTeamSlot)
  return target;
}

size_t CMsgPracticeLobbySetTeamSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbySetTeamSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

    // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbySetTeamSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetTeamSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbySetTeamSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbySetTeamSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbySetTeamSlot)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const CMsgPracticeLobbySetTeamSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbySetTeamSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbySetTeamSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const CMsgPracticeLobbySetTeamSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbySetTeamSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetTeamSlot::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetTeamSlot::InternalSwap(CMsgPracticeLobbySetTeamSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, bot_difficulty_)
      + sizeof(CMsgPracticeLobbySetTeamSlot::bot_difficulty_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbySetTeamSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbySetCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbySetCoach>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbySetCoach)
}
CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(const CMsgPracticeLobbySetCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetCoach)
}

void CMsgPracticeLobbySetCoach::SharedCtor() {
team_ = 0;
}

CMsgPracticeLobbySetCoach::~CMsgPracticeLobbySetCoach() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetCoach)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbySetCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbySetCoach::ArenaDtor(void* object) {
  CMsgPracticeLobbySetCoach* _this = reinterpret_cast< CMsgPracticeLobbySetCoach* >(object);
  (void)_this;
}
void CMsgPracticeLobbySetCoach::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbySetCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbySetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbySetCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbySetCoach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbySetCoach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetCoach)
  return target;
}

size_t CMsgPracticeLobbySetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbySetCoach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbySetCoach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbySetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetCoach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbySetCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbySetCoach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbySetCoach)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetCoach::MergeFrom(const CMsgPracticeLobbySetCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbySetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team()) {
    _internal_set_team(from._internal_team());
  }
}

void CMsgPracticeLobbySetCoach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbySetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetCoach::CopyFrom(const CMsgPracticeLobbySetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbySetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetCoach::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetCoach::InternalSwap(CMsgPracticeLobbySetCoach* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbySetCoach::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyJoinBroadcastChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyJoinBroadcastChannel>()._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preferred_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preferred_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyJoinBroadcastChannel)
}
CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preferred_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preferred_description()) {
    preferred_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preferred_description(), 
      GetArena());
  }
  preferred_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preferred_country_code()) {
    preferred_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preferred_country_code(), 
      GetArena());
  }
  preferred_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preferred_language_code()) {
    preferred_language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preferred_language_code(), 
      GetArena());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoinBroadcastChannel)
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedCtor() {
preferred_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preferred_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preferred_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_ = 0u;
}

CMsgPracticeLobbyJoinBroadcastChannel::~CMsgPracticeLobbyJoinBroadcastChannel() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoinBroadcastChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  preferred_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferred_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferred_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyJoinBroadcastChannel::ArenaDtor(void* object) {
  CMsgPracticeLobbyJoinBroadcastChannel* _this = reinterpret_cast< CMsgPracticeLobbyJoinBroadcastChannel* >(object);
  (void)_this;
}
void CMsgPracticeLobbyJoinBroadcastChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyJoinBroadcastChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyJoinBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyJoinBroadcastChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      preferred_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      preferred_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      preferred_language_code_.ClearNonDefaultToEmpty();
    }
  }
  channel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyJoinBroadcastChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preferred_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_preferred_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preferred_country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_preferred_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preferred_language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_preferred_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyJoinBroadcastChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoinBroadcastChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // optional string preferred_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_description().data(), static_cast<int>(this->_internal_preferred_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_preferred_description(), target);
  }

  // optional string preferred_country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_country_code().data(), static_cast<int>(this->_internal_preferred_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_preferred_country_code(), target);
  }

  // optional string preferred_language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_language_code().data(), static_cast<int>(this->_internal_preferred_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_preferred_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoinBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyJoinBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyJoinBroadcastChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string preferred_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_description());
    }

    // optional string preferred_country_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_country_code());
    }

    // optional string preferred_language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_language_code());
    }

    // optional uint32 channel = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyJoinBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinBroadcastChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyJoinBroadcastChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyJoinBroadcastChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyJoinBroadcastChannel)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyJoinBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_preferred_description(from._internal_preferred_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_preferred_country_code(from._internal_preferred_country_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_preferred_language_code(from._internal_preferred_language_code());
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyJoinBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyJoinBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinBroadcastChannel::InternalSwap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  preferred_description_.Swap(&other->preferred_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preferred_country_code_.Swap(&other->preferred_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preferred_language_code_.Swap(&other->preferred_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyJoinBroadcastChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyCloseBroadcastChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyCloseBroadcastChannel>()._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyCloseBroadcastChannel)
}
CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(const CMsgPracticeLobbyCloseBroadcastChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCloseBroadcastChannel)
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedCtor() {
channel_ = 0u;
}

CMsgPracticeLobbyCloseBroadcastChannel::~CMsgPracticeLobbyCloseBroadcastChannel() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCloseBroadcastChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyCloseBroadcastChannel::ArenaDtor(void* object) {
  CMsgPracticeLobbyCloseBroadcastChannel* _this = reinterpret_cast< CMsgPracticeLobbyCloseBroadcastChannel* >(object);
  (void)_this;
}
void CMsgPracticeLobbyCloseBroadcastChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyCloseBroadcastChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyCloseBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyCloseBroadcastChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyCloseBroadcastChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyCloseBroadcastChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCloseBroadcastChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCloseBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyCloseBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyCloseBroadcastChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 channel = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyCloseBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCloseBroadcastChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyCloseBroadcastChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyCloseBroadcastChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyCloseBroadcastChannel)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyCloseBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_set_channel(from._internal_channel());
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyCloseBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyCloseBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCloseBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCloseBroadcastChannel::InternalSwap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyCloseBroadcastChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::_Internal {
 public:
};

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}
CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedCtor() {
}

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::ArenaDtor(void* object) {
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* _this = reinterpret_cast< CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* >(object);
  (void)_this;
}
void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return target;
}

size_t CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InternalSwap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyKick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyKick>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyKick)
}
CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyKick)
}

void CMsgPracticeLobbyKick::SharedCtor() {
account_id_ = 0u;
}

CMsgPracticeLobbyKick::~CMsgPracticeLobbyKick() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyKick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyKick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyKick::ArenaDtor(void* object) {
  CMsgPracticeLobbyKick* _this = reinterpret_cast< CMsgPracticeLobbyKick* >(object);
  (void)_this;
}
void CMsgPracticeLobbyKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyKick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyKick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyKick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyKick)
  return target;
}

size_t CMsgPracticeLobbyKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyKick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyKick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyKick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyKick)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKick::MergeFrom(const CMsgPracticeLobbyKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgPracticeLobbyKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKick::CopyFrom(const CMsgPracticeLobbyKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKick::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKick::InternalSwap(CMsgPracticeLobbyKick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyKick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyKickFromTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyKickFromTeam>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyKickFromTeam)
}
CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(const CMsgPracticeLobbyKickFromTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyKickFromTeam)
}

void CMsgPracticeLobbyKickFromTeam::SharedCtor() {
account_id_ = 0u;
}

CMsgPracticeLobbyKickFromTeam::~CMsgPracticeLobbyKickFromTeam() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyKickFromTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyKickFromTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyKickFromTeam::ArenaDtor(void* object) {
  CMsgPracticeLobbyKickFromTeam* _this = reinterpret_cast< CMsgPracticeLobbyKickFromTeam* >(object);
  (void)_this;
}
void CMsgPracticeLobbyKickFromTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyKickFromTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyKickFromTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyKickFromTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyKickFromTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyKickFromTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyKickFromTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyKickFromTeam)
  return target;
}

size_t CMsgPracticeLobbyKickFromTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyKickFromTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyKickFromTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyKickFromTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyKickFromTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyKickFromTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyKickFromTeam)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const CMsgPracticeLobbyKickFromTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyKickFromTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyKickFromTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const CMsgPracticeLobbyKickFromTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyKickFromTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKickFromTeam::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKickFromTeam::InternalSwap(CMsgPracticeLobbyKickFromTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyKickFromTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyLeave::_Internal {
 public:
};

CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyLeave)
}
CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyLeave)
}

void CMsgPracticeLobbyLeave::SharedCtor() {
}

CMsgPracticeLobbyLeave::~CMsgPracticeLobbyLeave() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyLeave)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyLeave::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyLeave::ArenaDtor(void* object) {
  CMsgPracticeLobbyLeave* _this = reinterpret_cast< CMsgPracticeLobbyLeave* >(object);
  (void)_this;
}
void CMsgPracticeLobbyLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyLeave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyLeave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyLeave)
  return target;
}

size_t CMsgPracticeLobbyLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyLeave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyLeave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyLeave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyLeave)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLeave::MergeFrom(const CMsgPracticeLobbyLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPracticeLobbyLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLeave::CopyFrom(const CMsgPracticeLobbyLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLeave::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyLeave::InternalSwap(CMsgPracticeLobbyLeave* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyLeave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyLaunch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyLaunch>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyLaunch)
}
CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyLaunch)
}

void CMsgPracticeLobbyLaunch::SharedCtor() {
client_version_ = 0u;
}

CMsgPracticeLobbyLaunch::~CMsgPracticeLobbyLaunch() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyLaunch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyLaunch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyLaunch::ArenaDtor(void* object) {
  CMsgPracticeLobbyLaunch* _this = reinterpret_cast< CMsgPracticeLobbyLaunch* >(object);
  (void)_this;
}
void CMsgPracticeLobbyLaunch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyLaunch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyLaunch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyLaunch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyLaunch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyLaunch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyLaunch)
  return target;
}

size_t CMsgPracticeLobbyLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyLaunch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyLaunch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyLaunch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyLaunch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyLaunch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyLaunch)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLaunch::MergeFrom(const CMsgPracticeLobbyLaunch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_version()) {
    _internal_set_client_version(from._internal_client_version());
  }
}

void CMsgPracticeLobbyLaunch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLaunch::CopyFrom(const CMsgPracticeLobbyLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLaunch::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyLaunch::InternalSwap(CMsgPracticeLobbyLaunch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_version_, other->client_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyLaunch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgApplyTeamToPracticeLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyTeamToPracticeLobby>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyTeamToPracticeLobby)
}
CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgApplyTeamToPracticeLobby)
}

void CMsgApplyTeamToPracticeLobby::SharedCtor() {
team_id_ = 0u;
}

CMsgApplyTeamToPracticeLobby::~CMsgApplyTeamToPracticeLobby() {
  // @@protoc_insertion_point(destructor:CMsgApplyTeamToPracticeLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgApplyTeamToPracticeLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgApplyTeamToPracticeLobby::ArenaDtor(void* object) {
  CMsgApplyTeamToPracticeLobby* _this = reinterpret_cast< CMsgApplyTeamToPracticeLobby* >(object);
  (void)_this;
}
void CMsgApplyTeamToPracticeLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyTeamToPracticeLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyTeamToPracticeLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyTeamToPracticeLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyTeamToPracticeLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyTeamToPracticeLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyTeamToPracticeLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyTeamToPracticeLobby)
  return target;
}

size_t CMsgApplyTeamToPracticeLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyTeamToPracticeLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_team_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgApplyTeamToPracticeLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyTeamToPracticeLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgApplyTeamToPracticeLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgApplyTeamToPracticeLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgApplyTeamToPracticeLobby)
    MergeFrom(*source);
  }
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const CMsgApplyTeamToPracticeLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyTeamToPracticeLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team_id()) {
    _internal_set_team_id(from._internal_team_id());
  }
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgApplyTeamToPracticeLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const CMsgApplyTeamToPracticeLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyTeamToPracticeLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyTeamToPracticeLobby::IsInitialized() const {
  return true;
}

void CMsgApplyTeamToPracticeLobby::InternalSwap(CMsgApplyTeamToPracticeLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyTeamToPracticeLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClearPracticeLobbyTeam::_Internal {
 public:
};

CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClearPracticeLobbyTeam)
}
CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam(const CMsgClearPracticeLobbyTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClearPracticeLobbyTeam)
}

void CMsgClearPracticeLobbyTeam::SharedCtor() {
}

CMsgClearPracticeLobbyTeam::~CMsgClearPracticeLobbyTeam() {
  // @@protoc_insertion_point(destructor:CMsgClearPracticeLobbyTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClearPracticeLobbyTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClearPracticeLobbyTeam::ArenaDtor(void* object) {
  CMsgClearPracticeLobbyTeam* _this = reinterpret_cast< CMsgClearPracticeLobbyTeam* >(object);
  (void)_this;
}
void CMsgClearPracticeLobbyTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClearPracticeLobbyTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClearPracticeLobbyTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearPracticeLobbyTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearPracticeLobbyTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClearPracticeLobbyTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearPracticeLobbyTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearPracticeLobbyTeam)
  return target;
}

size_t CMsgClearPracticeLobbyTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearPracticeLobbyTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClearPracticeLobbyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearPracticeLobbyTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClearPracticeLobbyTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClearPracticeLobbyTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClearPracticeLobbyTeam)
    MergeFrom(*source);
  }
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const CMsgClearPracticeLobbyTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearPracticeLobbyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClearPracticeLobbyTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClearPracticeLobbyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearPracticeLobbyTeam::CopyFrom(const CMsgClearPracticeLobbyTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearPracticeLobbyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearPracticeLobbyTeam::IsInitialized() const {
  return true;
}

void CMsgClearPracticeLobbyTeam::InternalSwap(CMsgClearPracticeLobbyTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearPracticeLobbyTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyList>()._has_bits_);
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbyList::CMsgPracticeLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyList)
}
CMsgPracticeLobbyList::CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pass_key()) {
    pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pass_key(), 
      GetArena());
  }
  ::memcpy(&region_, &from.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&region_)) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyList)
}

void CMsgPracticeLobbyList::SharedCtor() {
pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&region_)) + sizeof(game_mode_));
}

CMsgPracticeLobbyList::~CMsgPracticeLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pass_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyList::ArenaDtor(void* object) {
  CMsgPracticeLobbyList* _this = reinterpret_cast< CMsgPracticeLobbyList* >(object);
  (void)_this;
}
void CMsgPracticeLobbyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pass_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_mode_) -
        reinterpret_cast<char*>(&region_)) + sizeof(game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pass_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyList.pass_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pass_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyList.pass_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pass_key(), target);
  }

  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region(), target);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_game_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyList)
  return target;
}

size_t CMsgPracticeLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string pass_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional uint32 region = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

    // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyList)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyList::MergeFrom(const CMsgPracticeLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000002u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyList::CopyFrom(const CMsgPracticeLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyList::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyList::InternalSwap(CMsgPracticeLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pass_key_.Swap(&other->pass_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyList, game_mode_)
      + sizeof(CMsgPracticeLobbyList::game_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyList, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyListResponseEntry_CLobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyListResponseEntry_CLobbyMember>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}
CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_id_ = 0u;
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember::~CMsgPracticeLobbyListResponseEntry_CLobbyMember() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::ArenaDtor(void* object) {
  CMsgPracticeLobbyListResponseEntry_CLobbyMember* _this = reinterpret_cast< CMsgPracticeLobbyListResponseEntry_CLobbyMember* >(object);
  (void)_this;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmpty();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyListResponseEntry_CLobbyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyListResponseEntry_CLobbyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry_CLobbyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyListResponseEntry_CLobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::InternalSwap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyListResponseEntry_CLobbyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyListResponseEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyListResponseEntry>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_requires_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_friend_present(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyListResponseEntry)
}
CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  custom_game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_game_mode()) {
    custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_game_mode(), 
      GetArena());
  }
  custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_map_name()) {
    custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_map_name(), 
      GetArena());
  }
  lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lan_host_ping_location()) {
    lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lan_host_ping_location(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_region_) -
    reinterpret_cast<char*>(&id_)) + sizeof(server_region_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponseEntry)
}

void CMsgPracticeLobbyListResponseEntry::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_region_) -
    reinterpret_cast<char*>(&id_)) + sizeof(server_region_));
}

CMsgPracticeLobbyListResponseEntry::~CMsgPracticeLobbyListResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponseEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyListResponseEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyListResponseEntry::ArenaDtor(void* object) {
  CMsgPracticeLobbyListResponseEntry* _this = reinterpret_cast< CMsgPracticeLobbyListResponseEntry* >(object);
  (void)_this;
}
void CMsgPracticeLobbyListResponseEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyListResponseEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyListResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyListResponseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friend_present_) -
        reinterpret_cast<char*>(&id_)) + sizeof(friend_present_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&game_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&game_mode_)) + sizeof(server_region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyListResponseEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool requires_pass_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_requires_pass_key(&has_bits);
          requires_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_leader_account_id(&has_bits);
          leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_game_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_custom_game_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.custom_game_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool friend_present = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_friend_present(&has_bits);
          friend_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_players(&has_bits);
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_map_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.custom_map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_player_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_max_player_count(&has_bits);
          max_player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_region = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyListResponseEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_members(i), target, stream);
  }

  // optional bool requires_pass_key = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_leader_account_id(), target);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional string custom_game_mode = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_game_mode().data(), static_cast<int>(this->_internal_custom_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.custom_game_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_custom_game_mode(), target);
  }

  // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_game_mode(), target);
  }

  // optional bool friend_present = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_friend_present(), target);
  }

  // optional uint32 players = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_players(), target);
  }

  // optional string custom_map_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_custom_map_name(), target);
  }

  // optional uint32 max_player_count = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_max_player_count(), target);
  }

  // optional uint32 server_region = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_server_region(), target);
  }

  // optional uint32 league_id = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_league_id(), target);
  }

  // optional string lan_host_ping_location = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_lan_host_ping_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponseEntry)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyListResponseEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string custom_game_mode = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_game_mode());
    }

    // optional string custom_map_name = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional uint64 id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 leader_account_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leader_account_id());
    }

    // optional bool requires_pass_key = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool friend_present = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional uint32 players = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players());
    }

    // optional uint32 league_id = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 max_player_count = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_player_count());
    }

    // optional uint32 server_region = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyListResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyListResponseEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyListResponseEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyListResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const CMsgPracticeLobbyListResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyListResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_custom_game_mode(from._internal_custom_game_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000080u) {
      friend_present_ = from.friend_present_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00000400u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_player_count_ = from.max_player_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyListResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const CMsgPracticeLobbyListResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyListResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry::InternalSwap(CMsgPracticeLobbyListResponseEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_game_mode_.Swap(&other->custom_game_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_map_name_.Swap(&other->custom_map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, server_region_)
      + sizeof(CMsgPracticeLobbyListResponseEntry::server_region_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyListResponseEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyListResponse::_Internal {
 public:
};

CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lobbies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyListResponse)
}
CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponse)
}

void CMsgPracticeLobbyListResponse::SharedCtor() {
}

CMsgPracticeLobbyListResponse::~CMsgPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyListResponse::ArenaDtor(void* object) {
  CMsgPracticeLobbyListResponse* _this = reinterpret_cast< CMsgPracticeLobbyListResponse* >(object);
  (void)_this;
}
void CMsgPracticeLobbyListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lobbies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponse)
  return target;
}

size_t CMsgPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponse::MergeFrom(const CMsgPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgPracticeLobbyListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponse::CopyFrom(const CMsgPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponse::InternalSwap(CMsgPracticeLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lobbies_.InternalSwap(&other->lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyList>()._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyList::CMsgLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyList)
}
CMsgLobbyList::CMsgLobbyList(const CMsgLobbyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_region_, &from.server_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&server_region_)) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyList)
}

void CMsgLobbyList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&server_region_)) + sizeof(game_mode_));
}

CMsgLobbyList::~CMsgLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgLobbyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyList::ArenaDtor(void* object) {
  CMsgLobbyList* _this = reinterpret_cast< CMsgLobbyList* >(object);
  (void)_this;
}
void CMsgLobbyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_mode_) -
        reinterpret_cast<char*>(&server_region_)) + sizeof(game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyList)
  return target;
}

size_t CMsgLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 server_region = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

    // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyList)
    MergeFrom(*source);
  }
}

void CMsgLobbyList::MergeFrom(const CMsgLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyList::CopyFrom(const CMsgLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyList::IsInitialized() const {
  return true;
}

void CMsgLobbyList::InternalSwap(CMsgLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyList, game_mode_)
      + sizeof(CMsgLobbyList::game_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyList, server_region_)>(
          reinterpret_cast<char*>(&server_region_),
          reinterpret_cast<char*>(&other->server_region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyListResponse::_Internal {
 public:
};

CMsgLobbyListResponse::CMsgLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lobbies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyListResponse)
}
CMsgLobbyListResponse::CMsgLobbyListResponse(const CMsgLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyListResponse)
}

void CMsgLobbyListResponse::SharedCtor() {
}

CMsgLobbyListResponse::~CMsgLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgLobbyListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyListResponse::ArenaDtor(void* object) {
  CMsgLobbyListResponse* _this = reinterpret_cast< CMsgLobbyListResponse* >(object);
  (void)_this;
}
void CMsgLobbyListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lobbies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyListResponse)
  return target;
}

size_t CMsgLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgLobbyListResponse::MergeFrom(const CMsgLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgLobbyListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyListResponse::CopyFrom(const CMsgLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyListResponse::InternalSwap(CMsgLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lobbies_.InternalSwap(&other->lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyJoin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyJoin>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyJoin)
}
CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pass_key()) {
    pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pass_key(), 
      GetArena());
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_crc_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_crc_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoin)
}

void CMsgPracticeLobbyJoin::SharedCtor() {
pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_crc_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_crc_));
}

CMsgPracticeLobbyJoin::~CMsgPracticeLobbyJoin() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyJoin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pass_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyJoin::ArenaDtor(void* object) {
  CMsgPracticeLobbyJoin* _this = reinterpret_cast< CMsgPracticeLobbyJoin* >(object);
  (void)_this;
}
void CMsgPracticeLobbyJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyJoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pass_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_crc_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyJoin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pass_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPracticeLobbyJoin.pass_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_custom_game_crc(&has_bits);
          custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_custom_game_timestamp(&has_bits);
          custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyJoin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoin.pass_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass_key(), target);
  }

  // optional fixed64 custom_game_crc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_custom_game_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoin)
  return target;
}

size_t CMsgPracticeLobbyJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyJoin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string pass_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional fixed32 custom_game_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed64 custom_game_crc = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyJoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyJoin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyJoin)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoin::MergeFrom(const CMsgPracticeLobbyJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoin::CopyFrom(const CMsgPracticeLobbyJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoin::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoin::InternalSwap(CMsgPracticeLobbyJoin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pass_key_.Swap(&other->pass_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyJoin, custom_game_crc_)
      + sizeof(CMsgPracticeLobbyJoin::custom_game_crc_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyJoin, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyJoin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPracticeLobbyJoinResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyJoinResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyJoinResponse)
}
CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoinResponse)
}

void CMsgPracticeLobbyJoinResponse::SharedCtor() {
result_ = 0;
}

CMsgPracticeLobbyJoinResponse::~CMsgPracticeLobbyJoinResponse() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoinResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPracticeLobbyJoinResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPracticeLobbyJoinResponse::ArenaDtor(void* object) {
  CMsgPracticeLobbyJoinResponse* _this = reinterpret_cast< CMsgPracticeLobbyJoinResponse* >(object);
  (void)_this;
}
void CMsgPracticeLobbyJoinResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPracticeLobbyJoinResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPracticeLobbyJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyJoinResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyJoinResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAJoinLobbyResult_IsValid(val))) {
            _internal_set_result(static_cast<::DOTAJoinLobbyResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPracticeLobbyJoinResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoinResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoinResponse)
  return target;
}

size_t CMsgPracticeLobbyJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyJoinResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPracticeLobbyJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPracticeLobbyJoinResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPracticeLobbyJoinResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPracticeLobbyJoinResponse)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const CMsgPracticeLobbyJoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPracticeLobbyJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const CMsgPracticeLobbyJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinResponse::InternalSwap(CMsgPracticeLobbyJoinResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyJoinResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFriendPracticeLobbyListRequest::_Internal {
 public:
};

CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFriendPracticeLobbyListRequest)
}
CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgFriendPracticeLobbyListRequest)
}

void CMsgFriendPracticeLobbyListRequest::SharedCtor() {
}

CMsgFriendPracticeLobbyListRequest::~CMsgFriendPracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:CMsgFriendPracticeLobbyListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFriendPracticeLobbyListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFriendPracticeLobbyListRequest::ArenaDtor(void* object) {
  CMsgFriendPracticeLobbyListRequest* _this = reinterpret_cast< CMsgFriendPracticeLobbyListRequest* >(object);
  (void)_this;
}
void CMsgFriendPracticeLobbyListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFriendPracticeLobbyListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFriendPracticeLobbyListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFriendPracticeLobbyListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFriendPracticeLobbyListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_friends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_friends(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFriendPracticeLobbyListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFriendPracticeLobbyListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  for (int i = 0, n = this->_internal_friends_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friends(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFriendPracticeLobbyListRequest)
  return target;
}

size_t CMsgFriendPracticeLobbyListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFriendPracticeLobbyListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->friends_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_friends_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFriendPracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFriendPracticeLobbyListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFriendPracticeLobbyListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFriendPracticeLobbyListRequest)
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const CMsgFriendPracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFriendPracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFriendPracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const CMsgFriendPracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFriendPracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListRequest::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListRequest::InternalSwap(CMsgFriendPracticeLobbyListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFriendPracticeLobbyListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFriendPracticeLobbyListResponse::_Internal {
 public:
};

CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lobbies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFriendPracticeLobbyListResponse)
}
CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgFriendPracticeLobbyListResponse)
}

void CMsgFriendPracticeLobbyListResponse::SharedCtor() {
}

CMsgFriendPracticeLobbyListResponse::~CMsgFriendPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgFriendPracticeLobbyListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFriendPracticeLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFriendPracticeLobbyListResponse::ArenaDtor(void* object) {
  CMsgFriendPracticeLobbyListResponse* _this = reinterpret_cast< CMsgFriendPracticeLobbyListResponse* >(object);
  (void)_this;
}
void CMsgFriendPracticeLobbyListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFriendPracticeLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFriendPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFriendPracticeLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFriendPracticeLobbyListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFriendPracticeLobbyListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFriendPracticeLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lobbies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFriendPracticeLobbyListResponse)
  return target;
}

size_t CMsgFriendPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFriendPracticeLobbyListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFriendPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFriendPracticeLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFriendPracticeLobbyListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFriendPracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const CMsgFriendPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFriendPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFriendPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const CMsgFriendPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFriendPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListResponse::InternalSwap(CMsgFriendPracticeLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lobbies_.InternalSwap(&other->lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFriendPracticeLobbyListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJoinableCustomGameModesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomGameModesRequest>()._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomGameModesRequest)
}
CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(const CMsgJoinableCustomGameModesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_region_ = from.server_region_;
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesRequest)
}

void CMsgJoinableCustomGameModesRequest::SharedCtor() {
server_region_ = 0u;
}

CMsgJoinableCustomGameModesRequest::~CMsgJoinableCustomGameModesRequest() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJoinableCustomGameModesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJoinableCustomGameModesRequest::ArenaDtor(void* object) {
  CMsgJoinableCustomGameModesRequest* _this = reinterpret_cast< CMsgJoinableCustomGameModesRequest* >(object);
  (void)_this;
}
void CMsgJoinableCustomGameModesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJoinableCustomGameModesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJoinableCustomGameModesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomGameModesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_region_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomGameModesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJoinableCustomGameModesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesRequest)
  return target;
}

size_t CMsgJoinableCustomGameModesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomGameModesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_region = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_region());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJoinableCustomGameModesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJoinableCustomGameModesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJoinableCustomGameModesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJoinableCustomGameModesRequest)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const CMsgJoinableCustomGameModesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomGameModesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_region()) {
    _internal_set_server_region(from._internal_server_region());
  }
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJoinableCustomGameModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const CMsgJoinableCustomGameModesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomGameModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesRequest::InternalSwap(CMsgJoinableCustomGameModesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_region_, other->server_region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomGameModesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJoinableCustomGameModesResponseEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomGameModesResponseEntry>()._has_bits_);
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomGameModesResponseEntry)
}
CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(const CMsgJoinableCustomGameModesResponseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(player_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesResponseEntry)
}

void CMsgJoinableCustomGameModesResponseEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&custom_game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(player_count_));
}

CMsgJoinableCustomGameModesResponseEntry::~CMsgJoinableCustomGameModesResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesResponseEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJoinableCustomGameModesResponseEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJoinableCustomGameModesResponseEntry::ArenaDtor(void* object) {
  CMsgJoinableCustomGameModesResponseEntry* _this = reinterpret_cast< CMsgJoinableCustomGameModesResponseEntry* >(object);
  (void)_this;
}
void CMsgJoinableCustomGameModesResponseEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJoinableCustomGameModesResponseEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJoinableCustomGameModesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomGameModesResponseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_count_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(player_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomGameModesResponseEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 custom_game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lobby_count(&has_bits);
          lobby_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_count(&has_bits);
          player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJoinableCustomGameModesResponseEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesResponseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_custom_game_id(), target);
  }

  // optional uint32 lobby_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lobby_count(), target);
  }

  // optional uint32 player_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomGameModesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomGameModesResponseEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 custom_game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional uint32 lobby_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_count());
    }

    // optional uint32 player_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJoinableCustomGameModesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponseEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJoinableCustomGameModesResponseEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJoinableCustomGameModesResponseEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJoinableCustomGameModesResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomGameModesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_count_ = from.lobby_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_count_ = from.player_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJoinableCustomGameModesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomGameModesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponseEntry::InternalSwap(CMsgJoinableCustomGameModesResponseEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, player_count_)
      + sizeof(CMsgJoinableCustomGameModesResponseEntry::player_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, custom_game_id_)>(
          reinterpret_cast<char*>(&custom_game_id_),
          reinterpret_cast<char*>(&other->custom_game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomGameModesResponseEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJoinableCustomGameModesResponse::_Internal {
 public:
};

CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_modes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomGameModesResponse)
}
CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(const CMsgJoinableCustomGameModesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_modes_(from.game_modes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesResponse)
}

void CMsgJoinableCustomGameModesResponse::SharedCtor() {
}

CMsgJoinableCustomGameModesResponse::~CMsgJoinableCustomGameModesResponse() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJoinableCustomGameModesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJoinableCustomGameModesResponse::ArenaDtor(void* object) {
  CMsgJoinableCustomGameModesResponse* _this = reinterpret_cast< CMsgJoinableCustomGameModesResponse* >(object);
  (void)_this;
}
void CMsgJoinableCustomGameModesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJoinableCustomGameModesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJoinableCustomGameModesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomGameModesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_modes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomGameModesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_modes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJoinableCustomGameModesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_modes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_game_modes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesResponse)
  return target;
}

size_t CMsgJoinableCustomGameModesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomGameModesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  total_size += 1UL * this->_internal_game_modes_size();
  for (const auto& msg : this->game_modes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJoinableCustomGameModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJoinableCustomGameModesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJoinableCustomGameModesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJoinableCustomGameModesResponse)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const CMsgJoinableCustomGameModesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomGameModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_modes_.MergeFrom(from.game_modes_);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJoinableCustomGameModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const CMsgJoinableCustomGameModesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomGameModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponse::InternalSwap(CMsgJoinableCustomGameModesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_modes_.InternalSwap(&other->game_modes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomGameModesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJoinableCustomLobbiesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomLobbiesRequest>()._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomLobbiesRequest)
}
CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(const CMsgJoinableCustomLobbiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_region_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(server_region_));
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesRequest)
}

void CMsgJoinableCustomLobbiesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&custom_game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_region_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(server_region_));
}

CMsgJoinableCustomLobbiesRequest::~CMsgJoinableCustomLobbiesRequest() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJoinableCustomLobbiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJoinableCustomLobbiesRequest::ArenaDtor(void* object) {
  CMsgJoinableCustomLobbiesRequest* _this = reinterpret_cast< CMsgJoinableCustomLobbiesRequest* >(object);
  (void)_this;
}
void CMsgJoinableCustomLobbiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJoinableCustomLobbiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJoinableCustomLobbiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomLobbiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(server_region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomLobbiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJoinableCustomLobbiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_custom_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesRequest)
  return target;
}

size_t CMsgJoinableCustomLobbiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomLobbiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional uint32 server_region = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJoinableCustomLobbiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJoinableCustomLobbiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJoinableCustomLobbiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJoinableCustomLobbiesRequest)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const CMsgJoinableCustomLobbiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomLobbiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJoinableCustomLobbiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const CMsgJoinableCustomLobbiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomLobbiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesRequest::InternalSwap(CMsgJoinableCustomLobbiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, server_region_)
      + sizeof(CMsgJoinableCustomLobbiesRequest::server_region_)
      - PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, custom_game_id_)>(
          reinterpret_cast<char*>(&custom_game_id_),
          reinterpret_cast<char*>(&other->custom_game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomLobbiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJoinableCustomLobbiesResponseEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomLobbiesResponseEntry>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lobby_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_leader_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomLobbiesResponseEntry)
}
CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(const CMsgJoinableCustomLobbiesResponseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lobby_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lobby_name()) {
    lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lobby_name(), 
      GetArena());
  }
  leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leader_name()) {
    leader_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leader_name(), 
      GetArena());
  }
  custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_map_name()) {
    custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_map_name(), 
      GetArena());
  }
  lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lan_host_ping_location()) {
    lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lan_host_ping_location(), 
      GetArena());
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_pass_key_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(has_pass_key_));
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesResponseEntry)
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedCtor() {
lobby_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_pass_key_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(has_pass_key_));
}

CMsgJoinableCustomLobbiesResponseEntry::~CMsgJoinableCustomLobbiesResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesResponseEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lobby_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgJoinableCustomLobbiesResponseEntry::ArenaDtor(void* object) {
  CMsgJoinableCustomLobbiesResponseEntry* _this = reinterpret_cast< CMsgJoinableCustomLobbiesResponseEntry* >(object);
  (void)_this;
}
void CMsgJoinableCustomLobbiesResponseEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJoinableCustomLobbiesResponseEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJoinableCustomLobbiesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomLobbiesResponseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      leader_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_account_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(leader_account_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&max_player_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_pass_key_) -
        reinterpret_cast<char*>(&max_player_count_)) + sizeof(has_pass_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomLobbiesResponseEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lobby_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lobby_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 member_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_member_count(&has_bits);
          member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_leader_account_id(&has_bits);
          leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string leader_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_leader_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.leader_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_map_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_player_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_player_count(&has_bits);
          max_player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_region = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_pass_key = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_has_pass_key(&has_bits);
          has_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJoinableCustomLobbiesResponseEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesResponseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_custom_game_id(), target);
  }

  // optional string lobby_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lobby_name().data(), static_cast<int>(this->_internal_lobby_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lobby_name(), target);
  }

  // optional uint32 member_count = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_member_count(), target);
  }

  // optional uint32 leader_account_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_leader_account_id(), target);
  }

  // optional string leader_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leader_name().data(), static_cast<int>(this->_internal_leader_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.leader_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_leader_name(), target);
  }

  // optional string custom_map_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_custom_map_name(), target);
  }

  // optional uint32 max_player_count = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_player_count(), target);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_server_region(), target);
  }

  // optional bool has_pass_key = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_has_pass_key(), target);
  }

  // optional string lan_host_ping_location = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_lan_host_ping_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomLobbiesResponseEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lobby_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lobby_name());
    }

    // optional string leader_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leader_name());
    }

    // optional string custom_map_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional fixed64 lobby_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional uint32 member_count = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_member_count());
    }

    // optional uint32 leader_account_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leader_account_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 max_player_count = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_player_count());
    }

    // optional uint32 server_region = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

    // optional bool has_pass_key = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJoinableCustomLobbiesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponseEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJoinableCustomLobbiesResponseEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJoinableCustomLobbiesResponseEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJoinableCustomLobbiesResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomLobbiesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lobby_name(from._internal_lobby_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_leader_name(from._internal_leader_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      member_count_ = from.member_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      leader_account_id_ = from.leader_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      max_player_count_ = from.max_player_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_pass_key_ = from.has_pass_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJoinableCustomLobbiesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomLobbiesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponseEntry::InternalSwap(CMsgJoinableCustomLobbiesResponseEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_name_.Swap(&other->lobby_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leader_name_.Swap(&other->leader_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_map_name_.Swap(&other->custom_map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, has_pass_key_)
      + sizeof(CMsgJoinableCustomLobbiesResponseEntry::has_pass_key_)
      - PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomLobbiesResponseEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJoinableCustomLobbiesResponse::_Internal {
 public:
};

CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lobbies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomLobbiesResponse)
}
CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(const CMsgJoinableCustomLobbiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesResponse)
}

void CMsgJoinableCustomLobbiesResponse::SharedCtor() {
}

CMsgJoinableCustomLobbiesResponse::~CMsgJoinableCustomLobbiesResponse() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJoinableCustomLobbiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJoinableCustomLobbiesResponse::ArenaDtor(void* object) {
  CMsgJoinableCustomLobbiesResponse* _this = reinterpret_cast< CMsgJoinableCustomLobbiesResponse* >(object);
  (void)_this;
}
void CMsgJoinableCustomLobbiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJoinableCustomLobbiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJoinableCustomLobbiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomLobbiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomLobbiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJoinableCustomLobbiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lobbies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesResponse)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomLobbiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJoinableCustomLobbiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJoinableCustomLobbiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJoinableCustomLobbiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJoinableCustomLobbiesResponse)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const CMsgJoinableCustomLobbiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomLobbiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJoinableCustomLobbiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const CMsgJoinableCustomLobbiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomLobbiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponse::InternalSwap(CMsgJoinableCustomLobbiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lobbies_.InternalSwap(&other->lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomLobbiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgQuickJoinCustomLobby_LegacyRegionPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuickJoinCustomLobby_LegacyRegionPing>()._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_region_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
}
CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_region_, &from.server_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_code_) -
    reinterpret_cast<char*>(&server_region_)) + sizeof(region_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&region_code_) -
    reinterpret_cast<char*>(&server_region_)) + sizeof(region_code_));
}

CMsgQuickJoinCustomLobby_LegacyRegionPing::~CMsgQuickJoinCustomLobby_LegacyRegionPing() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::ArenaDtor(void* object) {
  CMsgQuickJoinCustomLobby_LegacyRegionPing* _this = reinterpret_cast< CMsgQuickJoinCustomLobby_LegacyRegionPing* >(object);
  (void)_this;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_code_) -
        reinterpret_cast<char*>(&server_region_)) + sizeof(region_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuickJoinCustomLobby_LegacyRegionPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 region_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_region_code(&has_bits);
          region_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuickJoinCustomLobby_LegacyRegionPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping(), target);
  }

  // optional fixed32 region_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_region_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return target;
}

size_t CMsgQuickJoinCustomLobby_LegacyRegionPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 server_region = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

    // optional uint32 ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping());
    }

    // optional fixed32 region_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby_LegacyRegionPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuickJoinCustomLobby_LegacyRegionPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuickJoinCustomLobby.LegacyRegionPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuickJoinCustomLobby.LegacyRegionPing)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_code_ = from.region_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby_LegacyRegionPing::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::InternalSwap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, region_code_)
      + sizeof(CMsgQuickJoinCustomLobby_LegacyRegionPing::region_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, server_region_)>(
          reinterpret_cast<char*>(&server_region_),
          reinterpret_cast<char*>(&other->server_region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuickJoinCustomLobby_LegacyRegionPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgQuickJoinCustomLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuickJoinCustomLobby>()._has_bits_);
  static void set_has_legacy_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgPracticeLobbySetDetails& create_lobby_details(const CMsgQuickJoinCustomLobby* msg);
  static void set_has_create_lobby_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_any_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgQuickJoinCustomLobby* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgPracticeLobbySetDetails&
CMsgQuickJoinCustomLobby::_Internal::create_lobby_details(const CMsgQuickJoinCustomLobby* msg) {
  return *msg->create_lobby_details_;
}
const ::CMsgClientPingData&
CMsgQuickJoinCustomLobby::_Internal::ping_data(const CMsgQuickJoinCustomLobby* msg) {
  return *msg->ping_data_;
}
void CMsgQuickJoinCustomLobby::clear_ping_data() {
  if (ping_data_ != nullptr) ping_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  legacy_region_pings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuickJoinCustomLobby)
}
CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(const CMsgQuickJoinCustomLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      legacy_region_pings_(from.legacy_region_pings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_create_lobby_details()) {
    create_lobby_details_ = new ::CMsgPracticeLobbySetDetails(*from.create_lobby_details_);
  } else {
    create_lobby_details_ = nullptr;
  }
  if (from._internal_has_ping_data()) {
    ping_data_ = new ::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_any_map_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(allow_any_map_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobby)
}

void CMsgQuickJoinCustomLobby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&create_lobby_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_any_map_) -
    reinterpret_cast<char*>(&create_lobby_details_)) + sizeof(allow_any_map_));
}

CMsgQuickJoinCustomLobby::~CMsgQuickJoinCustomLobby() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuickJoinCustomLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete create_lobby_details_;
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgQuickJoinCustomLobby::ArenaDtor(void* object) {
  CMsgQuickJoinCustomLobby* _this = reinterpret_cast< CMsgQuickJoinCustomLobby* >(object);
  (void)_this;
}
void CMsgQuickJoinCustomLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuickJoinCustomLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuickJoinCustomLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuickJoinCustomLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legacy_region_pings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(create_lobby_details_ != nullptr);
      create_lobby_details_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ping_data_ != nullptr);
      ping_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_any_map_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(allow_any_map_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuickJoinCustomLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_legacy_server_region(&has_bits);
          legacy_server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_lobby_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_any_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_allow_any_map(&has_bits);
          allow_any_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_legacy_region_pings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuickJoinCustomLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_server_region = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_legacy_server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_custom_game_id(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::create_lobby_details(this), target, stream);
  }

  // optional bool allow_any_map = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_any_map(), target);
  }

  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_legacy_region_pings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_legacy_region_pings(i), target, stream);
  }

  // optional .CMsgClientPingData ping_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ping_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobby)
  return target;
}

size_t CMsgQuickJoinCustomLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuickJoinCustomLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  total_size += 1UL * this->_internal_legacy_region_pings_size();
  for (const auto& msg : this->legacy_region_pings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *create_lobby_details_);
    }

    // optional .CMsgClientPingData ping_data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional uint32 legacy_server_region = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_server_region());
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional bool allow_any_map = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuickJoinCustomLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuickJoinCustomLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuickJoinCustomLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuickJoinCustomLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuickJoinCustomLobby)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby::MergeFrom(const CMsgQuickJoinCustomLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuickJoinCustomLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacy_region_pings_.MergeFrom(from.legacy_region_pings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_create_lobby_details()->::CMsgPracticeLobbySetDetails::MergeFrom(from._internal_create_lobby_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000004u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_server_region_ = from.legacy_server_region_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      allow_any_map_ = from.allow_any_map_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuickJoinCustomLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuickJoinCustomLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby::CopyFrom(const CMsgQuickJoinCustomLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuickJoinCustomLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby::InternalSwap(CMsgQuickJoinCustomLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  legacy_region_pings_.InternalSwap(&other->legacy_region_pings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby, allow_any_map_)
      + sizeof(CMsgQuickJoinCustomLobby::allow_any_map_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby, create_lobby_details_)>(
          reinterpret_cast<char*>(&create_lobby_details_),
          reinterpret_cast<char*>(&other->create_lobby_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuickJoinCustomLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgQuickJoinCustomLobbyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuickJoinCustomLobbyResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuickJoinCustomLobbyResponse)
}
CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(const CMsgQuickJoinCustomLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobbyResponse)
}

void CMsgQuickJoinCustomLobbyResponse::SharedCtor() {
result_ = 0;
}

CMsgQuickJoinCustomLobbyResponse::~CMsgQuickJoinCustomLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuickJoinCustomLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgQuickJoinCustomLobbyResponse::ArenaDtor(void* object) {
  CMsgQuickJoinCustomLobbyResponse* _this = reinterpret_cast< CMsgQuickJoinCustomLobbyResponse* >(object);
  (void)_this;
}
void CMsgQuickJoinCustomLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuickJoinCustomLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuickJoinCustomLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuickJoinCustomLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuickJoinCustomLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAJoinLobbyResult_IsValid(val))) {
            _internal_set_result(static_cast<::DOTAJoinLobbyResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuickJoinCustomLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobbyResponse)
  return target;
}

size_t CMsgQuickJoinCustomLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuickJoinCustomLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuickJoinCustomLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuickJoinCustomLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuickJoinCustomLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuickJoinCustomLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuickJoinCustomLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuickJoinCustomLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuickJoinCustomLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobbyResponse::InternalSwap(CMsgQuickJoinCustomLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuickJoinCustomLobbyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotGameCreate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotGameCreate>()._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgBotGameCreate::CMsgBotGameCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotGameCreate)
}
CMsgBotGameCreate::CMsgBotGameCreate(const CMsgBotGameCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_search_key()) {
    search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_key(), 
      GetArena());
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_dire_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotGameCreate)
}

void CMsgBotGameCreate::SharedCtor() {
search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&difficulty_dire_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(difficulty_dire_));
}

CMsgBotGameCreate::~CMsgBotGameCreate() {
  // @@protoc_insertion_point(destructor:CMsgBotGameCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotGameCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotGameCreate::ArenaDtor(void* object) {
  CMsgBotGameCreate* _this = reinterpret_cast< CMsgBotGameCreate* >(object);
  (void)_this;
}
void CMsgBotGameCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotGameCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotGameCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&difficulty_dire_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(difficulty_dire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotGameCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotGameCreate.search_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotGameCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotGameCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotGameCreate.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_difficulty_radiant(), target);
  }

  // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_team(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_game_mode(), target);
  }

  // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_difficulty_dire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotGameCreate)
  return target;
}

size_t CMsgBotGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotGameCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_difficulty_radiant());
    }

    // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 game_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_difficulty_dire());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotGameCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotGameCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotGameCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotGameCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotGameCreate)
    MergeFrom(*source);
  }
}

void CMsgBotGameCreate::MergeFrom(const CMsgBotGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      difficulty_radiant_ = from.difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficulty_dire_ = from.difficulty_dire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotGameCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotGameCreate::CopyFrom(const CMsgBotGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotGameCreate::IsInitialized() const {
  return true;
}

void CMsgBotGameCreate::InternalSwap(CMsgBotGameCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotGameCreate, difficulty_dire_)
      + sizeof(CMsgBotGameCreate::difficulty_dire_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotGameCreate, client_version_)>(
          reinterpret_cast<char*>(&client_version_),
          reinterpret_cast<char*>(&other->client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotGameCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCustomGameCreate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCustomGameCreate>()._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgCustomGameCreate::CMsgCustomGameCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCustomGameCreate)
}
CMsgCustomGameCreate::CMsgCustomGameCreate(const CMsgCustomGameCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_search_key()) {
    search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_key(), 
      GetArena());
  }
  game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_mode()) {
    game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_mode(), 
      GetArena());
  }
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map(), 
      GetArena());
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgCustomGameCreate)
}

void CMsgCustomGameCreate::SharedCtor() {
search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
}

CMsgCustomGameCreate::~CMsgCustomGameCreate() {
  // @@protoc_insertion_point(destructor:CMsgCustomGameCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCustomGameCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgCustomGameCreate::ArenaDtor(void* object) {
  CMsgCustomGameCreate* _this = reinterpret_cast< CMsgCustomGameCreate* >(object);
  (void)_this;
}
void CMsgCustomGameCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCustomGameCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCustomGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCustomGameCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_id_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCustomGameCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgCustomGameCreate.search_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_difficulty(&has_bits);
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_game_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgCustomGameCreate.game_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgCustomGameCreate.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCustomGameCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCustomGameCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCustomGameCreate.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_difficulty(), target);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_mode().data(), static_cast<int>(this->_internal_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCustomGameCreate.game_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_game_mode(), target);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCustomGameCreate.map");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_custom_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCustomGameCreate)
  return target;
}

size_t CMsgCustomGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCustomGameCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional string game_mode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_mode());
    }

    // optional string map = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional uint32 difficulty = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_difficulty());
    }

    // optional uint64 custom_game_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCustomGameCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCustomGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCustomGameCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCustomGameCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCustomGameCreate)
    MergeFrom(*source);
  }
}

void CMsgCustomGameCreate::MergeFrom(const CMsgCustomGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCustomGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_mode(from._internal_game_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCustomGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameCreate::CopyFrom(const CMsgCustomGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCustomGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameCreate::IsInitialized() const {
  return true;
}

void CMsgCustomGameCreate::InternalSwap(CMsgCustomGameCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_mode_.Swap(&other->game_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCustomGameCreate, custom_game_id_)
      + sizeof(CMsgCustomGameCreate::custom_game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgCustomGameCreate, client_version_)>(
          reinterpret_cast<char*>(&client_version_),
          reinterpret_cast<char*>(&other->client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCustomGameCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgEventGameCreate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgEventGameCreate>()._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgEventGameCreate::CMsgEventGameCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgEventGameCreate)
}
CMsgEventGameCreate::CMsgEventGameCreate(const CMsgEventGameCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_search_key()) {
    search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_key(), 
      GetArena());
  }
  game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_mode()) {
    game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_mode(), 
      GetArena());
  }
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map(), 
      GetArena());
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgEventGameCreate)
}

void CMsgEventGameCreate::SharedCtor() {
search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
}

CMsgEventGameCreate::~CMsgEventGameCreate() {
  // @@protoc_insertion_point(destructor:CMsgEventGameCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgEventGameCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgEventGameCreate::ArenaDtor(void* object) {
  CMsgEventGameCreate* _this = reinterpret_cast< CMsgEventGameCreate* >(object);
  (void)_this;
}
void CMsgEventGameCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgEventGameCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgEventGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgEventGameCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_id_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgEventGameCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgEventGameCreate.search_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_difficulty(&has_bits);
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_game_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgEventGameCreate.game_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgEventGameCreate.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgEventGameCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEventGameCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgEventGameCreate.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_difficulty(), target);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_mode().data(), static_cast<int>(this->_internal_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgEventGameCreate.game_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_game_mode(), target);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgEventGameCreate.map");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_custom_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEventGameCreate)
  return target;
}

size_t CMsgEventGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgEventGameCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional string game_mode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_mode());
    }

    // optional string map = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional uint32 difficulty = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_difficulty());
    }

    // optional uint64 custom_game_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgEventGameCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgEventGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgEventGameCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgEventGameCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgEventGameCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgEventGameCreate)
    MergeFrom(*source);
  }
}

void CMsgEventGameCreate::MergeFrom(const CMsgEventGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgEventGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_mode(from._internal_game_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgEventGameCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgEventGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEventGameCreate::CopyFrom(const CMsgEventGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgEventGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEventGameCreate::IsInitialized() const {
  return true;
}

void CMsgEventGameCreate::InternalSwap(CMsgEventGameCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_mode_.Swap(&other->game_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgEventGameCreate, custom_game_id_)
      + sizeof(CMsgEventGameCreate::custom_game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgEventGameCreate, client_version_)>(
          reinterpret_cast<char*>(&client_version_),
          reinterpret_cast<char*>(&other->client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgEventGameCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPartyMemberSetCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPartyMemberSetCoach>()._has_bits_);
  static void set_has_wants_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPartyMemberSetCoach)
}
CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wants_coach_ = from.wants_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPartyMemberSetCoach)
}

void CMsgDOTAPartyMemberSetCoach::SharedCtor() {
wants_coach_ = false;
}

CMsgDOTAPartyMemberSetCoach::~CMsgDOTAPartyMemberSetCoach() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPartyMemberSetCoach)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPartyMemberSetCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPartyMemberSetCoach::ArenaDtor(void* object) {
  CMsgDOTAPartyMemberSetCoach* _this = reinterpret_cast< CMsgDOTAPartyMemberSetCoach* >(object);
  (void)_this;
}
void CMsgDOTAPartyMemberSetCoach::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPartyMemberSetCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPartyMemberSetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPartyMemberSetCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wants_coach_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPartyMemberSetCoach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool wants_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wants_coach(&has_bits);
          wants_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPartyMemberSetCoach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPartyMemberSetCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wants_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_wants_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPartyMemberSetCoach)
  return target;
}

size_t CMsgDOTAPartyMemberSetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPartyMemberSetCoach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool wants_coach = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPartyMemberSetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPartyMemberSetCoach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPartyMemberSetCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPartyMemberSetCoach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPartyMemberSetCoach)
    MergeFrom(*source);
  }
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const CMsgDOTAPartyMemberSetCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPartyMemberSetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wants_coach()) {
    _internal_set_wants_coach(from._internal_wants_coach());
  }
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPartyMemberSetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const CMsgDOTAPartyMemberSetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPartyMemberSetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartyMemberSetCoach::IsInitialized() const {
  return true;
}

void CMsgDOTAPartyMemberSetCoach::InternalSwap(CMsgDOTAPartyMemberSetCoach* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wants_coach_, other->wants_coach_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPartyMemberSetCoach::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASetGroupLeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASetGroupLeader>()._has_bits_);
  static void set_has_new_leader_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASetGroupLeader)
}
CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(const CMsgDOTASetGroupLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_leader_steamid_ = from.new_leader_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASetGroupLeader)
}

void CMsgDOTASetGroupLeader::SharedCtor() {
new_leader_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTASetGroupLeader::~CMsgDOTASetGroupLeader() {
  // @@protoc_insertion_point(destructor:CMsgDOTASetGroupLeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASetGroupLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTASetGroupLeader::ArenaDtor(void* object) {
  CMsgDOTASetGroupLeader* _this = reinterpret_cast< CMsgDOTASetGroupLeader* >(object);
  (void)_this;
}
void CMsgDOTASetGroupLeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASetGroupLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASetGroupLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASetGroupLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_leader_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASetGroupLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 new_leader_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_new_leader_steamid(&has_bits);
          new_leader_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASetGroupLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASetGroupLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 new_leader_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_new_leader_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASetGroupLeader)
  return target;
}

size_t CMsgDOTASetGroupLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASetGroupLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 new_leader_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASetGroupLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASetGroupLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASetGroupLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASetGroupLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASetGroupLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASetGroupLeader)
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupLeader::MergeFrom(const CMsgDOTASetGroupLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASetGroupLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_leader_steamid()) {
    _internal_set_new_leader_steamid(from._internal_new_leader_steamid());
  }
}

void CMsgDOTASetGroupLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASetGroupLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupLeader::CopyFrom(const CMsgDOTASetGroupLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASetGroupLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupLeader::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupLeader::InternalSwap(CMsgDOTASetGroupLeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_leader_steamid_, other->new_leader_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASetGroupLeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTACancelGroupInvites::_Internal {
 public:
};

CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  invited_steamids_(arena),
  invited_groupids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACancelGroupInvites)
}
CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(const CMsgDOTACancelGroupInvites& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      invited_steamids_(from.invited_steamids_),
      invited_groupids_(from.invited_groupids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACancelGroupInvites)
}

void CMsgDOTACancelGroupInvites::SharedCtor() {
}

CMsgDOTACancelGroupInvites::~CMsgDOTACancelGroupInvites() {
  // @@protoc_insertion_point(destructor:CMsgDOTACancelGroupInvites)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTACancelGroupInvites::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTACancelGroupInvites::ArenaDtor(void* object) {
  CMsgDOTACancelGroupInvites* _this = reinterpret_cast< CMsgDOTACancelGroupInvites* >(object);
  (void)_this;
}
void CMsgDOTACancelGroupInvites::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTACancelGroupInvites::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTACancelGroupInvites::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACancelGroupInvites)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invited_steamids_.Clear();
  invited_groupids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACancelGroupInvites::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 invited_steamids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_invited_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_invited_steamids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 invited_groupids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_invited_groupids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_invited_groupids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTACancelGroupInvites::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACancelGroupInvites)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  for (int i = 0, n = this->_internal_invited_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_invited_steamids(i), target);
  }

  // repeated fixed64 invited_groupids = 2;
  for (int i = 0, n = this->_internal_invited_groupids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_invited_groupids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACancelGroupInvites)
  return target;
}

size_t CMsgDOTACancelGroupInvites::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACancelGroupInvites)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_invited_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_invited_steamids_size());
    total_size += data_size;
  }

  // repeated fixed64 invited_groupids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_invited_groupids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_invited_groupids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACancelGroupInvites::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTACancelGroupInvites)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACancelGroupInvites* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTACancelGroupInvites>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTACancelGroupInvites)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTACancelGroupInvites)
    MergeFrom(*source);
  }
}

void CMsgDOTACancelGroupInvites::MergeFrom(const CMsgDOTACancelGroupInvites& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACancelGroupInvites)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invited_steamids_.MergeFrom(from.invited_steamids_);
  invited_groupids_.MergeFrom(from.invited_groupids_);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTACancelGroupInvites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const CMsgDOTACancelGroupInvites& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACancelGroupInvites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACancelGroupInvites::IsInitialized() const {
  return true;
}

void CMsgDOTACancelGroupInvites::InternalSwap(CMsgDOTACancelGroupInvites* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  invited_steamids_.InternalSwap(&other->invited_steamids_);
  invited_groupids_.InternalSwap(&other->invited_groupids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACancelGroupInvites::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASetGroupOpenStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASetGroupOpenStatus>()._has_bits_);
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASetGroupOpenStatus)
}
CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(const CMsgDOTASetGroupOpenStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASetGroupOpenStatus)
}

void CMsgDOTASetGroupOpenStatus::SharedCtor() {
open_ = false;
}

CMsgDOTASetGroupOpenStatus::~CMsgDOTASetGroupOpenStatus() {
  // @@protoc_insertion_point(destructor:CMsgDOTASetGroupOpenStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASetGroupOpenStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTASetGroupOpenStatus::ArenaDtor(void* object) {
  CMsgDOTASetGroupOpenStatus* _this = reinterpret_cast< CMsgDOTASetGroupOpenStatus* >(object);
  (void)_this;
}
void CMsgDOTASetGroupOpenStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASetGroupOpenStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASetGroupOpenStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASetGroupOpenStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASetGroupOpenStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_open(&has_bits);
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASetGroupOpenStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASetGroupOpenStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASetGroupOpenStatus)
  return target;
}

size_t CMsgDOTASetGroupOpenStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASetGroupOpenStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool open = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASetGroupOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASetGroupOpenStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASetGroupOpenStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASetGroupOpenStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASetGroupOpenStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const CMsgDOTASetGroupOpenStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASetGroupOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_open()) {
    _internal_set_open(from._internal_open());
  }
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASetGroupOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const CMsgDOTASetGroupOpenStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASetGroupOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupOpenStatus::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupOpenStatus::InternalSwap(CMsgDOTASetGroupOpenStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(open_, other->open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASetGroupOpenStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAGroupMergeInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGroupMergeInvite>()._has_bits_);
  static void set_has_other_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGroupMergeInvite)
}
CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(const CMsgDOTAGroupMergeInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  other_group_id_ = from.other_group_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeInvite)
}

void CMsgDOTAGroupMergeInvite::SharedCtor() {
other_group_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAGroupMergeInvite::~CMsgDOTAGroupMergeInvite() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeInvite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAGroupMergeInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAGroupMergeInvite::ArenaDtor(void* object) {
  CMsgDOTAGroupMergeInvite* _this = reinterpret_cast< CMsgDOTAGroupMergeInvite* >(object);
  (void)_this;
}
void CMsgDOTAGroupMergeInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAGroupMergeInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAGroupMergeInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGroupMergeInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGroupMergeInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 other_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_other_group_id(&has_bits);
          other_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAGroupMergeInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 other_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_other_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeInvite)
  return target;
}

size_t CMsgDOTAGroupMergeInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGroupMergeInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 other_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAGroupMergeInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAGroupMergeInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAGroupMergeInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAGroupMergeInvite)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const CMsgDOTAGroupMergeInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGroupMergeInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_other_group_id()) {
    _internal_set_other_group_id(from._internal_other_group_id());
  }
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAGroupMergeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const CMsgDOTAGroupMergeInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGroupMergeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeInvite::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeInvite::InternalSwap(CMsgDOTAGroupMergeInvite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(other_group_id_, other->other_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGroupMergeInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAGroupMergeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGroupMergeResponse>()._has_bits_);
  static void set_has_initiator_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGroupMergeResponse)
}
CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(const CMsgDOTAGroupMergeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&initiator_group_id_, &from.initiator_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&accept_) -
    reinterpret_cast<char*>(&initiator_group_id_)) + sizeof(accept_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeResponse)
}

void CMsgDOTAGroupMergeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initiator_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accept_) -
    reinterpret_cast<char*>(&initiator_group_id_)) + sizeof(accept_));
}

CMsgDOTAGroupMergeResponse::~CMsgDOTAGroupMergeResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAGroupMergeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAGroupMergeResponse::ArenaDtor(void* object) {
  CMsgDOTAGroupMergeResponse* _this = reinterpret_cast< CMsgDOTAGroupMergeResponse* >(object);
  (void)_this;
}
void CMsgDOTAGroupMergeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAGroupMergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAGroupMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGroupMergeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&initiator_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accept_) -
        reinterpret_cast<char*>(&initiator_group_id_)) + sizeof(accept_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGroupMergeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 initiator_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_initiator_group_id(&has_bits);
          initiator_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAGroupMergeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 initiator_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_initiator_group_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeResponse)
  return target;
}

size_t CMsgDOTAGroupMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGroupMergeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 initiator_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAGroupMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAGroupMergeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAGroupMergeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAGroupMergeResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const CMsgDOTAGroupMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGroupMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      initiator_group_id_ = from.initiator_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAGroupMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const CMsgDOTAGroupMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGroupMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeResponse::InternalSwap(CMsgDOTAGroupMergeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, accept_)
      + sizeof(CMsgDOTAGroupMergeResponse::accept_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, initiator_group_id_)>(
          reinterpret_cast<char*>(&initiator_group_id_),
          reinterpret_cast<char*>(&other->initiator_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGroupMergeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAGroupMergeReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGroupMergeReply>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGroupMergeReply)
}
CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(const CMsgDOTAGroupMergeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeReply)
}

void CMsgDOTAGroupMergeReply::SharedCtor() {
result_ = 0;
}

CMsgDOTAGroupMergeReply::~CMsgDOTAGroupMergeReply() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAGroupMergeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAGroupMergeReply::ArenaDtor(void* object) {
  CMsgDOTAGroupMergeReply* _this = reinterpret_cast< CMsgDOTAGroupMergeReply* >(object);
  (void)_this;
}
void CMsgDOTAGroupMergeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAGroupMergeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAGroupMergeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGroupMergeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGroupMergeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAGroupMergeResult_IsValid(val))) {
            _internal_set_result(static_cast<::EDOTAGroupMergeResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAGroupMergeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeReply)
  return target;
}

size_t CMsgDOTAGroupMergeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGroupMergeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGroupMergeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAGroupMergeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAGroupMergeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAGroupMergeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAGroupMergeReply)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeReply::MergeFrom(const CMsgDOTAGroupMergeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGroupMergeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAGroupMergeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAGroupMergeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeReply::CopyFrom(const CMsgDOTAGroupMergeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGroupMergeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeReply::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeReply::InternalSwap(CMsgDOTAGroupMergeReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGroupMergeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpectatorLobbyGameDetails_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectatorLobbyGameDetails_Team>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyGameDetails.Team)
}
CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(const CMsgSpectatorLobbyGameDetails_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  ::memcpy(&team_logo_, &from.team_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyGameDetails.Team)
}

void CMsgSpectatorLobbyGameDetails_Team::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(team_id_));
}

CMsgSpectatorLobbyGameDetails_Team::~CMsgSpectatorLobbyGameDetails_Team() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyGameDetails.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpectatorLobbyGameDetails_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSpectatorLobbyGameDetails_Team::ArenaDtor(void* object) {
  CMsgSpectatorLobbyGameDetails_Team* _this = reinterpret_cast< CMsgSpectatorLobbyGameDetails_Team* >(object);
  (void)_this;
}
void CMsgSpectatorLobbyGameDetails_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpectatorLobbyGameDetails_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpectatorLobbyGameDetails_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyGameDetails.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&team_logo_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyGameDetails_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSpectatorLobbyGameDetails.Team.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 team_logo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpectatorLobbyGameDetails_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyGameDetails.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyGameDetails.Team.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  // optional fixed64 team_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_team_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyGameDetails.Team)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyGameDetails.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional fixed64 team_logo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpectatorLobbyGameDetails.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpectatorLobbyGameDetails_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpectatorLobbyGameDetails.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpectatorLobbyGameDetails.Team)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyGameDetails.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpectatorLobbyGameDetails.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyGameDetails.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails_Team::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails_Team::InternalSwap(CMsgSpectatorLobbyGameDetails_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_id_)
      + sizeof(CMsgSpectatorLobbyGameDetails_Team::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_logo_)>(
          reinterpret_cast<char*>(&team_logo_),
          reinterpret_cast<char*>(&other->team_logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyGameDetails_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpectatorLobbyGameDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectatorLobbyGameDetails>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_series_game(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgSpectatorLobbyGameDetails_Team& radiant_team(const CMsgSpectatorLobbyGameDetails* msg);
  static void set_has_radiant_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSpectatorLobbyGameDetails_Team& dire_team(const CMsgSpectatorLobbyGameDetails* msg);
  static void set_has_dire_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgSpectatorLobbyGameDetails_Team&
CMsgSpectatorLobbyGameDetails::_Internal::radiant_team(const CMsgSpectatorLobbyGameDetails* msg) {
  return *msg->radiant_team_;
}
const ::CMsgSpectatorLobbyGameDetails_Team&
CMsgSpectatorLobbyGameDetails::_Internal::dire_team(const CMsgSpectatorLobbyGameDetails* msg) {
  return *msg->dire_team_;
}
CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyGameDetails)
}
CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(const CMsgSpectatorLobbyGameDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stream_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stream_url()) {
    stream_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_url(), 
      GetArena());
  }
  stream_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stream_name()) {
    stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_name(), 
      GetArena());
  }
  if (from._internal_has_radiant_team()) {
    radiant_team_ = new ::CMsgSpectatorLobbyGameDetails_Team(*from.radiant_team_);
  } else {
    radiant_team_ = nullptr;
  }
  if (from._internal_has_dire_team()) {
    dire_team_ = new ::CMsgSpectatorLobbyGameDetails_Team(*from.dire_team_);
  } else {
    dire_team_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&series_game_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(series_game_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyGameDetails)
}

void CMsgSpectatorLobbyGameDetails::SharedCtor() {
stream_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stream_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radiant_team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&series_game_) -
    reinterpret_cast<char*>(&radiant_team_)) + sizeof(series_game_));
}

CMsgSpectatorLobbyGameDetails::~CMsgSpectatorLobbyGameDetails() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyGameDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpectatorLobbyGameDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stream_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete radiant_team_;
  if (this != internal_default_instance()) delete dire_team_;
}

void CMsgSpectatorLobbyGameDetails::ArenaDtor(void* object) {
  CMsgSpectatorLobbyGameDetails* _this = reinterpret_cast< CMsgSpectatorLobbyGameDetails* >(object);
  (void)_this;
}
void CMsgSpectatorLobbyGameDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpectatorLobbyGameDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpectatorLobbyGameDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyGameDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stream_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      stream_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(radiant_team_ != nullptr);
      radiant_team_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dire_team_ != nullptr);
      dire_team_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&series_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_game_) -
        reinterpret_cast<char*>(&series_type_)) + sizeof(series_game_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyGameDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string stream_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_stream_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSpectatorLobbyGameDetails.stream_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stream_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stream_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSpectatorLobbyGameDetails.stream_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_series_type(&has_bits);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_game = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_series_game(&has_bits);
          series_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiant_team(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dire_team(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpectatorLobbyGameDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyGameDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_language(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional fixed64 server_steam_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_server_steam_id(), target);
  }

  // optional string stream_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_url().data(), static_cast<int>(this->_internal_stream_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyGameDetails.stream_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stream_url(), target);
  }

  // optional string stream_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_name().data(), static_cast<int>(this->_internal_stream_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyGameDetails.stream_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stream_name(), target);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_league_id(), target);
  }

  // optional uint32 series_type = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_series_type(), target);
  }

  // optional uint32 series_game = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_series_game(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::radiant_team(this), target, stream);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::dire_team(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyGameDetails)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyGameDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stream_url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stream_url());
    }

    // optional string stream_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stream_name());
    }

    // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radiant_team_);
    }

    // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dire_team_);
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional fixed64 server_steam_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 language = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_language());
    }

    // optional uint32 league_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 series_type = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 series_game = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_game());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpectatorLobbyGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpectatorLobbyGameDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpectatorLobbyGameDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpectatorLobbyGameDetails)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const CMsgSpectatorLobbyGameDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stream_url(from._internal_stream_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stream_name(from._internal_stream_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_radiant_team()->::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from._internal_radiant_team());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dire_team()->::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from._internal_dire_team());
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000080u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      series_game_ = from.series_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpectatorLobbyGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const CMsgSpectatorLobbyGameDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails::InternalSwap(CMsgSpectatorLobbyGameDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_url_.Swap(&other->stream_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stream_name_.Swap(&other->stream_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, series_game_)
      + sizeof(CMsgSpectatorLobbyGameDetails::series_game_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, radiant_team_)>(
          reinterpret_cast<char*>(&radiant_team_),
          reinterpret_cast<char*>(&other->radiant_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyGameDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetSpectatorLobbyDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetSpectatorLobbyDetails>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSpectatorLobbyGameDetails& game_details(const CMsgSetSpectatorLobbyDetails* msg);
  static void set_has_game_details(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSpectatorLobbyGameDetails&
CMsgSetSpectatorLobbyDetails::_Internal::game_details(const CMsgSetSpectatorLobbyDetails* msg) {
  return *msg->game_details_;
}
CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetSpectatorLobbyDetails)
}
CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(const CMsgSetSpectatorLobbyDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lobby_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lobby_name()) {
    lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lobby_name(), 
      GetArena());
  }
  pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pass_key()) {
    pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pass_key(), 
      GetArena());
  }
  if (from._internal_has_game_details()) {
    game_details_ = new ::CMsgSpectatorLobbyGameDetails(*from.game_details_);
  } else {
    game_details_ = nullptr;
  }
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetSpectatorLobbyDetails)
}

void CMsgSetSpectatorLobbyDetails::SharedCtor() {
lobby_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&game_details_)) + sizeof(lobby_id_));
}

CMsgSetSpectatorLobbyDetails::~CMsgSetSpectatorLobbyDetails() {
  // @@protoc_insertion_point(destructor:CMsgSetSpectatorLobbyDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetSpectatorLobbyDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lobby_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_details_;
}

void CMsgSetSpectatorLobbyDetails::ArenaDtor(void* object) {
  CMsgSetSpectatorLobbyDetails* _this = reinterpret_cast< CMsgSetSpectatorLobbyDetails* >(object);
  (void)_this;
}
void CMsgSetSpectatorLobbyDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetSpectatorLobbyDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetSpectatorLobbyDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetSpectatorLobbyDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(game_details_ != nullptr);
      game_details_->Clear();
    }
  }
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetSpectatorLobbyDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lobby_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lobby_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetSpectatorLobbyDetails.lobby_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pass_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetSpectatorLobbyDetails.pass_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetSpectatorLobbyDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetSpectatorLobbyDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional string lobby_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lobby_name().data(), static_cast<int>(this->_internal_lobby_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetSpectatorLobbyDetails.lobby_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lobby_name(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetSpectatorLobbyDetails.pass_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass_key(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::game_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetSpectatorLobbyDetails)
  return target;
}

size_t CMsgSetSpectatorLobbyDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetSpectatorLobbyDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string lobby_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lobby_name());
    }

    // optional string pass_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetSpectatorLobbyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetSpectatorLobbyDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetSpectatorLobbyDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetSpectatorLobbyDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetSpectatorLobbyDetails)
    MergeFrom(*source);
  }
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const CMsgSetSpectatorLobbyDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetSpectatorLobbyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lobby_name(from._internal_lobby_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_game_details()->::CMsgSpectatorLobbyGameDetails::MergeFrom(from._internal_game_details());
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetSpectatorLobbyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const CMsgSetSpectatorLobbyDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetSpectatorLobbyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSpectatorLobbyDetails::IsInitialized() const {
  return true;
}

void CMsgSetSpectatorLobbyDetails::InternalSwap(CMsgSetSpectatorLobbyDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_name_.Swap(&other->lobby_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pass_key_.Swap(&other->pass_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, lobby_id_)
      + sizeof(CMsgSetSpectatorLobbyDetails::lobby_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, game_details_)>(
          reinterpret_cast<char*>(&game_details_),
          reinterpret_cast<char*>(&other->game_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetSpectatorLobbyDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCreateSpectatorLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCreateSpectatorLobby>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSetSpectatorLobbyDetails& details(const CMsgCreateSpectatorLobby* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSetSpectatorLobbyDetails&
CMsgCreateSpectatorLobby::_Internal::details(const CMsgCreateSpectatorLobby* msg) {
  return *msg->details_;
}
CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCreateSpectatorLobby)
}
CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(const CMsgCreateSpectatorLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_details()) {
    details_ = new ::CMsgSetSpectatorLobbyDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgCreateSpectatorLobby)
}

void CMsgCreateSpectatorLobby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&details_)) + sizeof(client_version_));
}

CMsgCreateSpectatorLobby::~CMsgCreateSpectatorLobby() {
  // @@protoc_insertion_point(destructor:CMsgCreateSpectatorLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCreateSpectatorLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete details_;
}

void CMsgCreateSpectatorLobby::ArenaDtor(void* object) {
  CMsgCreateSpectatorLobby* _this = reinterpret_cast< CMsgCreateSpectatorLobby* >(object);
  (void)_this;
}
void CMsgCreateSpectatorLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCreateSpectatorLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCreateSpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCreateSpectatorLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(details_ != nullptr);
    details_->Clear();
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCreateSpectatorLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSetSpectatorLobbyDetails details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCreateSpectatorLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCreateSpectatorLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  // optional .CMsgSetSpectatorLobbyDetails details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCreateSpectatorLobby)
  return target;
}

size_t CMsgCreateSpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCreateSpectatorLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSetSpectatorLobbyDetails details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_);
    }

    // optional uint32 client_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCreateSpectatorLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCreateSpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCreateSpectatorLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCreateSpectatorLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCreateSpectatorLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCreateSpectatorLobby)
    MergeFrom(*source);
  }
}

void CMsgCreateSpectatorLobby::MergeFrom(const CMsgCreateSpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCreateSpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_details()->::CMsgSetSpectatorLobbyDetails::MergeFrom(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCreateSpectatorLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCreateSpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCreateSpectatorLobby::CopyFrom(const CMsgCreateSpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCreateSpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCreateSpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgCreateSpectatorLobby::InternalSwap(CMsgCreateSpectatorLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCreateSpectatorLobby, client_version_)
      + sizeof(CMsgCreateSpectatorLobby::client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgCreateSpectatorLobby, details_)>(
          reinterpret_cast<char*>(&details_),
          reinterpret_cast<char*>(&other->details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCreateSpectatorLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpectatorLobbyList::_Internal {
 public:
};

CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyList)
}
CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(const CMsgSpectatorLobbyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyList)
}

void CMsgSpectatorLobbyList::SharedCtor() {
}

CMsgSpectatorLobbyList::~CMsgSpectatorLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpectatorLobbyList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSpectatorLobbyList::ArenaDtor(void* object) {
  CMsgSpectatorLobbyList* _this = reinterpret_cast< CMsgSpectatorLobbyList* >(object);
  (void)_this;
}
void CMsgSpectatorLobbyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpectatorLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpectatorLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpectatorLobbyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyList)
  return target;
}

size_t CMsgSpectatorLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpectatorLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpectatorLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpectatorLobbyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpectatorLobbyList)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyList::MergeFrom(const CMsgSpectatorLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgSpectatorLobbyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpectatorLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyList::CopyFrom(const CMsgSpectatorLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyList::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyList::InternalSwap(CMsgSpectatorLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpectatorLobbyListResponse_SpectatorLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectatorLobbyListResponse_SpectatorLobby>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requires_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgSpectatorLobbyGameDetails& game_details(const CMsgSpectatorLobbyListResponse_SpectatorLobby* msg);
  static void set_has_game_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSpectatorLobbyGameDetails&
CMsgSpectatorLobbyListResponse_SpectatorLobby::_Internal::game_details(const CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
  return *msg->game_details_;
}
CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
}
CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArena());
  }
  if (from._internal_has_game_details()) {
    game_details_ = new ::CMsgSpectatorLobbyGameDetails(*from.game_details_);
  } else {
    game_details_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedCtor() {
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&game_details_)) + sizeof(member_count_));
}

CMsgSpectatorLobbyListResponse_SpectatorLobby::~CMsgSpectatorLobbyListResponse_SpectatorLobby() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_details_;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::ArenaDtor(void* object) {
  CMsgSpectatorLobbyListResponse_SpectatorLobby* _this = reinterpret_cast< CMsgSpectatorLobbyListResponse_SpectatorLobby* >(object);
  (void)_this;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_details_ != nullptr);
      game_details_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_count_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyListResponse_SpectatorLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_pass_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_requires_pass_key(&has_bits);
          requires_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_leader_account_id(&has_bits);
          leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 member_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_member_count(&has_bits);
          member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpectatorLobbyListResponse_SpectatorLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // optional bool requires_pass_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_leader_account_id(), target);
  }

  // optional uint32 member_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_member_count(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::game_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return target;
}

size_t CMsgSpectatorLobbyListResponse_SpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional bool requires_pass_key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leader_account_id());
    }

    // optional uint32 member_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_member_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse_SpectatorLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpectatorLobbyListResponse_SpectatorLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpectatorLobbyListResponse.SpectatorLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpectatorLobbyListResponse.SpectatorLobby)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_details()->::CMsgSpectatorLobbyGameDetails::MergeFrom(from._internal_game_details());
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse_SpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::InternalSwap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, member_count_)
      + sizeof(CMsgSpectatorLobbyListResponse_SpectatorLobby::member_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, game_details_)>(
          reinterpret_cast<char*>(&game_details_),
          reinterpret_cast<char*>(&other->game_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyListResponse_SpectatorLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpectatorLobbyListResponse::_Internal {
 public:
};

CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lobbies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyListResponse)
}
CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(const CMsgSpectatorLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyListResponse)
}

void CMsgSpectatorLobbyListResponse::SharedCtor() {
}

CMsgSpectatorLobbyListResponse::~CMsgSpectatorLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpectatorLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSpectatorLobbyListResponse::ArenaDtor(void* object) {
  CMsgSpectatorLobbyListResponse* _this = reinterpret_cast< CMsgSpectatorLobbyListResponse* >(object);
  (void)_this;
}
void CMsgSpectatorLobbyListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpectatorLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpectatorLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpectatorLobbyListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lobbies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyListResponse)
  return target;
}

size_t CMsgSpectatorLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpectatorLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpectatorLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpectatorLobbyListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpectatorLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const CMsgSpectatorLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpectatorLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const CMsgSpectatorLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse::InternalSwap(CMsgSpectatorLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lobbies_.InternalSwap(&other->lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestSteamDatagramTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestSteamDatagramTicket>()._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestSteamDatagramTicket)
}
CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(const CMsgClientToGCRequestSteamDatagramTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_steam_id_ = from.server_steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestSteamDatagramTicket)
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedCtor() {
server_steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientToGCRequestSteamDatagramTicket::~CMsgClientToGCRequestSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestSteamDatagramTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRequestSteamDatagramTicket::ArenaDtor(void* object) {
  CMsgClientToGCRequestSteamDatagramTicket* _this = reinterpret_cast< CMsgClientToGCRequestSteamDatagramTicket* >(object);
  (void)_this;
}
void CMsgClientToGCRequestSteamDatagramTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestSteamDatagramTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestSteamDatagramTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestSteamDatagramTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestSteamDatagramTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestSteamDatagramTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestSteamDatagramTicket)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestSteamDatagramTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 server_steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestSteamDatagramTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestSteamDatagramTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestSteamDatagramTicket)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_steam_id()) {
    _internal_set_server_steam_id(from._internal_server_steam_id());
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicket::InternalSwap(CMsgClientToGCRequestSteamDatagramTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_steam_id_, other->server_steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestSteamDatagramTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestSteamDatagramTicketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestSteamDatagramTicketResponse>()._has_bits_);
  static void set_has_serialized_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
}
CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(const CMsgClientToGCRequestSteamDatagramTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_ticket()) {
    serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_ticket(), 
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedCtor() {
serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgClientToGCRequestSteamDatagramTicketResponse::~CMsgClientToGCRequestSteamDatagramTicketResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::ArenaDtor(void* object) {
  CMsgClientToGCRequestSteamDatagramTicketResponse* _this = reinterpret_cast< CMsgClientToGCRequestSteamDatagramTicketResponse* >(object);
  (void)_this;
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serialized_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestSteamDatagramTicketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serialized_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCRequestSteamDatagramTicketResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestSteamDatagramTicketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_ticket(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCRequestSteamDatagramTicketResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestSteamDatagramTicketResponse)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_ticket());
    }

    // optional string message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestSteamDatagramTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestSteamDatagramTicketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestSteamDatagramTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_ticket(from._internal_serialized_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message(from._internal_message());
    }
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::InternalSwap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_ticket_.Swap(&other->serialized_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestSteamDatagramTicketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientSteamDatagramTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientSteamDatagramTicket>()._has_bits_);
  static void set_has_legacy_time_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_legacy_authorized_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_legacy_authorized_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_legacy_gameserver_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_legacy_gameserver_net_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_legacy_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_serialized_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  legacy_extra_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientSteamDatagramTicket)
}
CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(const CMsgGCToClientSteamDatagramTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      legacy_extra_fields_(from.legacy_extra_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  legacy_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_legacy_signature()) {
    legacy_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_legacy_signature(), 
      GetArena());
  }
  serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_ticket()) {
    serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_ticket(), 
      GetArena());
  }
  ::memcpy(&legacy_authorized_steam_id_, &from.legacy_authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_app_id_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(legacy_app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientSteamDatagramTicket)
}

void CMsgGCToClientSteamDatagramTicket::SharedCtor() {
legacy_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legacy_authorized_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&legacy_app_id_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(legacy_app_id_));
}

CMsgGCToClientSteamDatagramTicket::~CMsgGCToClientSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientSteamDatagramTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientSteamDatagramTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  legacy_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientSteamDatagramTicket::ArenaDtor(void* object) {
  CMsgGCToClientSteamDatagramTicket* _this = reinterpret_cast< CMsgGCToClientSteamDatagramTicket* >(object);
  (void)_this;
}
void CMsgGCToClientSteamDatagramTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientSteamDatagramTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientSteamDatagramTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legacy_extra_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_ticket_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&legacy_authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legacy_app_id_) -
        reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(legacy_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientSteamDatagramTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 legacy_time_expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_legacy_time_expiry(&has_bits);
          legacy_time_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_legacy_authorized_steam_id(&has_bits);
          legacy_authorized_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 legacy_authorized_public_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_legacy_authorized_public_ip(&has_bits);
          legacy_authorized_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_legacy_gameserver_steam_id(&has_bits);
          legacy_gameserver_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_legacy_gameserver_net_id(&has_bits);
          legacy_gameserver_net_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes legacy_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_legacy_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 legacy_app_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_legacy_app_id(&has_bits);
          legacy_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes legacy_extra_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_legacy_extra_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes serialized_ticket = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_serialized_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientSteamDatagramTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientSteamDatagramTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 legacy_time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_legacy_time_expiry(), target);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_legacy_authorized_steam_id(), target);
  }

  // optional fixed32 legacy_authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_legacy_authorized_public_ip(), target);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_legacy_gameserver_steam_id(), target);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_legacy_gameserver_net_id(), target);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_legacy_signature(), target);
  }

  // optional uint32 legacy_app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_legacy_app_id(), target);
  }

  // repeated bytes legacy_extra_fields = 8;
  for (int i = 0, n = this->_internal_legacy_extra_fields_size(); i < n; i++) {
    const auto& s = this->_internal_legacy_extra_fields(i);
    target = stream->WriteBytes(8, s, target);
  }

  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_serialized_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientSteamDatagramTicket)
  return target;
}

size_t CMsgGCToClientSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientSteamDatagramTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes legacy_extra_fields = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(legacy_extra_fields_.size());
  for (int i = 0, n = legacy_extra_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      legacy_extra_fields_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes legacy_signature = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_legacy_signature());
    }

    // optional bytes serialized_ticket = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_ticket());
    }

    // optional fixed64 legacy_authorized_steam_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 legacy_time_expiry = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 legacy_authorized_public_ip = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed64 legacy_gameserver_steam_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_gameserver_net_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_app_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientSteamDatagramTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientSteamDatagramTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientSteamDatagramTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientSteamDatagramTicket)
    MergeFrom(*source);
  }
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacy_extra_fields_.MergeFrom(from.legacy_extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_legacy_signature(from._internal_legacy_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_ticket(from._internal_serialized_ticket());
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_authorized_steam_id_ = from.legacy_authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_time_expiry_ = from.legacy_time_expiry_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_authorized_public_ip_ = from.legacy_authorized_public_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      legacy_gameserver_steam_id_ = from.legacy_gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      legacy_gameserver_net_id_ = from.legacy_gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      legacy_app_id_ = from.legacy_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgGCToClientSteamDatagramTicket::InternalSwap(CMsgGCToClientSteamDatagramTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  legacy_extra_fields_.InternalSwap(&other->legacy_extra_fields_);
  legacy_signature_.Swap(&other->legacy_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_ticket_.Swap(&other->serialized_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_app_id_)
      + sizeof(CMsgGCToClientSteamDatagramTicket::legacy_app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_authorized_steam_id_)>(
          reinterpret_cast<char*>(&legacy_authorized_steam_id_),
          reinterpret_cast<char*>(&other->legacy_authorized_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientSteamDatagramTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientRequestLaneSelection::_Internal {
 public:
};

CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientRequestLaneSelection)
}
CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection(const CMsgGCToClientRequestLaneSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientRequestLaneSelection)
}

void CMsgGCToClientRequestLaneSelection::SharedCtor() {
}

CMsgGCToClientRequestLaneSelection::~CMsgGCToClientRequestLaneSelection() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientRequestLaneSelection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientRequestLaneSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientRequestLaneSelection::ArenaDtor(void* object) {
  CMsgGCToClientRequestLaneSelection* _this = reinterpret_cast< CMsgGCToClientRequestLaneSelection* >(object);
  (void)_this;
}
void CMsgGCToClientRequestLaneSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientRequestLaneSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientRequestLaneSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientRequestLaneSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientRequestLaneSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientRequestLaneSelection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientRequestLaneSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientRequestLaneSelection)
  return target;
}

size_t CMsgGCToClientRequestLaneSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientRequestLaneSelection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientRequestLaneSelection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientRequestLaneSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientRequestLaneSelection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientRequestLaneSelection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientRequestLaneSelection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientRequestLaneSelection)
    MergeFrom(*source);
  }
}

void CMsgGCToClientRequestLaneSelection::MergeFrom(const CMsgGCToClientRequestLaneSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientRequestLaneSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToClientRequestLaneSelection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientRequestLaneSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientRequestLaneSelection::CopyFrom(const CMsgGCToClientRequestLaneSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientRequestLaneSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientRequestLaneSelection::IsInitialized() const {
  return true;
}

void CMsgGCToClientRequestLaneSelection::InternalSwap(CMsgGCToClientRequestLaneSelection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientRequestLaneSelection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientRequestLaneSelectionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientRequestLaneSelectionResponse>()._has_bits_);
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientRequestLaneSelectionResponse)
}
CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse(const CMsgGCToClientRequestLaneSelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lane_selection_flags_, &from.lane_selection_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_priority_disabled_) -
    reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(high_priority_disabled_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientRequestLaneSelectionResponse)
}

void CMsgGCToClientRequestLaneSelectionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_selection_flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_priority_disabled_) -
    reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(high_priority_disabled_));
}

CMsgGCToClientRequestLaneSelectionResponse::~CMsgGCToClientRequestLaneSelectionResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientRequestLaneSelectionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientRequestLaneSelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientRequestLaneSelectionResponse::ArenaDtor(void* object) {
  CMsgGCToClientRequestLaneSelectionResponse* _this = reinterpret_cast< CMsgGCToClientRequestLaneSelectionResponse* >(object);
  (void)_this;
}
void CMsgGCToClientRequestLaneSelectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientRequestLaneSelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientRequestLaneSelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientRequestLaneSelectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lane_selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_priority_disabled_) -
        reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(high_priority_disabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientRequestLaneSelectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lane_selection_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientRequestLaneSelectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientRequestLaneSelectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lane_selection_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane_selection_flags(), target);
  }

  // optional bool high_priority_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_high_priority_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientRequestLaneSelectionResponse)
  return target;
}

size_t CMsgGCToClientRequestLaneSelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientRequestLaneSelectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 lane_selection_flags = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional bool high_priority_disabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientRequestLaneSelectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientRequestLaneSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientRequestLaneSelectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientRequestLaneSelectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientRequestLaneSelectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientRequestLaneSelectionResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientRequestLaneSelectionResponse::MergeFrom(const CMsgGCToClientRequestLaneSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientRequestLaneSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_priority_disabled_ = from.high_priority_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientRequestLaneSelectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientRequestLaneSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientRequestLaneSelectionResponse::CopyFrom(const CMsgGCToClientRequestLaneSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientRequestLaneSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientRequestLaneSelectionResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientRequestLaneSelectionResponse::InternalSwap(CMsgGCToClientRequestLaneSelectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientRequestLaneSelectionResponse, high_priority_disabled_)
      + sizeof(CMsgGCToClientRequestLaneSelectionResponse::high_priority_disabled_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientRequestLaneSelectionResponse, lane_selection_flags_)>(
          reinterpret_cast<char*>(&lane_selection_flags_),
          reinterpret_cast<char*>(&other->lane_selection_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientRequestLaneSelectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientRequestMMInfo::_Internal {
 public:
};

CMsgGCToClientRequestMMInfo::CMsgGCToClientRequestMMInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientRequestMMInfo)
}
CMsgGCToClientRequestMMInfo::CMsgGCToClientRequestMMInfo(const CMsgGCToClientRequestMMInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientRequestMMInfo)
}

void CMsgGCToClientRequestMMInfo::SharedCtor() {
}

CMsgGCToClientRequestMMInfo::~CMsgGCToClientRequestMMInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientRequestMMInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientRequestMMInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientRequestMMInfo::ArenaDtor(void* object) {
  CMsgGCToClientRequestMMInfo* _this = reinterpret_cast< CMsgGCToClientRequestMMInfo* >(object);
  (void)_this;
}
void CMsgGCToClientRequestMMInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientRequestMMInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientRequestMMInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientRequestMMInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientRequestMMInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientRequestMMInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientRequestMMInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientRequestMMInfo)
  return target;
}

size_t CMsgGCToClientRequestMMInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientRequestMMInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientRequestMMInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientRequestMMInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientRequestMMInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientRequestMMInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientRequestMMInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientRequestMMInfo)
    MergeFrom(*source);
  }
}

void CMsgGCToClientRequestMMInfo::MergeFrom(const CMsgGCToClientRequestMMInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientRequestMMInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToClientRequestMMInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientRequestMMInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientRequestMMInfo::CopyFrom(const CMsgGCToClientRequestMMInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientRequestMMInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientRequestMMInfo::IsInitialized() const {
  return true;
}

void CMsgGCToClientRequestMMInfo::InternalSwap(CMsgGCToClientRequestMMInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientRequestMMInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCMMInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCMMInfo>()._has_bits_);
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCMMInfo::CMsgClientToGCMMInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCMMInfo)
}
CMsgClientToGCMMInfo::CMsgClientToGCMMInfo(const CMsgClientToGCMMInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lane_selection_flags_, &from.lane_selection_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_priority_disabled_) -
    reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(high_priority_disabled_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMMInfo)
}

void CMsgClientToGCMMInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_selection_flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_priority_disabled_) -
    reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(high_priority_disabled_));
}

CMsgClientToGCMMInfo::~CMsgClientToGCMMInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMMInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCMMInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCMMInfo::ArenaDtor(void* object) {
  CMsgClientToGCMMInfo* _this = reinterpret_cast< CMsgClientToGCMMInfo* >(object);
  (void)_this;
}
void CMsgClientToGCMMInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCMMInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCMMInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCMMInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lane_selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_priority_disabled_) -
        reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(high_priority_disabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCMMInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lane_selection_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCMMInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMMInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lane_selection_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane_selection_flags(), target);
  }

  // optional bool high_priority_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_high_priority_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMMInfo)
  return target;
}

size_t CMsgClientToGCMMInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCMMInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 lane_selection_flags = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional bool high_priority_disabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCMMInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCMMInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCMMInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCMMInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCMMInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCMMInfo)
    MergeFrom(*source);
  }
}

void CMsgClientToGCMMInfo::MergeFrom(const CMsgClientToGCMMInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCMMInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_priority_disabled_ = from.high_priority_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCMMInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCMMInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMMInfo::CopyFrom(const CMsgClientToGCMMInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCMMInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMMInfo::IsInitialized() const {
  return true;
}

void CMsgClientToGCMMInfo::InternalSwap(CMsgClientToGCMMInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCMMInfo, high_priority_disabled_)
      + sizeof(CMsgClientToGCMMInfo::high_priority_disabled_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCMMInfo, lane_selection_flags_)>(
          reinterpret_cast<char*>(&lane_selection_flags_),
          reinterpret_cast<char*>(&other->lane_selection_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCMMInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgStartFindingMatch* Arena::CreateMaybeMessage< ::CMsgStartFindingMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartFindingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStartFindingMatchResult* Arena::CreateMaybeMessage< ::CMsgStartFindingMatchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartFindingMatchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStopFindingMatch* Arena::CreateMaybeMessage< ::CMsgStopFindingMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStopFindingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyBuilderOptions* Arena::CreateMaybeMessage< ::CMsgPartyBuilderOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyBuilderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyUp* Arena::CreateMaybeMessage< ::CMsgReadyUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyUp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyUpStatus* Arena::CreateMaybeMessage< ::CMsgReadyUpStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyUpStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAbandonCurrentGame* Arena::CreateMaybeMessage< ::CMsgAbandonCurrentGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAbandonCurrentGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyScenarioSave* Arena::CreateMaybeMessage< ::CMsgLobbyScenarioSave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyScenarioSave >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbySetDetails* Arena::CreateMaybeMessage< ::CMsgPracticeLobbySetDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbySetDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyCreate_SaveGame* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyCreate_SaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyCreate_SaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyCreate* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbySetTeamSlot* Arena::CreateMaybeMessage< ::CMsgPracticeLobbySetTeamSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbySetTeamSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbySetCoach* Arena::CreateMaybeMessage< ::CMsgPracticeLobbySetCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbySetCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyJoinBroadcastChannel* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyJoinBroadcastChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyJoinBroadcastChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyCloseBroadcastChannel* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyCloseBroadcastChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyCloseBroadcastChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyKick* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyKick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyKickFromTeam* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyKickFromTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyKickFromTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyLeave* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyLaunch* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyLaunch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyTeamToPracticeLobby* Arena::CreateMaybeMessage< ::CMsgApplyTeamToPracticeLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyTeamToPracticeLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearPracticeLobbyTeam* Arena::CreateMaybeMessage< ::CMsgClearPracticeLobbyTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearPracticeLobbyTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyList* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyListResponseEntry* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyListResponseEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyListResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyListResponse* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyList* Arena::CreateMaybeMessage< ::CMsgLobbyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyListResponse* Arena::CreateMaybeMessage< ::CMsgLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyJoin* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyJoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyJoinResponse* Arena::CreateMaybeMessage< ::CMsgPracticeLobbyJoinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyJoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFriendPracticeLobbyListRequest* Arena::CreateMaybeMessage< ::CMsgFriendPracticeLobbyListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFriendPracticeLobbyListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFriendPracticeLobbyListResponse* Arena::CreateMaybeMessage< ::CMsgFriendPracticeLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFriendPracticeLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomGameModesRequest* Arena::CreateMaybeMessage< ::CMsgJoinableCustomGameModesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomGameModesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomGameModesResponseEntry* Arena::CreateMaybeMessage< ::CMsgJoinableCustomGameModesResponseEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomGameModesResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomGameModesResponse* Arena::CreateMaybeMessage< ::CMsgJoinableCustomGameModesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomGameModesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomLobbiesRequest* Arena::CreateMaybeMessage< ::CMsgJoinableCustomLobbiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomLobbiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomLobbiesResponseEntry* Arena::CreateMaybeMessage< ::CMsgJoinableCustomLobbiesResponseEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomLobbiesResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomLobbiesResponse* Arena::CreateMaybeMessage< ::CMsgJoinableCustomLobbiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomLobbiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuickJoinCustomLobby_LegacyRegionPing* Arena::CreateMaybeMessage< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuickJoinCustomLobby* Arena::CreateMaybeMessage< ::CMsgQuickJoinCustomLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuickJoinCustomLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuickJoinCustomLobbyResponse* Arena::CreateMaybeMessage< ::CMsgQuickJoinCustomLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuickJoinCustomLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotGameCreate* Arena::CreateMaybeMessage< ::CMsgBotGameCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotGameCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCustomGameCreate* Arena::CreateMaybeMessage< ::CMsgCustomGameCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCustomGameCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgEventGameCreate* Arena::CreateMaybeMessage< ::CMsgEventGameCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgEventGameCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPartyMemberSetCoach* Arena::CreateMaybeMessage< ::CMsgDOTAPartyMemberSetCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPartyMemberSetCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASetGroupLeader* Arena::CreateMaybeMessage< ::CMsgDOTASetGroupLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASetGroupLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACancelGroupInvites* Arena::CreateMaybeMessage< ::CMsgDOTACancelGroupInvites >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACancelGroupInvites >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASetGroupOpenStatus* Arena::CreateMaybeMessage< ::CMsgDOTASetGroupOpenStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASetGroupOpenStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGroupMergeInvite* Arena::CreateMaybeMessage< ::CMsgDOTAGroupMergeInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGroupMergeInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGroupMergeResponse* Arena::CreateMaybeMessage< ::CMsgDOTAGroupMergeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGroupMergeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGroupMergeReply* Arena::CreateMaybeMessage< ::CMsgDOTAGroupMergeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGroupMergeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyGameDetails_Team* Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyGameDetails_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyGameDetails_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyGameDetails* Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyGameDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyGameDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetSpectatorLobbyDetails* Arena::CreateMaybeMessage< ::CMsgSetSpectatorLobbyDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetSpectatorLobbyDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCreateSpectatorLobby* Arena::CreateMaybeMessage< ::CMsgCreateSpectatorLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCreateSpectatorLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyList* Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyListResponse_SpectatorLobby* Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyListResponse* Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestSteamDatagramTicket* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestSteamDatagramTicketResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestSteamDatagramTicketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestSteamDatagramTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientSteamDatagramTicket* Arena::CreateMaybeMessage< ::CMsgGCToClientSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientRequestLaneSelection* Arena::CreateMaybeMessage< ::CMsgGCToClientRequestLaneSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientRequestLaneSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientRequestLaneSelectionResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientRequestLaneSelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientRequestLaneSelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientRequestMMInfo* Arena::CreateMaybeMessage< ::CMsgGCToClientRequestMMInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientRequestMMInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCMMInfo* Arena::CreateMaybeMessage< ::CMsgClientToGCMMInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCMMInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
