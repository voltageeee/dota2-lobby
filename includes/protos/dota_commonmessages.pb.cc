// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_commonmessages.proto

#include "dota_commonmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDOTAMsg_LocationPing::CDOTAMsg_LocationPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , target_(0)
  , direct_ping_(false)
  , type_(0)
  , ping_source_(0)
{}
struct CDOTAMsg_LocationPingDefaultTypeInternal {
  constexpr CDOTAMsg_LocationPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_LocationPingDefaultTypeInternal() {}
  union {
    CDOTAMsg_LocationPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_LocationPingDefaultTypeInternal _CDOTAMsg_LocationPing_default_instance_;
constexpr CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , item_ability_id_(0){}
struct CDOTAMsg_ItemAlertDefaultTypeInternal {
  constexpr CDOTAMsg_ItemAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_ItemAlertDefaultTypeInternal() {}
  union {
    CDOTAMsg_ItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_ItemAlertDefaultTypeInternal _CDOTAMsg_ItemAlert_default_instance_;
constexpr CDOTAMsg_MapLine::CDOTAMsg_MapLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , initial_(false){}
struct CDOTAMsg_MapLineDefaultTypeInternal {
  constexpr CDOTAMsg_MapLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_MapLineDefaultTypeInternal() {}
  union {
    CDOTAMsg_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_MapLineDefaultTypeInternal _CDOTAMsg_MapLine_default_instance_;
constexpr CDOTAMsg_WorldLine::CDOTAMsg_WorldLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , initial_(false)
  , end_(false){}
struct CDOTAMsg_WorldLineDefaultTypeInternal {
  constexpr CDOTAMsg_WorldLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_WorldLineDefaultTypeInternal() {}
  union {
    CDOTAMsg_WorldLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_WorldLineDefaultTypeInternal _CDOTAMsg_WorldLine_default_instance_;
constexpr CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_strings_()
  , stat_images_()
  , stat_image_types_()
  , movie_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(0)

  , duration_(0)
  , use_html_(false){}
struct CDOTAMsg_SendStatPopupDefaultTypeInternal {
  constexpr CDOTAMsg_SendStatPopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_SendStatPopupDefaultTypeInternal() {}
  union {
    CDOTAMsg_SendStatPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_SendStatPopupDefaultTypeInternal _CDOTAMsg_SendStatPopup_default_instance_;
constexpr CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_delay_(0){}
struct CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal {
  constexpr CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal() {}
  union {
    CDOTAMsg_DismissAllStatPopups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal _CDOTAMsg_DismissAllStatPopups_default_instance_;
constexpr CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tgtpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0u)
  , y_(0u){}
struct CDOTAMsg_CoachHUDPingDefaultTypeInternal {
  constexpr CDOTAMsg_CoachHUDPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_CoachHUDPingDefaultTypeInternal _CDOTAMsg_CoachHUDPing_default_instance_;
constexpr CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , position_(nullptr)
  , order_type_(0)

  , target_index_(0)
  , ability_index_(0)
  , sequence_number_(0)
  , flags_(0u){}
struct CDOTAMsg_UnitOrderDefaultTypeInternal {
  constexpr CDOTAMsg_UnitOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_UnitOrderDefaultTypeInternal() {}
  union {
    CDOTAMsg_UnitOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_UnitOrderDefaultTypeInternal _CDOTAMsg_UnitOrder_default_instance_;
constexpr VersusScene_PlayActivity_ActivityInfo::VersusScene_PlayActivity_ActivityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , disable_auto_kill_(false)
  , force_looping_(false){}
struct VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal {
  constexpr VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal() {}
  union {
    VersusScene_PlayActivity_ActivityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal _VersusScene_PlayActivity_ActivityInfo_default_instance_;
constexpr VersusScene_PlayActivity::VersusScene_PlayActivity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activities_()
  , playback_rate_(0){}
struct VersusScene_PlayActivityDefaultTypeInternal {
  constexpr VersusScene_PlayActivityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersusScene_PlayActivityDefaultTypeInternal() {}
  union {
    VersusScene_PlayActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersusScene_PlayActivityDefaultTypeInternal _VersusScene_PlayActivity_default_instance_;
constexpr VersusScene_ChatWheel::VersusScene_ChatWheel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_message_id_(0u)
  , emoticon_id_(0u){}
struct VersusScene_ChatWheelDefaultTypeInternal {
  constexpr VersusScene_ChatWheelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersusScene_ChatWheelDefaultTypeInternal() {}
  union {
    VersusScene_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersusScene_ChatWheelDefaultTypeInternal _VersusScene_ChatWheel_default_instance_;
constexpr VersusScene_PlaybackRate::VersusScene_PlaybackRate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_(0){}
struct VersusScene_PlaybackRateDefaultTypeInternal {
  constexpr VersusScene_PlaybackRateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersusScene_PlaybackRateDefaultTypeInternal() {}
  union {
    VersusScene_PlaybackRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersusScene_PlaybackRateDefaultTypeInternal _VersusScene_PlaybackRate_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fcommonmessages_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fcommonmessages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fcommonmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fcommonmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, direct_ping_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, ping_source_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, item_ability_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, initial_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, z_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, initial_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, end_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, style_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, stat_strings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, stat_images_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, stat_image_types_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, use_html_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, movie_name_),
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_DismissAllStatPopups, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_DismissAllStatPopups, time_delay_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, tgtpath_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, order_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, units_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, target_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, ability_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, position_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, flags_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, activity_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, disable_auto_kill_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, force_looping_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, activities_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, playback_rate_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, chat_message_id_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, emoticon_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlaybackRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlaybackRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlaybackRate, rate_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::CDOTAMsg_LocationPing)},
  { 17, 25, sizeof(::CDOTAMsg_ItemAlert)},
  { 28, 36, sizeof(::CDOTAMsg_MapLine)},
  { 39, 49, sizeof(::CDOTAMsg_WorldLine)},
  { 54, 66, sizeof(::CDOTAMsg_SendStatPopup)},
  { 73, 79, sizeof(::CDOTAMsg_DismissAllStatPopups)},
  { 80, 88, sizeof(::CDOTAMsg_CoachHUDPing)},
  { 91, 103, sizeof(::CDOTAMsg_UnitOrder)},
  { 110, 118, sizeof(::VersusScene_PlayActivity_ActivityInfo)},
  { 121, 128, sizeof(::VersusScene_PlayActivity)},
  { 130, 137, sizeof(::VersusScene_ChatWheel)},
  { 139, 145, sizeof(::VersusScene_PlaybackRate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_LocationPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_ItemAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_MapLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_WorldLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_SendStatPopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_DismissAllStatPopups_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_UnitOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VersusScene_PlayActivity_ActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VersusScene_PlayActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VersusScene_ChatWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VersusScene_PlaybackRate_default_instance_),
};

const char descriptor_table_protodef_dota_5fcommonmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031dota_commonmessages.proto\032\026networkbase"
  "types.proto\"\232\001\n\025CDOTAMsg_LocationPing\022\t\n"
  "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\016\n\006target\030\003 \001(\005\022\023\n\013d"
  "irect_ping\030\004 \001(\010\022\014\n\004type\030\005 \001(\005\0228\n\013ping_s"
  "ource\030\006 \001(\0162\014.EPingSource:\025k_ePingSource"
  "_Default\"C\n\022CDOTAMsg_ItemAlert\022\t\n\001x\030\001 \001("
  "\005\022\t\n\001y\030\002 \001(\005\022\027\n\017item_ability_id\030\003 \001(\005\"9\n"
  "\020CDOTAMsg_MapLine\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022"
  "\017\n\007initial\030\003 \001(\010\"S\n\022CDOTAMsg_WorldLine\022\t"
  "\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\022\017\n\007initi"
  "al\030\004 \001(\010\022\013\n\003end\030\005 \001(\010\"\320\001\n\026CDOTAMsg_SendS"
  "tatPopup\0229\n\005style\030\001 \001(\0162\024.EDOTAStatPopup"
  "Types:\024k_EDOTA_SPT_Textline\022\024\n\014stat_stri"
  "ngs\030\002 \003(\t\022\023\n\013stat_images\030\003 \003(\005\022\030\n\020stat_i"
  "mage_types\030\004 \003(\005\022\020\n\010duration\030\005 \001(\002\022\020\n\010us"
  "e_html\030\006 \001(\010\022\022\n\nmovie_name\030\007 \001(\t\"3\n\035CDOT"
  "AMsg_DismissAllStatPopups\022\022\n\ntime_delay\030"
  "\001 \001(\002\">\n\025CDOTAMsg_CoachHUDPing\022\t\n\001x\030\001 \001("
  "\r\022\t\n\001y\030\002 \001(\r\022\017\n\007tgtpath\030\003 \001(\t\"\323\001\n\022CDOTAM"
  "sg_UnitOrder\022:\n\norder_type\030\002 \001(\0162\020.dotau"
  "nitorder_t:\024DOTA_UNIT_ORDER_NONE\022\r\n\005unit"
  "s\030\003 \003(\005\022\024\n\014target_index\030\004 \001(\005\022\025\n\rability"
  "_index\030\005 \001(\005\022\035\n\010position\030\006 \001(\0132\013.CMsgVec"
  "tor\022\027\n\017sequence_number\030\010 \001(\005\022\r\n\005flags\030\t "
  "\001(\r\"\301\001\n\030VersusScene_PlayActivity\022:\n\nacti"
  "vities\030\001 \003(\0132&.VersusScene_PlayActivity."
  "ActivityInfo\022\025\n\rplayback_rate\030\002 \001(\002\032R\n\014A"
  "ctivityInfo\022\020\n\010activity\030\001 \001(\t\022\031\n\021disable"
  "_auto_kill\030\002 \001(\010\022\025\n\rforce_looping\030\003 \001(\010\""
  "E\n\025VersusScene_ChatWheel\022\027\n\017chat_message"
  "_id\030\001 \001(\r\022\023\n\013emoticon_id\030\002 \001(\r\"(\n\030Versus"
  "Scene_PlaybackRate\022\014\n\004rate\030\001 \001(\002*v\n\013EPin"
  "gSource\022\031\n\025k_ePingSource_Default\020\000\022\031\n\025k_"
  "ePingSource_Warning\020\001\022\027\n\023k_ePingSource_W"
  "heel\020\002\022\030\n\024k_ePingSource_System\020\003*\244\001\n\023EDO"
  "TAStatPopupTypes\022\030\n\024k_EDOTA_SPT_Textline"
  "\020\000\022\025\n\021k_EDOTA_SPT_Basic\020\001\022\024\n\020k_EDOTA_SPT"
  "_Poll\020\002\022\024\n\020k_EDOTA_SPT_Grid\020\003\022\031\n\025k_EDOTA"
  "_SPT_DualImage\020\004\022\025\n\021k_EDOTA_SPT_Movie\020\005*"
  "\222\013\n\017dotaunitorder_t\022\030\n\024DOTA_UNIT_ORDER_N"
  "ONE\020\000\022$\n DOTA_UNIT_ORDER_MOVE_TO_POSITIO"
  "N\020\001\022\"\n\036DOTA_UNIT_ORDER_MOVE_TO_TARGET\020\002\022"
  "\037\n\033DOTA_UNIT_ORDER_ATTACK_MOVE\020\003\022!\n\035DOTA"
  "_UNIT_ORDER_ATTACK_TARGET\020\004\022!\n\035DOTA_UNIT"
  "_ORDER_CAST_POSITION\020\005\022\037\n\033DOTA_UNIT_ORDE"
  "R_CAST_TARGET\020\006\022$\n DOTA_UNIT_ORDER_CAST_"
  "TARGET_TREE\020\007\022\"\n\036DOTA_UNIT_ORDER_CAST_NO"
  "_TARGET\020\010\022\037\n\033DOTA_UNIT_ORDER_CAST_TOGGLE"
  "\020\t\022!\n\035DOTA_UNIT_ORDER_HOLD_POSITION\020\n\022!\n"
  "\035DOTA_UNIT_ORDER_TRAIN_ABILITY\020\013\022\035\n\031DOTA"
  "_UNIT_ORDER_DROP_ITEM\020\014\022\035\n\031DOTA_UNIT_ORD"
  "ER_GIVE_ITEM\020\r\022\037\n\033DOTA_UNIT_ORDER_PICKUP"
  "_ITEM\020\016\022\037\n\033DOTA_UNIT_ORDER_PICKUP_RUNE\020\017"
  "\022!\n\035DOTA_UNIT_ORDER_PURCHASE_ITEM\020\020\022\035\n\031D"
  "OTA_UNIT_ORDER_SELL_ITEM\020\021\022$\n DOTA_UNIT_"
  "ORDER_DISASSEMBLE_ITEM\020\022\022\035\n\031DOTA_UNIT_OR"
  "DER_MOVE_ITEM\020\023\022$\n DOTA_UNIT_ORDER_CAST_"
  "TOGGLE_AUTO\020\024\022\030\n\024DOTA_UNIT_ORDER_STOP\020\025\022"
  "\031\n\025DOTA_UNIT_ORDER_TAUNT\020\026\022\033\n\027DOTA_UNIT_"
  "ORDER_BUYBACK\020\027\022\031\n\025DOTA_UNIT_ORDER_GLYPH"
  "\020\030\022)\n%DOTA_UNIT_ORDER_EJECT_ITEM_FROM_ST"
  "ASH\020\031\022\035\n\031DOTA_UNIT_ORDER_CAST_RUNE\020\032\022 \n\034"
  "DOTA_UNIT_ORDER_PING_ABILITY\020\033\022%\n!DOTA_U"
  "NIT_ORDER_MOVE_TO_DIRECTION\020\034\022\032\n\026DOTA_UN"
  "IT_ORDER_PATROL\020\035\022*\n&DOTA_UNIT_ORDER_VEC"
  "TOR_TARGET_POSITION\020\036\022\031\n\025DOTA_UNIT_ORDER"
  "_RADAR\020\037\022)\n%DOTA_UNIT_ORDER_SET_ITEM_COM"
  "BINE_LOCK\020 \022\034\n\030DOTA_UNIT_ORDER_CONTINUE\020"
  "!\022*\n&DOTA_UNIT_ORDER_VECTOR_TARGET_CANCE"
  "LED\020\"\022$\n DOTA_UNIT_ORDER_CAST_RIVER_PAIN"
  "T\020#\0222\n.DOTA_UNIT_ORDER_PREGAME_ADJUST_IT"
  "EM_ASSIGNMENT\020$\022)\n%DOTA_UNIT_ORDER_DROP_"
  "ITEM_AT_FOUNTAIN\020%\0225\n1DOTA_UNIT_ORDER_TA"
  "KE_ITEM_FROM_NEUTRAL_ITEM_STASH\020&\022!\n\035DOT"
  "A_UNIT_ORDER_MOVE_RELATIVE\020\'*\217\001\n\036EDOTAVe"
  "rsusScenePlayerBehavior\022$\n VS_PLAYER_BEH"
  "AVIOR_PLAY_ACTIVITY\020\001\022!\n\035VS_PLAYER_BEHAV"
  "IOR_CHAT_WHEEL\020\002\022$\n VS_PLAYER_BEHAVIOR_P"
  "LAYBACK_RATE\020\003B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fcommonmessages_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fcommonmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fcommonmessages_2eproto = {
  false, false, 3141, descriptor_table_protodef_dota_5fcommonmessages_2eproto, "dota_commonmessages.proto", 
  &descriptor_table_dota_5fcommonmessages_2eproto_once, descriptor_table_dota_5fcommonmessages_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_dota_5fcommonmessages_2eproto::offsets,
  file_level_metadata_dota_5fcommonmessages_2eproto, file_level_enum_descriptors_dota_5fcommonmessages_2eproto, file_level_service_descriptors_dota_5fcommonmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fcommonmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return descriptor_table_dota_5fcommonmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fcommonmessages_2eproto(&descriptor_table_dota_5fcommonmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPingSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[0];
}
bool EPingSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAStatPopupTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[1];
}
bool EDOTAStatPopupTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* dotaunitorder_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[2];
}
bool dotaunitorder_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAVersusScenePlayerBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[3];
}
bool EDOTAVersusScenePlayerBehavior_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAMsg_LocationPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_LocationPing>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direct_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ping_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAMsg_LocationPing::CDOTAMsg_LocationPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_LocationPing)
}
CDOTAMsg_LocationPing::CDOTAMsg_LocationPing(const CDOTAMsg_LocationPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_source_) -
    reinterpret_cast<char*>(&x_)) + sizeof(ping_source_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_LocationPing)
}

void CDOTAMsg_LocationPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ping_source_) -
    reinterpret_cast<char*>(&x_)) + sizeof(ping_source_));
}

CDOTAMsg_LocationPing::~CDOTAMsg_LocationPing() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_LocationPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_LocationPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMsg_LocationPing::ArenaDtor(void* object) {
  CDOTAMsg_LocationPing* _this = reinterpret_cast< CDOTAMsg_LocationPing* >(object);
  (void)_this;
}
void CDOTAMsg_LocationPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_LocationPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_LocationPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_LocationPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_source_) -
        reinterpret_cast<char*>(&x_)) + sizeof(ping_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_LocationPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target(&has_bits);
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool direct_ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_direct_ping(&has_bits);
          direct_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPingSource_IsValid(val))) {
            _internal_set_ping_source(static_cast<::EPingSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_LocationPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_LocationPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 target = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target(), target);
  }

  // optional bool direct_ping = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_direct_ping(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ping_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_LocationPing)
  return target;
}

size_t CDOTAMsg_LocationPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_LocationPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 target = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target());
    }

    // optional bool direct_ping = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ping_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_LocationPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_LocationPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_LocationPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_LocationPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_LocationPing)
    MergeFrom(*source);
  }
}

void CDOTAMsg_LocationPing::MergeFrom(const CDOTAMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000008u) {
      direct_ping_ = from.direct_ping_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      ping_source_ = from.ping_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_LocationPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_LocationPing::CopyFrom(const CDOTAMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_LocationPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_LocationPing::InternalSwap(CDOTAMsg_LocationPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_LocationPing, ping_source_)
      + sizeof(CDOTAMsg_LocationPing::ping_source_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_LocationPing, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_LocationPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_ItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_ItemAlert>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_ItemAlert)
}
CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert(const CDOTAMsg_ItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_ItemAlert)
}

void CDOTAMsg_ItemAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(item_ability_id_));
}

CDOTAMsg_ItemAlert::~CDOTAMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_ItemAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_ItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMsg_ItemAlert::ArenaDtor(void* object) {
  CDOTAMsg_ItemAlert* _this = reinterpret_cast< CDOTAMsg_ItemAlert* >(object);
  (void)_this;
}
void CDOTAMsg_ItemAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_ItemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_ItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_ability_id_) -
        reinterpret_cast<char*>(&x_)) + sizeof(item_ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_ItemAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_ItemAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_ItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 item_ability_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_ItemAlert)
  return target;
}

size_t CDOTAMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_ItemAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 item_ability_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_ItemAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_ItemAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_ItemAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_ItemAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_ItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAMsg_ItemAlert::MergeFrom(const CDOTAMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_ItemAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_ItemAlert::CopyFrom(const CDOTAMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAMsg_ItemAlert::InternalSwap(CDOTAMsg_ItemAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_ItemAlert, item_ability_id_)
      + sizeof(CDOTAMsg_ItemAlert::item_ability_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_ItemAlert, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_ItemAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_MapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_MapLine>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMsg_MapLine::CDOTAMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_MapLine)
}
CDOTAMsg_MapLine::CDOTAMsg_MapLine(const CDOTAMsg_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_) -
    reinterpret_cast<char*>(&x_)) + sizeof(initial_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_MapLine)
}

void CDOTAMsg_MapLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initial_) -
    reinterpret_cast<char*>(&x_)) + sizeof(initial_));
}

CDOTAMsg_MapLine::~CDOTAMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_MapLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMsg_MapLine::ArenaDtor(void* object) {
  CDOTAMsg_MapLine* _this = reinterpret_cast< CDOTAMsg_MapLine* >(object);
  (void)_this;
}
void CDOTAMsg_MapLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_MapLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_MapLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initial_) -
        reinterpret_cast<char*>(&x_)) + sizeof(initial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_MapLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_initial(&has_bits);
          initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_MapLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_MapLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional bool initial = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_initial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_MapLine)
  return target;
}

size_t CDOTAMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_MapLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional bool initial = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_MapLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_MapLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_MapLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_MapLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_MapLine)
    MergeFrom(*source);
  }
}

void CDOTAMsg_MapLine::MergeFrom(const CDOTAMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_ = from.initial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_MapLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_MapLine::CopyFrom(const CDOTAMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAMsg_MapLine::InternalSwap(CDOTAMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_MapLine, initial_)
      + sizeof(CDOTAMsg_MapLine::initial_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_MapLine, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_MapLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_WorldLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_WorldLine>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAMsg_WorldLine::CDOTAMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_WorldLine)
}
CDOTAMsg_WorldLine::CDOTAMsg_WorldLine(const CDOTAMsg_WorldLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&x_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_WorldLine)
}

void CDOTAMsg_WorldLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&x_)) + sizeof(end_));
}

CDOTAMsg_WorldLine::~CDOTAMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_WorldLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_WorldLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMsg_WorldLine::ArenaDtor(void* object) {
  CDOTAMsg_WorldLine* _this = reinterpret_cast< CDOTAMsg_WorldLine* >(object);
  (void)_this;
}
void CDOTAMsg_WorldLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_WorldLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_WorldLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&x_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_WorldLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_initial(&has_bits);
          initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_WorldLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_WorldLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  // optional bool initial = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_initial(), target);
  }

  // optional bool end = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_WorldLine)
  return target;
}

size_t CDOTAMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_WorldLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_z());
    }

    // optional bool initial = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool end = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_WorldLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_WorldLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_WorldLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_WorldLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_WorldLine)
    MergeFrom(*source);
  }
}

void CDOTAMsg_WorldLine::MergeFrom(const CDOTAMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_ = from.initial_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_WorldLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_WorldLine::CopyFrom(const CDOTAMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAMsg_WorldLine::InternalSwap(CDOTAMsg_WorldLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_WorldLine, end_)
      + sizeof(CDOTAMsg_WorldLine::end_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_WorldLine, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_WorldLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_SendStatPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_SendStatPopup>()._has_bits_);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_html(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_movie_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stat_strings_(arena),
  stat_images_(arena),
  stat_image_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_SendStatPopup)
}
CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup(const CDOTAMsg_SendStatPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stat_strings_(from.stat_strings_),
      stat_images_(from.stat_images_),
      stat_image_types_(from.stat_image_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  movie_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_movie_name()) {
    movie_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movie_name(), 
      GetArena());
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_html_) -
    reinterpret_cast<char*>(&style_)) + sizeof(use_html_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_SendStatPopup)
}

void CDOTAMsg_SendStatPopup::SharedCtor() {
movie_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_html_) -
    reinterpret_cast<char*>(&style_)) + sizeof(use_html_));
}

CDOTAMsg_SendStatPopup::~CDOTAMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_SendStatPopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_SendStatPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  movie_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMsg_SendStatPopup::ArenaDtor(void* object) {
  CDOTAMsg_SendStatPopup* _this = reinterpret_cast< CDOTAMsg_SendStatPopup* >(object);
  (void)_this;
}
void CDOTAMsg_SendStatPopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_SendStatPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_SendStatPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_strings_.Clear();
  stat_images_.Clear();
  stat_image_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    movie_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_html_) -
        reinterpret_cast<char*>(&style_)) + sizeof(use_html_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_SendStatPopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAStatPopupTypes_IsValid(val))) {
            _internal_set_style(static_cast<::EDOTAStatPopupTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string stat_strings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stat_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMsg_SendStatPopup.stat_strings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 stat_images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stat_images(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stat_images(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 stat_image_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stat_image_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stat_image_types(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_html = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_html(&has_bits);
          use_html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string movie_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_movie_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMsg_SendStatPopup.movie_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_SendStatPopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_SendStatPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_style(), target);
  }

  // repeated string stat_strings = 2;
  for (int i = 0, n = this->_internal_stat_strings_size(); i < n; i++) {
    const auto& s = this->_internal_stat_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_SendStatPopup.stat_strings");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 stat_images = 3;
  for (int i = 0, n = this->_internal_stat_images_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stat_images(i), target);
  }

  // repeated int32 stat_image_types = 4;
  for (int i = 0, n = this->_internal_stat_image_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stat_image_types(i), target);
  }

  // optional float duration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_duration(), target);
  }

  // optional bool use_html = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_html(), target);
  }

  // optional string movie_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movie_name().data(), static_cast<int>(this->_internal_movie_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_SendStatPopup.movie_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_movie_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_SendStatPopup)
  return target;
}

size_t CDOTAMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_SendStatPopup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stat_strings = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stat_strings_.size());
  for (int i = 0, n = stat_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stat_strings_.Get(i));
  }

  // repeated int32 stat_images = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stat_images_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stat_images_size());
    total_size += data_size;
  }

  // repeated int32 stat_image_types = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stat_image_types_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stat_image_types_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string movie_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie_name());
    }

    // optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style());
    }

    // optional float duration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool use_html = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_SendStatPopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_SendStatPopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_SendStatPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_SendStatPopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_SendStatPopup)
    MergeFrom(*source);
  }
}

void CDOTAMsg_SendStatPopup::MergeFrom(const CDOTAMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_strings_.MergeFrom(from.stat_strings_);
  stat_images_.MergeFrom(from.stat_images_);
  stat_image_types_.MergeFrom(from.stat_image_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_movie_name(from._internal_movie_name());
    }
    if (cached_has_bits & 0x00000002u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_html_ = from.use_html_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_SendStatPopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_SendStatPopup::CopyFrom(const CDOTAMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAMsg_SendStatPopup::InternalSwap(CDOTAMsg_SendStatPopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stat_strings_.InternalSwap(&other->stat_strings_);
  stat_images_.InternalSwap(&other->stat_images_);
  stat_image_types_.InternalSwap(&other->stat_image_types_);
  movie_name_.Swap(&other->movie_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_SendStatPopup, use_html_)
      + sizeof(CDOTAMsg_SendStatPopup::use_html_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_SendStatPopup, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_SendStatPopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_DismissAllStatPopups::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_DismissAllStatPopups>()._has_bits_);
  static void set_has_time_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_DismissAllStatPopups)
}
CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups(const CDOTAMsg_DismissAllStatPopups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_delay_ = from.time_delay_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_DismissAllStatPopups)
}

void CDOTAMsg_DismissAllStatPopups::SharedCtor() {
time_delay_ = 0;
}

CDOTAMsg_DismissAllStatPopups::~CDOTAMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_DismissAllStatPopups)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_DismissAllStatPopups::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMsg_DismissAllStatPopups::ArenaDtor(void* object) {
  CDOTAMsg_DismissAllStatPopups* _this = reinterpret_cast< CDOTAMsg_DismissAllStatPopups* >(object);
  (void)_this;
}
void CDOTAMsg_DismissAllStatPopups::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_DismissAllStatPopups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_delay_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_DismissAllStatPopups::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float time_delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_time_delay(&has_bits);
          time_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_DismissAllStatPopups::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_DismissAllStatPopups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_delay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_time_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_DismissAllStatPopups)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float time_delay = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_DismissAllStatPopups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_DismissAllStatPopups* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_DismissAllStatPopups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_DismissAllStatPopups)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_DismissAllStatPopups)
    MergeFrom(*source);
  }
}

void CDOTAMsg_DismissAllStatPopups::MergeFrom(const CDOTAMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_delay()) {
    _internal_set_time_delay(from._internal_time_delay());
  }
}

void CDOTAMsg_DismissAllStatPopups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_DismissAllStatPopups::CopyFrom(const CDOTAMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAMsg_DismissAllStatPopups::InternalSwap(CDOTAMsg_DismissAllStatPopups* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_delay_, other->time_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_DismissAllStatPopups::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_CoachHUDPing>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tgtpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_CoachHUDPing)
}
CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(const CDOTAMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tgtpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tgtpath()) {
    tgtpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tgtpath(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_CoachHUDPing)
}

void CDOTAMsg_CoachHUDPing::SharedCtor() {
tgtpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CDOTAMsg_CoachHUDPing::~CDOTAMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_CoachHUDPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tgtpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMsg_CoachHUDPing::ArenaDtor(void* object) {
  CDOTAMsg_CoachHUDPing* _this = reinterpret_cast< CDOTAMsg_CoachHUDPing* >(object);
  (void)_this;
}
void CDOTAMsg_CoachHUDPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_CoachHUDPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tgtpath_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_CoachHUDPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tgtpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tgtpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMsg_CoachHUDPing.tgtpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_CoachHUDPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional string tgtpath = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tgtpath().data(), static_cast<int>(this->_internal_tgtpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_CoachHUDPing.tgtpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tgtpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_CoachHUDPing)
  return target;
}

size_t CDOTAMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_CoachHUDPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tgtpath = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tgtpath());
    }

    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_CoachHUDPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_CoachHUDPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_CoachHUDPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_CoachHUDPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_CoachHUDPing)
    MergeFrom(*source);
  }
}

void CDOTAMsg_CoachHUDPing::MergeFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tgtpath(from._internal_tgtpath());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_CoachHUDPing::InternalSwap(CDOTAMsg_CoachHUDPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tgtpath_.Swap(&other->tgtpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, y_)
      + sizeof(CDOTAMsg_CoachHUDPing::y_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_CoachHUDPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_UnitOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_UnitOrder>()._has_bits_);
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& position(const CDOTAMsg_UnitOrder* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
CDOTAMsg_UnitOrder::_Internal::position(const CDOTAMsg_UnitOrder* msg) {
  return *msg->position_;
}
void CDOTAMsg_UnitOrder::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_UnitOrder)
}
CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder(const CDOTAMsg_UnitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&order_type_, &from.order_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&order_type_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_UnitOrder)
}

void CDOTAMsg_UnitOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&position_)) + sizeof(flags_));
}

CDOTAMsg_UnitOrder::~CDOTAMsg_UnitOrder() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_UnitOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_UnitOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CDOTAMsg_UnitOrder::ArenaDtor(void* object) {
  CDOTAMsg_UnitOrder* _this = reinterpret_cast< CDOTAMsg_UnitOrder* >(object);
  (void)_this;
}
void CDOTAMsg_UnitOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_UnitOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_UnitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_UnitOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&order_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&order_type_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_UnitOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::dotaunitorder_t_IsValid(val))) {
            _internal_set_order_type(static_cast<::dotaunitorder_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int32 units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_target_index(&has_bits);
          target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ability_index(&has_bits);
          ability_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_UnitOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_UnitOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_order_type(), target);
  }

  // repeated int32 units = 3;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_units(i), target);
  }

  // optional int32 target_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_index(), target);
  }

  // optional int32 ability_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ability_index(), target);
  }

  // optional .CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_UnitOrder)
  return target;
}

size_t CDOTAMsg_UnitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_UnitOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgVector position = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order_type());
    }

    // optional int32 target_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_index());
    }

    // optional int32 ability_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability_index());
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_UnitOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_UnitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_UnitOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_UnitOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_UnitOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_UnitOrder)
    MergeFrom(*source);
  }
}

void CDOTAMsg_UnitOrder::MergeFrom(const CDOTAMsg_UnitOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_UnitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::CMsgVector::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_index_ = from.target_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_index_ = from.ability_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_UnitOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_UnitOrder::CopyFrom(const CDOTAMsg_UnitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_UnitOrder::IsInitialized() const {
  return true;
}

void CDOTAMsg_UnitOrder::InternalSwap(CDOTAMsg_UnitOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_UnitOrder, flags_)
      + sizeof(CDOTAMsg_UnitOrder::flags_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_UnitOrder, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_UnitOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersusScene_PlayActivity_ActivityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_PlayActivity_ActivityInfo>()._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disable_auto_kill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_force_looping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VersusScene_PlayActivity_ActivityInfo::VersusScene_PlayActivity_ActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VersusScene_PlayActivity.ActivityInfo)
}
VersusScene_PlayActivity_ActivityInfo::VersusScene_PlayActivity_ActivityInfo(const VersusScene_PlayActivity_ActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activity()) {
    activity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activity(), 
      GetArena());
  }
  ::memcpy(&disable_auto_kill_, &from.disable_auto_kill_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_looping_) -
    reinterpret_cast<char*>(&disable_auto_kill_)) + sizeof(force_looping_));
  // @@protoc_insertion_point(copy_constructor:VersusScene_PlayActivity.ActivityInfo)
}

void VersusScene_PlayActivity_ActivityInfo::SharedCtor() {
activity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disable_auto_kill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_looping_) -
    reinterpret_cast<char*>(&disable_auto_kill_)) + sizeof(force_looping_));
}

VersusScene_PlayActivity_ActivityInfo::~VersusScene_PlayActivity_ActivityInfo() {
  // @@protoc_insertion_point(destructor:VersusScene_PlayActivity.ActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersusScene_PlayActivity_ActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  activity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersusScene_PlayActivity_ActivityInfo::ArenaDtor(void* object) {
  VersusScene_PlayActivity_ActivityInfo* _this = reinterpret_cast< VersusScene_PlayActivity_ActivityInfo* >(object);
  (void)_this;
}
void VersusScene_PlayActivity_ActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersusScene_PlayActivity_ActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersusScene_PlayActivity_ActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_PlayActivity.ActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    activity_.ClearNonDefaultToEmpty();
  }
  ::memset(&disable_auto_kill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_looping_) -
      reinterpret_cast<char*>(&disable_auto_kill_)) + sizeof(force_looping_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_PlayActivity_ActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_activity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VersusScene_PlayActivity.ActivityInfo.activity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_auto_kill = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_disable_auto_kill(&has_bits);
          disable_auto_kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_looping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_force_looping(&has_bits);
          force_looping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersusScene_PlayActivity_ActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_PlayActivity.ActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string activity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activity().data(), static_cast<int>(this->_internal_activity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VersusScene_PlayActivity.ActivityInfo.activity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activity(), target);
  }

  // optional bool disable_auto_kill = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_auto_kill(), target);
  }

  // optional bool force_looping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_force_looping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_PlayActivity.ActivityInfo)
  return target;
}

size_t VersusScene_PlayActivity_ActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_PlayActivity.ActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string activity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activity());
    }

    // optional bool disable_auto_kill = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool force_looping = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersusScene_PlayActivity_ActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersusScene_PlayActivity.ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VersusScene_PlayActivity_ActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersusScene_PlayActivity_ActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersusScene_PlayActivity.ActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersusScene_PlayActivity.ActivityInfo)
    MergeFrom(*source);
  }
}

void VersusScene_PlayActivity_ActivityInfo::MergeFrom(const VersusScene_PlayActivity_ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_PlayActivity.ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activity(from._internal_activity());
    }
    if (cached_has_bits & 0x00000002u) {
      disable_auto_kill_ = from.disable_auto_kill_;
    }
    if (cached_has_bits & 0x00000004u) {
      force_looping_ = from.force_looping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VersusScene_PlayActivity_ActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersusScene_PlayActivity.ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersusScene_PlayActivity_ActivityInfo::CopyFrom(const VersusScene_PlayActivity_ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_PlayActivity.ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_PlayActivity_ActivityInfo::IsInitialized() const {
  return true;
}

void VersusScene_PlayActivity_ActivityInfo::InternalSwap(VersusScene_PlayActivity_ActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activity_.Swap(&other->activity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersusScene_PlayActivity_ActivityInfo, force_looping_)
      + sizeof(VersusScene_PlayActivity_ActivityInfo::force_looping_)
      - PROTOBUF_FIELD_OFFSET(VersusScene_PlayActivity_ActivityInfo, disable_auto_kill_)>(
          reinterpret_cast<char*>(&disable_auto_kill_),
          reinterpret_cast<char*>(&other->disable_auto_kill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_PlayActivity_ActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersusScene_PlayActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_PlayActivity>()._has_bits_);
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VersusScene_PlayActivity::VersusScene_PlayActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  activities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VersusScene_PlayActivity)
}
VersusScene_PlayActivity::VersusScene_PlayActivity(const VersusScene_PlayActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      activities_(from.activities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playback_rate_ = from.playback_rate_;
  // @@protoc_insertion_point(copy_constructor:VersusScene_PlayActivity)
}

void VersusScene_PlayActivity::SharedCtor() {
playback_rate_ = 0;
}

VersusScene_PlayActivity::~VersusScene_PlayActivity() {
  // @@protoc_insertion_point(destructor:VersusScene_PlayActivity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersusScene_PlayActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VersusScene_PlayActivity::ArenaDtor(void* object) {
  VersusScene_PlayActivity* _this = reinterpret_cast< VersusScene_PlayActivity* >(object);
  (void)_this;
}
void VersusScene_PlayActivity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersusScene_PlayActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersusScene_PlayActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_PlayActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  playback_rate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_PlayActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float playback_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_playback_rate(&has_bits);
          playback_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersusScene_PlayActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_PlayActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_activities(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float playback_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_playback_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_PlayActivity)
  return target;
}

size_t VersusScene_PlayActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_PlayActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float playback_rate = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersusScene_PlayActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersusScene_PlayActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const VersusScene_PlayActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersusScene_PlayActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersusScene_PlayActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersusScene_PlayActivity)
    MergeFrom(*source);
  }
}

void VersusScene_PlayActivity::MergeFrom(const VersusScene_PlayActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_PlayActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  if (from._internal_has_playback_rate()) {
    _internal_set_playback_rate(from._internal_playback_rate());
  }
}

void VersusScene_PlayActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersusScene_PlayActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersusScene_PlayActivity::CopyFrom(const VersusScene_PlayActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_PlayActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_PlayActivity::IsInitialized() const {
  return true;
}

void VersusScene_PlayActivity::InternalSwap(VersusScene_PlayActivity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activities_.InternalSwap(&other->activities_);
  swap(playback_rate_, other->playback_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_PlayActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersusScene_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_ChatWheel>()._has_bits_);
  static void set_has_chat_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VersusScene_ChatWheel::VersusScene_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VersusScene_ChatWheel)
}
VersusScene_ChatWheel::VersusScene_ChatWheel(const VersusScene_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_message_id_, &from.chat_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&emoticon_id_) -
    reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
  // @@protoc_insertion_point(copy_constructor:VersusScene_ChatWheel)
}

void VersusScene_ChatWheel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_message_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&emoticon_id_) -
    reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
}

VersusScene_ChatWheel::~VersusScene_ChatWheel() {
  // @@protoc_insertion_point(destructor:VersusScene_ChatWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersusScene_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VersusScene_ChatWheel::ArenaDtor(void* object) {
  VersusScene_ChatWheel* _this = reinterpret_cast< VersusScene_ChatWheel* >(object);
  (void)_this;
}
void VersusScene_ChatWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersusScene_ChatWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersusScene_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_ChatWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&emoticon_id_) -
        reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_ChatWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 chat_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_chat_message_id(&has_bits);
          chat_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_emoticon_id(&has_bits);
          emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersusScene_ChatWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_ChatWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chat_message_id(), target);
  }

  // optional uint32 emoticon_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_ChatWheel)
  return target;
}

size_t VersusScene_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_ChatWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 chat_message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_message_id());
    }

    // optional uint32 emoticon_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_emoticon_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersusScene_ChatWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersusScene_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const VersusScene_ChatWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersusScene_ChatWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersusScene_ChatWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersusScene_ChatWheel)
    MergeFrom(*source);
  }
}

void VersusScene_ChatWheel::MergeFrom(const VersusScene_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_message_id_ = from.chat_message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      emoticon_id_ = from.emoticon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VersusScene_ChatWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersusScene_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersusScene_ChatWheel::CopyFrom(const VersusScene_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_ChatWheel::IsInitialized() const {
  return true;
}

void VersusScene_ChatWheel::InternalSwap(VersusScene_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersusScene_ChatWheel, emoticon_id_)
      + sizeof(VersusScene_ChatWheel::emoticon_id_)
      - PROTOBUF_FIELD_OFFSET(VersusScene_ChatWheel, chat_message_id_)>(
          reinterpret_cast<char*>(&chat_message_id_),
          reinterpret_cast<char*>(&other->chat_message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_ChatWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersusScene_PlaybackRate::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_PlaybackRate>()._has_bits_);
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VersusScene_PlaybackRate::VersusScene_PlaybackRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VersusScene_PlaybackRate)
}
VersusScene_PlaybackRate::VersusScene_PlaybackRate(const VersusScene_PlaybackRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_ = from.rate_;
  // @@protoc_insertion_point(copy_constructor:VersusScene_PlaybackRate)
}

void VersusScene_PlaybackRate::SharedCtor() {
rate_ = 0;
}

VersusScene_PlaybackRate::~VersusScene_PlaybackRate() {
  // @@protoc_insertion_point(destructor:VersusScene_PlaybackRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersusScene_PlaybackRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VersusScene_PlaybackRate::ArenaDtor(void* object) {
  VersusScene_PlaybackRate* _this = reinterpret_cast< VersusScene_PlaybackRate* >(object);
  (void)_this;
}
void VersusScene_PlaybackRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersusScene_PlaybackRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersusScene_PlaybackRate::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_PlaybackRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_PlaybackRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_rate(&has_bits);
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersusScene_PlaybackRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_PlaybackRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_PlaybackRate)
  return target;
}

size_t VersusScene_PlaybackRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_PlaybackRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float rate = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersusScene_PlaybackRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersusScene_PlaybackRate)
  GOOGLE_DCHECK_NE(&from, this);
  const VersusScene_PlaybackRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersusScene_PlaybackRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersusScene_PlaybackRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersusScene_PlaybackRate)
    MergeFrom(*source);
  }
}

void VersusScene_PlaybackRate::MergeFrom(const VersusScene_PlaybackRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_PlaybackRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rate()) {
    _internal_set_rate(from._internal_rate());
  }
}

void VersusScene_PlaybackRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersusScene_PlaybackRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersusScene_PlaybackRate::CopyFrom(const VersusScene_PlaybackRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_PlaybackRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_PlaybackRate::IsInitialized() const {
  return true;
}

void VersusScene_PlaybackRate::InternalSwap(VersusScene_PlaybackRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rate_, other->rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_PlaybackRate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAMsg_LocationPing* Arena::CreateMaybeMessage< ::CDOTAMsg_LocationPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_LocationPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_ItemAlert* Arena::CreateMaybeMessage< ::CDOTAMsg_ItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_ItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_MapLine* Arena::CreateMaybeMessage< ::CDOTAMsg_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_WorldLine* Arena::CreateMaybeMessage< ::CDOTAMsg_WorldLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_WorldLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_SendStatPopup* Arena::CreateMaybeMessage< ::CDOTAMsg_SendStatPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_SendStatPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_DismissAllStatPopups* Arena::CreateMaybeMessage< ::CDOTAMsg_DismissAllStatPopups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_DismissAllStatPopups >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_CoachHUDPing* Arena::CreateMaybeMessage< ::CDOTAMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_UnitOrder* Arena::CreateMaybeMessage< ::CDOTAMsg_UnitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_UnitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_PlayActivity_ActivityInfo* Arena::CreateMaybeMessage< ::VersusScene_PlayActivity_ActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_PlayActivity_ActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_PlayActivity* Arena::CreateMaybeMessage< ::VersusScene_PlayActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_PlayActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_ChatWheel* Arena::CreateMaybeMessage< ::VersusScene_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_PlaybackRate* Arena::CreateMaybeMessage< ::VersusScene_PlaybackRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_PlaybackRate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
