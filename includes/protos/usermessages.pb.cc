// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usermessages.proto

#include "usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CUserMessageAchievementEvent::CUserMessageAchievementEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievement_(0u){}
struct CUserMessageAchievementEventDefaultTypeInternal {
  constexpr CUserMessageAchievementEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageAchievementEventDefaultTypeInternal() {}
  union {
    CUserMessageAchievementEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageAchievementEventDefaultTypeInternal _CUserMessageAchievementEvent_default_instance_;
constexpr CUserMessageCloseCaption::CUserMessageCloseCaption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(0u)
  , duration_(0)
  , from_player_(false)
  , ent_index_(0){}
struct CUserMessageCloseCaptionDefaultTypeInternal {
  constexpr CUserMessageCloseCaptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCloseCaptionDefaultTypeInternal() {}
  union {
    CUserMessageCloseCaption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCloseCaptionDefaultTypeInternal _CUserMessageCloseCaption_default_instance_;
constexpr CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(0u)
  , duration_(0)
  , from_player_(false)
  , ent_index_(0){}
struct CUserMessageCloseCaptionDirectDefaultTypeInternal {
  constexpr CUserMessageCloseCaptionDirectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCloseCaptionDirectDefaultTypeInternal() {}
  union {
    CUserMessageCloseCaptionDirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCloseCaptionDirectDefaultTypeInternal _CUserMessageCloseCaptionDirect_default_instance_;
constexpr CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_(0)
  , from_player_(false)
  , ent_index_(0){}
struct CUserMessageCloseCaptionPlaceholderDefaultTypeInternal {
  constexpr CUserMessageCloseCaptionPlaceholderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCloseCaptionPlaceholderDefaultTypeInternal() {}
  union {
    CUserMessageCloseCaptionPlaceholder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCloseCaptionPlaceholderDefaultTypeInternal _CUserMessageCloseCaptionPlaceholder_default_instance_;
constexpr CUserMessageCurrentTimescale::CUserMessageCurrentTimescale(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_(0){}
struct CUserMessageCurrentTimescaleDefaultTypeInternal {
  constexpr CUserMessageCurrentTimescaleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCurrentTimescaleDefaultTypeInternal() {}
  union {
    CUserMessageCurrentTimescale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCurrentTimescaleDefaultTypeInternal _CUserMessageCurrentTimescale_default_instance_;
constexpr CUserMessageDesiredTimescale::CUserMessageDesiredTimescale(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desired_(0)
  , acceleration_(0)
  , minblendrate_(0)
  , blenddeltamultiplier_(0){}
struct CUserMessageDesiredTimescaleDefaultTypeInternal {
  constexpr CUserMessageDesiredTimescaleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageDesiredTimescaleDefaultTypeInternal() {}
  union {
    CUserMessageDesiredTimescale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageDesiredTimescaleDefaultTypeInternal _CUserMessageDesiredTimescale_default_instance_;
constexpr CUserMessageFade::CUserMessageFade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_(0u)
  , hold_time_(0u)
  , flags_(0u)
  , color_(0u){}
struct CUserMessageFadeDefaultTypeInternal {
  constexpr CUserMessageFadeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageFadeDefaultTypeInternal() {}
  union {
    CUserMessageFade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageFadeDefaultTypeInternal _CUserMessageFade_default_instance_;
constexpr CUserMessageShake::CUserMessageShake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0u)
  , amplitude_(0)
  , frequency_(0)
  , duration_(0){}
struct CUserMessageShakeDefaultTypeInternal {
  constexpr CUserMessageShakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageShakeDefaultTypeInternal() {}
  union {
    CUserMessageShake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageShakeDefaultTypeInternal _CUserMessageShake_default_instance_;
constexpr CUserMessageShakeDir::CUserMessageShakeDir(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shake_(nullptr)
  , direction_(nullptr){}
struct CUserMessageShakeDirDefaultTypeInternal {
  constexpr CUserMessageShakeDirDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageShakeDirDefaultTypeInternal() {}
  union {
    CUserMessageShakeDir _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageShakeDirDefaultTypeInternal _CUserMessageShakeDir_default_instance_;
constexpr CUserMessageScreenTilt::CUserMessageScreenTilt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(nullptr)
  , command_(0u)
  , ease_in_out_(false)
  , duration_(0)
  , time_(0){}
struct CUserMessageScreenTiltDefaultTypeInternal {
  constexpr CUserMessageScreenTiltDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageScreenTiltDefaultTypeInternal() {}
  union {
    CUserMessageScreenTilt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageScreenTiltDefaultTypeInternal _CUserMessageScreenTilt_default_instance_;
constexpr CUserMessageSayText::CUserMessageSayText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playerindex_(0u)
  , chat_(false){}
struct CUserMessageSayTextDefaultTypeInternal {
  constexpr CUserMessageSayTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageSayTextDefaultTypeInternal() {}
  union {
    CUserMessageSayText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageSayTextDefaultTypeInternal _CUserMessageSayText_default_instance_;
constexpr CUserMessageSayText2::CUserMessageSayText2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messagename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entityindex_(0u)
  , chat_(false){}
struct CUserMessageSayText2DefaultTypeInternal {
  constexpr CUserMessageSayText2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageSayText2DefaultTypeInternal() {}
  union {
    CUserMessageSayText2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageSayText2DefaultTypeInternal _CUserMessageSayText2_default_instance_;
constexpr CUserMessageHudMsg::CUserMessageHudMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(0u)
  , x_(0)
  , y_(0)
  , color1_(0u)
  , color2_(0u)
  , effect_(0u)
  , fade_in_time_(0)
  , fade_out_time_(0)
  , hold_time_(0)
  , fx_time_(0){}
struct CUserMessageHudMsgDefaultTypeInternal {
  constexpr CUserMessageHudMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageHudMsgDefaultTypeInternal() {}
  union {
    CUserMessageHudMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageHudMsgDefaultTypeInternal _CUserMessageHudMsg_default_instance_;
constexpr CUserMessageHudText::CUserMessageHudText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserMessageHudTextDefaultTypeInternal {
  constexpr CUserMessageHudTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageHudTextDefaultTypeInternal() {}
  union {
    CUserMessageHudText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageHudTextDefaultTypeInternal _CUserMessageHudText_default_instance_;
constexpr CUserMessageTextMsg::CUserMessageTextMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_()
  , dest_(0u){}
struct CUserMessageTextMsgDefaultTypeInternal {
  constexpr CUserMessageTextMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageTextMsgDefaultTypeInternal() {}
  union {
    CUserMessageTextMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageTextMsgDefaultTypeInternal _CUserMessageTextMsg_default_instance_;
constexpr CUserMessageGameTitle::CUserMessageGameTitle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserMessageGameTitleDefaultTypeInternal {
  constexpr CUserMessageGameTitleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageGameTitleDefaultTypeInternal() {}
  union {
    CUserMessageGameTitle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageGameTitleDefaultTypeInternal _CUserMessageGameTitle_default_instance_;
constexpr CUserMessageResetHUD::CUserMessageResetHUD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserMessageResetHUDDefaultTypeInternal {
  constexpr CUserMessageResetHUDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageResetHUDDefaultTypeInternal() {}
  union {
    CUserMessageResetHUD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageResetHUDDefaultTypeInternal _CUserMessageResetHUD_default_instance_;
constexpr CUserMessageSendAudio::CUserMessageSendAudio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soundname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stop_(false){}
struct CUserMessageSendAudioDefaultTypeInternal {
  constexpr CUserMessageSendAudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageSendAudioDefaultTypeInternal() {}
  union {
    CUserMessageSendAudio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageSendAudioDefaultTypeInternal _CUserMessageSendAudio_default_instance_;
constexpr CUserMessageAudioParameter::CUserMessageAudioParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameter_type_(0u)
  , name_hash_code_(0u)
  , value_(0)
  , int_value_(0u){}
struct CUserMessageAudioParameterDefaultTypeInternal {
  constexpr CUserMessageAudioParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageAudioParameterDefaultTypeInternal() {}
  union {
    CUserMessageAudioParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageAudioParameterDefaultTypeInternal _CUserMessageAudioParameter_default_instance_;
constexpr CUserMessageVoiceMask::CUserMessageVoiceMask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gamerules_masks_()
  , ban_masks_()
  , mod_enable_(false){}
struct CUserMessageVoiceMaskDefaultTypeInternal {
  constexpr CUserMessageVoiceMaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageVoiceMaskDefaultTypeInternal() {}
  union {
    CUserMessageVoiceMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageVoiceMaskDefaultTypeInternal _CUserMessageVoiceMask_default_instance_;
constexpr CUserMessageRequestState::CUserMessageRequestState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserMessageRequestStateDefaultTypeInternal {
  constexpr CUserMessageRequestStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageRequestStateDefaultTypeInternal() {}
  union {
    CUserMessageRequestState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageRequestStateDefaultTypeInternal _CUserMessageRequestState_default_instance_;
constexpr CUserMessageHintText::CUserMessageHintText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserMessageHintTextDefaultTypeInternal {
  constexpr CUserMessageHintTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageHintTextDefaultTypeInternal() {}
  union {
    CUserMessageHintText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageHintTextDefaultTypeInternal _CUserMessageHintText_default_instance_;
constexpr CUserMessageKeyHintText::CUserMessageKeyHintText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct CUserMessageKeyHintTextDefaultTypeInternal {
  constexpr CUserMessageKeyHintTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageKeyHintTextDefaultTypeInternal() {}
  union {
    CUserMessageKeyHintText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageKeyHintTextDefaultTypeInternal _CUserMessageKeyHintText_default_instance_;
constexpr CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(0)
  , menu_(0)
  , item_(0){}
struct CUserMessageVoiceSubtitleDefaultTypeInternal {
  constexpr CUserMessageVoiceSubtitleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageVoiceSubtitleDefaultTypeInternal() {}
  union {
    CUserMessageVoiceSubtitle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageVoiceSubtitleDefaultTypeInternal _CUserMessageVoiceSubtitle_default_instance_;
constexpr CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserMessageVGUIMenu_KeysDefaultTypeInternal {
  constexpr CUserMessageVGUIMenu_KeysDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageVGUIMenu_KeysDefaultTypeInternal() {}
  union {
    CUserMessageVGUIMenu_Keys _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageVGUIMenu_KeysDefaultTypeInternal _CUserMessageVGUIMenu_Keys_default_instance_;
constexpr CUserMessageVGUIMenu::CUserMessageVGUIMenu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , show_(false){}
struct CUserMessageVGUIMenuDefaultTypeInternal {
  constexpr CUserMessageVGUIMenuDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageVGUIMenuDefaultTypeInternal() {}
  union {
    CUserMessageVGUIMenu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageVGUIMenuDefaultTypeInternal _CUserMessageVGUIMenu_default_instance_;
constexpr CUserMessageRumble::CUserMessageRumble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0)
  , data_(0)
  , flags_(0){}
struct CUserMessageRumbleDefaultTypeInternal {
  constexpr CUserMessageRumbleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageRumbleDefaultTypeInternal() {}
  union {
    CUserMessageRumble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageRumbleDefaultTypeInternal _CUserMessageRumble_default_instance_;
constexpr CUserMessageTrain::CUserMessageTrain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(0u){}
struct CUserMessageTrainDefaultTypeInternal {
  constexpr CUserMessageTrainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageTrainDefaultTypeInternal() {}
  union {
    CUserMessageTrain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageTrainDefaultTypeInternal _CUserMessageTrain_default_instance_;
constexpr CUserMessageSayTextChannel::CUserMessageSayTextChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_(0)
  , channel_(0){}
struct CUserMessageSayTextChannelDefaultTypeInternal {
  constexpr CUserMessageSayTextChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageSayTextChannelDefaultTypeInternal() {}
  union {
    CUserMessageSayTextChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageSayTextChannelDefaultTypeInternal _CUserMessageSayTextChannel_default_instance_;
constexpr CUserMessageColoredText::CUserMessageColoredText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(0u)
  , reset_(false)
  , context_player_id_(0)
  , context_value_(0)
  , context_team_id_(0){}
struct CUserMessageColoredTextDefaultTypeInternal {
  constexpr CUserMessageColoredTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageColoredTextDefaultTypeInternal() {}
  union {
    CUserMessageColoredText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageColoredTextDefaultTypeInternal _CUserMessageColoredText_default_instance_;
constexpr CUserMessageItemPickup::CUserMessageItemPickup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserMessageItemPickupDefaultTypeInternal {
  constexpr CUserMessageItemPickupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageItemPickupDefaultTypeInternal() {}
  union {
    CUserMessageItemPickup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageItemPickupDefaultTypeInternal _CUserMessageItemPickup_default_instance_;
constexpr CUserMessageAmmoDenied::CUserMessageAmmoDenied(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ammo_id_(0u){}
struct CUserMessageAmmoDeniedDefaultTypeInternal {
  constexpr CUserMessageAmmoDeniedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageAmmoDeniedDefaultTypeInternal() {}
  union {
    CUserMessageAmmoDenied _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageAmmoDeniedDefaultTypeInternal _CUserMessageAmmoDenied_default_instance_;
constexpr CUserMessageCrosshairAngle::CUserMessageCrosshairAngle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angcrosshair_(nullptr){}
struct CUserMessageCrosshairAngleDefaultTypeInternal {
  constexpr CUserMessageCrosshairAngleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCrosshairAngleDefaultTypeInternal() {}
  union {
    CUserMessageCrosshairAngle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCrosshairAngleDefaultTypeInternal _CUserMessageCrosshairAngle_default_instance_;
constexpr CUserMessageShowMenu::CUserMessageShowMenu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : menustring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , validslots_(0u)
  , displaytime_(0u)
  , needmore_(false){}
struct CUserMessageShowMenuDefaultTypeInternal {
  constexpr CUserMessageShowMenuDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageShowMenuDefaultTypeInternal() {}
  union {
    CUserMessageShowMenu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageShowMenuDefaultTypeInternal _CUserMessageShowMenu_default_instance_;
constexpr CUserMessageCreditsMsg::CUserMessageCreditsMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logo_length_(0)
  , rolltype_(-1)
{}
struct CUserMessageCreditsMsgDefaultTypeInternal {
  constexpr CUserMessageCreditsMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCreditsMsgDefaultTypeInternal() {}
  union {
    CUserMessageCreditsMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCreditsMsgDefaultTypeInternal _CUserMessageCreditsMsg_default_instance_;
constexpr CEntityMessagePlayJingle::CEntityMessagePlayJingle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_msg_(nullptr){}
struct CEntityMessagePlayJingleDefaultTypeInternal {
  constexpr CEntityMessagePlayJingleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEntityMessagePlayJingleDefaultTypeInternal() {}
  union {
    CEntityMessagePlayJingle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEntityMessagePlayJingleDefaultTypeInternal _CEntityMessagePlayJingle_default_instance_;
constexpr CEntityMessageScreenOverlay::CEntityMessageScreenOverlay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_msg_(nullptr)
  , start_effect_(false){}
struct CEntityMessageScreenOverlayDefaultTypeInternal {
  constexpr CEntityMessageScreenOverlayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEntityMessageScreenOverlayDefaultTypeInternal() {}
  union {
    CEntityMessageScreenOverlay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEntityMessageScreenOverlayDefaultTypeInternal _CEntityMessageScreenOverlay_default_instance_;
constexpr CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_msg_(nullptr)
  , remove_decals_(false){}
struct CEntityMessageRemoveAllDecalsDefaultTypeInternal {
  constexpr CEntityMessageRemoveAllDecalsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEntityMessageRemoveAllDecalsDefaultTypeInternal() {}
  union {
    CEntityMessageRemoveAllDecals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEntityMessageRemoveAllDecalsDefaultTypeInternal _CEntityMessageRemoveAllDecals_default_instance_;
constexpr CEntityMessagePropagateForce::CEntityMessagePropagateForce(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : impulse_(nullptr)
  , entity_msg_(nullptr){}
struct CEntityMessagePropagateForceDefaultTypeInternal {
  constexpr CEntityMessagePropagateForceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEntityMessagePropagateForceDefaultTypeInternal() {}
  union {
    CEntityMessagePropagateForce _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEntityMessagePropagateForceDefaultTypeInternal _CEntityMessagePropagateForce_default_instance_;
constexpr CEntityMessageDoSpark::CEntityMessageDoSpark(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , entity_msg_(nullptr)
  , entityindex_(0u)
  , radius_(0)
  , color_(0u)
  , beams_(0u)
  , thick_(0)
  , duration_(0){}
struct CEntityMessageDoSparkDefaultTypeInternal {
  constexpr CEntityMessageDoSparkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEntityMessageDoSparkDefaultTypeInternal() {}
  union {
    CEntityMessageDoSpark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEntityMessageDoSparkDefaultTypeInternal _CEntityMessageDoSpark_default_instance_;
constexpr CEntityMessageFixAngle::CEntityMessageFixAngle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(nullptr)
  , entity_msg_(nullptr)
  , relative_(false){}
struct CEntityMessageFixAngleDefaultTypeInternal {
  constexpr CEntityMessageFixAngleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEntityMessageFixAngleDefaultTypeInternal() {}
  union {
    CEntityMessageFixAngle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEntityMessageFixAngleDefaultTypeInternal _CEntityMessageFixAngle_default_instance_;
constexpr CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attach_ent_index_(0){}
struct CUserMessageCameraTransition_Transition_DataDrivenDefaultTypeInternal {
  constexpr CUserMessageCameraTransition_Transition_DataDrivenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCameraTransition_Transition_DataDrivenDefaultTypeInternal() {}
  union {
    CUserMessageCameraTransition_Transition_DataDriven _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCameraTransition_Transition_DataDrivenDefaultTypeInternal _CUserMessageCameraTransition_Transition_DataDriven_default_instance_;
constexpr CUserMessageCameraTransition::CUserMessageCameraTransition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_data_driven_(nullptr)
  , camera_type_(0u)
  , duration_(0){}
struct CUserMessageCameraTransitionDefaultTypeInternal {
  constexpr CUserMessageCameraTransitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCameraTransitionDefaultTypeInternal() {}
  union {
    CUserMessageCameraTransition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCameraTransitionDefaultTypeInternal _CUserMessageCameraTransition_default_instance_;
constexpr CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserMsg_ParticleManager_ReleaseParticleIndexDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_ReleaseParticleIndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_ReleaseParticleIndexDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_ReleaseParticleIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_ReleaseParticleIndexDefaultTypeInternal _CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_;
constexpr CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_point_configuration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , particle_name_index_(PROTOBUF_ULONGLONG(0))
  , attach_type_(0)
  , entity_handle_(0)
  , entity_handle_for_modifiers_(0)
  , apply_voice_ban_rules_(false)
  , team_behavior_(0){}
struct CUserMsg_ParticleManager_CreateParticleDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_CreateParticleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_CreateParticleDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_CreateParticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_CreateParticleDefaultTypeInternal _CUserMsg_ParticleManager_CreateParticle_default_instance_;
constexpr CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destroy_immediately_(false){}
struct CUserMsg_ParticleManager_DestroyParticleDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_DestroyParticleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_DestroyParticleDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_DestroyParticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_DestroyParticleDefaultTypeInternal _CUserMsg_ParticleManager_DestroyParticle_default_instance_;
constexpr CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destroy_immediately_(false)
  , entity_handle_(0){}
struct CUserMsg_ParticleManager_DestroyParticleInvolvingDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_DestroyParticleInvolvingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_DestroyParticleInvolvingDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_DestroyParticleInvolving _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_DestroyParticleInvolvingDefaultTypeInternal _CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_;
constexpr CUserMsg_ParticleManager_DestroyParticleNamed::CUserMsg_ParticleManager_DestroyParticleNamed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : particle_name_index_(PROTOBUF_ULONGLONG(0))
  , entity_handle_(0)
  , destroy_immediately_(false)
  , play_endcap_(false){}
struct CUserMsg_ParticleManager_DestroyParticleNamedDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_DestroyParticleNamedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_DestroyParticleNamedDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_DestroyParticleNamed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_DestroyParticleNamedDefaultTypeInternal _CUserMsg_ParticleManager_DestroyParticleNamed_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , control_point_(0){}
struct CUserMsg_ParticleManager_UpdateParticleDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticle_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_(nullptr)
  , control_point_(0){}
struct CUserMsg_ParticleManager_UpdateParticleFwdDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleFwdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleFwdDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticleFwd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleFwdDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_(nullptr)
  , deprecated_right_(nullptr)
  , up_(nullptr)
  , left_(nullptr)
  , control_point_(0){}
struct CUserMsg_ParticleManager_UpdateParticleOrientDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleOrientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleOrientDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticleOrient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleOrientDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , control_point_(0){}
struct CUserMsg_ParticleManager_UpdateParticleFallbackDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleFallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleFallbackDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticleFallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleFallbackDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_offset_(nullptr)
  , angle_offset_(nullptr)
  , control_point_(0){}
struct CUserMsg_ParticleManager_UpdateParticleOffsetDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleOffsetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleOffsetDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticleOffset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleOffsetDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fallback_position_(nullptr)
  , control_point_(0)
  , entity_handle_(0)
  , attach_type_(0)
  , attachment_(0)
  , include_wearables_(false){}
struct CUserMsg_ParticleManager_UpdateParticleEntDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleEntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleEntDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticleEnt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleEntDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_frozen_(false){}
struct CUserMsg_ParticleManager_UpdateParticleSetFrozenDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleSetFrozenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleSetFrozenDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticleSetFrozen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleSetFrozenDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : should_draw_(false){}
struct CUserMsg_ParticleManager_UpdateParticleShouldDrawDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateParticleShouldDrawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateParticleShouldDrawDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateParticleShouldDraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateParticleShouldDrawDefaultTypeInternal _CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_;
constexpr CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachment_old_(0)
  , attachment_new_(0)
  , entity_handle_(0){}
struct CUserMsg_ParticleManager_ChangeControlPointAttachmentDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_ChangeControlPointAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_ChangeControlPointAttachmentDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_ChangeControlPointAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_ChangeControlPointAttachmentDefaultTypeInternal _CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_;
constexpr CUserMsg_ParticleManager_UpdateEntityPosition::CUserMsg_ParticleManager_UpdateEntityPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , entity_handle_(0){}
struct CUserMsg_ParticleManager_UpdateEntityPositionDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_UpdateEntityPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_UpdateEntityPositionDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_UpdateEntityPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_UpdateEntityPositionDefaultTypeInternal _CUserMsg_ParticleManager_UpdateEntityPosition_default_instance_;
constexpr CUserMsg_ParticleManager_SetParticleFoWProperties::CUserMsg_ParticleManager_SetParticleFoWProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fow_control_point_(0)
  , fow_control_point2_(0)
  , fow_radius_(0){}
struct CUserMsg_ParticleManager_SetParticleFoWPropertiesDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetParticleFoWPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetParticleFoWPropertiesDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetParticleFoWProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetParticleFoWPropertiesDefaultTypeInternal _CUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_;
constexpr CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CUserMsg_ParticleManager_SetParticleShouldCheckFoW(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_fow_(false){}
struct CUserMsg_ParticleManager_SetParticleShouldCheckFoWDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetParticleShouldCheckFoWDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetParticleShouldCheckFoWDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetParticleShouldCheckFoW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetParticleShouldCheckFoWDefaultTypeInternal _CUserMsg_ParticleManager_SetParticleShouldCheckFoW_default_instance_;
constexpr CUserMsg_ParticleManager_SetControlPointModel::CUserMsg_ParticleManager_SetControlPointModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_point_(0){}
struct CUserMsg_ParticleManager_SetControlPointModelDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetControlPointModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetControlPointModelDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetControlPointModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetControlPointModelDefaultTypeInternal _CUserMsg_ParticleManager_SetControlPointModel_default_instance_;
constexpr CUserMsg_ParticleManager_SetControlPointSnapshot::CUserMsg_ParticleManager_SetControlPointSnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snapshot_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_point_(0){}
struct CUserMsg_ParticleManager_SetControlPointSnapshotDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetControlPointSnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetControlPointSnapshotDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetControlPointSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetControlPointSnapshotDefaultTypeInternal _CUserMsg_ParticleManager_SetControlPointSnapshot_default_instance_;
constexpr CUserMsg_ParticleManager_SetParticleText::CUserMsg_ParticleManager_SetParticleText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserMsg_ParticleManager_SetParticleTextDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetParticleTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetParticleTextDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetParticleText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetParticleTextDefaultTypeInternal _CUserMsg_ParticleManager_SetParticleText_default_instance_;
constexpr CUserMsg_ParticleManager_SetTextureAttribute::CUserMsg_ParticleManager_SetTextureAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , texture_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserMsg_ParticleManager_SetTextureAttributeDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetTextureAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetTextureAttributeDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetTextureAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetTextureAttributeDefaultTypeInternal _CUserMsg_ParticleManager_SetTextureAttribute_default_instance_;
constexpr CUserMsg_ParticleManager_SetSceneObjectGenericFlag::CUserMsg_ParticleManager_SetSceneObjectGenericFlag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flag_value_(false){}
struct CUserMsg_ParticleManager_SetSceneObjectGenericFlagDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetSceneObjectGenericFlagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetSceneObjectGenericFlagDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetSceneObjectGenericFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetSceneObjectGenericFlagDefaultTypeInternal _CUserMsg_ParticleManager_SetSceneObjectGenericFlag_default_instance_;
constexpr CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tint_(0u)
  , desat_(0){}
struct CUserMsg_ParticleManager_SetSceneObjectTintAndDesatDefaultTypeInternal {
  constexpr CUserMsg_ParticleManager_SetSceneObjectTintAndDesatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManager_SetSceneObjectTintAndDesatDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager_SetSceneObjectTintAndDesat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManager_SetSceneObjectTintAndDesatDefaultTypeInternal _CUserMsg_ParticleManager_SetSceneObjectTintAndDesat_default_instance_;
constexpr CUserMsg_ParticleManager::CUserMsg_ParticleManager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : release_particle_index_(nullptr)
  , create_particle_(nullptr)
  , destroy_particle_(nullptr)
  , destroy_particle_involving_(nullptr)
  , update_particle_(nullptr)
  , update_particle_fwd_(nullptr)
  , update_particle_orient_(nullptr)
  , update_particle_fallback_(nullptr)
  , update_particle_offset_(nullptr)
  , update_particle_ent_(nullptr)
  , update_particle_should_draw_(nullptr)
  , update_particle_set_frozen_(nullptr)
  , change_control_point_attachment_(nullptr)
  , update_entity_position_(nullptr)
  , set_particle_fow_properties_(nullptr)
  , set_particle_text_(nullptr)
  , set_particle_should_check_fow_(nullptr)
  , set_control_point_model_(nullptr)
  , set_control_point_snapshot_(nullptr)
  , set_texture_attribute_(nullptr)
  , set_scene_object_generic_flag_(nullptr)
  , set_scene_object_tint_and_desat_(nullptr)
  , destroy_particle_named_(nullptr)
  , type_(0)

  , index_(0u){}
struct CUserMsg_ParticleManagerDefaultTypeInternal {
  constexpr CUserMsg_ParticleManagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_ParticleManagerDefaultTypeInternal() {}
  union {
    CUserMsg_ParticleManager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_ParticleManagerDefaultTypeInternal _CUserMsg_ParticleManager_default_instance_;
constexpr CUserMsg_HudError::CUserMsg_HudError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(0){}
struct CUserMsg_HudErrorDefaultTypeInternal {
  constexpr CUserMsg_HudErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_HudErrorDefaultTypeInternal() {}
  union {
    CUserMsg_HudError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_HudErrorDefaultTypeInternal _CUserMsg_HudError_default_instance_;
constexpr CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserMsg_CustomGameEventDefaultTypeInternal {
  constexpr CUserMsg_CustomGameEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMsg_CustomGameEventDefaultTypeInternal() {}
  union {
    CUserMsg_CustomGameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMsg_CustomGameEventDefaultTypeInternal _CUserMsg_CustomGameEvent_default_instance_;
constexpr CUserMessageHapticsManagerPulse::CUserMessageHapticsManagerPulse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hand_id_(0)
  , effect_amplitude_(0)
  , effect_frequency_(0)
  , effect_duration_(0){}
struct CUserMessageHapticsManagerPulseDefaultTypeInternal {
  constexpr CUserMessageHapticsManagerPulseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageHapticsManagerPulseDefaultTypeInternal() {}
  union {
    CUserMessageHapticsManagerPulse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageHapticsManagerPulseDefaultTypeInternal _CUserMessageHapticsManagerPulse_default_instance_;
constexpr CUserMessageHapticsManagerEffect::CUserMessageHapticsManagerEffect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hand_id_(0)
  , effect_name_hash_code_(0u)
  , effect_scale_(0){}
struct CUserMessageHapticsManagerEffectDefaultTypeInternal {
  constexpr CUserMessageHapticsManagerEffectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageHapticsManagerEffectDefaultTypeInternal() {}
  union {
    CUserMessageHapticsManagerEffect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageHapticsManagerEffectDefaultTypeInternal _CUserMessageHapticsManagerEffect_default_instance_;
constexpr CUserMessageAnimStateGraphState::CUserMessageAnimStateGraphState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entity_index_(0){}
struct CUserMessageAnimStateGraphStateDefaultTypeInternal {
  constexpr CUserMessageAnimStateGraphStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageAnimStateGraphStateDefaultTypeInternal() {}
  union {
    CUserMessageAnimStateGraphState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageAnimStateGraphStateDefaultTypeInternal _CUserMessageAnimStateGraphState_default_instance_;
constexpr CUserMessageCommandQueueState_command_queue_info_t::CUserMessageCommandQueueState_command_queue_info_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_queued_(0u)
  , command_queue_desired_size_(0u)
  , starved_command_ticks_(0u)
  , time_dilation_percent_(0){}
struct CUserMessageCommandQueueState_command_queue_info_tDefaultTypeInternal {
  constexpr CUserMessageCommandQueueState_command_queue_info_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCommandQueueState_command_queue_info_tDefaultTypeInternal() {}
  union {
    CUserMessageCommandQueueState_command_queue_info_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCommandQueueState_command_queue_info_tDefaultTypeInternal _CUserMessageCommandQueueState_command_queue_info_t_default_instance_;
constexpr CUserMessageCommandQueueState::CUserMessageCommandQueueState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_queue_info_(nullptr)
  , player_entity_index_(0){}
struct CUserMessageCommandQueueStateDefaultTypeInternal {
  constexpr CUserMessageCommandQueueStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserMessageCommandQueueStateDefaultTypeInternal() {}
  union {
    CUserMessageCommandQueueState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserMessageCommandQueueStateDefaultTypeInternal _CUserMessageCommandQueueState_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_usermessages_2eproto[74];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_usermessages_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_usermessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_usermessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CUserMessageAchievementEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAchievementEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageAchievementEvent, achievement_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaption, hash_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaption, duration_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaption, from_player_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaption, ent_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionDirect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionDirect, hash_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionDirect, duration_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionDirect, from_player_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionDirect, ent_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionPlaceholder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionPlaceholder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionPlaceholder, string_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionPlaceholder, duration_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionPlaceholder, from_player_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCloseCaptionPlaceholder, ent_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCurrentTimescale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCurrentTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCurrentTimescale, current_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageDesiredTimescale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageDesiredTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageDesiredTimescale, desired_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageDesiredTimescale, acceleration_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageDesiredTimescale, minblendrate_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageDesiredTimescale, blenddeltamultiplier_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageFade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageFade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageFade, duration_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageFade, hold_time_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageFade, flags_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageFade, color_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageShake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageShake, command_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShake, amplitude_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShake, frequency_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShake, duration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageShakeDir, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShakeDir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageShakeDir, shake_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShakeDir, direction_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMessageScreenTilt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageScreenTilt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageScreenTilt, command_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageScreenTilt, ease_in_out_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageScreenTilt, angle_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageScreenTilt, duration_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageScreenTilt, time_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText, playerindex_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText, text_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText, chat_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, entityindex_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, chat_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, messagename_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, param1_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, param2_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, param3_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayText2, param4_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, channel_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, x_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, y_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, color1_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, color2_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, effect_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, fade_in_time_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, fade_out_time_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, hold_time_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, fx_time_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudMsg, message_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageHudText, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageTextMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageTextMsg, dest_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageTextMsg, param_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserMessageGameTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserMessageResetHUD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageSendAudio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSendAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageSendAudio, soundname_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSendAudio, stop_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMessageAudioParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAudioParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageAudioParameter, parameter_type_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAudioParameter, name_hash_code_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAudioParameter, value_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAudioParameter, int_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceMask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceMask, gamerules_masks_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceMask, ban_masks_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceMask, mod_enable_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserMessageRequestState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageHintText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageHintText, message_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserMessageKeyHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageKeyHintText, messages_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceSubtitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceSubtitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceSubtitle, player_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceSubtitle, menu_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVoiceSubtitle, item_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu_Keys, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu_Keys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu_Keys, name_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu_Keys, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu, name_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu, show_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageVGUIMenu, keys_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CUserMessageRumble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageRumble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageRumble, index_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageRumble, data_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageRumble, flags_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CUserMessageTrain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageTrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageTrain, position_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayTextChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayTextChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayTextChannel, player_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayTextChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageSayTextChannel, text_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, color_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, text_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, reset_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, context_player_id_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, context_value_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageColoredText, context_team_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CUserMessageItemPickup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageItemPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageItemPickup, itemname_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageAmmoDenied, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAmmoDenied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageAmmoDenied, ammo_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCrosshairAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCrosshairAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCrosshairAngle, angcrosshair_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageShowMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShowMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageShowMenu, validslots_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShowMenu, displaytime_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShowMenu, needmore_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageShowMenu, menustring_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCreditsMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCreditsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCreditsMsg, rolltype_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCreditsMsg, logo_length_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CEntityMessagePlayJingle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessagePlayJingle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEntityMessagePlayJingle, entity_msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CEntityMessageScreenOverlay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageScreenOverlay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEntityMessageScreenOverlay, start_effect_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageScreenOverlay, entity_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CEntityMessageRemoveAllDecals, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageRemoveAllDecals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEntityMessageRemoveAllDecals, remove_decals_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageRemoveAllDecals, entity_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CEntityMessagePropagateForce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessagePropagateForce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEntityMessagePropagateForce, impulse_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessagePropagateForce, entity_msg_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, origin_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, entityindex_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, radius_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, color_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, beams_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, thick_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, duration_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageDoSpark, entity_msg_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::CEntityMessageFixAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageFixAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEntityMessageFixAngle, relative_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageFixAngle, angle_),
  PROTOBUF_FIELD_OFFSET(::CEntityMessageFixAngle, entity_msg_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition_Transition_DataDriven, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition_Transition_DataDriven, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition_Transition_DataDriven, filename_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition_Transition_DataDriven, attach_ent_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition, camera_type_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition, duration_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCameraTransition, params_data_driven_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_ReleaseParticleIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, particle_name_index_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, attach_type_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, entity_handle_for_modifiers_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, apply_voice_ban_rules_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, team_behavior_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_CreateParticle, control_point_configuration_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticle, destroy_immediately_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleInvolving, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleInvolving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleNamed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleNamed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleNamed, particle_name_index_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleNamed, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleNamed, destroy_immediately_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_DestroyParticleNamed, play_endcap_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticle, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticle, position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFwd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFwd, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFwd, forward_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOrient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOrient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOrient, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOrient, forward_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOrient, deprecated_right_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOrient, up_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOrient, left_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFallback, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleFallback, position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOffset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOffset, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleOffset, angle_offset_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, attach_type_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, attachment_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleEnt, include_wearables_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleSetFrozen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleSetFrozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleSetFrozen, set_frozen_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleShouldDraw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleShouldDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateParticleShouldDraw, should_draw_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_ChangeControlPointAttachment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_ChangeControlPointAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_old_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_new_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_ChangeControlPointAttachment, entity_handle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateEntityPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateEntityPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateEntityPosition, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_UpdateEntityPosition, position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleFoWProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleFoWProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleFoWProperties, fow_control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleFoWProperties, fow_control_point2_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleFoWProperties, fow_radius_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleShouldCheckFoW, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleShouldCheckFoW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleShouldCheckFoW, check_fow_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointModel, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointModel, model_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointSnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointSnapshot, control_point_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetControlPointSnapshot, snapshot_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetParticleText, text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetTextureAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetTextureAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetTextureAttribute, attribute_name_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetTextureAttribute, texture_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetSceneObjectGenericFlag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetSceneObjectGenericFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetSceneObjectGenericFlag, flag_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat, tint_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat, desat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, type_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, index_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, release_particle_index_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, create_particle_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, destroy_particle_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, destroy_particle_involving_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_fwd_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_orient_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_fallback_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_offset_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_ent_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_should_draw_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_particle_set_frozen_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, change_control_point_attachment_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, update_entity_position_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_particle_fow_properties_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_particle_text_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_particle_should_check_fow_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_control_point_model_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_control_point_snapshot_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_texture_attribute_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_scene_object_generic_flag_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, set_scene_object_tint_and_desat_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_ParticleManager, destroy_particle_named_),
  23,
  24,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_HudError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_HudError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_HudError, order_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMsg_CustomGameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_CustomGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMsg_CustomGameEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::CUserMsg_CustomGameEvent, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerPulse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerPulse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerPulse, hand_id_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerPulse, effect_amplitude_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerPulse, effect_frequency_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerPulse, effect_duration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerEffect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerEffect, hand_id_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerEffect, effect_name_hash_code_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageHapticsManagerEffect, effect_scale_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CUserMessageAnimStateGraphState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAnimStateGraphState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageAnimStateGraphState, entity_index_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageAnimStateGraphState, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState_command_queue_info_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState_command_queue_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState_command_queue_info_t, commands_queued_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState_command_queue_info_t, command_queue_desired_size_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState_command_queue_info_t, starved_command_ticks_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState_command_queue_info_t, time_dilation_percent_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState, player_entity_index_),
  PROTOBUF_FIELD_OFFSET(::CUserMessageCommandQueueState, command_queue_info_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CUserMessageAchievementEvent)},
  { 7, 16, sizeof(::CUserMessageCloseCaption)},
  { 20, 29, sizeof(::CUserMessageCloseCaptionDirect)},
  { 33, 42, sizeof(::CUserMessageCloseCaptionPlaceholder)},
  { 46, 52, sizeof(::CUserMessageCurrentTimescale)},
  { 53, 62, sizeof(::CUserMessageDesiredTimescale)},
  { 66, 75, sizeof(::CUserMessageFade)},
  { 79, 88, sizeof(::CUserMessageShake)},
  { 92, 99, sizeof(::CUserMessageShakeDir)},
  { 101, 111, sizeof(::CUserMessageScreenTilt)},
  { 116, 124, sizeof(::CUserMessageSayText)},
  { 127, 139, sizeof(::CUserMessageSayText2)},
  { 146, 162, sizeof(::CUserMessageHudMsg)},
  { 173, 179, sizeof(::CUserMessageHudText)},
  { 180, 187, sizeof(::CUserMessageTextMsg)},
  { 189, -1, sizeof(::CUserMessageGameTitle)},
  { 194, -1, sizeof(::CUserMessageResetHUD)},
  { 199, 206, sizeof(::CUserMessageSendAudio)},
  { 208, 217, sizeof(::CUserMessageAudioParameter)},
  { 221, 229, sizeof(::CUserMessageVoiceMask)},
  { 232, -1, sizeof(::CUserMessageRequestState)},
  { 237, 243, sizeof(::CUserMessageHintText)},
  { 244, -1, sizeof(::CUserMessageKeyHintText)},
  { 250, 258, sizeof(::CUserMessageVoiceSubtitle)},
  { 261, 268, sizeof(::CUserMessageVGUIMenu_Keys)},
  { 270, 278, sizeof(::CUserMessageVGUIMenu)},
  { 281, 289, sizeof(::CUserMessageRumble)},
  { 292, 298, sizeof(::CUserMessageTrain)},
  { 299, 307, sizeof(::CUserMessageSayTextChannel)},
  { 310, 321, sizeof(::CUserMessageColoredText)},
  { 327, 333, sizeof(::CUserMessageItemPickup)},
  { 334, 340, sizeof(::CUserMessageAmmoDenied)},
  { 341, 347, sizeof(::CUserMessageCrosshairAngle)},
  { 348, 357, sizeof(::CUserMessageShowMenu)},
  { 361, 368, sizeof(::CUserMessageCreditsMsg)},
  { 370, 376, sizeof(::CEntityMessagePlayJingle)},
  { 377, 384, sizeof(::CEntityMessageScreenOverlay)},
  { 386, 393, sizeof(::CEntityMessageRemoveAllDecals)},
  { 395, 402, sizeof(::CEntityMessagePropagateForce)},
  { 404, 417, sizeof(::CEntityMessageDoSpark)},
  { 425, 433, sizeof(::CEntityMessageFixAngle)},
  { 436, 443, sizeof(::CUserMessageCameraTransition_Transition_DataDriven)},
  { 445, 453, sizeof(::CUserMessageCameraTransition)},
  { 456, -1, sizeof(::CUserMsg_ParticleManager_ReleaseParticleIndex)},
  { 461, 473, sizeof(::CUserMsg_ParticleManager_CreateParticle)},
  { 480, 486, sizeof(::CUserMsg_ParticleManager_DestroyParticle)},
  { 487, 494, sizeof(::CUserMsg_ParticleManager_DestroyParticleInvolving)},
  { 496, 505, sizeof(::CUserMsg_ParticleManager_DestroyParticleNamed)},
  { 509, 516, sizeof(::CUserMsg_ParticleManager_UpdateParticle)},
  { 518, 525, sizeof(::CUserMsg_ParticleManager_UpdateParticleFwd)},
  { 527, 537, sizeof(::CUserMsg_ParticleManager_UpdateParticleOrient)},
  { 542, 549, sizeof(::CUserMsg_ParticleManager_UpdateParticleFallback)},
  { 551, 559, sizeof(::CUserMsg_ParticleManager_UpdateParticleOffset)},
  { 562, 573, sizeof(::CUserMsg_ParticleManager_UpdateParticleEnt)},
  { 579, 585, sizeof(::CUserMsg_ParticleManager_UpdateParticleSetFrozen)},
  { 586, 592, sizeof(::CUserMsg_ParticleManager_UpdateParticleShouldDraw)},
  { 593, 601, sizeof(::CUserMsg_ParticleManager_ChangeControlPointAttachment)},
  { 604, 611, sizeof(::CUserMsg_ParticleManager_UpdateEntityPosition)},
  { 613, 621, sizeof(::CUserMsg_ParticleManager_SetParticleFoWProperties)},
  { 624, 630, sizeof(::CUserMsg_ParticleManager_SetParticleShouldCheckFoW)},
  { 631, 638, sizeof(::CUserMsg_ParticleManager_SetControlPointModel)},
  { 640, 647, sizeof(::CUserMsg_ParticleManager_SetControlPointSnapshot)},
  { 649, 655, sizeof(::CUserMsg_ParticleManager_SetParticleText)},
  { 656, 663, sizeof(::CUserMsg_ParticleManager_SetTextureAttribute)},
  { 665, 671, sizeof(::CUserMsg_ParticleManager_SetSceneObjectGenericFlag)},
  { 672, 679, sizeof(::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat)},
  { 681, 711, sizeof(::CUserMsg_ParticleManager)},
  { 736, 742, sizeof(::CUserMsg_HudError)},
  { 743, 750, sizeof(::CUserMsg_CustomGameEvent)},
  { 752, 761, sizeof(::CUserMessageHapticsManagerPulse)},
  { 765, 773, sizeof(::CUserMessageHapticsManagerEffect)},
  { 776, 783, sizeof(::CUserMessageAnimStateGraphState)},
  { 785, 794, sizeof(::CUserMessageCommandQueueState_command_queue_info_t)},
  { 798, 805, sizeof(::CUserMessageCommandQueueState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageAchievementEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCloseCaption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCloseCaptionDirect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCloseCaptionPlaceholder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCurrentTimescale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageDesiredTimescale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageFade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageShake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageShakeDir_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageScreenTilt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageSayText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageSayText2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageHudMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageHudText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageTextMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageGameTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageResetHUD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageSendAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageAudioParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageVoiceMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageRequestState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageHintText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageKeyHintText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageVoiceSubtitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageVGUIMenu_Keys_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageVGUIMenu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageRumble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageTrain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageSayTextChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageColoredText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageItemPickup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageAmmoDenied_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCrosshairAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageShowMenu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCreditsMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEntityMessagePlayJingle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEntityMessageScreenOverlay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEntityMessageRemoveAllDecals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEntityMessagePropagateForce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEntityMessageDoSpark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEntityMessageFixAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCameraTransition_Transition_DataDriven_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCameraTransition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_CreateParticle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_DestroyParticle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_DestroyParticleNamed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_UpdateEntityPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetControlPointModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetControlPointSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetParticleText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetTextureAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetSceneObjectGenericFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_SetSceneObjectTintAndDesat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_ParticleManager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_HudError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMsg_CustomGameEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageHapticsManagerPulse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageHapticsManagerEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageAnimStateGraphState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCommandQueueState_command_queue_info_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserMessageCommandQueueState_default_instance_),
};

const char descriptor_table_protodef_usermessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022usermessages.proto\032\026networkbasetypes.p"
  "roto\"3\n\034CUserMessageAchievementEvent\022\023\n\013"
  "achievement\030\001 \001(\r\"b\n\030CUserMessageCloseCa"
  "ption\022\014\n\004hash\030\001 \001(\007\022\020\n\010duration\030\002 \001(\002\022\023\n"
  "\013from_player\030\003 \001(\010\022\021\n\tent_index\030\004 \001(\005\"h\n"
  "\036CUserMessageCloseCaptionDirect\022\014\n\004hash\030"
  "\001 \001(\007\022\020\n\010duration\030\002 \001(\002\022\023\n\013from_player\030\003"
  " \001(\010\022\021\n\tent_index\030\004 \001(\005\"o\n#CUserMessageC"
  "loseCaptionPlaceholder\022\016\n\006string\030\001 \001(\t\022\020"
  "\n\010duration\030\002 \001(\002\022\023\n\013from_player\030\003 \001(\010\022\021\n"
  "\tent_index\030\004 \001(\005\"/\n\034CUserMessageCurrentT"
  "imescale\022\017\n\007current\030\001 \001(\002\"y\n\034CUserMessag"
  "eDesiredTimescale\022\017\n\007desired\030\001 \001(\002\022\024\n\014ac"
  "celeration\030\002 \001(\002\022\024\n\014minblendrate\030\003 \001(\002\022\034"
  "\n\024blenddeltamultiplier\030\004 \001(\002\"U\n\020CUserMes"
  "sageFade\022\020\n\010duration\030\001 \001(\r\022\021\n\thold_time\030"
  "\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\r\n\005color\030\004 \001(\007\"\\\n\021C"
  "UserMessageShake\022\017\n\007command\030\001 \001(\r\022\021\n\tamp"
  "litude\030\002 \001(\002\022\021\n\tfrequency\030\003 \001(\002\022\020\n\010durat"
  "ion\030\004 \001(\002\"Y\n\024CUserMessageShakeDir\022!\n\005sha"
  "ke\030\001 \001(\0132\022.CUserMessageShake\022\036\n\tdirectio"
  "n\030\002 \001(\0132\013.CMsgVector\"z\n\026CUserMessageScre"
  "enTilt\022\017\n\007command\030\001 \001(\r\022\023\n\013ease_in_out\030\002"
  " \001(\010\022\032\n\005angle\030\003 \001(\0132\013.CMsgVector\022\020\n\010dura"
  "tion\030\004 \001(\002\022\014\n\004time\030\005 \001(\002\"F\n\023CUserMessage"
  "SayText\022\023\n\013playerindex\030\001 \001(\r\022\014\n\004text\030\002 \001"
  "(\t\022\014\n\004chat\030\003 \001(\010\"\216\001\n\024CUserMessageSayText"
  "2\022\023\n\013entityindex\030\001 \001(\r\022\014\n\004chat\030\002 \001(\010\022\023\n\013"
  "messagename\030\003 \001(\t\022\016\n\006param1\030\004 \001(\t\022\016\n\006par"
  "am2\030\005 \001(\t\022\016\n\006param3\030\006 \001(\t\022\016\n\006param4\030\007 \001("
  "\t\"\315\001\n\022CUserMessageHudMsg\022\017\n\007channel\030\001 \001("
  "\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\016\n\006color1\030\004 \001(\007\022"
  "\016\n\006color2\030\005 \001(\007\022\016\n\006effect\030\006 \001(\r\022\024\n\014fade_"
  "in_time\030\007 \001(\002\022\025\n\rfade_out_time\030\010 \001(\002\022\021\n\t"
  "hold_time\030\t \001(\002\022\017\n\007fx_time\030\n \001(\002\022\017\n\007mess"
  "age\030\013 \001(\t\"&\n\023CUserMessageHudText\022\017\n\007mess"
  "age\030\001 \001(\t\"2\n\023CUserMessageTextMsg\022\014\n\004dest"
  "\030\001 \001(\r\022\r\n\005param\030\002 \003(\t\"\027\n\025CUserMessageGam"
  "eTitle\"\026\n\024CUserMessageResetHUD\"8\n\025CUserM"
  "essageSendAudio\022\021\n\tsoundname\030\001 \001(\t\022\014\n\004st"
  "op\030\002 \001(\010\"n\n\032CUserMessageAudioParameter\022\026"
  "\n\016parameter_type\030\001 \001(\r\022\026\n\016name_hash_code"
  "\030\002 \001(\r\022\r\n\005value\030\003 \001(\002\022\021\n\tint_value\030\004 \001(\r"
  "\"W\n\025CUserMessageVoiceMask\022\027\n\017gamerules_m"
  "asks\030\001 \003(\r\022\021\n\tban_masks\030\002 \003(\r\022\022\n\nmod_ena"
  "ble\030\003 \001(\010\"\032\n\030CUserMessageRequestState\"\'\n"
  "\024CUserMessageHintText\022\017\n\007message\030\001 \001(\t\"+"
  "\n\027CUserMessageKeyHintText\022\020\n\010messages\030\001 "
  "\003(\t\"G\n\031CUserMessageVoiceSubtitle\022\016\n\006play"
  "er\030\001 \001(\005\022\014\n\004menu\030\002 \001(\005\022\014\n\004item\030\003 \001(\005\"\201\001\n"
  "\024CUserMessageVGUIMenu\022\014\n\004name\030\001 \001(\t\022\014\n\004s"
  "how\030\002 \001(\010\022(\n\004keys\030\003 \003(\0132\032.CUserMessageVG"
  "UIMenu.Keys\032#\n\004Keys\022\014\n\004name\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t\"@\n\022CUserMessageRumble\022\r\n\005index\030"
  "\001 \001(\005\022\014\n\004data\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\"%\n\021CU"
  "serMessageTrain\022\020\n\010position\030\001 \001(\r\"K\n\032CUs"
  "erMessageSayTextChannel\022\016\n\006player\030\001 \001(\005\022"
  "\017\n\007channel\030\002 \001(\005\022\014\n\004text\030\003 \001(\t\"\220\001\n\027CUser"
  "MessageColoredText\022\r\n\005color\030\001 \001(\r\022\014\n\004tex"
  "t\030\002 \001(\t\022\r\n\005reset\030\003 \001(\010\022\031\n\021context_player"
  "_id\030\004 \001(\005\022\025\n\rcontext_value\030\005 \001(\005\022\027\n\017cont"
  "ext_team_id\030\006 \001(\005\"*\n\026CUserMessageItemPic"
  "kup\022\020\n\010itemname\030\001 \001(\t\")\n\026CUserMessageAmm"
  "oDenied\022\017\n\007ammo_id\030\001 \001(\r\"\?\n\032CUserMessage"
  "CrosshairAngle\022!\n\014angcrosshair\030\001 \001(\0132\013.C"
  "MsgQAngle\"e\n\024CUserMessageShowMenu\022\022\n\nval"
  "idslots\030\001 \001(\r\022\023\n\013displaytime\030\002 \001(\r\022\020\n\010ne"
  "edmore\030\003 \001(\010\022\022\n\nmenustring\030\004 \001(\t\"V\n\026CUse"
  "rMessageCreditsMsg\022\'\n\010rolltype\030\001 \001(\0162\n.e"
  "RollType:\tROLL_NONE\022\023\n\013logo_length\030\002 \001(\002"
  "\";\n\030CEntityMessagePlayJingle\022\037\n\nentity_m"
  "sg\030\001 \001(\0132\013.CEntityMsg\"T\n\033CEntityMessageS"
  "creenOverlay\022\024\n\014start_effect\030\001 \001(\010\022\037\n\nen"
  "tity_msg\030\002 \001(\0132\013.CEntityMsg\"W\n\035CEntityMe"
  "ssageRemoveAllDecals\022\025\n\rremove_decals\030\001 "
  "\001(\010\022\037\n\nentity_msg\030\002 \001(\0132\013.CEntityMsg\"]\n\034"
  "CEntityMessagePropagateForce\022\034\n\007impulse\030"
  "\001 \001(\0132\013.CMsgVector\022\037\n\nentity_msg\030\002 \001(\0132\013"
  ".CEntityMsg\"\271\001\n\025CEntityMessageDoSpark\022\033\n"
  "\006origin\030\001 \001(\0132\013.CMsgVector\022\023\n\013entityinde"
  "x\030\002 \001(\r\022\016\n\006radius\030\003 \001(\002\022\r\n\005color\030\004 \001(\007\022\r"
  "\n\005beams\030\005 \001(\r\022\r\n\005thick\030\006 \001(\002\022\020\n\010duration"
  "\030\007 \001(\002\022\037\n\nentity_msg\030\010 \001(\0132\013.CEntityMsg\""
  "g\n\026CEntityMessageFixAngle\022\020\n\010relative\030\001 "
  "\001(\010\022\032\n\005angle\030\002 \001(\0132\013.CMsgQAngle\022\037\n\nentit"
  "y_msg\030\003 \001(\0132\013.CEntityMsg\"\333\001\n\034CUserMessag"
  "eCameraTransition\022\023\n\013camera_type\030\001 \001(\r\022\020"
  "\n\010duration\030\002 \001(\002\022O\n\022params_data_driven\030\003"
  " \001(\01323.CUserMessageCameraTransition.Tran"
  "sition_DataDriven\032C\n\025Transition_DataDriv"
  "en\022\020\n\010filename\030\001 \001(\t\022\030\n\020attach_ent_index"
  "\030\002 \001(\005\"\372\036\n\030CUserMsg_ParticleManager\022C\n\004t"
  "ype\030\001 \002(\0162\021.PARTICLE_MESSAGE:\"GAME_PARTI"
  "CLE_MANAGER_EVENT_CREATE\022\r\n\005index\030\002 \002(\r\022"
  "N\n\026release_particle_index\030\003 \001(\0132..CUserM"
  "sg_ParticleManager.ReleaseParticleIndex\022"
  "A\n\017create_particle\030\004 \001(\0132(.CUserMsg_Part"
  "icleManager.CreateParticle\022C\n\020destroy_pa"
  "rticle\030\005 \001(\0132).CUserMsg_ParticleManager."
  "DestroyParticle\022V\n\032destroy_particle_invo"
  "lving\030\006 \001(\01322.CUserMsg_ParticleManager.D"
  "estroyParticleInvolving\022A\n\017update_partic"
  "le\030\007 \001(\0132(.CUserMsg_ParticleManager.Upda"
  "teParticle\022H\n\023update_particle_fwd\030\010 \001(\0132"
  "+.CUserMsg_ParticleManager.UpdateParticl"
  "eFwd\022N\n\026update_particle_orient\030\t \001(\0132..C"
  "UserMsg_ParticleManager.UpdateParticleOr"
  "ient\022R\n\030update_particle_fallback\030\n \001(\01320"
  ".CUserMsg_ParticleManager.UpdateParticle"
  "Fallback\022N\n\026update_particle_offset\030\013 \001(\013"
  "2..CUserMsg_ParticleManager.UpdatePartic"
  "leOffset\022H\n\023update_particle_ent\030\014 \001(\0132+."
  "CUserMsg_ParticleManager.UpdateParticleE"
  "nt\022W\n\033update_particle_should_draw\030\016 \001(\0132"
  "2.CUserMsg_ParticleManager.UpdateParticl"
  "eShouldDraw\022U\n\032update_particle_set_froze"
  "n\030\017 \001(\01321.CUserMsg_ParticleManager.Updat"
  "eParticleSetFrozen\022_\n\037change_control_poi"
  "nt_attachment\030\020 \001(\01326.CUserMsg_ParticleM"
  "anager.ChangeControlPointAttachment\022N\n\026u"
  "pdate_entity_position\030\021 \001(\0132..CUserMsg_P"
  "articleManager.UpdateEntityPosition\022W\n\033s"
  "et_particle_fow_properties\030\022 \001(\01322.CUser"
  "Msg_ParticleManager.SetParticleFoWProper"
  "ties\022D\n\021set_particle_text\030\023 \001(\0132).CUserM"
  "sg_ParticleManager.SetParticleText\022Z\n\035se"
  "t_particle_should_check_fow\030\024 \001(\01323.CUse"
  "rMsg_ParticleManager.SetParticleShouldCh"
  "eckFoW\022O\n\027set_control_point_model\030\025 \001(\0132"
  "..CUserMsg_ParticleManager.SetControlPoi"
  "ntModel\022U\n\032set_control_point_snapshot\030\026 "
  "\001(\01321.CUserMsg_ParticleManager.SetContro"
  "lPointSnapshot\022L\n\025set_texture_attribute\030"
  "\027 \001(\0132-.CUserMsg_ParticleManager.SetText"
  "ureAttribute\022Z\n\035set_scene_object_generic"
  "_flag\030\030 \001(\01323.CUserMsg_ParticleManager.S"
  "etSceneObjectGenericFlag\022]\n\037set_scene_ob"
  "ject_tint_and_desat\030\031 \001(\01324.CUserMsg_Par"
  "ticleManager.SetSceneObjectTintAndDesat\022"
  "N\n\026destroy_particle_named\030\032 \001(\0132..CUserM"
  "sg_ParticleManager.DestroyParticleNamed\032"
  "\026\n\024ReleaseParticleIndex\032\331\001\n\016CreatePartic"
  "le\022\033\n\023particle_name_index\030\001 \001(\006\022\023\n\013attac"
  "h_type\030\002 \001(\005\022\025\n\rentity_handle\030\003 \001(\005\022#\n\033e"
  "ntity_handle_for_modifiers\030\004 \001(\005\022\035\n\025appl"
  "y_voice_ban_rules\030\005 \001(\010\022\025\n\rteam_behavior"
  "\030\006 \001(\005\022#\n\033control_point_configuration\030\007 "
  "\001(\t\032.\n\017DestroyParticle\022\033\n\023destroy_immedi"
  "ately\030\001 \001(\010\032N\n\030DestroyParticleInvolving\022"
  "\033\n\023destroy_immediately\030\001 \001(\010\022\025\n\rentity_h"
  "andle\030\003 \001(\005\032|\n\024DestroyParticleNamed\022\033\n\023p"
  "article_name_index\030\001 \001(\006\022\025\n\rentity_handl"
  "e\030\002 \001(\005\022\033\n\023destroy_immediately\030\003 \001(\010\022\023\n\013"
  "play_endcap\030\004 \001(\010\032F\n\016UpdateParticle\022\025\n\rc"
  "ontrol_point\030\001 \001(\005\022\035\n\010position\030\002 \001(\0132\013.C"
  "MsgVector\032H\n\021UpdateParticleFwd\022\025\n\rcontro"
  "l_point\030\001 \001(\005\022\034\n\007forward\030\002 \001(\0132\013.CMsgVec"
  "tor\032\246\001\n\024UpdateParticleOrient\022\025\n\rcontrol_"
  "point\030\001 \001(\005\022\034\n\007forward\030\002 \001(\0132\013.CMsgVecto"
  "r\022%\n\020deprecated_right\030\003 \001(\0132\013.CMsgVector"
  "\022\027\n\002up\030\004 \001(\0132\013.CMsgVector\022\031\n\004left\030\005 \001(\0132"
  "\013.CMsgVector\032N\n\026UpdateParticleFallback\022\025"
  "\n\rcontrol_point\030\001 \001(\005\022\035\n\010position\030\002 \001(\0132"
  "\013.CMsgVector\032t\n\024UpdateParticleOffset\022\025\n\r"
  "control_point\030\001 \001(\005\022\"\n\rorigin_offset\030\002 \001"
  "(\0132\013.CMsgVector\022!\n\014angle_offset\030\003 \001(\0132\013."
  "CMsgQAngle\032\255\001\n\021UpdateParticleEnt\022\025\n\rcont"
  "rol_point\030\001 \001(\005\022\025\n\rentity_handle\030\002 \001(\005\022\023"
  "\n\013attach_type\030\003 \001(\005\022\022\n\nattachment\030\004 \001(\005\022"
  "&\n\021fallback_position\030\005 \001(\0132\013.CMsgVector\022"
  "\031\n\021include_wearables\030\006 \001(\010\032-\n\027UpdatePart"
  "icleSetFrozen\022\022\n\nset_frozen\030\001 \001(\010\032/\n\030Upd"
  "ateParticleShouldDraw\022\023\n\013should_draw\030\001 \001"
  "(\010\032e\n\034ChangeControlPointAttachment\022\026\n\016at"
  "tachment_old\030\001 \001(\005\022\026\n\016attachment_new\030\002 \001"
  "(\005\022\025\n\rentity_handle\030\003 \001(\005\032L\n\024UpdateEntit"
  "yPosition\022\025\n\rentity_handle\030\001 \001(\005\022\035\n\010posi"
  "tion\030\002 \001(\0132\013.CMsgVector\032e\n\030SetParticleFo"
  "WProperties\022\031\n\021fow_control_point\030\001 \001(\005\022\032"
  "\n\022fow_control_point2\030\002 \001(\005\022\022\n\nfow_radius"
  "\030\003 \001(\002\032.\n\031SetParticleShouldCheckFoW\022\021\n\tc"
  "heck_fow\030\001 \001(\010\032A\n\024SetControlPointModel\022\025"
  "\n\rcontrol_point\030\001 \001(\005\022\022\n\nmodel_name\030\002 \001("
  "\t\032G\n\027SetControlPointSnapshot\022\025\n\rcontrol_"
  "point\030\001 \001(\005\022\025\n\rsnapshot_name\030\002 \001(\t\032\037\n\017Se"
  "tParticleText\022\014\n\004text\030\001 \001(\t\032C\n\023SetTextur"
  "eAttribute\022\026\n\016attribute_name\030\001 \001(\t\022\024\n\014te"
  "xture_name\030\002 \001(\t\032/\n\031SetSceneObjectGeneri"
  "cFlag\022\022\n\nflag_value\030\001 \001(\010\0329\n\032SetSceneObj"
  "ectTintAndDesat\022\014\n\004tint\030\001 \001(\007\022\r\n\005desat\030\002"
  " \001(\002*\005\010d\020\312\001\"%\n\021CUserMsg_HudError\022\020\n\010orde"
  "r_id\030\001 \001(\005\"<\n\030CUserMsg_CustomGameEvent\022\022"
  "\n\nevent_name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"\177\n\037CUse"
  "rMessageHapticsManagerPulse\022\017\n\007hand_id\030\001"
  " \001(\005\022\030\n\020effect_amplitude\030\002 \001(\002\022\030\n\020effect"
  "_frequency\030\003 \001(\002\022\027\n\017effect_duration\030\004 \001("
  "\002\"h\n CUserMessageHapticsManagerEffect\022\017\n"
  "\007hand_id\030\001 \001(\005\022\035\n\025effect_name_hash_code\030"
  "\002 \001(\r\022\024\n\014effect_scale\030\003 \001(\002\"E\n\037CUserMess"
  "ageAnimStateGraphState\022\024\n\014entity_index\030\001"
  " \001(\005\022\014\n\004data\030\002 \001(\014\"\241\002\n\035CUserMessageComma"
  "ndQueueState\022\033\n\023player_entity_index\030\001 \001("
  "\005\022O\n\022command_queue_info\030\002 \001(\01323.CUserMes"
  "sageCommandQueueState.command_queue_info"
  "_t\032\221\001\n\024command_queue_info_t\022\027\n\017commands_"
  "queued\030\001 \001(\r\022\"\n\032command_queue_desired_si"
  "ze\030\002 \001(\r\022\035\n\025starved_command_ticks\030\003 \001(\r\022"
  "\035\n\025time_dilation_percent\030\004 \001(\005*\216\007\n\021EBase"
  "UserMessages\022\027\n\023UM_AchievementEvent\020e\022\023\n"
  "\017UM_CloseCaption\020f\022\031\n\025UM_CloseCaptionDir"
  "ect\020g\022\027\n\023UM_CurrentTimescale\020h\022\027\n\023UM_Des"
  "iredTimescale\020i\022\013\n\007UM_Fade\020j\022\020\n\014UM_GameT"
  "itle\020k\022\017\n\013UM_HintText\020m\022\r\n\tUM_HudMsg\020n\022\016"
  "\n\nUM_HudText\020o\022\022\n\016UM_KeyHintText\020p\022\022\n\016UM"
  "_ColoredText\020q\022\023\n\017UM_RequestState\020r\022\017\n\013U"
  "M_ResetHUD\020s\022\r\n\tUM_Rumble\020t\022\016\n\nUM_SayTex"
  "t\020u\022\017\n\013UM_SayText2\020v\022\025\n\021UM_SayTextChanne"
  "l\020w\022\014\n\010UM_Shake\020x\022\017\n\013UM_ShakeDir\020y\022\016\n\nUM"
  "_TextMsg\020|\022\021\n\rUM_ScreenTilt\020}\022\014\n\010UM_Trai"
  "n\020~\022\017\n\013UM_VGUIMenu\020\177\022\021\n\014UM_VoiceMask\020\200\001\022"
  "\025\n\020UM_VoiceSubtitle\020\201\001\022\021\n\014UM_SendAudio\020\202"
  "\001\022\022\n\rUM_ItemPickup\020\203\001\022\022\n\rUM_AmmoDenied\020\204"
  "\001\022\026\n\021UM_CrosshairAngle\020\205\001\022\020\n\013UM_ShowMenu"
  "\020\206\001\022\022\n\rUM_CreditsMsg\020\207\001\022\037\n\032UM_CloseCapti"
  "onPlaceholder\020\216\001\022\030\n\023UM_CameraTransition\020"
  "\217\001\022\026\n\021UM_AudioParameter\020\220\001\022\027\n\022UM_Particl"
  "eManager\020\221\001\022\020\n\013UM_HudError\020\222\001\022\027\n\022UM_Cust"
  "omGameEvent\020\224\001\022\027\n\022UM_AnimGraphUpdate\020\225\001\022"
  "\033\n\026UM_HapticsManagerPulse\020\226\001\022\034\n\027UM_Hapti"
  "csManagerEffect\020\227\001\022\031\n\024UM_CommandQueueSta"
  "te\020\230\001\022\020\n\013UM_MAX_BASE\020\310\001*\224\001\n\023EBaseEntityM"
  "essages\022\022\n\rEM_PlayJingle\020\210\001\022\025\n\020EM_Screen"
  "Overlay\020\211\001\022\027\n\022EM_RemoveAllDecals\020\212\001\022\026\n\021E"
  "M_PropagateForce\020\213\001\022\017\n\nEM_DoSpark\020\214\001\022\020\n\013"
  "EM_FixAngle\020\215\001*o\n\teRollType\022\026\n\tROLL_NONE"
  "\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nROLL_STATS\020\000\022\020\n\014ROLL_CRED"
  "ITS\020\001\022\027\n\023ROLL_LATE_JOIN_LOGO\020\002\022\017\n\013ROLL_O"
  "UTTRO\020\003*\275\t\n\020PARTICLE_MESSAGE\022&\n\"GAME_PAR"
  "TICLE_MANAGER_EVENT_CREATE\020\000\022&\n\"GAME_PAR"
  "TICLE_MANAGER_EVENT_UPDATE\020\001\022.\n*GAME_PAR"
  "TICLE_MANAGER_EVENT_UPDATE_FORWARD\020\002\0222\n."
  "GAME_PARTICLE_MANAGER_EVENT_UPDATE_ORIEN"
  "TATION\020\003\022/\n+GAME_PARTICLE_MANAGER_EVENT_"
  "UPDATE_FALLBACK\020\004\022*\n&GAME_PARTICLE_MANAG"
  "ER_EVENT_UPDATE_ENT\020\005\022-\n)GAME_PARTICLE_M"
  "ANAGER_EVENT_UPDATE_OFFSET\020\006\022\'\n#GAME_PAR"
  "TICLE_MANAGER_EVENT_DESTROY\020\007\0221\n-GAME_PA"
  "RTICLE_MANAGER_EVENT_DESTROY_INVOLVING\020\010"
  "\022\'\n#GAME_PARTICLE_MANAGER_EVENT_RELEASE\020"
  "\t\022\'\n#GAME_PARTICLE_MANAGER_EVENT_LATENCY"
  "\020\n\022+\n\'GAME_PARTICLE_MANAGER_EVENT_SHOULD"
  "_DRAW\020\013\022&\n\"GAME_PARTICLE_MANAGER_EVENT_F"
  "ROZEN\020\014\022\?\n;GAME_PARTICLE_MANAGER_EVENT_C"
  "HANGE_CONTROL_POINT_ATTACHMENT\020\r\0226\n2GAME"
  "_PARTICLE_MANAGER_EVENT_UPDATE_ENTITY_PO"
  "SITION\020\016\0222\n.GAME_PARTICLE_MANAGER_EVENT_"
  "SET_FOW_PROPERTIES\020\017\022(\n$GAME_PARTICLE_MA"
  "NAGER_EVENT_SET_TEXT\020\020\0224\n0GAME_PARTICLE_"
  "MANAGER_EVENT_SET_SHOULD_CHECK_FOW\020\021\0227\n3"
  "GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_"
  "POINT_MODEL\020\022\022:\n6GAME_PARTICLE_MANAGER_E"
  "VENT_SET_CONTROL_POINT_SNAPSHOT\020\023\0225\n1GAM"
  "E_PARTICLE_MANAGER_EVENT_SET_TEXTURE_ATT"
  "RIBUTE\020\024\022=\n9GAME_PARTICLE_MANAGER_EVENT_"
  "SET_SCENE_OBJECT_GENERIC_FLAG\020\025\022\?\n;GAME_"
  "PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_"
  "TINT_AND_DESAT\020\026\022-\n)GAME_PARTICLE_MANAGE"
  "R_EVENT_DESTROY_NAMED\020\027*t\n\020EHapticPulseT"
  "ype\022\036\n\032VR_HAND_HAPTIC_PULSE_LIGHT\020\000\022\037\n\033V"
  "R_HAND_HAPTIC_PULSE_MEDIUM\020\001\022\037\n\033VR_HAND_"
  "HAPTIC_PULSE_STRONG\020\002B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_usermessages_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_usermessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_usermessages_2eproto = {
  false, false, 10828, descriptor_table_protodef_usermessages_2eproto, "usermessages.proto", 
  &descriptor_table_usermessages_2eproto_once, descriptor_table_usermessages_2eproto_deps, 1, 74,
  schemas, file_default_instances, TableStruct_usermessages_2eproto::offsets,
  file_level_metadata_usermessages_2eproto, file_level_enum_descriptors_usermessages_2eproto, file_level_service_descriptors_usermessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_usermessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usermessages_2eproto);
  return descriptor_table_usermessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_usermessages_2eproto(&descriptor_table_usermessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseUserMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[0];
}
bool EBaseUserMessages_IsValid(int value) {
  switch (value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseEntityMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[1];
}
bool EBaseEntityMessages_IsValid(int value) {
  switch (value) {
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eRollType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[2];
}
bool eRollType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PARTICLE_MESSAGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[3];
}
bool PARTICLE_MESSAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHapticPulseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[4];
}
bool EHapticPulseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CUserMessageAchievementEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageAchievementEvent>()._has_bits_);
  static void set_has_achievement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageAchievementEvent::CUserMessageAchievementEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageAchievementEvent)
}
CUserMessageAchievementEvent::CUserMessageAchievementEvent(const CUserMessageAchievementEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  achievement_ = from.achievement_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageAchievementEvent)
}

void CUserMessageAchievementEvent::SharedCtor() {
achievement_ = 0u;
}

CUserMessageAchievementEvent::~CUserMessageAchievementEvent() {
  // @@protoc_insertion_point(destructor:CUserMessageAchievementEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageAchievementEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageAchievementEvent::ArenaDtor(void* object) {
  CUserMessageAchievementEvent* _this = reinterpret_cast< CUserMessageAchievementEvent* >(object);
  (void)_this;
}
void CUserMessageAchievementEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageAchievementEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageAchievementEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageAchievementEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievement_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageAchievementEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 achievement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_achievement(&has_bits);
          achievement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageAchievementEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageAchievementEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_achievement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageAchievementEvent)
  return target;
}

size_t CUserMessageAchievementEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageAchievementEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 achievement = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achievement());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAchievementEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageAchievementEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAchievementEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageAchievementEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageAchievementEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageAchievementEvent)
    MergeFrom(*source);
  }
}

void CUserMessageAchievementEvent::MergeFrom(const CUserMessageAchievementEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageAchievementEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_achievement()) {
    _internal_set_achievement(from._internal_achievement());
  }
}

void CUserMessageAchievementEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageAchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAchievementEvent::CopyFrom(const CUserMessageAchievementEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageAchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAchievementEvent::IsInitialized() const {
  return true;
}

void CUserMessageAchievementEvent::InternalSwap(CUserMessageAchievementEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(achievement_, other->achievement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageAchievementEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCloseCaption::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCloseCaption>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageCloseCaption::CUserMessageCloseCaption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCloseCaption)
}
CUserMessageCloseCaption::CUserMessageCloseCaption(const CUserMessageCloseCaption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageCloseCaption)
}

void CUserMessageCloseCaption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
}

CUserMessageCloseCaption::~CUserMessageCloseCaption() {
  // @@protoc_insertion_point(destructor:CUserMessageCloseCaption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCloseCaption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageCloseCaption::ArenaDtor(void* object) {
  CUserMessageCloseCaption* _this = reinterpret_cast< CUserMessageCloseCaption* >(object);
  (void)_this;
}
void CUserMessageCloseCaption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCloseCaption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCloseCaption::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCloseCaption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ent_index_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCloseCaption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool from_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_player(&has_bits);
          from_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ent_index(&has_bits);
          ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCloseCaption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCloseCaption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_hash(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ent_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCloseCaption)
  return target;
}

size_t CUserMessageCloseCaption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCloseCaption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ent_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCloseCaption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCloseCaption)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCloseCaption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCloseCaption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCloseCaption)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaption::MergeFrom(const CUserMessageCloseCaption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCloseCaption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaption::CopyFrom(const CUserMessageCloseCaption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaption::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaption::InternalSwap(CUserMessageCloseCaption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageCloseCaption, ent_index_)
      + sizeof(CUserMessageCloseCaption::ent_index_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageCloseCaption, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCloseCaption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCloseCaptionDirect::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCloseCaptionDirect>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCloseCaptionDirect)
}
CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect(const CUserMessageCloseCaptionDirect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageCloseCaptionDirect)
}

void CUserMessageCloseCaptionDirect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
}

CUserMessageCloseCaptionDirect::~CUserMessageCloseCaptionDirect() {
  // @@protoc_insertion_point(destructor:CUserMessageCloseCaptionDirect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCloseCaptionDirect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageCloseCaptionDirect::ArenaDtor(void* object) {
  CUserMessageCloseCaptionDirect* _this = reinterpret_cast< CUserMessageCloseCaptionDirect* >(object);
  (void)_this;
}
void CUserMessageCloseCaptionDirect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCloseCaptionDirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCloseCaptionDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCloseCaptionDirect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ent_index_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCloseCaptionDirect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool from_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_player(&has_bits);
          from_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ent_index(&has_bits);
          ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCloseCaptionDirect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCloseCaptionDirect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_hash(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ent_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCloseCaptionDirect)
  return target;
}

size_t CUserMessageCloseCaptionDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCloseCaptionDirect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ent_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCloseCaptionDirect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaptionDirect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCloseCaptionDirect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCloseCaptionDirect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCloseCaptionDirect)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionDirect::MergeFrom(const CUserMessageCloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaptionDirect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionDirect::CopyFrom(const CUserMessageCloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionDirect::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaptionDirect::InternalSwap(CUserMessageCloseCaptionDirect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageCloseCaptionDirect, ent_index_)
      + sizeof(CUserMessageCloseCaptionDirect::ent_index_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageCloseCaptionDirect, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCloseCaptionDirect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCloseCaptionPlaceholder::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCloseCaptionPlaceholder>()._has_bits_);
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCloseCaptionPlaceholder)
}
CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder(const CUserMessageCloseCaptionPlaceholder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string(), 
      GetArena());
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageCloseCaptionPlaceholder)
}

void CUserMessageCloseCaptionPlaceholder::SharedCtor() {
string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(ent_index_));
}

CUserMessageCloseCaptionPlaceholder::~CUserMessageCloseCaptionPlaceholder() {
  // @@protoc_insertion_point(destructor:CUserMessageCloseCaptionPlaceholder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCloseCaptionPlaceholder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageCloseCaptionPlaceholder::ArenaDtor(void* object) {
  CUserMessageCloseCaptionPlaceholder* _this = reinterpret_cast< CUserMessageCloseCaptionPlaceholder* >(object);
  (void)_this;
}
void CUserMessageCloseCaptionPlaceholder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCloseCaptionPlaceholder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCloseCaptionPlaceholder::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCloseCaptionPlaceholder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ent_index_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCloseCaptionPlaceholder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageCloseCaptionPlaceholder.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool from_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_player(&has_bits);
          from_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ent_index(&has_bits);
          ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCloseCaptionPlaceholder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCloseCaptionPlaceholder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageCloseCaptionPlaceholder.string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ent_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCloseCaptionPlaceholder)
  return target;
}

size_t CUserMessageCloseCaptionPlaceholder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCloseCaptionPlaceholder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ent_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCloseCaptionPlaceholder)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaptionPlaceholder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCloseCaptionPlaceholder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCloseCaptionPlaceholder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCloseCaptionPlaceholder)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const CUserMessageCloseCaptionPlaceholder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCloseCaptionPlaceholder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCloseCaptionPlaceholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const CUserMessageCloseCaptionPlaceholder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCloseCaptionPlaceholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionPlaceholder::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaptionPlaceholder::InternalSwap(CUserMessageCloseCaptionPlaceholder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_.Swap(&other->string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, ent_index_)
      + sizeof(CUserMessageCloseCaptionPlaceholder::ent_index_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCloseCaptionPlaceholder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCurrentTimescale::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCurrentTimescale>()._has_bits_);
  static void set_has_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageCurrentTimescale::CUserMessageCurrentTimescale(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCurrentTimescale)
}
CUserMessageCurrentTimescale::CUserMessageCurrentTimescale(const CUserMessageCurrentTimescale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageCurrentTimescale)
}

void CUserMessageCurrentTimescale::SharedCtor() {
current_ = 0;
}

CUserMessageCurrentTimescale::~CUserMessageCurrentTimescale() {
  // @@protoc_insertion_point(destructor:CUserMessageCurrentTimescale)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCurrentTimescale::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageCurrentTimescale::ArenaDtor(void* object) {
  CUserMessageCurrentTimescale* _this = reinterpret_cast< CUserMessageCurrentTimescale* >(object);
  (void)_this;
}
void CUserMessageCurrentTimescale::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCurrentTimescale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCurrentTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCurrentTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCurrentTimescale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_current(&has_bits);
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCurrentTimescale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCurrentTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCurrentTimescale)
  return target;
}

size_t CUserMessageCurrentTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCurrentTimescale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float current = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCurrentTimescale::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCurrentTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCurrentTimescale* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCurrentTimescale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCurrentTimescale)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCurrentTimescale)
    MergeFrom(*source);
  }
}

void CUserMessageCurrentTimescale::MergeFrom(const CUserMessageCurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCurrentTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current()) {
    _internal_set_current(from._internal_current());
  }
}

void CUserMessageCurrentTimescale::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCurrentTimescale::CopyFrom(const CUserMessageCurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCurrentTimescale::IsInitialized() const {
  return true;
}

void CUserMessageCurrentTimescale::InternalSwap(CUserMessageCurrentTimescale* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(current_, other->current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCurrentTimescale::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageDesiredTimescale::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageDesiredTimescale>()._has_bits_);
  static void set_has_desired(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minblendrate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blenddeltamultiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageDesiredTimescale::CUserMessageDesiredTimescale(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageDesiredTimescale)
}
CUserMessageDesiredTimescale::CUserMessageDesiredTimescale(const CUserMessageDesiredTimescale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&desired_, &from.desired_,
    static_cast<size_t>(reinterpret_cast<char*>(&blenddeltamultiplier_) -
    reinterpret_cast<char*>(&desired_)) + sizeof(blenddeltamultiplier_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageDesiredTimescale)
}

void CUserMessageDesiredTimescale::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&desired_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blenddeltamultiplier_) -
    reinterpret_cast<char*>(&desired_)) + sizeof(blenddeltamultiplier_));
}

CUserMessageDesiredTimescale::~CUserMessageDesiredTimescale() {
  // @@protoc_insertion_point(destructor:CUserMessageDesiredTimescale)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageDesiredTimescale::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageDesiredTimescale::ArenaDtor(void* object) {
  CUserMessageDesiredTimescale* _this = reinterpret_cast< CUserMessageDesiredTimescale* >(object);
  (void)_this;
}
void CUserMessageDesiredTimescale::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageDesiredTimescale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageDesiredTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageDesiredTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&desired_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blenddeltamultiplier_) -
        reinterpret_cast<char*>(&desired_)) + sizeof(blenddeltamultiplier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageDesiredTimescale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float desired = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_desired(&has_bits);
          desired_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float minblendrate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_minblendrate(&has_bits);
          minblendrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float blenddeltamultiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_blenddeltamultiplier(&has_bits);
          blenddeltamultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageDesiredTimescale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageDesiredTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float desired = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_desired(), target);
  }

  // optional float acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_acceleration(), target);
  }

  // optional float minblendrate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_minblendrate(), target);
  }

  // optional float blenddeltamultiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_blenddeltamultiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageDesiredTimescale)
  return target;
}

size_t CUserMessageDesiredTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageDesiredTimescale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float desired = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float minblendrate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float blenddeltamultiplier = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageDesiredTimescale::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageDesiredTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageDesiredTimescale* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageDesiredTimescale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageDesiredTimescale)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageDesiredTimescale)
    MergeFrom(*source);
  }
}

void CUserMessageDesiredTimescale::MergeFrom(const CUserMessageDesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageDesiredTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      desired_ = from.desired_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      minblendrate_ = from.minblendrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      blenddeltamultiplier_ = from.blenddeltamultiplier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageDesiredTimescale::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageDesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageDesiredTimescale::CopyFrom(const CUserMessageDesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageDesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageDesiredTimescale::IsInitialized() const {
  return true;
}

void CUserMessageDesiredTimescale::InternalSwap(CUserMessageDesiredTimescale* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageDesiredTimescale, blenddeltamultiplier_)
      + sizeof(CUserMessageDesiredTimescale::blenddeltamultiplier_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageDesiredTimescale, desired_)>(
          reinterpret_cast<char*>(&desired_),
          reinterpret_cast<char*>(&other->desired_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageDesiredTimescale::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageFade::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageFade>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hold_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageFade::CUserMessageFade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageFade)
}
CUserMessageFade::CUserMessageFade(const CUserMessageFade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageFade)
}

void CUserMessageFade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(color_));
}

CUserMessageFade::~CUserMessageFade() {
  // @@protoc_insertion_point(destructor:CUserMessageFade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageFade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageFade::ArenaDtor(void* object) {
  CUserMessageFade* _this = reinterpret_cast< CUserMessageFade* >(object);
  (void)_this;
}
void CUserMessageFade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageFade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageFade::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageFade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageFade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hold_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hold_time(&has_bits);
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageFade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageFade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  // optional uint32 hold_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hold_time(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageFade)
  return target;
}

size_t CUserMessageFade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageFade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 hold_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hold_time());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional fixed32 color = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageFade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageFade)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageFade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageFade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageFade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageFade)
    MergeFrom(*source);
  }
}

void CUserMessageFade::MergeFrom(const CUserMessageFade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageFade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageFade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageFade::CopyFrom(const CUserMessageFade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageFade::IsInitialized() const {
  return true;
}

void CUserMessageFade::InternalSwap(CUserMessageFade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageFade, color_)
      + sizeof(CUserMessageFade::color_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageFade, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageFade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageShake::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageShake>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageShake::CUserMessageShake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageShake)
}
CUserMessageShake::CUserMessageShake(const CUserMessageShake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&command_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageShake)
}

void CUserMessageShake::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&command_)) + sizeof(duration_));
}

CUserMessageShake::~CUserMessageShake() {
  // @@protoc_insertion_point(destructor:CUserMessageShake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageShake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageShake::ArenaDtor(void* object) {
  CUserMessageShake* _this = reinterpret_cast< CUserMessageShake* >(object);
  (void)_this;
}
void CUserMessageShake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageShake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageShake::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageShake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&command_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageShake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_command(&has_bits);
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float amplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_amplitude(&has_bits);
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_frequency(&has_bits);
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageShake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageShake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_command(), target);
  }

  // optional float amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_amplitude(), target);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_frequency(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageShake)
  return target;
}

size_t CUserMessageShake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageShake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_command());
    }

    // optional float amplitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageShake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageShake)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageShake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageShake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageShake)
    MergeFrom(*source);
  }
}

void CUserMessageShake::MergeFrom(const CUserMessageShake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageShake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000002u) {
      amplitude_ = from.amplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageShake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShake::CopyFrom(const CUserMessageShake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShake::IsInitialized() const {
  return true;
}

void CUserMessageShake::InternalSwap(CUserMessageShake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageShake, duration_)
      + sizeof(CUserMessageShake::duration_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageShake, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageShake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageShakeDir::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageShakeDir>()._has_bits_);
  static const ::CUserMessageShake& shake(const CUserMessageShakeDir* msg);
  static void set_has_shake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& direction(const CUserMessageShakeDir* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CUserMessageShake&
CUserMessageShakeDir::_Internal::shake(const CUserMessageShakeDir* msg) {
  return *msg->shake_;
}
const ::CMsgVector&
CUserMessageShakeDir::_Internal::direction(const CUserMessageShakeDir* msg) {
  return *msg->direction_;
}
void CUserMessageShakeDir::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CUserMessageShakeDir::CUserMessageShakeDir(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageShakeDir)
}
CUserMessageShakeDir::CUserMessageShakeDir(const CUserMessageShakeDir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shake()) {
    shake_ = new ::CUserMessageShake(*from.shake_);
  } else {
    shake_ = nullptr;
  }
  if (from._internal_has_direction()) {
    direction_ = new ::CMsgVector(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CUserMessageShakeDir)
}

void CUserMessageShakeDir::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shake_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&shake_)) + sizeof(direction_));
}

CUserMessageShakeDir::~CUserMessageShakeDir() {
  // @@protoc_insertion_point(destructor:CUserMessageShakeDir)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageShakeDir::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shake_;
  if (this != internal_default_instance()) delete direction_;
}

void CUserMessageShakeDir::ArenaDtor(void* object) {
  CUserMessageShakeDir* _this = reinterpret_cast< CUserMessageShakeDir* >(object);
  (void)_this;
}
void CUserMessageShakeDir::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageShakeDir::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageShakeDir::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageShakeDir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shake_ != nullptr);
      shake_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(direction_ != nullptr);
      direction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageShakeDir::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CUserMessageShake shake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageShakeDir::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageShakeDir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CUserMessageShake shake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shake(this), target, stream);
  }

  // optional .CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::direction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageShakeDir)
  return target;
}

size_t CUserMessageShakeDir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageShakeDir)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CUserMessageShake shake = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shake_);
    }

    // optional .CMsgVector direction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *direction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageShakeDir::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageShakeDir)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShakeDir* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageShakeDir>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageShakeDir)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageShakeDir)
    MergeFrom(*source);
  }
}

void CUserMessageShakeDir::MergeFrom(const CUserMessageShakeDir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageShakeDir)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shake()->::CUserMessageShake::MergeFrom(from._internal_shake());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_direction()->::CMsgVector::MergeFrom(from._internal_direction());
    }
  }
}

void CUserMessageShakeDir::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageShakeDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShakeDir::CopyFrom(const CUserMessageShakeDir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageShakeDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShakeDir::IsInitialized() const {
  return true;
}

void CUserMessageShakeDir::InternalSwap(CUserMessageShakeDir* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageShakeDir, direction_)
      + sizeof(CUserMessageShakeDir::direction_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageShakeDir, shake_)>(
          reinterpret_cast<char*>(&shake_),
          reinterpret_cast<char*>(&other->shake_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageShakeDir::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageScreenTilt::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageScreenTilt>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ease_in_out(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& angle(const CUserMessageScreenTilt* msg);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgVector&
CUserMessageScreenTilt::_Internal::angle(const CUserMessageScreenTilt* msg) {
  return *msg->angle_;
}
void CUserMessageScreenTilt::clear_angle() {
  if (angle_ != nullptr) angle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CUserMessageScreenTilt::CUserMessageScreenTilt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageScreenTilt)
}
CUserMessageScreenTilt::CUserMessageScreenTilt(const CUserMessageScreenTilt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_angle()) {
    angle_ = new ::CMsgVector(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&command_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageScreenTilt)
}

void CUserMessageScreenTilt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(time_));
}

CUserMessageScreenTilt::~CUserMessageScreenTilt() {
  // @@protoc_insertion_point(destructor:CUserMessageScreenTilt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageScreenTilt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete angle_;
}

void CUserMessageScreenTilt::ArenaDtor(void* object) {
  CUserMessageScreenTilt* _this = reinterpret_cast< CUserMessageScreenTilt* >(object);
  (void)_this;
}
void CUserMessageScreenTilt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageScreenTilt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageScreenTilt::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageScreenTilt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(angle_ != nullptr);
    angle_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&command_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageScreenTilt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_command(&has_bits);
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ease_in_out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ease_in_out(&has_bits);
          ease_in_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageScreenTilt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageScreenTilt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_command(), target);
  }

  // optional bool ease_in_out = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ease_in_out(), target);
  }

  // optional .CMsgVector angle = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::angle(this), target, stream);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  // optional float time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageScreenTilt)
  return target;
}

size_t CUserMessageScreenTilt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageScreenTilt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector angle = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_);
    }

    // optional uint32 command = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_command());
    }

    // optional bool ease_in_out = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageScreenTilt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageScreenTilt)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageScreenTilt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageScreenTilt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageScreenTilt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageScreenTilt)
    MergeFrom(*source);
  }
}

void CUserMessageScreenTilt::MergeFrom(const CUserMessageScreenTilt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageScreenTilt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_angle()->::CMsgVector::MergeFrom(from._internal_angle());
    }
    if (cached_has_bits & 0x00000002u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000004u) {
      ease_in_out_ = from.ease_in_out_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageScreenTilt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageScreenTilt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageScreenTilt::CopyFrom(const CUserMessageScreenTilt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageScreenTilt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageScreenTilt::IsInitialized() const {
  return true;
}

void CUserMessageScreenTilt::InternalSwap(CUserMessageScreenTilt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageScreenTilt, time_)
      + sizeof(CUserMessageScreenTilt::time_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageScreenTilt, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageScreenTilt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageSayText::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageSayText>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CUserMessageSayText::CUserMessageSayText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageSayText)
}
CUserMessageSayText::CUserMessageSayText(const CUserMessageSayText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(chat_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageSayText)
}

void CUserMessageSayText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(chat_));
}

CUserMessageSayText::~CUserMessageSayText() {
  // @@protoc_insertion_point(destructor:CUserMessageSayText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageSayText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayText::ArenaDtor(void* object) {
  CUserMessageSayText* _this = reinterpret_cast< CUserMessageSayText* >(object);
  (void)_this;
}
void CUserMessageSayText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageSayText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageSayText::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageSayText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&playerindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_) -
        reinterpret_cast<char*>(&playerindex_)) + sizeof(chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageSayText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 playerindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSayText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chat(&has_bits);
          chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageSayText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSayText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerindex(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSayText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional bool chat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSayText)
  return target;
}

size_t CUserMessageSayText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageSayText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 playerindex = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_playerindex());
    }

    // optional bool chat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSayText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageSayText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageSayText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageSayText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageSayText)
    MergeFrom(*source);
  }
}

void CUserMessageSayText::MergeFrom(const CUserMessageSayText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageSayText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_ = from.chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageSayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText::CopyFrom(const CUserMessageSayText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageSayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText::IsInitialized() const {
  return true;
}

void CUserMessageSayText::InternalSwap(CUserMessageSayText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageSayText, chat_)
      + sizeof(CUserMessageSayText::chat_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageSayText, playerindex_)>(
          reinterpret_cast<char*>(&playerindex_),
          reinterpret_cast<char*>(&other->playerindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageSayText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageSayText2::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageSayText2>()._has_bits_);
  static void set_has_entityindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_messagename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_param4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CUserMessageSayText2::CUserMessageSayText2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageSayText2)
}
CUserMessageSayText2::CUserMessageSayText2(const CUserMessageSayText2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  messagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_messagename()) {
    messagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_messagename(), 
      GetArena());
  }
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param1()) {
    param1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param1(), 
      GetArena());
  }
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param2()) {
    param2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param2(), 
      GetArena());
  }
  param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param3()) {
    param3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param3(), 
      GetArena());
  }
  param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param4()) {
    param4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param4(), 
      GetArena());
  }
  ::memcpy(&entityindex_, &from.entityindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&entityindex_)) + sizeof(chat_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageSayText2)
}

void CUserMessageSayText2::SharedCtor() {
messagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entityindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&entityindex_)) + sizeof(chat_));
}

CUserMessageSayText2::~CUserMessageSayText2() {
  // @@protoc_insertion_point(destructor:CUserMessageSayText2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageSayText2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  messagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayText2::ArenaDtor(void* object) {
  CUserMessageSayText2* _this = reinterpret_cast< CUserMessageSayText2* >(object);
  (void)_this;
}
void CUserMessageSayText2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageSayText2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageSayText2::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageSayText2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      messagename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      param1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      param2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      param3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      param4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&entityindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_) -
        reinterpret_cast<char*>(&entityindex_)) + sizeof(chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageSayText2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 entityindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entityindex(&has_bits);
          entityindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_chat(&has_bits);
          chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string messagename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_messagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSayText2.messagename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_param1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSayText2.param1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_param2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSayText2.param2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_param3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSayText2.param3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_param4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSayText2.param4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageSayText2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSayText2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entityindex = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entityindex(), target);
  }

  // optional bool chat = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_chat(), target);
  }

  // optional string messagename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_messagename().data(), static_cast<int>(this->_internal_messagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSayText2.messagename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_messagename(), target);
  }

  // optional string param1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param1().data(), static_cast<int>(this->_internal_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSayText2.param1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_param1(), target);
  }

  // optional string param2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param2().data(), static_cast<int>(this->_internal_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSayText2.param2");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_param2(), target);
  }

  // optional string param3 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param3().data(), static_cast<int>(this->_internal_param3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSayText2.param3");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_param3(), target);
  }

  // optional string param4 = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param4().data(), static_cast<int>(this->_internal_param4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSayText2.param4");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_param4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSayText2)
  return target;
}

size_t CUserMessageSayText2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageSayText2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string messagename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_messagename());
    }

    // optional string param1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param1());
    }

    // optional string param2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param2());
    }

    // optional string param3 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param3());
    }

    // optional string param4 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param4());
    }

    // optional uint32 entityindex = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entityindex());
    }

    // optional bool chat = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSayText2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageSayText2)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayText2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageSayText2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageSayText2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageSayText2)
    MergeFrom(*source);
  }
}

void CUserMessageSayText2::MergeFrom(const CUserMessageSayText2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageSayText2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_messagename(from._internal_messagename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_param1(from._internal_param1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_param2(from._internal_param2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_param3(from._internal_param3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_param4(from._internal_param4());
    }
    if (cached_has_bits & 0x00000020u) {
      entityindex_ = from.entityindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      chat_ = from.chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayText2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageSayText2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText2::CopyFrom(const CUserMessageSayText2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageSayText2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText2::IsInitialized() const {
  return true;
}

void CUserMessageSayText2::InternalSwap(CUserMessageSayText2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messagename_.Swap(&other->messagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param1_.Swap(&other->param1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param2_.Swap(&other->param2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param3_.Swap(&other->param3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param4_.Swap(&other->param4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageSayText2, chat_)
      + sizeof(CUserMessageSayText2::chat_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageSayText2, entityindex_)>(
          reinterpret_cast<char*>(&entityindex_),
          reinterpret_cast<char*>(&other->entityindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageSayText2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageHudMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageHudMsg>()._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_color1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_color2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fade_in_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fade_out_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hold_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageHudMsg::CUserMessageHudMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageHudMsg)
}
CUserMessageHudMsg::CUserMessageHudMsg(const CUserMessageHudMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&fx_time_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(fx_time_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageHudMsg)
}

void CUserMessageHudMsg::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fx_time_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(fx_time_));
}

CUserMessageHudMsg::~CUserMessageHudMsg() {
  // @@protoc_insertion_point(destructor:CUserMessageHudMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageHudMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHudMsg::ArenaDtor(void* object) {
  CUserMessageHudMsg* _this = reinterpret_cast< CUserMessageHudMsg* >(object);
  (void)_this;
}
void CUserMessageHudMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageHudMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageHudMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageHudMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fade_in_time_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(fade_in_time_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&fade_out_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fx_time_) -
        reinterpret_cast<char*>(&fade_out_time_)) + sizeof(fx_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageHudMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional fixed32 color1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_color1(&has_bits);
          color1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 color2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_color2(&has_bits);
          color2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 effect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_effect(&has_bits);
          effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fade_in_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_fade_in_time(&has_bits);
          fade_in_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fade_out_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_fade_out_time(&has_bits);
          fade_out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float hold_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_hold_time(&has_bits);
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fx_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_fx_time(&has_bits);
          fx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageHudMsg.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageHudMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHudMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // optional fixed32 color1 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_color1(), target);
  }

  // optional fixed32 color2 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_color2(), target);
  }

  // optional uint32 effect = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_effect(), target);
  }

  // optional float fade_in_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fade_in_time(), target);
  }

  // optional float fade_out_time = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_hold_time(), target);
  }

  // optional float fx_time = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_fx_time(), target);
  }

  // optional string message = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageHudMsg.message");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHudMsg)
  return target;
}

size_t CUserMessageHudMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageHudMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string message = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 channel = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 color1 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 color2 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 effect = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_effect());
    }

    // optional float fade_in_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float fade_out_time = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float hold_time = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float fx_time = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHudMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageHudMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHudMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageHudMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageHudMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageHudMsg)
    MergeFrom(*source);
  }
}

void CUserMessageHudMsg::MergeFrom(const CUserMessageHudMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageHudMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      color1_ = from.color1_;
    }
    if (cached_has_bits & 0x00000020u) {
      color2_ = from.color2_;
    }
    if (cached_has_bits & 0x00000040u) {
      effect_ = from.effect_;
    }
    if (cached_has_bits & 0x00000080u) {
      fade_in_time_ = from.fade_in_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      fade_out_time_ = from.fade_out_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      fx_time_ = from.fx_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHudMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageHudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudMsg::CopyFrom(const CUserMessageHudMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageHudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudMsg::IsInitialized() const {
  return true;
}

void CUserMessageHudMsg::InternalSwap(CUserMessageHudMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageHudMsg, fx_time_)
      + sizeof(CUserMessageHudMsg::fx_time_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageHudMsg, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageHudMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageHudText::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageHudText>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageHudText::CUserMessageHudText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageHudText)
}
CUserMessageHudText::CUserMessageHudText(const CUserMessageHudText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserMessageHudText)
}

void CUserMessageHudText::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserMessageHudText::~CUserMessageHudText() {
  // @@protoc_insertion_point(destructor:CUserMessageHudText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageHudText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHudText::ArenaDtor(void* object) {
  CUserMessageHudText* _this = reinterpret_cast< CUserMessageHudText* >(object);
  (void)_this;
}
void CUserMessageHudText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageHudText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageHudText::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageHudText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageHudText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageHudText.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageHudText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHudText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageHudText.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHudText)
  return target;
}

size_t CUserMessageHudText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageHudText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHudText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageHudText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHudText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageHudText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageHudText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageHudText)
    MergeFrom(*source);
  }
}

void CUserMessageHudText::MergeFrom(const CUserMessageHudText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageHudText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void CUserMessageHudText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageHudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudText::CopyFrom(const CUserMessageHudText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageHudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudText::IsInitialized() const {
  return true;
}

void CUserMessageHudText::InternalSwap(CUserMessageHudText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageHudText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageTextMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageTextMsg>()._has_bits_);
  static void set_has_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageTextMsg::CUserMessageTextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageTextMsg)
}
CUserMessageTextMsg::CUserMessageTextMsg(const CUserMessageTextMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      param_(from.param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dest_ = from.dest_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageTextMsg)
}

void CUserMessageTextMsg::SharedCtor() {
dest_ = 0u;
}

CUserMessageTextMsg::~CUserMessageTextMsg() {
  // @@protoc_insertion_point(destructor:CUserMessageTextMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageTextMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageTextMsg::ArenaDtor(void* object) {
  CUserMessageTextMsg* _this = reinterpret_cast< CUserMessageTextMsg* >(object);
  (void)_this;
}
void CUserMessageTextMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageTextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageTextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  dest_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageTextMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dest(&has_bits);
          dest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_param();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageTextMsg.param");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageTextMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageTextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dest(), target);
  }

  // repeated string param = 2;
  for (int i = 0, n = this->_internal_param_size(); i < n; i++) {
    const auto& s = this->_internal_param(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageTextMsg.param");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageTextMsg)
  return target;
}

size_t CUserMessageTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageTextMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string param = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(param_.size());
  for (int i = 0, n = param_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      param_.Get(i));
  }

  // optional uint32 dest = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageTextMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageTextMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageTextMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageTextMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageTextMsg)
    MergeFrom(*source);
  }
}

void CUserMessageTextMsg::MergeFrom(const CUserMessageTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from._internal_has_dest()) {
    _internal_set_dest(from._internal_dest());
  }
}

void CUserMessageTextMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTextMsg::CopyFrom(const CUserMessageTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTextMsg::IsInitialized() const {
  return true;
}

void CUserMessageTextMsg::InternalSwap(CUserMessageTextMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param_.InternalSwap(&other->param_);
  swap(dest_, other->dest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageTextMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageGameTitle::_Internal {
 public:
};

CUserMessageGameTitle::CUserMessageGameTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageGameTitle)
}
CUserMessageGameTitle::CUserMessageGameTitle(const CUserMessageGameTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserMessageGameTitle)
}

void CUserMessageGameTitle::SharedCtor() {
}

CUserMessageGameTitle::~CUserMessageGameTitle() {
  // @@protoc_insertion_point(destructor:CUserMessageGameTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageGameTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageGameTitle::ArenaDtor(void* object) {
  CUserMessageGameTitle* _this = reinterpret_cast< CUserMessageGameTitle* >(object);
  (void)_this;
}
void CUserMessageGameTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageGameTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageGameTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageGameTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageGameTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageGameTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageGameTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageGameTitle)
  return target;
}

size_t CUserMessageGameTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageGameTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageGameTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageGameTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageGameTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageGameTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageGameTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageGameTitle)
    MergeFrom(*source);
  }
}

void CUserMessageGameTitle::MergeFrom(const CUserMessageGameTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageGameTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageGameTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageGameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageGameTitle::CopyFrom(const CUserMessageGameTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageGameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageGameTitle::IsInitialized() const {
  return true;
}

void CUserMessageGameTitle::InternalSwap(CUserMessageGameTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageGameTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageResetHUD::_Internal {
 public:
};

CUserMessageResetHUD::CUserMessageResetHUD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageResetHUD)
}
CUserMessageResetHUD::CUserMessageResetHUD(const CUserMessageResetHUD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserMessageResetHUD)
}

void CUserMessageResetHUD::SharedCtor() {
}

CUserMessageResetHUD::~CUserMessageResetHUD() {
  // @@protoc_insertion_point(destructor:CUserMessageResetHUD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageResetHUD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageResetHUD::ArenaDtor(void* object) {
  CUserMessageResetHUD* _this = reinterpret_cast< CUserMessageResetHUD* >(object);
  (void)_this;
}
void CUserMessageResetHUD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageResetHUD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageResetHUD::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageResetHUD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageResetHUD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageResetHUD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageResetHUD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageResetHUD)
  return target;
}

size_t CUserMessageResetHUD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageResetHUD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageResetHUD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageResetHUD)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageResetHUD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageResetHUD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageResetHUD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageResetHUD)
    MergeFrom(*source);
  }
}

void CUserMessageResetHUD::MergeFrom(const CUserMessageResetHUD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageResetHUD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageResetHUD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageResetHUD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageResetHUD::CopyFrom(const CUserMessageResetHUD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageResetHUD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageResetHUD::IsInitialized() const {
  return true;
}

void CUserMessageResetHUD::InternalSwap(CUserMessageResetHUD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageResetHUD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageSendAudio::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageSendAudio>()._has_bits_);
  static void set_has_soundname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMessageSendAudio::CUserMessageSendAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageSendAudio)
}
CUserMessageSendAudio::CUserMessageSendAudio(const CUserMessageSendAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  soundname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_soundname()) {
    soundname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_soundname(), 
      GetArena());
  }
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageSendAudio)
}

void CUserMessageSendAudio::SharedCtor() {
soundname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stop_ = false;
}

CUserMessageSendAudio::~CUserMessageSendAudio() {
  // @@protoc_insertion_point(destructor:CUserMessageSendAudio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageSendAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  soundname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSendAudio::ArenaDtor(void* object) {
  CUserMessageSendAudio* _this = reinterpret_cast< CUserMessageSendAudio* >(object);
  (void)_this;
}
void CUserMessageSendAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageSendAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageSendAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageSendAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    soundname_.ClearNonDefaultToEmpty();
  }
  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageSendAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string soundname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_soundname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSendAudio.soundname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stop(&has_bits);
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageSendAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSendAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string soundname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_soundname().data(), static_cast<int>(this->_internal_soundname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSendAudio.soundname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_soundname(), target);
  }

  // optional bool stop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSendAudio)
  return target;
}

size_t CUserMessageSendAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageSendAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string soundname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_soundname());
    }

    // optional bool stop = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSendAudio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageSendAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSendAudio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageSendAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageSendAudio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageSendAudio)
    MergeFrom(*source);
  }
}

void CUserMessageSendAudio::MergeFrom(const CUserMessageSendAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageSendAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_soundname(from._internal_soundname());
    }
    if (cached_has_bits & 0x00000002u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSendAudio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageSendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSendAudio::CopyFrom(const CUserMessageSendAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageSendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSendAudio::IsInitialized() const {
  return true;
}

void CUserMessageSendAudio::InternalSwap(CUserMessageSendAudio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  soundname_.Swap(&other->soundname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stop_, other->stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageSendAudio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageAudioParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageAudioParameter>()._has_bits_);
  static void set_has_parameter_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_hash_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageAudioParameter::CUserMessageAudioParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageAudioParameter)
}
CUserMessageAudioParameter::CUserMessageAudioParameter(const CUserMessageAudioParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&parameter_type_, &from.parameter_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&int_value_) -
    reinterpret_cast<char*>(&parameter_type_)) + sizeof(int_value_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageAudioParameter)
}

void CUserMessageAudioParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parameter_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&int_value_) -
    reinterpret_cast<char*>(&parameter_type_)) + sizeof(int_value_));
}

CUserMessageAudioParameter::~CUserMessageAudioParameter() {
  // @@protoc_insertion_point(destructor:CUserMessageAudioParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageAudioParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageAudioParameter::ArenaDtor(void* object) {
  CUserMessageAudioParameter* _this = reinterpret_cast< CUserMessageAudioParameter* >(object);
  (void)_this;
}
void CUserMessageAudioParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageAudioParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageAudioParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageAudioParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&parameter_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int_value_) -
        reinterpret_cast<char*>(&parameter_type_)) + sizeof(int_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageAudioParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 parameter_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_parameter_type(&has_bits);
          parameter_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 name_hash_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_name_hash_code(&has_bits);
          name_hash_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_int_value(&has_bits);
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageAudioParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageAudioParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 parameter_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_parameter_type(), target);
  }

  // optional uint32 name_hash_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_name_hash_code(), target);
  }

  // optional float value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // optional uint32 int_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_int_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageAudioParameter)
  return target;
}

size_t CUserMessageAudioParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageAudioParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 parameter_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parameter_type());
    }

    // optional uint32 name_hash_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_name_hash_code());
    }

    // optional float value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 int_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAudioParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageAudioParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAudioParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageAudioParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageAudioParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageAudioParameter)
    MergeFrom(*source);
  }
}

void CUserMessageAudioParameter::MergeFrom(const CUserMessageAudioParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageAudioParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      parameter_type_ = from.parameter_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_hash_code_ = from.name_hash_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_value_ = from.int_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageAudioParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageAudioParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAudioParameter::CopyFrom(const CUserMessageAudioParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageAudioParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAudioParameter::IsInitialized() const {
  return true;
}

void CUserMessageAudioParameter::InternalSwap(CUserMessageAudioParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageAudioParameter, int_value_)
      + sizeof(CUserMessageAudioParameter::int_value_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageAudioParameter, parameter_type_)>(
          reinterpret_cast<char*>(&parameter_type_),
          reinterpret_cast<char*>(&other->parameter_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageAudioParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageVoiceMask::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageVoiceMask>()._has_bits_);
  static void set_has_mod_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageVoiceMask::CUserMessageVoiceMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gamerules_masks_(arena),
  ban_masks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageVoiceMask)
}
CUserMessageVoiceMask::CUserMessageVoiceMask(const CUserMessageVoiceMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gamerules_masks_(from.gamerules_masks_),
      ban_masks_(from.ban_masks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mod_enable_ = from.mod_enable_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageVoiceMask)
}

void CUserMessageVoiceMask::SharedCtor() {
mod_enable_ = false;
}

CUserMessageVoiceMask::~CUserMessageVoiceMask() {
  // @@protoc_insertion_point(destructor:CUserMessageVoiceMask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageVoiceMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageVoiceMask::ArenaDtor(void* object) {
  CUserMessageVoiceMask* _this = reinterpret_cast< CUserMessageVoiceMask* >(object);
  (void)_this;
}
void CUserMessageVoiceMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageVoiceMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageVoiceMask::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageVoiceMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamerules_masks_.Clear();
  ban_masks_.Clear();
  mod_enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageVoiceMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 gamerules_masks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gamerules_masks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gamerules_masks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ban_masks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ban_masks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ban_masks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mod_enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mod_enable(&has_bits);
          mod_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageVoiceMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVoiceMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 gamerules_masks = 1;
  for (int i = 0, n = this->_internal_gamerules_masks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gamerules_masks(i), target);
  }

  // repeated uint32 ban_masks = 2;
  for (int i = 0, n = this->_internal_ban_masks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_masks(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool mod_enable = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_mod_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVoiceMask)
  return target;
}

size_t CUserMessageVoiceMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageVoiceMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 gamerules_masks = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gamerules_masks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gamerules_masks_size());
    total_size += data_size;
  }

  // repeated uint32 ban_masks = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ban_masks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ban_masks_size());
    total_size += data_size;
  }

  // optional bool mod_enable = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVoiceMask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageVoiceMask)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVoiceMask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageVoiceMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageVoiceMask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageVoiceMask)
    MergeFrom(*source);
  }
}

void CUserMessageVoiceMask::MergeFrom(const CUserMessageVoiceMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageVoiceMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamerules_masks_.MergeFrom(from.gamerules_masks_);
  ban_masks_.MergeFrom(from.ban_masks_);
  if (from._internal_has_mod_enable()) {
    _internal_set_mod_enable(from._internal_mod_enable());
  }
}

void CUserMessageVoiceMask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageVoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceMask::CopyFrom(const CUserMessageVoiceMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageVoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceMask::IsInitialized() const {
  return true;
}

void CUserMessageVoiceMask::InternalSwap(CUserMessageVoiceMask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamerules_masks_.InternalSwap(&other->gamerules_masks_);
  ban_masks_.InternalSwap(&other->ban_masks_);
  swap(mod_enable_, other->mod_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageVoiceMask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageRequestState::_Internal {
 public:
};

CUserMessageRequestState::CUserMessageRequestState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageRequestState)
}
CUserMessageRequestState::CUserMessageRequestState(const CUserMessageRequestState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserMessageRequestState)
}

void CUserMessageRequestState::SharedCtor() {
}

CUserMessageRequestState::~CUserMessageRequestState() {
  // @@protoc_insertion_point(destructor:CUserMessageRequestState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageRequestState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageRequestState::ArenaDtor(void* object) {
  CUserMessageRequestState* _this = reinterpret_cast< CUserMessageRequestState* >(object);
  (void)_this;
}
void CUserMessageRequestState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageRequestState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageRequestState::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageRequestState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageRequestState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageRequestState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageRequestState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageRequestState)
  return target;
}

size_t CUserMessageRequestState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageRequestState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageRequestState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageRequestState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageRequestState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageRequestState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageRequestState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageRequestState)
    MergeFrom(*source);
  }
}

void CUserMessageRequestState::MergeFrom(const CUserMessageRequestState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageRequestState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageRequestState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageRequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRequestState::CopyFrom(const CUserMessageRequestState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageRequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRequestState::IsInitialized() const {
  return true;
}

void CUserMessageRequestState::InternalSwap(CUserMessageRequestState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageRequestState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageHintText::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageHintText>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageHintText::CUserMessageHintText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageHintText)
}
CUserMessageHintText::CUserMessageHintText(const CUserMessageHintText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserMessageHintText)
}

void CUserMessageHintText::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserMessageHintText::~CUserMessageHintText() {
  // @@protoc_insertion_point(destructor:CUserMessageHintText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageHintText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHintText::ArenaDtor(void* object) {
  CUserMessageHintText* _this = reinterpret_cast< CUserMessageHintText* >(object);
  (void)_this;
}
void CUserMessageHintText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageHintText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageHintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageHintText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageHintText.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageHintText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageHintText.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHintText)
  return target;
}

size_t CUserMessageHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageHintText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHintText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageHintText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHintText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageHintText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageHintText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageHintText)
    MergeFrom(*source);
  }
}

void CUserMessageHintText::MergeFrom(const CUserMessageHintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageHintText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void CUserMessageHintText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHintText::CopyFrom(const CUserMessageHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHintText::IsInitialized() const {
  return true;
}

void CUserMessageHintText::InternalSwap(CUserMessageHintText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageHintText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageKeyHintText::_Internal {
 public:
};

CUserMessageKeyHintText::CUserMessageKeyHintText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageKeyHintText)
}
CUserMessageKeyHintText::CUserMessageKeyHintText(const CUserMessageKeyHintText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserMessageKeyHintText)
}

void CUserMessageKeyHintText::SharedCtor() {
}

CUserMessageKeyHintText::~CUserMessageKeyHintText() {
  // @@protoc_insertion_point(destructor:CUserMessageKeyHintText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageKeyHintText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageKeyHintText::ArenaDtor(void* object) {
  CUserMessageKeyHintText* _this = reinterpret_cast< CUserMessageKeyHintText* >(object);
  (void)_this;
}
void CUserMessageKeyHintText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageKeyHintText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageKeyHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageKeyHintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageKeyHintText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageKeyHintText.messages");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageKeyHintText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageKeyHintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messages = 1;
  for (int i = 0, n = this->_internal_messages_size(); i < n; i++) {
    const auto& s = this->_internal_messages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageKeyHintText.messages");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageKeyHintText)
  return target;
}

size_t CUserMessageKeyHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageKeyHintText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messages = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(messages_.size());
  for (int i = 0, n = messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      messages_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageKeyHintText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageKeyHintText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageKeyHintText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageKeyHintText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageKeyHintText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageKeyHintText)
    MergeFrom(*source);
  }
}

void CUserMessageKeyHintText::MergeFrom(const CUserMessageKeyHintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageKeyHintText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void CUserMessageKeyHintText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageKeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageKeyHintText::CopyFrom(const CUserMessageKeyHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageKeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageKeyHintText::IsInitialized() const {
  return true;
}

void CUserMessageKeyHintText::InternalSwap(CUserMessageKeyHintText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageKeyHintText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageVoiceSubtitle::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageVoiceSubtitle>()._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_menu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageVoiceSubtitle)
}
CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle(const CUserMessageVoiceSubtitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_)) + sizeof(item_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageVoiceSubtitle)
}

void CUserMessageVoiceSubtitle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_)) + sizeof(item_));
}

CUserMessageVoiceSubtitle::~CUserMessageVoiceSubtitle() {
  // @@protoc_insertion_point(destructor:CUserMessageVoiceSubtitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageVoiceSubtitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageVoiceSubtitle::ArenaDtor(void* object) {
  CUserMessageVoiceSubtitle* _this = reinterpret_cast< CUserMessageVoiceSubtitle* >(object);
  (void)_this;
}
void CUserMessageVoiceSubtitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageVoiceSubtitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageVoiceSubtitle::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageVoiceSubtitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_) -
        reinterpret_cast<char*>(&player_)) + sizeof(item_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageVoiceSubtitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player(&has_bits);
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 menu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_menu(&has_bits);
          menu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item(&has_bits);
          item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageVoiceSubtitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVoiceSubtitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player(), target);
  }

  // optional int32 menu = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_menu(), target);
  }

  // optional int32 item = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVoiceSubtitle)
  return target;
}

size_t CUserMessageVoiceSubtitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageVoiceSubtitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 player = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player());
    }

    // optional int32 menu = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_menu());
    }

    // optional int32 item = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVoiceSubtitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageVoiceSubtitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVoiceSubtitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageVoiceSubtitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageVoiceSubtitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageVoiceSubtitle)
    MergeFrom(*source);
  }
}

void CUserMessageVoiceSubtitle::MergeFrom(const CUserMessageVoiceSubtitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageVoiceSubtitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000002u) {
      menu_ = from.menu_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_ = from.item_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageVoiceSubtitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageVoiceSubtitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceSubtitle::CopyFrom(const CUserMessageVoiceSubtitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageVoiceSubtitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceSubtitle::IsInitialized() const {
  return true;
}

void CUserMessageVoiceSubtitle::InternalSwap(CUserMessageVoiceSubtitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageVoiceSubtitle, item_)
      + sizeof(CUserMessageVoiceSubtitle::item_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageVoiceSubtitle, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageVoiceSubtitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageVGUIMenu_Keys::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageVGUIMenu_Keys>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageVGUIMenu.Keys)
}
CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys(const CUserMessageVGUIMenu_Keys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserMessageVGUIMenu.Keys)
}

void CUserMessageVGUIMenu_Keys::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserMessageVGUIMenu_Keys::~CUserMessageVGUIMenu_Keys() {
  // @@protoc_insertion_point(destructor:CUserMessageVGUIMenu.Keys)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageVGUIMenu_Keys::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageVGUIMenu_Keys::ArenaDtor(void* object) {
  CUserMessageVGUIMenu_Keys* _this = reinterpret_cast< CUserMessageVGUIMenu_Keys* >(object);
  (void)_this;
}
void CUserMessageVGUIMenu_Keys::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageVGUIMenu_Keys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageVGUIMenu_Keys::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageVGUIMenu.Keys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageVGUIMenu_Keys::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageVGUIMenu.Keys.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageVGUIMenu.Keys.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageVGUIMenu_Keys::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVGUIMenu.Keys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageVGUIMenu.Keys.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageVGUIMenu.Keys.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVGUIMenu.Keys)
  return target;
}

size_t CUserMessageVGUIMenu_Keys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageVGUIMenu.Keys)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageVGUIMenu.Keys)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVGUIMenu_Keys* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageVGUIMenu_Keys>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageVGUIMenu.Keys)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageVGUIMenu.Keys)
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const CUserMessageVGUIMenu_Keys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageVGUIMenu.Keys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageVGUIMenu.Keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const CUserMessageVGUIMenu_Keys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageVGUIMenu.Keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu_Keys::IsInitialized() const {
  return true;
}

void CUserMessageVGUIMenu_Keys::InternalSwap(CUserMessageVGUIMenu_Keys* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageVGUIMenu_Keys::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageVGUIMenu::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageVGUIMenu>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMessageVGUIMenu::CUserMessageVGUIMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageVGUIMenu)
}
CUserMessageVGUIMenu::CUserMessageVGUIMenu(const CUserMessageVGUIMenu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  show_ = from.show_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageVGUIMenu)
}

void CUserMessageVGUIMenu::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
show_ = false;
}

CUserMessageVGUIMenu::~CUserMessageVGUIMenu() {
  // @@protoc_insertion_point(destructor:CUserMessageVGUIMenu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageVGUIMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageVGUIMenu::ArenaDtor(void* object) {
  CUserMessageVGUIMenu* _this = reinterpret_cast< CUserMessageVGUIMenu* >(object);
  (void)_this;
}
void CUserMessageVGUIMenu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageVGUIMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageVGUIMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageVGUIMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  show_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageVGUIMenu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageVGUIMenu.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show(&has_bits);
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CUserMessageVGUIMenu.Keys keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageVGUIMenu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVGUIMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageVGUIMenu.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show(), target);
  }

  // repeated .CUserMessageVGUIMenu.Keys keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVGUIMenu)
  return target;
}

size_t CUserMessageVGUIMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageVGUIMenu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CUserMessageVGUIMenu.Keys keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVGUIMenu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageVGUIMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVGUIMenu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageVGUIMenu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageVGUIMenu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageVGUIMenu)
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu::MergeFrom(const CUserMessageVGUIMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageVGUIMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      show_ = from.show_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageVGUIMenu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageVGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu::CopyFrom(const CUserMessageVGUIMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageVGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu::IsInitialized() const {
  return true;
}

void CUserMessageVGUIMenu::InternalSwap(CUserMessageVGUIMenu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(show_, other->show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageVGUIMenu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageRumble::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageRumble>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CUserMessageRumble::CUserMessageRumble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageRumble)
}
CUserMessageRumble::CUserMessageRumble(const CUserMessageRumble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageRumble)
}

void CUserMessageRumble::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
}

CUserMessageRumble::~CUserMessageRumble() {
  // @@protoc_insertion_point(destructor:CUserMessageRumble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageRumble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageRumble::ArenaDtor(void* object) {
  CUserMessageRumble* _this = reinterpret_cast< CUserMessageRumble* >(object);
  (void)_this;
}
void CUserMessageRumble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageRumble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageRumble::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageRumble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageRumble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageRumble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageRumble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageRumble)
  return target;
}

size_t CUserMessageRumble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageRumble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_index());
    }

    // optional int32 data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageRumble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageRumble)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageRumble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageRumble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageRumble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageRumble)
    MergeFrom(*source);
  }
}

void CUserMessageRumble::MergeFrom(const CUserMessageRumble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageRumble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageRumble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageRumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRumble::CopyFrom(const CUserMessageRumble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageRumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRumble::IsInitialized() const {
  return true;
}

void CUserMessageRumble::InternalSwap(CUserMessageRumble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageRumble, flags_)
      + sizeof(CUserMessageRumble::flags_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageRumble, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageRumble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageTrain::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageTrain>()._has_bits_);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageTrain::CUserMessageTrain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageTrain)
}
CUserMessageTrain::CUserMessageTrain(const CUserMessageTrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageTrain)
}

void CUserMessageTrain::SharedCtor() {
position_ = 0u;
}

CUserMessageTrain::~CUserMessageTrain() {
  // @@protoc_insertion_point(destructor:CUserMessageTrain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageTrain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageTrain::ArenaDtor(void* object) {
  CUserMessageTrain* _this = reinterpret_cast< CUserMessageTrain* >(object);
  (void)_this;
}
void CUserMessageTrain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageTrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageTrain::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageTrain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageTrain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageTrain)
  return target;
}

size_t CUserMessageTrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageTrain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageTrain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageTrain)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageTrain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageTrain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageTrain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageTrain)
    MergeFrom(*source);
  }
}

void CUserMessageTrain::MergeFrom(const CUserMessageTrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageTrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_set_position(from._internal_position());
  }
}

void CUserMessageTrain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTrain::CopyFrom(const CUserMessageTrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTrain::IsInitialized() const {
  return true;
}

void CUserMessageTrain::InternalSwap(CUserMessageTrain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageTrain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageSayTextChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageSayTextChannel>()._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageSayTextChannel::CUserMessageSayTextChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageSayTextChannel)
}
CUserMessageSayTextChannel::CUserMessageSayTextChannel(const CUserMessageSayTextChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&player_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageSayTextChannel)
}

void CUserMessageSayTextChannel::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&player_)) + sizeof(channel_));
}

CUserMessageSayTextChannel::~CUserMessageSayTextChannel() {
  // @@protoc_insertion_point(destructor:CUserMessageSayTextChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageSayTextChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayTextChannel::ArenaDtor(void* object) {
  CUserMessageSayTextChannel* _this = reinterpret_cast< CUserMessageSayTextChannel* >(object);
  (void)_this;
}
void CUserMessageSayTextChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageSayTextChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageSayTextChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageSayTextChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_) -
        reinterpret_cast<char*>(&player_)) + sizeof(channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageSayTextChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player(&has_bits);
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageSayTextChannel.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageSayTextChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSayTextChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player(), target);
  }

  // optional int32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageSayTextChannel.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSayTextChannel)
  return target;
}

size_t CUserMessageSayTextChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageSayTextChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional int32 player = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player());
    }

    // optional int32 channel = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSayTextChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageSayTextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayTextChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageSayTextChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageSayTextChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageSayTextChannel)
    MergeFrom(*source);
  }
}

void CUserMessageSayTextChannel::MergeFrom(const CUserMessageSayTextChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageSayTextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayTextChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageSayTextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayTextChannel::CopyFrom(const CUserMessageSayTextChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageSayTextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayTextChannel::IsInitialized() const {
  return true;
}

void CUserMessageSayTextChannel::InternalSwap(CUserMessageSayTextChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageSayTextChannel, channel_)
      + sizeof(CUserMessageSayTextChannel::channel_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageSayTextChannel, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageSayTextChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageColoredText::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageColoredText>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_context_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_context_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_context_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CUserMessageColoredText::CUserMessageColoredText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageColoredText)
}
CUserMessageColoredText::CUserMessageColoredText(const CUserMessageColoredText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&context_team_id_) -
    reinterpret_cast<char*>(&color_)) + sizeof(context_team_id_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageColoredText)
}

void CUserMessageColoredText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&context_team_id_) -
    reinterpret_cast<char*>(&color_)) + sizeof(context_team_id_));
}

CUserMessageColoredText::~CUserMessageColoredText() {
  // @@protoc_insertion_point(destructor:CUserMessageColoredText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageColoredText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageColoredText::ArenaDtor(void* object) {
  CUserMessageColoredText* _this = reinterpret_cast< CUserMessageColoredText* >(object);
  (void)_this;
}
void CUserMessageColoredText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageColoredText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageColoredText::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageColoredText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&context_team_id_) -
        reinterpret_cast<char*>(&color_)) + sizeof(context_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageColoredText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageColoredText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reset(&has_bits);
          reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 context_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_context_player_id(&has_bits);
          context_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 context_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_context_value(&has_bits);
          context_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 context_team_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_context_team_id(&has_bits);
          context_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageColoredText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageColoredText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageColoredText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional bool reset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_reset(), target);
  }

  // optional int32 context_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_context_player_id(), target);
  }

  // optional int32 context_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_context_value(), target);
  }

  // optional int32 context_team_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_context_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageColoredText)
  return target;
}

size_t CUserMessageColoredText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageColoredText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

    // optional bool reset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 context_player_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_context_player_id());
    }

    // optional int32 context_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_context_value());
    }

    // optional int32 context_team_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_context_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageColoredText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageColoredText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageColoredText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageColoredText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageColoredText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageColoredText)
    MergeFrom(*source);
  }
}

void CUserMessageColoredText::MergeFrom(const CUserMessageColoredText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageColoredText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      reset_ = from.reset_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_player_id_ = from.context_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      context_value_ = from.context_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      context_team_id_ = from.context_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageColoredText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageColoredText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageColoredText::CopyFrom(const CUserMessageColoredText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageColoredText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageColoredText::IsInitialized() const {
  return true;
}

void CUserMessageColoredText::InternalSwap(CUserMessageColoredText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageColoredText, context_team_id_)
      + sizeof(CUserMessageColoredText::context_team_id_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageColoredText, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageColoredText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageItemPickup::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageItemPickup>()._has_bits_);
  static void set_has_itemname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageItemPickup::CUserMessageItemPickup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageItemPickup)
}
CUserMessageItemPickup::CUserMessageItemPickup(const CUserMessageItemPickup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  itemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_itemname()) {
    itemname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_itemname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserMessageItemPickup)
}

void CUserMessageItemPickup::SharedCtor() {
itemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserMessageItemPickup::~CUserMessageItemPickup() {
  // @@protoc_insertion_point(destructor:CUserMessageItemPickup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageItemPickup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  itemname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageItemPickup::ArenaDtor(void* object) {
  CUserMessageItemPickup* _this = reinterpret_cast< CUserMessageItemPickup* >(object);
  (void)_this;
}
void CUserMessageItemPickup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageItemPickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageItemPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageItemPickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    itemname_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageItemPickup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string itemname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_itemname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageItemPickup.itemname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageItemPickup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageItemPickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string itemname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_itemname().data(), static_cast<int>(this->_internal_itemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageItemPickup.itemname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_itemname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageItemPickup)
  return target;
}

size_t CUserMessageItemPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageItemPickup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string itemname = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_itemname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageItemPickup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageItemPickup)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageItemPickup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageItemPickup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageItemPickup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageItemPickup)
    MergeFrom(*source);
  }
}

void CUserMessageItemPickup::MergeFrom(const CUserMessageItemPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageItemPickup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_itemname()) {
    _internal_set_itemname(from._internal_itemname());
  }
}

void CUserMessageItemPickup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageItemPickup::CopyFrom(const CUserMessageItemPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageItemPickup::IsInitialized() const {
  return true;
}

void CUserMessageItemPickup::InternalSwap(CUserMessageItemPickup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemname_.Swap(&other->itemname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageItemPickup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageAmmoDenied::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageAmmoDenied>()._has_bits_);
  static void set_has_ammo_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageAmmoDenied::CUserMessageAmmoDenied(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageAmmoDenied)
}
CUserMessageAmmoDenied::CUserMessageAmmoDenied(const CUserMessageAmmoDenied& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ammo_id_ = from.ammo_id_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageAmmoDenied)
}

void CUserMessageAmmoDenied::SharedCtor() {
ammo_id_ = 0u;
}

CUserMessageAmmoDenied::~CUserMessageAmmoDenied() {
  // @@protoc_insertion_point(destructor:CUserMessageAmmoDenied)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageAmmoDenied::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageAmmoDenied::ArenaDtor(void* object) {
  CUserMessageAmmoDenied* _this = reinterpret_cast< CUserMessageAmmoDenied* >(object);
  (void)_this;
}
void CUserMessageAmmoDenied::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageAmmoDenied::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageAmmoDenied::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageAmmoDenied)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ammo_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageAmmoDenied::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ammo_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ammo_id(&has_bits);
          ammo_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageAmmoDenied::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageAmmoDenied)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ammo_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ammo_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageAmmoDenied)
  return target;
}

size_t CUserMessageAmmoDenied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageAmmoDenied)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ammo_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ammo_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAmmoDenied::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageAmmoDenied)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAmmoDenied* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageAmmoDenied>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageAmmoDenied)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageAmmoDenied)
    MergeFrom(*source);
  }
}

void CUserMessageAmmoDenied::MergeFrom(const CUserMessageAmmoDenied& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageAmmoDenied)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ammo_id()) {
    _internal_set_ammo_id(from._internal_ammo_id());
  }
}

void CUserMessageAmmoDenied::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageAmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAmmoDenied::CopyFrom(const CUserMessageAmmoDenied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageAmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAmmoDenied::IsInitialized() const {
  return true;
}

void CUserMessageAmmoDenied::InternalSwap(CUserMessageAmmoDenied* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ammo_id_, other->ammo_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageAmmoDenied::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCrosshairAngle::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCrosshairAngle>()._has_bits_);
  static const ::CMsgQAngle& angcrosshair(const CUserMessageCrosshairAngle* msg);
  static void set_has_angcrosshair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgQAngle&
CUserMessageCrosshairAngle::_Internal::angcrosshair(const CUserMessageCrosshairAngle* msg) {
  return *msg->angcrosshair_;
}
void CUserMessageCrosshairAngle::clear_angcrosshair() {
  if (angcrosshair_ != nullptr) angcrosshair_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CUserMessageCrosshairAngle::CUserMessageCrosshairAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCrosshairAngle)
}
CUserMessageCrosshairAngle::CUserMessageCrosshairAngle(const CUserMessageCrosshairAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_angcrosshair()) {
    angcrosshair_ = new ::CMsgQAngle(*from.angcrosshair_);
  } else {
    angcrosshair_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CUserMessageCrosshairAngle)
}

void CUserMessageCrosshairAngle::SharedCtor() {
angcrosshair_ = nullptr;
}

CUserMessageCrosshairAngle::~CUserMessageCrosshairAngle() {
  // @@protoc_insertion_point(destructor:CUserMessageCrosshairAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCrosshairAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete angcrosshair_;
}

void CUserMessageCrosshairAngle::ArenaDtor(void* object) {
  CUserMessageCrosshairAngle* _this = reinterpret_cast< CUserMessageCrosshairAngle* >(object);
  (void)_this;
}
void CUserMessageCrosshairAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCrosshairAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCrosshairAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCrosshairAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(angcrosshair_ != nullptr);
    angcrosshair_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCrosshairAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgQAngle angcrosshair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_angcrosshair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCrosshairAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCrosshairAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgQAngle angcrosshair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::angcrosshair(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCrosshairAngle)
  return target;
}

size_t CUserMessageCrosshairAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCrosshairAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgQAngle angcrosshair = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angcrosshair_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCrosshairAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCrosshairAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCrosshairAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCrosshairAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCrosshairAngle)
    MergeFrom(*source);
  }
}

void CUserMessageCrosshairAngle::MergeFrom(const CUserMessageCrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angcrosshair()) {
    _internal_mutable_angcrosshair()->::CMsgQAngle::MergeFrom(from._internal_angcrosshair());
  }
}

void CUserMessageCrosshairAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCrosshairAngle::CopyFrom(const CUserMessageCrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCrosshairAngle::IsInitialized() const {
  return true;
}

void CUserMessageCrosshairAngle::InternalSwap(CUserMessageCrosshairAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angcrosshair_, other->angcrosshair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCrosshairAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageShowMenu::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageShowMenu>()._has_bits_);
  static void set_has_validslots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_displaytime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_needmore(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_menustring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageShowMenu::CUserMessageShowMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageShowMenu)
}
CUserMessageShowMenu::CUserMessageShowMenu(const CUserMessageShowMenu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  menustring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_menustring()) {
    menustring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_menustring(), 
      GetArena());
  }
  ::memcpy(&validslots_, &from.validslots_,
    static_cast<size_t>(reinterpret_cast<char*>(&needmore_) -
    reinterpret_cast<char*>(&validslots_)) + sizeof(needmore_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageShowMenu)
}

void CUserMessageShowMenu::SharedCtor() {
menustring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&validslots_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needmore_) -
    reinterpret_cast<char*>(&validslots_)) + sizeof(needmore_));
}

CUserMessageShowMenu::~CUserMessageShowMenu() {
  // @@protoc_insertion_point(destructor:CUserMessageShowMenu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageShowMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  menustring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageShowMenu::ArenaDtor(void* object) {
  CUserMessageShowMenu* _this = reinterpret_cast< CUserMessageShowMenu* >(object);
  (void)_this;
}
void CUserMessageShowMenu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageShowMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageShowMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageShowMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    menustring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&validslots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needmore_) -
        reinterpret_cast<char*>(&validslots_)) + sizeof(needmore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageShowMenu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 validslots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_validslots(&has_bits);
          validslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 displaytime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_displaytime(&has_bits);
          displaytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needmore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_needmore(&has_bits);
          needmore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string menustring = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_menustring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageShowMenu.menustring");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageShowMenu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageShowMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 validslots = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_validslots(), target);
  }

  // optional uint32 displaytime = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_displaytime(), target);
  }

  // optional bool needmore = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_needmore(), target);
  }

  // optional string menustring = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_menustring().data(), static_cast<int>(this->_internal_menustring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageShowMenu.menustring");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_menustring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageShowMenu)
  return target;
}

size_t CUserMessageShowMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageShowMenu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string menustring = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_menustring());
    }

    // optional uint32 validslots = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_validslots());
    }

    // optional uint32 displaytime = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_displaytime());
    }

    // optional bool needmore = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageShowMenu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageShowMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShowMenu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageShowMenu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageShowMenu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageShowMenu)
    MergeFrom(*source);
  }
}

void CUserMessageShowMenu::MergeFrom(const CUserMessageShowMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageShowMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_menustring(from._internal_menustring());
    }
    if (cached_has_bits & 0x00000002u) {
      validslots_ = from.validslots_;
    }
    if (cached_has_bits & 0x00000004u) {
      displaytime_ = from.displaytime_;
    }
    if (cached_has_bits & 0x00000008u) {
      needmore_ = from.needmore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageShowMenu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShowMenu::CopyFrom(const CUserMessageShowMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShowMenu::IsInitialized() const {
  return true;
}

void CUserMessageShowMenu::InternalSwap(CUserMessageShowMenu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  menustring_.Swap(&other->menustring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageShowMenu, needmore_)
      + sizeof(CUserMessageShowMenu::needmore_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageShowMenu, validslots_)>(
          reinterpret_cast<char*>(&validslots_),
          reinterpret_cast<char*>(&other->validslots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageShowMenu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCreditsMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCreditsMsg>()._has_bits_);
  static void set_has_rolltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageCreditsMsg::CUserMessageCreditsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCreditsMsg)
}
CUserMessageCreditsMsg::CUserMessageCreditsMsg(const CUserMessageCreditsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logo_length_, &from.logo_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&rolltype_) -
    reinterpret_cast<char*>(&logo_length_)) + sizeof(rolltype_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageCreditsMsg)
}

void CUserMessageCreditsMsg::SharedCtor() {
logo_length_ = 0;
rolltype_ = -1;
}

CUserMessageCreditsMsg::~CUserMessageCreditsMsg() {
  // @@protoc_insertion_point(destructor:CUserMessageCreditsMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCreditsMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageCreditsMsg::ArenaDtor(void* object) {
  CUserMessageCreditsMsg* _this = reinterpret_cast< CUserMessageCreditsMsg* >(object);
  (void)_this;
}
void CUserMessageCreditsMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCreditsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCreditsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCreditsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    logo_length_ = 0;
    rolltype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCreditsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .eRollType rolltype = 1 [default = ROLL_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::eRollType_IsValid(val))) {
            _internal_set_rolltype(static_cast<::eRollType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float logo_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_logo_length(&has_bits);
          logo_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCreditsMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCreditsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .eRollType rolltype = 1 [default = ROLL_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rolltype(), target);
  }

  // optional float logo_length = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_logo_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCreditsMsg)
  return target;
}

size_t CUserMessageCreditsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCreditsMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float logo_length = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .eRollType rolltype = 1 [default = ROLL_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rolltype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCreditsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCreditsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCreditsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCreditsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCreditsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCreditsMsg)
    MergeFrom(*source);
  }
}

void CUserMessageCreditsMsg::MergeFrom(const CUserMessageCreditsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCreditsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logo_length_ = from.logo_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      rolltype_ = from.rolltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCreditsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCreditsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCreditsMsg::CopyFrom(const CUserMessageCreditsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCreditsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCreditsMsg::IsInitialized() const {
  return true;
}

void CUserMessageCreditsMsg::InternalSwap(CUserMessageCreditsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(logo_length_, other->logo_length_);
  swap(rolltype_, other->rolltype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCreditsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEntityMessagePlayJingle::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMessagePlayJingle>()._has_bits_);
  static const ::CEntityMsg& entity_msg(const CEntityMessagePlayJingle* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEntityMsg&
CEntityMessagePlayJingle::_Internal::entity_msg(const CEntityMessagePlayJingle* msg) {
  return *msg->entity_msg_;
}
void CEntityMessagePlayJingle::clear_entity_msg() {
  if (entity_msg_ != nullptr) entity_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CEntityMessagePlayJingle::CEntityMessagePlayJingle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEntityMessagePlayJingle)
}
CEntityMessagePlayJingle::CEntityMessagePlayJingle(const CEntityMessagePlayJingle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_msg()) {
    entity_msg_ = new ::CEntityMsg(*from.entity_msg_);
  } else {
    entity_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CEntityMessagePlayJingle)
}

void CEntityMessagePlayJingle::SharedCtor() {
entity_msg_ = nullptr;
}

CEntityMessagePlayJingle::~CEntityMessagePlayJingle() {
  // @@protoc_insertion_point(destructor:CEntityMessagePlayJingle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEntityMessagePlayJingle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entity_msg_;
}

void CEntityMessagePlayJingle::ArenaDtor(void* object) {
  CEntityMessagePlayJingle* _this = reinterpret_cast< CEntityMessagePlayJingle* >(object);
  (void)_this;
}
void CEntityMessagePlayJingle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEntityMessagePlayJingle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEntityMessagePlayJingle::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMessagePlayJingle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_msg_ != nullptr);
    entity_msg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMessagePlayJingle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CEntityMsg entity_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEntityMessagePlayJingle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessagePlayJingle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEntityMsg entity_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessagePlayJingle)
  return target;
}

size_t CEntityMessagePlayJingle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMessagePlayJingle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEntityMsg entity_msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessagePlayJingle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEntityMessagePlayJingle)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessagePlayJingle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEntityMessagePlayJingle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEntityMessagePlayJingle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEntityMessagePlayJingle)
    MergeFrom(*source);
  }
}

void CEntityMessagePlayJingle::MergeFrom(const CEntityMessagePlayJingle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEntityMessagePlayJingle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entity_msg()) {
    _internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(from._internal_entity_msg());
  }
}

void CEntityMessagePlayJingle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEntityMessagePlayJingle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePlayJingle::CopyFrom(const CEntityMessagePlayJingle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMessagePlayJingle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePlayJingle::IsInitialized() const {
  return true;
}

void CEntityMessagePlayJingle::InternalSwap(CEntityMessagePlayJingle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_msg_, other->entity_msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMessagePlayJingle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEntityMessageScreenOverlay::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMessageScreenOverlay>()._has_bits_);
  static void set_has_start_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CEntityMsg& entity_msg(const CEntityMessageScreenOverlay* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEntityMsg&
CEntityMessageScreenOverlay::_Internal::entity_msg(const CEntityMessageScreenOverlay* msg) {
  return *msg->entity_msg_;
}
void CEntityMessageScreenOverlay::clear_entity_msg() {
  if (entity_msg_ != nullptr) entity_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CEntityMessageScreenOverlay::CEntityMessageScreenOverlay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEntityMessageScreenOverlay)
}
CEntityMessageScreenOverlay::CEntityMessageScreenOverlay(const CEntityMessageScreenOverlay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_msg()) {
    entity_msg_ = new ::CEntityMsg(*from.entity_msg_);
  } else {
    entity_msg_ = nullptr;
  }
  start_effect_ = from.start_effect_;
  // @@protoc_insertion_point(copy_constructor:CEntityMessageScreenOverlay)
}

void CEntityMessageScreenOverlay::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_effect_) -
    reinterpret_cast<char*>(&entity_msg_)) + sizeof(start_effect_));
}

CEntityMessageScreenOverlay::~CEntityMessageScreenOverlay() {
  // @@protoc_insertion_point(destructor:CEntityMessageScreenOverlay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEntityMessageScreenOverlay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entity_msg_;
}

void CEntityMessageScreenOverlay::ArenaDtor(void* object) {
  CEntityMessageScreenOverlay* _this = reinterpret_cast< CEntityMessageScreenOverlay* >(object);
  (void)_this;
}
void CEntityMessageScreenOverlay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEntityMessageScreenOverlay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEntityMessageScreenOverlay::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMessageScreenOverlay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_msg_ != nullptr);
    entity_msg_->Clear();
  }
  start_effect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMessageScreenOverlay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool start_effect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_effect(&has_bits);
          start_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CEntityMsg entity_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEntityMessageScreenOverlay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageScreenOverlay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_effect = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_start_effect(), target);
  }

  // optional .CEntityMsg entity_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageScreenOverlay)
  return target;
}

size_t CEntityMessageScreenOverlay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMessageScreenOverlay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CEntityMsg entity_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_msg_);
    }

    // optional bool start_effect = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageScreenOverlay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEntityMessageScreenOverlay)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageScreenOverlay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEntityMessageScreenOverlay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEntityMessageScreenOverlay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEntityMessageScreenOverlay)
    MergeFrom(*source);
  }
}

void CEntityMessageScreenOverlay::MergeFrom(const CEntityMessageScreenOverlay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEntityMessageScreenOverlay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(from._internal_entity_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      start_effect_ = from.start_effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageScreenOverlay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEntityMessageScreenOverlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageScreenOverlay::CopyFrom(const CEntityMessageScreenOverlay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMessageScreenOverlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageScreenOverlay::IsInitialized() const {
  return true;
}

void CEntityMessageScreenOverlay::InternalSwap(CEntityMessageScreenOverlay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEntityMessageScreenOverlay, start_effect_)
      + sizeof(CEntityMessageScreenOverlay::start_effect_)
      - PROTOBUF_FIELD_OFFSET(CEntityMessageScreenOverlay, entity_msg_)>(
          reinterpret_cast<char*>(&entity_msg_),
          reinterpret_cast<char*>(&other->entity_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMessageScreenOverlay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEntityMessageRemoveAllDecals::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMessageRemoveAllDecals>()._has_bits_);
  static void set_has_remove_decals(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CEntityMsg& entity_msg(const CEntityMessageRemoveAllDecals* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEntityMsg&
CEntityMessageRemoveAllDecals::_Internal::entity_msg(const CEntityMessageRemoveAllDecals* msg) {
  return *msg->entity_msg_;
}
void CEntityMessageRemoveAllDecals::clear_entity_msg() {
  if (entity_msg_ != nullptr) entity_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEntityMessageRemoveAllDecals)
}
CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals(const CEntityMessageRemoveAllDecals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_msg()) {
    entity_msg_ = new ::CEntityMsg(*from.entity_msg_);
  } else {
    entity_msg_ = nullptr;
  }
  remove_decals_ = from.remove_decals_;
  // @@protoc_insertion_point(copy_constructor:CEntityMessageRemoveAllDecals)
}

void CEntityMessageRemoveAllDecals::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remove_decals_) -
    reinterpret_cast<char*>(&entity_msg_)) + sizeof(remove_decals_));
}

CEntityMessageRemoveAllDecals::~CEntityMessageRemoveAllDecals() {
  // @@protoc_insertion_point(destructor:CEntityMessageRemoveAllDecals)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEntityMessageRemoveAllDecals::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entity_msg_;
}

void CEntityMessageRemoveAllDecals::ArenaDtor(void* object) {
  CEntityMessageRemoveAllDecals* _this = reinterpret_cast< CEntityMessageRemoveAllDecals* >(object);
  (void)_this;
}
void CEntityMessageRemoveAllDecals::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEntityMessageRemoveAllDecals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEntityMessageRemoveAllDecals::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMessageRemoveAllDecals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_msg_ != nullptr);
    entity_msg_->Clear();
  }
  remove_decals_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMessageRemoveAllDecals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool remove_decals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_remove_decals(&has_bits);
          remove_decals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CEntityMsg entity_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEntityMessageRemoveAllDecals::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageRemoveAllDecals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove_decals = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_remove_decals(), target);
  }

  // optional .CEntityMsg entity_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageRemoveAllDecals)
  return target;
}

size_t CEntityMessageRemoveAllDecals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMessageRemoveAllDecals)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CEntityMsg entity_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_msg_);
    }

    // optional bool remove_decals = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageRemoveAllDecals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEntityMessageRemoveAllDecals)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageRemoveAllDecals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEntityMessageRemoveAllDecals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEntityMessageRemoveAllDecals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEntityMessageRemoveAllDecals)
    MergeFrom(*source);
  }
}

void CEntityMessageRemoveAllDecals::MergeFrom(const CEntityMessageRemoveAllDecals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEntityMessageRemoveAllDecals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(from._internal_entity_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      remove_decals_ = from.remove_decals_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageRemoveAllDecals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEntityMessageRemoveAllDecals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageRemoveAllDecals::CopyFrom(const CEntityMessageRemoveAllDecals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMessageRemoveAllDecals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageRemoveAllDecals::IsInitialized() const {
  return true;
}

void CEntityMessageRemoveAllDecals::InternalSwap(CEntityMessageRemoveAllDecals* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEntityMessageRemoveAllDecals, remove_decals_)
      + sizeof(CEntityMessageRemoveAllDecals::remove_decals_)
      - PROTOBUF_FIELD_OFFSET(CEntityMessageRemoveAllDecals, entity_msg_)>(
          reinterpret_cast<char*>(&entity_msg_),
          reinterpret_cast<char*>(&other->entity_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMessageRemoveAllDecals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEntityMessagePropagateForce::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMessagePropagateForce>()._has_bits_);
  static const ::CMsgVector& impulse(const CEntityMessagePropagateForce* msg);
  static void set_has_impulse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CEntityMsg& entity_msg(const CEntityMessagePropagateForce* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CEntityMessagePropagateForce::_Internal::impulse(const CEntityMessagePropagateForce* msg) {
  return *msg->impulse_;
}
const ::CEntityMsg&
CEntityMessagePropagateForce::_Internal::entity_msg(const CEntityMessagePropagateForce* msg) {
  return *msg->entity_msg_;
}
void CEntityMessagePropagateForce::clear_impulse() {
  if (impulse_ != nullptr) impulse_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessagePropagateForce::clear_entity_msg() {
  if (entity_msg_ != nullptr) entity_msg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CEntityMessagePropagateForce::CEntityMessagePropagateForce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEntityMessagePropagateForce)
}
CEntityMessagePropagateForce::CEntityMessagePropagateForce(const CEntityMessagePropagateForce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_impulse()) {
    impulse_ = new ::CMsgVector(*from.impulse_);
  } else {
    impulse_ = nullptr;
  }
  if (from._internal_has_entity_msg()) {
    entity_msg_ = new ::CEntityMsg(*from.entity_msg_);
  } else {
    entity_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CEntityMessagePropagateForce)
}

void CEntityMessagePropagateForce::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&impulse_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_msg_) -
    reinterpret_cast<char*>(&impulse_)) + sizeof(entity_msg_));
}

CEntityMessagePropagateForce::~CEntityMessagePropagateForce() {
  // @@protoc_insertion_point(destructor:CEntityMessagePropagateForce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEntityMessagePropagateForce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete impulse_;
  if (this != internal_default_instance()) delete entity_msg_;
}

void CEntityMessagePropagateForce::ArenaDtor(void* object) {
  CEntityMessagePropagateForce* _this = reinterpret_cast< CEntityMessagePropagateForce* >(object);
  (void)_this;
}
void CEntityMessagePropagateForce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEntityMessagePropagateForce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEntityMessagePropagateForce::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMessagePropagateForce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(impulse_ != nullptr);
      impulse_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entity_msg_ != nullptr);
      entity_msg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMessagePropagateForce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector impulse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_impulse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CEntityMsg entity_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEntityMessagePropagateForce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessagePropagateForce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector impulse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::impulse(this), target, stream);
  }

  // optional .CEntityMsg entity_msg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessagePropagateForce)
  return target;
}

size_t CEntityMessagePropagateForce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMessagePropagateForce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector impulse = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *impulse_);
    }

    // optional .CEntityMsg entity_msg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_msg_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessagePropagateForce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEntityMessagePropagateForce)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessagePropagateForce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEntityMessagePropagateForce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEntityMessagePropagateForce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEntityMessagePropagateForce)
    MergeFrom(*source);
  }
}

void CEntityMessagePropagateForce::MergeFrom(const CEntityMessagePropagateForce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEntityMessagePropagateForce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_impulse()->::CMsgVector::MergeFrom(from._internal_impulse());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(from._internal_entity_msg());
    }
  }
}

void CEntityMessagePropagateForce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEntityMessagePropagateForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePropagateForce::CopyFrom(const CEntityMessagePropagateForce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMessagePropagateForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePropagateForce::IsInitialized() const {
  return true;
}

void CEntityMessagePropagateForce::InternalSwap(CEntityMessagePropagateForce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEntityMessagePropagateForce, entity_msg_)
      + sizeof(CEntityMessagePropagateForce::entity_msg_)
      - PROTOBUF_FIELD_OFFSET(CEntityMessagePropagateForce, impulse_)>(
          reinterpret_cast<char*>(&impulse_),
          reinterpret_cast<char*>(&other->impulse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMessagePropagateForce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEntityMessageDoSpark::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMessageDoSpark>()._has_bits_);
  static const ::CMsgVector& origin(const CEntityMessageDoSpark* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entityindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_beams(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_thick(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CEntityMsg& entity_msg(const CEntityMessageDoSpark* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CEntityMessageDoSpark::_Internal::origin(const CEntityMessageDoSpark* msg) {
  return *msg->origin_;
}
const ::CEntityMsg&
CEntityMessageDoSpark::_Internal::entity_msg(const CEntityMessageDoSpark* msg) {
  return *msg->entity_msg_;
}
void CEntityMessageDoSpark::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessageDoSpark::clear_entity_msg() {
  if (entity_msg_ != nullptr) entity_msg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CEntityMessageDoSpark::CEntityMessageDoSpark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEntityMessageDoSpark)
}
CEntityMessageDoSpark::CEntityMessageDoSpark(const CEntityMessageDoSpark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgVector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_entity_msg()) {
    entity_msg_ = new ::CEntityMsg(*from.entity_msg_);
  } else {
    entity_msg_ = nullptr;
  }
  ::memcpy(&entityindex_, &from.entityindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&entityindex_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CEntityMessageDoSpark)
}

void CEntityMessageDoSpark::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(duration_));
}

CEntityMessageDoSpark::~CEntityMessageDoSpark() {
  // @@protoc_insertion_point(destructor:CEntityMessageDoSpark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEntityMessageDoSpark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete entity_msg_;
}

void CEntityMessageDoSpark::ArenaDtor(void* object) {
  CEntityMessageDoSpark* _this = reinterpret_cast< CEntityMessageDoSpark* >(object);
  (void)_this;
}
void CEntityMessageDoSpark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEntityMessageDoSpark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEntityMessageDoSpark::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMessageDoSpark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entity_msg_ != nullptr);
      entity_msg_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&entityindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&entityindex_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMessageDoSpark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 entityindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entityindex(&has_bits);
          entityindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional fixed32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 beams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_beams(&has_bits);
          beams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float thick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_thick(&has_bits);
          thick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CEntityMsg entity_msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEntityMessageDoSpark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageDoSpark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // optional uint32 entityindex = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entityindex(), target);
  }

  // optional float radius = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_radius(), target);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_color(), target);
  }

  // optional uint32 beams = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_beams(), target);
  }

  // optional float thick = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_thick(), target);
  }

  // optional float duration = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_duration(), target);
  }

  // optional .CEntityMsg entity_msg = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::entity_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageDoSpark)
  return target;
}

size_t CEntityMessageDoSpark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMessageDoSpark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional .CEntityMsg entity_msg = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_msg_);
    }

    // optional uint32 entityindex = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entityindex());
    }

    // optional float radius = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 color = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 beams = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_beams());
    }

    // optional float thick = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float duration = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageDoSpark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEntityMessageDoSpark)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageDoSpark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEntityMessageDoSpark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEntityMessageDoSpark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEntityMessageDoSpark)
    MergeFrom(*source);
  }
}

void CEntityMessageDoSpark::MergeFrom(const CEntityMessageDoSpark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEntityMessageDoSpark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::CMsgVector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(from._internal_entity_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      entityindex_ = from.entityindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000020u) {
      beams_ = from.beams_;
    }
    if (cached_has_bits & 0x00000040u) {
      thick_ = from.thick_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageDoSpark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEntityMessageDoSpark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageDoSpark::CopyFrom(const CEntityMessageDoSpark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMessageDoSpark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageDoSpark::IsInitialized() const {
  return true;
}

void CEntityMessageDoSpark::InternalSwap(CEntityMessageDoSpark* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEntityMessageDoSpark, duration_)
      + sizeof(CEntityMessageDoSpark::duration_)
      - PROTOBUF_FIELD_OFFSET(CEntityMessageDoSpark, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMessageDoSpark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEntityMessageFixAngle::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMessageFixAngle>()._has_bits_);
  static void set_has_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgQAngle& angle(const CEntityMessageFixAngle* msg);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CEntityMsg& entity_msg(const CEntityMessageFixAngle* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgQAngle&
CEntityMessageFixAngle::_Internal::angle(const CEntityMessageFixAngle* msg) {
  return *msg->angle_;
}
const ::CEntityMsg&
CEntityMessageFixAngle::_Internal::entity_msg(const CEntityMessageFixAngle* msg) {
  return *msg->entity_msg_;
}
void CEntityMessageFixAngle::clear_angle() {
  if (angle_ != nullptr) angle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessageFixAngle::clear_entity_msg() {
  if (entity_msg_ != nullptr) entity_msg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CEntityMessageFixAngle::CEntityMessageFixAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEntityMessageFixAngle)
}
CEntityMessageFixAngle::CEntityMessageFixAngle(const CEntityMessageFixAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_angle()) {
    angle_ = new ::CMsgQAngle(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  if (from._internal_has_entity_msg()) {
    entity_msg_ = new ::CEntityMsg(*from.entity_msg_);
  } else {
    entity_msg_ = nullptr;
  }
  relative_ = from.relative_;
  // @@protoc_insertion_point(copy_constructor:CEntityMessageFixAngle)
}

void CEntityMessageFixAngle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relative_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(relative_));
}

CEntityMessageFixAngle::~CEntityMessageFixAngle() {
  // @@protoc_insertion_point(destructor:CEntityMessageFixAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEntityMessageFixAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete entity_msg_;
}

void CEntityMessageFixAngle::ArenaDtor(void* object) {
  CEntityMessageFixAngle* _this = reinterpret_cast< CEntityMessageFixAngle* >(object);
  (void)_this;
}
void CEntityMessageFixAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEntityMessageFixAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEntityMessageFixAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMessageFixAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(angle_ != nullptr);
      angle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entity_msg_ != nullptr);
      entity_msg_->Clear();
    }
  }
  relative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMessageFixAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool relative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relative(&has_bits);
          relative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgQAngle angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CEntityMsg entity_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEntityMessageFixAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageFixAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool relative = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_relative(), target);
  }

  // optional .CMsgQAngle angle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angle(this), target, stream);
  }

  // optional .CEntityMsg entity_msg = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::entity_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageFixAngle)
  return target;
}

size_t CEntityMessageFixAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMessageFixAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgQAngle angle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_);
    }

    // optional .CEntityMsg entity_msg = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_msg_);
    }

    // optional bool relative = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageFixAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEntityMessageFixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageFixAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEntityMessageFixAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEntityMessageFixAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEntityMessageFixAngle)
    MergeFrom(*source);
  }
}

void CEntityMessageFixAngle::MergeFrom(const CEntityMessageFixAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEntityMessageFixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_angle()->::CMsgQAngle::MergeFrom(from._internal_angle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(from._internal_entity_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      relative_ = from.relative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageFixAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEntityMessageFixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageFixAngle::CopyFrom(const CEntityMessageFixAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMessageFixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageFixAngle::IsInitialized() const {
  return true;
}

void CEntityMessageFixAngle::InternalSwap(CEntityMessageFixAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEntityMessageFixAngle, relative_)
      + sizeof(CEntityMessageFixAngle::relative_)
      - PROTOBUF_FIELD_OFFSET(CEntityMessageFixAngle, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMessageFixAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCameraTransition_Transition_DataDriven::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCameraTransition_Transition_DataDriven>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attach_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCameraTransition.Transition_DataDriven)
}
CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven(const CUserMessageCameraTransition_Transition_DataDriven& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  attach_ent_index_ = from.attach_ent_index_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageCameraTransition.Transition_DataDriven)
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
attach_ent_index_ = 0;
}

CUserMessageCameraTransition_Transition_DataDriven::~CUserMessageCameraTransition_Transition_DataDriven() {
  // @@protoc_insertion_point(destructor:CUserMessageCameraTransition.Transition_DataDriven)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageCameraTransition_Transition_DataDriven::ArenaDtor(void* object) {
  CUserMessageCameraTransition_Transition_DataDriven* _this = reinterpret_cast< CUserMessageCameraTransition_Transition_DataDriven* >(object);
  (void)_this;
}
void CUserMessageCameraTransition_Transition_DataDriven::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCameraTransition_Transition_DataDriven::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCameraTransition_Transition_DataDriven::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCameraTransition.Transition_DataDriven)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  attach_ent_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCameraTransition_Transition_DataDriven::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMessageCameraTransition.Transition_DataDriven.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attach_ent_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attach_ent_index(&has_bits);
          attach_ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCameraTransition_Transition_DataDriven::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCameraTransition.Transition_DataDriven)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMessageCameraTransition.Transition_DataDriven.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional int32 attach_ent_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attach_ent_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCameraTransition.Transition_DataDriven)
  return target;
}

size_t CUserMessageCameraTransition_Transition_DataDriven::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCameraTransition.Transition_DataDriven)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional int32 attach_ent_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attach_ent_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCameraTransition.Transition_DataDriven)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCameraTransition_Transition_DataDriven* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCameraTransition_Transition_DataDriven>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCameraTransition.Transition_DataDriven)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCameraTransition.Transition_DataDriven)
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCameraTransition.Transition_DataDriven)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      attach_ent_index_ = from.attach_ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCameraTransition.Transition_DataDriven)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCameraTransition.Transition_DataDriven)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition_Transition_DataDriven::IsInitialized() const {
  return true;
}

void CUserMessageCameraTransition_Transition_DataDriven::InternalSwap(CUserMessageCameraTransition_Transition_DataDriven* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(attach_ent_index_, other->attach_ent_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCameraTransition_Transition_DataDriven::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCameraTransition::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCameraTransition>()._has_bits_);
  static void set_has_camera_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CUserMessageCameraTransition_Transition_DataDriven& params_data_driven(const CUserMessageCameraTransition* msg);
  static void set_has_params_data_driven(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CUserMessageCameraTransition_Transition_DataDriven&
CUserMessageCameraTransition::_Internal::params_data_driven(const CUserMessageCameraTransition* msg) {
  return *msg->params_data_driven_;
}
CUserMessageCameraTransition::CUserMessageCameraTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCameraTransition)
}
CUserMessageCameraTransition::CUserMessageCameraTransition(const CUserMessageCameraTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params_data_driven()) {
    params_data_driven_ = new ::CUserMessageCameraTransition_Transition_DataDriven(*from.params_data_driven_);
  } else {
    params_data_driven_ = nullptr;
  }
  ::memcpy(&camera_type_, &from.camera_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&camera_type_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageCameraTransition)
}

void CUserMessageCameraTransition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&params_data_driven_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&params_data_driven_)) + sizeof(duration_));
}

CUserMessageCameraTransition::~CUserMessageCameraTransition() {
  // @@protoc_insertion_point(destructor:CUserMessageCameraTransition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCameraTransition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete params_data_driven_;
}

void CUserMessageCameraTransition::ArenaDtor(void* object) {
  CUserMessageCameraTransition* _this = reinterpret_cast< CUserMessageCameraTransition* >(object);
  (void)_this;
}
void CUserMessageCameraTransition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCameraTransition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCameraTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCameraTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(params_data_driven_ != nullptr);
    params_data_driven_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&camera_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&camera_type_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCameraTransition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 camera_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_camera_type(&has_bits);
          camera_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_params_data_driven(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCameraTransition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCameraTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 camera_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_camera_type(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::params_data_driven(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCameraTransition)
  return target;
}

size_t CUserMessageCameraTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCameraTransition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_data_driven_);
    }

    // optional uint32 camera_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camera_type());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCameraTransition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCameraTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCameraTransition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCameraTransition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCameraTransition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCameraTransition)
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition::MergeFrom(const CUserMessageCameraTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCameraTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_params_data_driven()->::CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(from._internal_params_data_driven());
    }
    if (cached_has_bits & 0x00000002u) {
      camera_type_ = from.camera_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCameraTransition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCameraTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition::CopyFrom(const CUserMessageCameraTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCameraTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition::IsInitialized() const {
  return true;
}

void CUserMessageCameraTransition::InternalSwap(CUserMessageCameraTransition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageCameraTransition, duration_)
      + sizeof(CUserMessageCameraTransition::duration_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageCameraTransition, params_data_driven_)>(
          reinterpret_cast<char*>(&params_data_driven_),
          reinterpret_cast<char*>(&other->params_data_driven_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCameraTransition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_ReleaseParticleIndex::_Internal {
 public:
};

CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.ReleaseParticleIndex)
}
CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex(const CUserMsg_ParticleManager_ReleaseParticleIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedCtor() {
}

CUserMsg_ParticleManager_ReleaseParticleIndex::~CUserMsg_ParticleManager_ReleaseParticleIndex() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.ReleaseParticleIndex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_ReleaseParticleIndex* _this = reinterpret_cast< CUserMsg_ParticleManager_ReleaseParticleIndex* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_ReleaseParticleIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_ReleaseParticleIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_ReleaseParticleIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_ReleaseParticleIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.ReleaseParticleIndex)
  return target;
}

size_t CUserMsg_ParticleManager_ReleaseParticleIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ReleaseParticleIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_ReleaseParticleIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.ReleaseParticleIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.ReleaseParticleIndex)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ReleaseParticleIndex::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::InternalSwap(CUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_ReleaseParticleIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_CreateParticle::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_CreateParticle>()._has_bits_);
  static void set_has_particle_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_handle_for_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_apply_voice_ban_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_control_point_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.CreateParticle)
}
CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle(const CUserMsg_ParticleManager_CreateParticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_point_configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_control_point_configuration()) {
    control_point_configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_point_configuration(), 
      GetArena());
  }
  ::memcpy(&particle_name_index_, &from.particle_name_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_behavior_) -
    reinterpret_cast<char*>(&particle_name_index_)) + sizeof(team_behavior_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.CreateParticle)
}

void CUserMsg_ParticleManager_CreateParticle::SharedCtor() {
control_point_configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&particle_name_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_behavior_) -
    reinterpret_cast<char*>(&particle_name_index_)) + sizeof(team_behavior_));
}

CUserMsg_ParticleManager_CreateParticle::~CUserMsg_ParticleManager_CreateParticle() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.CreateParticle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_CreateParticle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  control_point_configuration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_ParticleManager_CreateParticle::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_CreateParticle* _this = reinterpret_cast< CUserMsg_ParticleManager_CreateParticle* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_CreateParticle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_CreateParticle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_CreateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.CreateParticle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    control_point_configuration_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&particle_name_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_behavior_) -
        reinterpret_cast<char*>(&particle_name_index_)) + sizeof(team_behavior_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_CreateParticle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 particle_name_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_particle_name_index(&has_bits);
          particle_name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 attach_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attach_type(&has_bits);
          attach_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle_for_modifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_entity_handle_for_modifiers(&has_bits);
          entity_handle_for_modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool apply_voice_ban_rules = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_apply_voice_ban_rules(&has_bits);
          apply_voice_ban_rules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_behavior = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_behavior(&has_bits);
          team_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string control_point_configuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_control_point_configuration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMsg_ParticleManager.CreateParticle.control_point_configuration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_CreateParticle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.CreateParticle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_particle_name_index(), target);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attach_type(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_handle(), target);
  }

  // optional int32 entity_handle_for_modifiers = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_entity_handle_for_modifiers(), target);
  }

  // optional bool apply_voice_ban_rules = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_apply_voice_ban_rules(), target);
  }

  // optional int32 team_behavior = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_team_behavior(), target);
  }

  // optional string control_point_configuration = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_control_point_configuration().data(), static_cast<int>(this->_internal_control_point_configuration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMsg_ParticleManager.CreateParticle.control_point_configuration");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_control_point_configuration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.CreateParticle)
  return target;
}

size_t CUserMsg_ParticleManager_CreateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.CreateParticle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string control_point_configuration = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_control_point_configuration());
    }

    // optional fixed64 particle_name_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 attach_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attach_type());
    }

    // optional int32 entity_handle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

    // optional int32 entity_handle_for_modifiers = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle_for_modifiers());
    }

    // optional bool apply_voice_ban_rules = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 team_behavior = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_behavior());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_CreateParticle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_CreateParticle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.CreateParticle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.CreateParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_control_point_configuration(from._internal_control_point_configuration());
    }
    if (cached_has_bits & 0x00000002u) {
      particle_name_index_ = from.particle_name_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      entity_handle_for_modifiers_ = from.entity_handle_for_modifiers_;
    }
    if (cached_has_bits & 0x00000020u) {
      apply_voice_ban_rules_ = from.apply_voice_ban_rules_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_behavior_ = from.team_behavior_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_CreateParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_CreateParticle::InternalSwap(CUserMsg_ParticleManager_CreateParticle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  control_point_configuration_.Swap(&other->control_point_configuration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, team_behavior_)
      + sizeof(CUserMsg_ParticleManager_CreateParticle::team_behavior_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, particle_name_index_)>(
          reinterpret_cast<char*>(&particle_name_index_),
          reinterpret_cast<char*>(&other->particle_name_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_CreateParticle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_DestroyParticle::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_DestroyParticle>()._has_bits_);
  static void set_has_destroy_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.DestroyParticle)
}
CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle(const CUserMsg_ParticleManager_DestroyParticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destroy_immediately_ = from.destroy_immediately_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.DestroyParticle)
}

void CUserMsg_ParticleManager_DestroyParticle::SharedCtor() {
destroy_immediately_ = false;
}

CUserMsg_ParticleManager_DestroyParticle::~CUserMsg_ParticleManager_DestroyParticle() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.DestroyParticle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_DestroyParticle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_DestroyParticle::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_DestroyParticle* _this = reinterpret_cast< CUserMsg_ParticleManager_DestroyParticle* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_DestroyParticle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_DestroyParticle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_DestroyParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.DestroyParticle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destroy_immediately_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_DestroyParticle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool destroy_immediately = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_destroy_immediately(&has_bits);
          destroy_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_DestroyParticle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.DestroyParticle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_destroy_immediately(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.DestroyParticle)
  return target;
}

size_t CUserMsg_ParticleManager_DestroyParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.DestroyParticle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool destroy_immediately = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_DestroyParticle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.DestroyParticle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.DestroyParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_destroy_immediately()) {
    _internal_set_destroy_immediately(from._internal_destroy_immediately());
  }
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_DestroyParticle::InternalSwap(CUserMsg_ParticleManager_DestroyParticle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(destroy_immediately_, other->destroy_immediately_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_DestroyParticle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_DestroyParticleInvolving::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_DestroyParticleInvolving>()._has_bits_);
  static void set_has_destroy_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.DestroyParticleInvolving)
}
CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving(const CUserMsg_ParticleManager_DestroyParticleInvolving& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&destroy_immediately_, &from.destroy_immediately_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&destroy_immediately_)) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&destroy_immediately_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&destroy_immediately_)) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_DestroyParticleInvolving::~CUserMsg_ParticleManager_DestroyParticleInvolving() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.DestroyParticleInvolving)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_DestroyParticleInvolving* _this = reinterpret_cast< CUserMsg_ParticleManager_DestroyParticleInvolving* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&destroy_immediately_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_handle_) -
        reinterpret_cast<char*>(&destroy_immediately_)) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_DestroyParticleInvolving::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool destroy_immediately = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_destroy_immediately(&has_bits);
          destroy_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_DestroyParticleInvolving::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_destroy_immediately(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.DestroyParticleInvolving)
  return target;
}

size_t CUserMsg_ParticleManager_DestroyParticleInvolving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool destroy_immediately = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 entity_handle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticleInvolving* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_DestroyParticleInvolving>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.DestroyParticleInvolving)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.DestroyParticleInvolving)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      destroy_immediately_ = from.destroy_immediately_;
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticleInvolving::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::InternalSwap(CUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_)
      + sizeof(CUserMsg_ParticleManager_DestroyParticleInvolving::entity_handle_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_)>(
          reinterpret_cast<char*>(&destroy_immediately_),
          reinterpret_cast<char*>(&other->destroy_immediately_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_DestroyParticleInvolving::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_DestroyParticleNamed::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_DestroyParticleNamed>()._has_bits_);
  static void set_has_particle_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destroy_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_play_endcap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMsg_ParticleManager_DestroyParticleNamed::CUserMsg_ParticleManager_DestroyParticleNamed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.DestroyParticleNamed)
}
CUserMsg_ParticleManager_DestroyParticleNamed::CUserMsg_ParticleManager_DestroyParticleNamed(const CUserMsg_ParticleManager_DestroyParticleNamed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&particle_name_index_, &from.particle_name_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_endcap_) -
    reinterpret_cast<char*>(&particle_name_index_)) + sizeof(play_endcap_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.DestroyParticleNamed)
}

void CUserMsg_ParticleManager_DestroyParticleNamed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&particle_name_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&play_endcap_) -
    reinterpret_cast<char*>(&particle_name_index_)) + sizeof(play_endcap_));
}

CUserMsg_ParticleManager_DestroyParticleNamed::~CUserMsg_ParticleManager_DestroyParticleNamed() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.DestroyParticleNamed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_DestroyParticleNamed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_DestroyParticleNamed::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_DestroyParticleNamed* _this = reinterpret_cast< CUserMsg_ParticleManager_DestroyParticleNamed* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_DestroyParticleNamed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_DestroyParticleNamed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_DestroyParticleNamed::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.DestroyParticleNamed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&particle_name_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&play_endcap_) -
        reinterpret_cast<char*>(&particle_name_index_)) + sizeof(play_endcap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_DestroyParticleNamed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 particle_name_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_particle_name_index(&has_bits);
          particle_name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool destroy_immediately = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_destroy_immediately(&has_bits);
          destroy_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool play_endcap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_play_endcap(&has_bits);
          play_endcap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_DestroyParticleNamed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.DestroyParticleNamed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_particle_name_index(), target);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_entity_handle(), target);
  }

  // optional bool destroy_immediately = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_destroy_immediately(), target);
  }

  // optional bool play_endcap = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_play_endcap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.DestroyParticleNamed)
  return target;
}

size_t CUserMsg_ParticleManager_DestroyParticleNamed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.DestroyParticleNamed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 particle_name_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 entity_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

    // optional bool destroy_immediately = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool play_endcap = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticleNamed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.DestroyParticleNamed)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticleNamed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_DestroyParticleNamed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.DestroyParticleNamed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.DestroyParticleNamed)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticleNamed::MergeFrom(const CUserMsg_ParticleManager_DestroyParticleNamed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.DestroyParticleNamed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      particle_name_index_ = from.particle_name_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      destroy_immediately_ = from.destroy_immediately_;
    }
    if (cached_has_bits & 0x00000008u) {
      play_endcap_ = from.play_endcap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_DestroyParticleNamed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.DestroyParticleNamed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticleNamed::CopyFrom(const CUserMsg_ParticleManager_DestroyParticleNamed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.DestroyParticleNamed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticleNamed::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_DestroyParticleNamed::InternalSwap(CUserMsg_ParticleManager_DestroyParticleNamed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleNamed, play_endcap_)
      + sizeof(CUserMsg_ParticleManager_DestroyParticleNamed::play_endcap_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleNamed, particle_name_index_)>(
          reinterpret_cast<char*>(&particle_name_index_),
          reinterpret_cast<char*>(&other->particle_name_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_DestroyParticleNamed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticle::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticle>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& position(const CUserMsg_ParticleManager_UpdateParticle* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticle::_Internal::position(const CUserMsg_ParticleManager_UpdateParticle* msg) {
  return *msg->position_;
}
void CUserMsg_ParticleManager_UpdateParticle::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticle)
}
CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle(const CUserMsg_ParticleManager_UpdateParticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticle)
}

void CUserMsg_ParticleManager_UpdateParticle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&position_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticle::~CUserMsg_ParticleManager_UpdateParticle() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CUserMsg_ParticleManager_UpdateParticle::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticle* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticle* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticle)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::CMsgVector::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticle::InternalSwap(CUserMsg_ParticleManager_UpdateParticle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, control_point_)
      + sizeof(CUserMsg_ParticleManager_UpdateParticle::control_point_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticleFwd::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticleFwd>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& forward(const CUserMsg_ParticleManager_UpdateParticleFwd* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleFwd::_Internal::forward(const CUserMsg_ParticleManager_UpdateParticleFwd* msg) {
  return *msg->forward_;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticleFwd)
}
CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd(const CUserMsg_ParticleManager_UpdateParticleFwd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forward()) {
    forward_ = new ::CMsgVector(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleFwd)
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&forward_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleFwd::~CUserMsg_ParticleManager_UpdateParticleFwd() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleFwd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete forward_;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticleFwd* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticleFwd* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticleFwd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticleFwd::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(forward_ != nullptr);
    forward_->Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticleFwd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticleFwd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleFwd)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleFwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector forward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFwd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleFwd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticleFwd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticleFwd)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_forward()->::CMsgVector::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFwd::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::InternalSwap(CUserMsg_ParticleManager_UpdateParticleFwd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, control_point_)
      + sizeof(CUserMsg_ParticleManager_UpdateParticleFwd::control_point_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, forward_)>(
          reinterpret_cast<char*>(&forward_),
          reinterpret_cast<char*>(&other->forward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticleFwd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticleOrient::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticleOrient>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& forward(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& deprecated_right(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_deprecated_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& up(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_up(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& left(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::_Internal::forward(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->forward_;
}
const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::_Internal::deprecated_right(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->deprecated_right_;
}
const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::_Internal::up(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->up_;
}
const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::_Internal::left(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->left_;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_deprecated_right() {
  if (deprecated_right_ != nullptr) deprecated_right_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_up() {
  if (up_ != nullptr) up_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_left() {
  if (left_ != nullptr) left_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticleOrient)
}
CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient(const CUserMsg_ParticleManager_UpdateParticleOrient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forward()) {
    forward_ = new ::CMsgVector(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  if (from._internal_has_deprecated_right()) {
    deprecated_right_ = new ::CMsgVector(*from.deprecated_right_);
  } else {
    deprecated_right_ = nullptr;
  }
  if (from._internal_has_up()) {
    up_ = new ::CMsgVector(*from.up_);
  } else {
    up_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::CMsgVector(*from.left_);
  } else {
    left_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleOrient)
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&forward_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleOrient::~CUserMsg_ParticleManager_UpdateParticleOrient() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleOrient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete forward_;
  if (this != internal_default_instance()) delete deprecated_right_;
  if (this != internal_default_instance()) delete up_;
  if (this != internal_default_instance()) delete left_;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticleOrient* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticleOrient* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticleOrient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticleOrient::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(deprecated_right_ != nullptr);
      deprecated_right_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(up_ != nullptr);
      up_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(left_ != nullptr);
      left_->Clear();
    }
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticleOrient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector deprecated_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector up = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_up(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticleOrient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::forward(this), target, stream);
  }

  // optional .CMsgVector deprecated_right = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deprecated_right(this), target, stream);
  }

  // optional .CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::up(this), target, stream);
  }

  // optional .CMsgVector left = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::left(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleOrient)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleOrient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector forward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional .CMsgVector deprecated_right = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_right_);
    }

    // optional .CMsgVector up = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *up_);
    }

    // optional .CMsgVector left = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOrient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleOrient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticleOrient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticleOrient)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_forward()->::CMsgVector::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_deprecated_right()->::CMsgVector::MergeFrom(from._internal_deprecated_right());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_up()->::CMsgVector::MergeFrom(from._internal_up());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_left()->::CMsgVector::MergeFrom(from._internal_left());
    }
    if (cached_has_bits & 0x00000010u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOrient::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::InternalSwap(CUserMsg_ParticleManager_UpdateParticleOrient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, control_point_)
      + sizeof(CUserMsg_ParticleManager_UpdateParticleOrient::control_point_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, forward_)>(
          reinterpret_cast<char*>(&forward_),
          reinterpret_cast<char*>(&other->forward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticleOrient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticleFallback::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticleFallback>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& position(const CUserMsg_ParticleManager_UpdateParticleFallback* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleFallback::_Internal::position(const CUserMsg_ParticleManager_UpdateParticleFallback* msg) {
  return *msg->position_;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticleFallback)
}
CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback(const CUserMsg_ParticleManager_UpdateParticleFallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleFallback)
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&position_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleFallback::~CUserMsg_ParticleManager_UpdateParticleFallback() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleFallback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticleFallback* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticleFallback* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticleFallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticleFallback::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticleFallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticleFallback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleFallback)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleFallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFallback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleFallback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticleFallback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticleFallback)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::CMsgVector::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFallback::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::InternalSwap(CUserMsg_ParticleManager_UpdateParticleFallback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, control_point_)
      + sizeof(CUserMsg_ParticleManager_UpdateParticleFallback::control_point_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticleFallback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticleOffset::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticleOffset>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& origin_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg);
  static void set_has_origin_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& angle_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg);
  static void set_has_angle_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOffset::_Internal::origin_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg) {
  return *msg->origin_offset_;
}
const ::CMsgQAngle&
CUserMsg_ParticleManager_UpdateParticleOffset::_Internal::angle_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg) {
  return *msg->angle_offset_;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_origin_offset() {
  if (origin_offset_ != nullptr) origin_offset_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_angle_offset() {
  if (angle_offset_ != nullptr) angle_offset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticleOffset)
}
CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset(const CUserMsg_ParticleManager_UpdateParticleOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin_offset()) {
    origin_offset_ = new ::CMsgVector(*from.origin_offset_);
  } else {
    origin_offset_ = nullptr;
  }
  if (from._internal_has_angle_offset()) {
    angle_offset_ = new ::CMsgQAngle(*from.angle_offset_);
  } else {
    angle_offset_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleOffset)
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&origin_offset_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleOffset::~CUserMsg_ParticleManager_UpdateParticleOffset() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleOffset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_offset_;
  if (this != internal_default_instance()) delete angle_offset_;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticleOffset* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticleOffset* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticleOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticleOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_offset_ != nullptr);
      origin_offset_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angle_offset_ != nullptr);
      angle_offset_->Clear();
    }
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticleOffset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector origin_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgQAngle angle_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticleOffset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::origin_offset(this), target, stream);
  }

  // optional .CMsgQAngle angle_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::angle_offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleOffset)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgVector origin_offset = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_offset_);
    }

    // optional .CMsgQAngle angle_offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_offset_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOffset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleOffset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticleOffset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticleOffset)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin_offset()->::CMsgVector::MergeFrom(from._internal_origin_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_angle_offset()->::CMsgQAngle::MergeFrom(from._internal_angle_offset());
    }
    if (cached_has_bits & 0x00000004u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOffset::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::InternalSwap(CUserMsg_ParticleManager_UpdateParticleOffset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, control_point_)
      + sizeof(CUserMsg_ParticleManager_UpdateParticleOffset::control_point_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_)>(
          reinterpret_cast<char*>(&origin_offset_),
          reinterpret_cast<char*>(&other->origin_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticleOffset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticleEnt::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticleEnt>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attach_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& fallback_position(const CUserMsg_ParticleManager_UpdateParticleEnt* msg);
  static void set_has_fallback_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_wearables(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleEnt::_Internal::fallback_position(const CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
  return *msg->fallback_position_;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_fallback_position() {
  if (fallback_position_ != nullptr) fallback_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticleEnt)
}
CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt(const CUserMsg_ParticleManager_UpdateParticleEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fallback_position()) {
    fallback_position_ = new ::CMsgVector(*from.fallback_position_);
  } else {
    fallback_position_ = nullptr;
  }
  ::memcpy(&control_point_, &from.control_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_wearables_) -
    reinterpret_cast<char*>(&control_point_)) + sizeof(include_wearables_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleEnt)
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fallback_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_wearables_) -
    reinterpret_cast<char*>(&fallback_position_)) + sizeof(include_wearables_));
}

CUserMsg_ParticleManager_UpdateParticleEnt::~CUserMsg_ParticleManager_UpdateParticleEnt() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fallback_position_;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticleEnt* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticleEnt* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticleEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticleEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fallback_position_ != nullptr);
    fallback_position_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&control_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_wearables_) -
        reinterpret_cast<char*>(&control_point_)) + sizeof(include_wearables_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticleEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attach_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_attach_type(&has_bits);
          attach_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attachment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_attachment(&has_bits);
          attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector fallback_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_wearables = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_include_wearables(&has_bits);
          include_wearables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticleEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_entity_handle(), target);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attach_type(), target);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attachment(), target);
  }

  // optional .CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fallback_position(this), target, stream);
  }

  // optional bool include_wearables = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_include_wearables(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleEnt)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgVector fallback_position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fallback_position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

    // optional int32 entity_handle = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

    // optional int32 attach_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attach_type());
    }

    // optional int32 attachment = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attachment());
    }

    // optional bool include_wearables = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticleEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticleEnt)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fallback_position()->::CMsgVector::MergeFrom(from._internal_fallback_position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      attachment_ = from.attachment_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_wearables_ = from.include_wearables_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleEnt::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::InternalSwap(CUserMsg_ParticleManager_UpdateParticleEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, include_wearables_)
      + sizeof(CUserMsg_ParticleManager_UpdateParticleEnt::include_wearables_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_)>(
          reinterpret_cast<char*>(&fallback_position_),
          reinterpret_cast<char*>(&other->fallback_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticleEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticleSetFrozen::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticleSetFrozen>()._has_bits_);
  static void set_has_set_frozen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}
CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  set_frozen_ = from.set_frozen_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedCtor() {
set_frozen_ = false;
}

CUserMsg_ParticleManager_UpdateParticleSetFrozen::~CUserMsg_ParticleManager_UpdateParticleSetFrozen() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticleSetFrozen* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticleSetFrozen* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_frozen_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticleSetFrozen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool set_frozen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_set_frozen(&has_bits);
          set_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticleSetFrozen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_set_frozen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleSetFrozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool set_frozen = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleSetFrozen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleSetFrozen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_set_frozen()) {
    _internal_set_set_frozen(from._internal_set_frozen());
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::InternalSwap(CUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(set_frozen_, other->set_frozen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticleSetFrozen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateParticleShouldDraw::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateParticleShouldDraw>()._has_bits_);
  static void set_has_should_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}
CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  should_draw_ = from.should_draw_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedCtor() {
should_draw_ = false;
}

CUserMsg_ParticleManager_UpdateParticleShouldDraw::~CUserMsg_ParticleManager_UpdateParticleShouldDraw() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateParticleShouldDraw* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateParticleShouldDraw* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  should_draw_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateParticleShouldDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool should_draw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_should_draw(&has_bits);
          should_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateParticleShouldDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_should_draw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleShouldDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool should_draw = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleShouldDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleShouldDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_should_draw()) {
    _internal_set_should_draw(from._internal_should_draw());
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::InternalSwap(CUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(should_draw_, other->should_draw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateParticleShouldDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_ChangeControlPointAttachment::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_ChangeControlPointAttachment>()._has_bits_);
  static void set_has_attachment_old(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attachment_new(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.ChangeControlPointAttachment)
}
CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&attachment_old_, &from.attachment_old_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&attachment_old_)) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attachment_old_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&attachment_old_)) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_ChangeControlPointAttachment::~CUserMsg_ParticleManager_ChangeControlPointAttachment() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_ChangeControlPointAttachment* _this = reinterpret_cast< CUserMsg_ParticleManager_ChangeControlPointAttachment* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&attachment_old_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_handle_) -
        reinterpret_cast<char*>(&attachment_old_)) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_ChangeControlPointAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 attachment_old = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attachment_old(&has_bits);
          attachment_old_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attachment_new = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attachment_new(&has_bits);
          attachment_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_ChangeControlPointAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attachment_old = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attachment_old(), target);
  }

  // optional int32 attachment_new = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attachment_new(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return target;
}

size_t CUserMsg_ParticleManager_ChangeControlPointAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 attachment_old = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attachment_old());
    }

    // optional int32 attachment_new = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attachment_new());
    }

    // optional int32 entity_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ChangeControlPointAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_ChangeControlPointAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.ChangeControlPointAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.ChangeControlPointAttachment)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      attachment_old_ = from.attachment_old_;
    }
    if (cached_has_bits & 0x00000002u) {
      attachment_new_ = from.attachment_new_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ChangeControlPointAttachment::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::InternalSwap(CUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, entity_handle_)
      + sizeof(CUserMsg_ParticleManager_ChangeControlPointAttachment::entity_handle_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_old_)>(
          reinterpret_cast<char*>(&attachment_old_),
          reinterpret_cast<char*>(&other->attachment_old_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_ChangeControlPointAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_UpdateEntityPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_UpdateEntityPosition>()._has_bits_);
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& position(const CUserMsg_ParticleManager_UpdateEntityPosition* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CUserMsg_ParticleManager_UpdateEntityPosition::_Internal::position(const CUserMsg_ParticleManager_UpdateEntityPosition* msg) {
  return *msg->position_;
}
void CUserMsg_ParticleManager_UpdateEntityPosition::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CUserMsg_ParticleManager_UpdateEntityPosition::CUserMsg_ParticleManager_UpdateEntityPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.UpdateEntityPosition)
}
CUserMsg_ParticleManager_UpdateEntityPosition::CUserMsg_ParticleManager_UpdateEntityPosition(const CUserMsg_ParticleManager_UpdateEntityPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  entity_handle_ = from.entity_handle_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateEntityPosition)
}

void CUserMsg_ParticleManager_UpdateEntityPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&position_)) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_UpdateEntityPosition::~CUserMsg_ParticleManager_UpdateEntityPosition() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateEntityPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_UpdateEntityPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CUserMsg_ParticleManager_UpdateEntityPosition::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_UpdateEntityPosition* _this = reinterpret_cast< CUserMsg_ParticleManager_UpdateEntityPosition* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_UpdateEntityPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_UpdateEntityPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_UpdateEntityPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.UpdateEntityPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  entity_handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_UpdateEntityPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entity_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_UpdateEntityPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateEntityPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity_handle(), target);
  }

  // optional .CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateEntityPosition)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateEntityPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.UpdateEntityPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 entity_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateEntityPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateEntityPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.UpdateEntityPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.UpdateEntityPosition)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(const CUserMsg_ParticleManager_UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::CMsgVector::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateEntityPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateEntityPosition::CopyFrom(const CUserMsg_ParticleManager_UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateEntityPosition::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateEntityPosition::InternalSwap(CUserMsg_ParticleManager_UpdateEntityPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateEntityPosition, entity_handle_)
      + sizeof(CUserMsg_ParticleManager_UpdateEntityPosition::entity_handle_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateEntityPosition, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_UpdateEntityPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetParticleFoWProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetParticleFoWProperties>()._has_bits_);
  static void set_has_fow_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fow_control_point2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fow_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CUserMsg_ParticleManager_SetParticleFoWProperties::CUserMsg_ParticleManager_SetParticleFoWProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetParticleFoWProperties)
}
CUserMsg_ParticleManager_SetParticleFoWProperties::CUserMsg_ParticleManager_SetParticleFoWProperties(const CUserMsg_ParticleManager_SetParticleFoWProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fow_control_point_, &from.fow_control_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&fow_radius_) -
    reinterpret_cast<char*>(&fow_control_point_)) + sizeof(fow_radius_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetParticleFoWProperties)
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fow_control_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fow_radius_) -
    reinterpret_cast<char*>(&fow_control_point_)) + sizeof(fow_radius_));
}

CUserMsg_ParticleManager_SetParticleFoWProperties::~CUserMsg_ParticleManager_SetParticleFoWProperties() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetParticleFoWProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetParticleFoWProperties* _this = reinterpret_cast< CUserMsg_ParticleManager_SetParticleFoWProperties* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetParticleFoWProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetParticleFoWProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetParticleFoWProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fow_control_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fow_radius_) -
        reinterpret_cast<char*>(&fow_control_point_)) + sizeof(fow_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetParticleFoWProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 fow_control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fow_control_point(&has_bits);
          fow_control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fow_control_point2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fow_control_point2(&has_bits);
          fow_control_point2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fow_radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_fow_radius(&has_bits);
          fow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetParticleFoWProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetParticleFoWProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fow_control_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fow_control_point(), target);
  }

  // optional int32 fow_control_point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fow_control_point2(), target);
  }

  // optional float fow_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fow_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetParticleFoWProperties)
  return target;
}

size_t CUserMsg_ParticleManager_SetParticleFoWProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetParticleFoWProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 fow_control_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fow_control_point());
    }

    // optional int32 fow_control_point2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fow_control_point2());
    }

    // optional float fow_radius = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetParticleFoWProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetParticleFoWProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetParticleFoWProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetParticleFoWProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetParticleFoWProperties)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(const CUserMsg_ParticleManager_SetParticleFoWProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetParticleFoWProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fow_control_point_ = from.fow_control_point_;
    }
    if (cached_has_bits & 0x00000002u) {
      fow_control_point2_ = from.fow_control_point2_;
    }
    if (cached_has_bits & 0x00000004u) {
      fow_radius_ = from.fow_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetParticleFoWProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::CopyFrom(const CUserMsg_ParticleManager_SetParticleFoWProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetParticleFoWProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetParticleFoWProperties::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::InternalSwap(CUserMsg_ParticleManager_SetParticleFoWProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_SetParticleFoWProperties, fow_radius_)
      + sizeof(CUserMsg_ParticleManager_SetParticleFoWProperties::fow_radius_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_SetParticleFoWProperties, fow_control_point_)>(
          reinterpret_cast<char*>(&fow_control_point_),
          reinterpret_cast<char*>(&other->fow_control_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetParticleFoWProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetParticleShouldCheckFoW::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetParticleShouldCheckFoW>()._has_bits_);
  static void set_has_check_fow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CUserMsg_ParticleManager_SetParticleShouldCheckFoW(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
}
CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CUserMsg_ParticleManager_SetParticleShouldCheckFoW(const CUserMsg_ParticleManager_SetParticleShouldCheckFoW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_fow_ = from.check_fow_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::SharedCtor() {
check_fow_ = false;
}

CUserMsg_ParticleManager_SetParticleShouldCheckFoW::~CUserMsg_ParticleManager_SetParticleShouldCheckFoW() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetParticleShouldCheckFoW* _this = reinterpret_cast< CUserMsg_ParticleManager_SetParticleShouldCheckFoW* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_fow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetParticleShouldCheckFoW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool check_fow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_check_fow(&has_bits);
          check_fow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetParticleShouldCheckFoW::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool check_fow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_check_fow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  return target;
}

size_t CUserMsg_ParticleManager_SetParticleShouldCheckFoW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool check_fow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetParticleShouldCheckFoW* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetParticleShouldCheckFoW>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::MergeFrom(const CUserMsg_ParticleManager_SetParticleShouldCheckFoW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_check_fow()) {
    _internal_set_check_fow(from._internal_check_fow());
  }
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CopyFrom(const CUserMsg_ParticleManager_SetParticleShouldCheckFoW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetParticleShouldCheckFoW::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::InternalSwap(CUserMsg_ParticleManager_SetParticleShouldCheckFoW* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(check_fow_, other->check_fow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetParticleShouldCheckFoW::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetControlPointModel::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetControlPointModel>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_SetControlPointModel::CUserMsg_ParticleManager_SetControlPointModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetControlPointModel)
}
CUserMsg_ParticleManager_SetControlPointModel::CUserMsg_ParticleManager_SetControlPointModel(const CUserMsg_ParticleManager_SetControlPointModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_name()) {
    model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_name(), 
      GetArena());
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetControlPointModel)
}

void CUserMsg_ParticleManager_SetControlPointModel::SharedCtor() {
model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
control_point_ = 0;
}

CUserMsg_ParticleManager_SetControlPointModel::~CUserMsg_ParticleManager_SetControlPointModel() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetControlPointModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetControlPointModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_ParticleManager_SetControlPointModel::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetControlPointModel* _this = reinterpret_cast< CUserMsg_ParticleManager_SetControlPointModel* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetControlPointModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetControlPointModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetControlPointModel::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetControlPointModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_name_.ClearNonDefaultToEmpty();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetControlPointModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string model_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMsg_ParticleManager.SetControlPointModel.model_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetControlPointModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetControlPointModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional string model_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMsg_ParticleManager.SetControlPointModel.model_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetControlPointModel)
  return target;
}

size_t CUserMsg_ParticleManager_SetControlPointModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetControlPointModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string model_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetControlPointModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetControlPointModel)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetControlPointModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetControlPointModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetControlPointModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetControlPointModel)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetControlPointModel::MergeFrom(const CUserMsg_ParticleManager_SetControlPointModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetControlPointModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_SetControlPointModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetControlPointModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetControlPointModel::CopyFrom(const CUserMsg_ParticleManager_SetControlPointModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetControlPointModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetControlPointModel::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetControlPointModel::InternalSwap(CUserMsg_ParticleManager_SetControlPointModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(control_point_, other->control_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetControlPointModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetControlPointSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetControlPointSnapshot>()._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snapshot_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_SetControlPointSnapshot::CUserMsg_ParticleManager_SetControlPointSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetControlPointSnapshot)
}
CUserMsg_ParticleManager_SetControlPointSnapshot::CUserMsg_ParticleManager_SetControlPointSnapshot(const CUserMsg_ParticleManager_SetControlPointSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  snapshot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshot_name()) {
    snapshot_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshot_name(), 
      GetArena());
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetControlPointSnapshot)
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::SharedCtor() {
snapshot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
control_point_ = 0;
}

CUserMsg_ParticleManager_SetControlPointSnapshot::~CUserMsg_ParticleManager_SetControlPointSnapshot() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetControlPointSnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  snapshot_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetControlPointSnapshot* _this = reinterpret_cast< CUserMsg_ParticleManager_SetControlPointSnapshot* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetControlPointSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetControlPointSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetControlPointSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    snapshot_name_.ClearNonDefaultToEmpty();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetControlPointSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string snapshot_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snapshot_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMsg_ParticleManager.SetControlPointSnapshot.snapshot_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetControlPointSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetControlPointSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional string snapshot_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snapshot_name().data(), static_cast<int>(this->_internal_snapshot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMsg_ParticleManager.SetControlPointSnapshot.snapshot_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snapshot_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetControlPointSnapshot)
  return target;
}

size_t CUserMsg_ParticleManager_SetControlPointSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetControlPointSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string snapshot_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_snapshot_name());
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_control_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetControlPointSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetControlPointSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetControlPointSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetControlPointSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetControlPointSnapshot)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::MergeFrom(const CUserMsg_ParticleManager_SetControlPointSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetControlPointSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_snapshot_name(from._internal_snapshot_name());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetControlPointSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::CopyFrom(const CUserMsg_ParticleManager_SetControlPointSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetControlPointSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetControlPointSnapshot::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetControlPointSnapshot::InternalSwap(CUserMsg_ParticleManager_SetControlPointSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshot_name_.Swap(&other->snapshot_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(control_point_, other->control_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetControlPointSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetParticleText::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetParticleText>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_SetParticleText::CUserMsg_ParticleManager_SetParticleText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetParticleText)
}
CUserMsg_ParticleManager_SetParticleText::CUserMsg_ParticleManager_SetParticleText(const CUserMsg_ParticleManager_SetParticleText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetParticleText)
}

void CUserMsg_ParticleManager_SetParticleText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserMsg_ParticleManager_SetParticleText::~CUserMsg_ParticleManager_SetParticleText() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetParticleText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetParticleText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_ParticleManager_SetParticleText::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetParticleText* _this = reinterpret_cast< CUserMsg_ParticleManager_SetParticleText* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetParticleText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetParticleText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetParticleText::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetParticleText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetParticleText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMsg_ParticleManager.SetParticleText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetParticleText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetParticleText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMsg_ParticleManager.SetParticleText.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetParticleText)
  return target;
}

size_t CUserMsg_ParticleManager_SetParticleText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetParticleText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetParticleText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetParticleText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetParticleText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetParticleText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetParticleText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetParticleText)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetParticleText::MergeFrom(const CUserMsg_ParticleManager_SetParticleText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetParticleText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_set_text(from._internal_text());
  }
}

void CUserMsg_ParticleManager_SetParticleText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetParticleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetParticleText::CopyFrom(const CUserMsg_ParticleManager_SetParticleText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetParticleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetParticleText::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetParticleText::InternalSwap(CUserMsg_ParticleManager_SetParticleText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetParticleText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetTextureAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetTextureAttribute>()._has_bits_);
  static void set_has_attribute_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_texture_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMsg_ParticleManager_SetTextureAttribute::CUserMsg_ParticleManager_SetTextureAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetTextureAttribute)
}
CUserMsg_ParticleManager_SetTextureAttribute::CUserMsg_ParticleManager_SetTextureAttribute(const CUserMsg_ParticleManager_SetTextureAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attribute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attribute_name()) {
    attribute_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attribute_name(), 
      GetArena());
  }
  texture_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_texture_name()) {
    texture_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_texture_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetTextureAttribute)
}

void CUserMsg_ParticleManager_SetTextureAttribute::SharedCtor() {
attribute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
texture_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserMsg_ParticleManager_SetTextureAttribute::~CUserMsg_ParticleManager_SetTextureAttribute() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetTextureAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetTextureAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  attribute_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_ParticleManager_SetTextureAttribute::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetTextureAttribute* _this = reinterpret_cast< CUserMsg_ParticleManager_SetTextureAttribute* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetTextureAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetTextureAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetTextureAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetTextureAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      attribute_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      texture_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetTextureAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string attribute_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_attribute_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMsg_ParticleManager.SetTextureAttribute.attribute_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string texture_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_texture_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMsg_ParticleManager.SetTextureAttribute.texture_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetTextureAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetTextureAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string attribute_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attribute_name().data(), static_cast<int>(this->_internal_attribute_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMsg_ParticleManager.SetTextureAttribute.attribute_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_attribute_name(), target);
  }

  // optional string texture_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_texture_name().data(), static_cast<int>(this->_internal_texture_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMsg_ParticleManager.SetTextureAttribute.texture_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_texture_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetTextureAttribute)
  return target;
}

size_t CUserMsg_ParticleManager_SetTextureAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetTextureAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string attribute_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attribute_name());
    }

    // optional string texture_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_texture_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetTextureAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetTextureAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetTextureAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetTextureAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetTextureAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetTextureAttribute)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetTextureAttribute::MergeFrom(const CUserMsg_ParticleManager_SetTextureAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetTextureAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attribute_name(from._internal_attribute_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_texture_name(from._internal_texture_name());
    }
  }
}

void CUserMsg_ParticleManager_SetTextureAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetTextureAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetTextureAttribute::CopyFrom(const CUserMsg_ParticleManager_SetTextureAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetTextureAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetTextureAttribute::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetTextureAttribute::InternalSwap(CUserMsg_ParticleManager_SetTextureAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_name_.Swap(&other->attribute_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  texture_name_.Swap(&other->texture_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetTextureAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetSceneObjectGenericFlag::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetSceneObjectGenericFlag>()._has_bits_);
  static void set_has_flag_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_ParticleManager_SetSceneObjectGenericFlag::CUserMsg_ParticleManager_SetSceneObjectGenericFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
}
CUserMsg_ParticleManager_SetSceneObjectGenericFlag::CUserMsg_ParticleManager_SetSceneObjectGenericFlag(const CUserMsg_ParticleManager_SetSceneObjectGenericFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_value_ = from.flag_value_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::SharedCtor() {
flag_value_ = false;
}

CUserMsg_ParticleManager_SetSceneObjectGenericFlag::~CUserMsg_ParticleManager_SetSceneObjectGenericFlag() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetSceneObjectGenericFlag* _this = reinterpret_cast< CUserMsg_ParticleManager_SetSceneObjectGenericFlag* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flag_value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetSceneObjectGenericFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool flag_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag_value(&has_bits);
          flag_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetSceneObjectGenericFlag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool flag_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  return target;
}

size_t CUserMsg_ParticleManager_SetSceneObjectGenericFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool flag_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetSceneObjectGenericFlag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetSceneObjectGenericFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::MergeFrom(const CUserMsg_ParticleManager_SetSceneObjectGenericFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flag_value()) {
    _internal_set_flag_value(from._internal_flag_value());
  }
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::CopyFrom(const CUserMsg_ParticleManager_SetSceneObjectGenericFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetSceneObjectGenericFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetSceneObjectGenericFlag::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetSceneObjectGenericFlag::InternalSwap(CUserMsg_ParticleManager_SetSceneObjectGenericFlag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(flag_value_, other->flag_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetSceneObjectGenericFlag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager_SetSceneObjectTintAndDesat>()._has_bits_);
  static void set_has_tint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
}
CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat(const CUserMsg_ParticleManager_SetSceneObjectTintAndDesat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tint_, &from.tint_,
    static_cast<size_t>(reinterpret_cast<char*>(&desat_) -
    reinterpret_cast<char*>(&tint_)) + sizeof(desat_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&desat_) -
    reinterpret_cast<char*>(&tint_)) + sizeof(desat_));
}

CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::~CUserMsg_ParticleManager_SetSceneObjectTintAndDesat() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::ArenaDtor(void* object) {
  CUserMsg_ParticleManager_SetSceneObjectTintAndDesat* _this = reinterpret_cast< CUserMsg_ParticleManager_SetSceneObjectTintAndDesat* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desat_) -
        reinterpret_cast<char*>(&tint_)) + sizeof(desat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 tint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tint(&has_bits);
          tint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional float desat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_desat(&has_bits);
          desat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 tint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_tint(), target);
  }

  // optional float desat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_desat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  return target;
}

size_t CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 tint = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float desat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetSceneObjectTintAndDesat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager_SetSceneObjectTintAndDesat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::MergeFrom(const CUserMsg_ParticleManager_SetSceneObjectTintAndDesat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tint_ = from.tint_;
    }
    if (cached_has_bits & 0x00000002u) {
      desat_ = from.desat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::CopyFrom(const CUserMsg_ParticleManager_SetSceneObjectTintAndDesat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager.SetSceneObjectTintAndDesat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::InternalSwap(CUserMsg_ParticleManager_SetSceneObjectTintAndDesat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_SetSceneObjectTintAndDesat, desat_)
      + sizeof(CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::desat_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager_SetSceneObjectTintAndDesat, tint_)>(
          reinterpret_cast<char*>(&tint_),
          reinterpret_cast<char*>(&other->tint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_ParticleManager::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_ParticleManager>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::CUserMsg_ParticleManager_ReleaseParticleIndex& release_particle_index(const CUserMsg_ParticleManager* msg);
  static void set_has_release_particle_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CUserMsg_ParticleManager_CreateParticle& create_particle(const CUserMsg_ParticleManager* msg);
  static void set_has_create_particle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CUserMsg_ParticleManager_DestroyParticle& destroy_particle(const CUserMsg_ParticleManager* msg);
  static void set_has_destroy_particle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CUserMsg_ParticleManager_DestroyParticleInvolving& destroy_particle_involving(const CUserMsg_ParticleManager* msg);
  static void set_has_destroy_particle_involving(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticle& update_particle(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticleFwd& update_particle_fwd(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_fwd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticleOrient& update_particle_orient(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_orient(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticleFallback& update_particle_fallback(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_fallback(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticleOffset& update_particle_offset(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticleEnt& update_particle_ent(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_ent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticleShouldDraw& update_particle_should_draw(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_should_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CUserMsg_ParticleManager_UpdateParticleSetFrozen& update_particle_set_frozen(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_set_frozen(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CUserMsg_ParticleManager_ChangeControlPointAttachment& change_control_point_attachment(const CUserMsg_ParticleManager* msg);
  static void set_has_change_control_point_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CUserMsg_ParticleManager_UpdateEntityPosition& update_entity_position(const CUserMsg_ParticleManager* msg);
  static void set_has_update_entity_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::CUserMsg_ParticleManager_SetParticleFoWProperties& set_particle_fow_properties(const CUserMsg_ParticleManager* msg);
  static void set_has_set_particle_fow_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::CUserMsg_ParticleManager_SetParticleText& set_particle_text(const CUserMsg_ParticleManager* msg);
  static void set_has_set_particle_text(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::CUserMsg_ParticleManager_SetParticleShouldCheckFoW& set_particle_should_check_fow(const CUserMsg_ParticleManager* msg);
  static void set_has_set_particle_should_check_fow(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::CUserMsg_ParticleManager_SetControlPointModel& set_control_point_model(const CUserMsg_ParticleManager* msg);
  static void set_has_set_control_point_model(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CUserMsg_ParticleManager_SetControlPointSnapshot& set_control_point_snapshot(const CUserMsg_ParticleManager* msg);
  static void set_has_set_control_point_snapshot(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::CUserMsg_ParticleManager_SetTextureAttribute& set_texture_attribute(const CUserMsg_ParticleManager* msg);
  static void set_has_set_texture_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::CUserMsg_ParticleManager_SetSceneObjectGenericFlag& set_scene_object_generic_flag(const CUserMsg_ParticleManager* msg);
  static void set_has_set_scene_object_generic_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat& set_scene_object_tint_and_desat(const CUserMsg_ParticleManager* msg);
  static void set_has_set_scene_object_tint_and_desat(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::CUserMsg_ParticleManager_DestroyParticleNamed& destroy_particle_named(const CUserMsg_ParticleManager* msg);
  static void set_has_destroy_particle_named(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x01800000) ^ 0x01800000) != 0;
  }
};

const ::CUserMsg_ParticleManager_ReleaseParticleIndex&
CUserMsg_ParticleManager::_Internal::release_particle_index(const CUserMsg_ParticleManager* msg) {
  return *msg->release_particle_index_;
}
const ::CUserMsg_ParticleManager_CreateParticle&
CUserMsg_ParticleManager::_Internal::create_particle(const CUserMsg_ParticleManager* msg) {
  return *msg->create_particle_;
}
const ::CUserMsg_ParticleManager_DestroyParticle&
CUserMsg_ParticleManager::_Internal::destroy_particle(const CUserMsg_ParticleManager* msg) {
  return *msg->destroy_particle_;
}
const ::CUserMsg_ParticleManager_DestroyParticleInvolving&
CUserMsg_ParticleManager::_Internal::destroy_particle_involving(const CUserMsg_ParticleManager* msg) {
  return *msg->destroy_particle_involving_;
}
const ::CUserMsg_ParticleManager_UpdateParticle&
CUserMsg_ParticleManager::_Internal::update_particle(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_;
}
const ::CUserMsg_ParticleManager_UpdateParticleFwd&
CUserMsg_ParticleManager::_Internal::update_particle_fwd(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_fwd_;
}
const ::CUserMsg_ParticleManager_UpdateParticleOrient&
CUserMsg_ParticleManager::_Internal::update_particle_orient(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_orient_;
}
const ::CUserMsg_ParticleManager_UpdateParticleFallback&
CUserMsg_ParticleManager::_Internal::update_particle_fallback(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_fallback_;
}
const ::CUserMsg_ParticleManager_UpdateParticleOffset&
CUserMsg_ParticleManager::_Internal::update_particle_offset(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_offset_;
}
const ::CUserMsg_ParticleManager_UpdateParticleEnt&
CUserMsg_ParticleManager::_Internal::update_particle_ent(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_ent_;
}
const ::CUserMsg_ParticleManager_UpdateParticleShouldDraw&
CUserMsg_ParticleManager::_Internal::update_particle_should_draw(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_should_draw_;
}
const ::CUserMsg_ParticleManager_UpdateParticleSetFrozen&
CUserMsg_ParticleManager::_Internal::update_particle_set_frozen(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_set_frozen_;
}
const ::CUserMsg_ParticleManager_ChangeControlPointAttachment&
CUserMsg_ParticleManager::_Internal::change_control_point_attachment(const CUserMsg_ParticleManager* msg) {
  return *msg->change_control_point_attachment_;
}
const ::CUserMsg_ParticleManager_UpdateEntityPosition&
CUserMsg_ParticleManager::_Internal::update_entity_position(const CUserMsg_ParticleManager* msg) {
  return *msg->update_entity_position_;
}
const ::CUserMsg_ParticleManager_SetParticleFoWProperties&
CUserMsg_ParticleManager::_Internal::set_particle_fow_properties(const CUserMsg_ParticleManager* msg) {
  return *msg->set_particle_fow_properties_;
}
const ::CUserMsg_ParticleManager_SetParticleText&
CUserMsg_ParticleManager::_Internal::set_particle_text(const CUserMsg_ParticleManager* msg) {
  return *msg->set_particle_text_;
}
const ::CUserMsg_ParticleManager_SetParticleShouldCheckFoW&
CUserMsg_ParticleManager::_Internal::set_particle_should_check_fow(const CUserMsg_ParticleManager* msg) {
  return *msg->set_particle_should_check_fow_;
}
const ::CUserMsg_ParticleManager_SetControlPointModel&
CUserMsg_ParticleManager::_Internal::set_control_point_model(const CUserMsg_ParticleManager* msg) {
  return *msg->set_control_point_model_;
}
const ::CUserMsg_ParticleManager_SetControlPointSnapshot&
CUserMsg_ParticleManager::_Internal::set_control_point_snapshot(const CUserMsg_ParticleManager* msg) {
  return *msg->set_control_point_snapshot_;
}
const ::CUserMsg_ParticleManager_SetTextureAttribute&
CUserMsg_ParticleManager::_Internal::set_texture_attribute(const CUserMsg_ParticleManager* msg) {
  return *msg->set_texture_attribute_;
}
const ::CUserMsg_ParticleManager_SetSceneObjectGenericFlag&
CUserMsg_ParticleManager::_Internal::set_scene_object_generic_flag(const CUserMsg_ParticleManager* msg) {
  return *msg->set_scene_object_generic_flag_;
}
const ::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat&
CUserMsg_ParticleManager::_Internal::set_scene_object_tint_and_desat(const CUserMsg_ParticleManager* msg) {
  return *msg->set_scene_object_tint_and_desat_;
}
const ::CUserMsg_ParticleManager_DestroyParticleNamed&
CUserMsg_ParticleManager::_Internal::destroy_particle_named(const CUserMsg_ParticleManager* msg) {
  return *msg->destroy_particle_named_;
}
CUserMsg_ParticleManager::CUserMsg_ParticleManager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_ParticleManager)
}
CUserMsg_ParticleManager::CUserMsg_ParticleManager(const CUserMsg_ParticleManager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_release_particle_index()) {
    release_particle_index_ = new ::CUserMsg_ParticleManager_ReleaseParticleIndex(*from.release_particle_index_);
  } else {
    release_particle_index_ = nullptr;
  }
  if (from._internal_has_create_particle()) {
    create_particle_ = new ::CUserMsg_ParticleManager_CreateParticle(*from.create_particle_);
  } else {
    create_particle_ = nullptr;
  }
  if (from._internal_has_destroy_particle()) {
    destroy_particle_ = new ::CUserMsg_ParticleManager_DestroyParticle(*from.destroy_particle_);
  } else {
    destroy_particle_ = nullptr;
  }
  if (from._internal_has_destroy_particle_involving()) {
    destroy_particle_involving_ = new ::CUserMsg_ParticleManager_DestroyParticleInvolving(*from.destroy_particle_involving_);
  } else {
    destroy_particle_involving_ = nullptr;
  }
  if (from._internal_has_update_particle()) {
    update_particle_ = new ::CUserMsg_ParticleManager_UpdateParticle(*from.update_particle_);
  } else {
    update_particle_ = nullptr;
  }
  if (from._internal_has_update_particle_fwd()) {
    update_particle_fwd_ = new ::CUserMsg_ParticleManager_UpdateParticleFwd(*from.update_particle_fwd_);
  } else {
    update_particle_fwd_ = nullptr;
  }
  if (from._internal_has_update_particle_orient()) {
    update_particle_orient_ = new ::CUserMsg_ParticleManager_UpdateParticleOrient(*from.update_particle_orient_);
  } else {
    update_particle_orient_ = nullptr;
  }
  if (from._internal_has_update_particle_fallback()) {
    update_particle_fallback_ = new ::CUserMsg_ParticleManager_UpdateParticleFallback(*from.update_particle_fallback_);
  } else {
    update_particle_fallback_ = nullptr;
  }
  if (from._internal_has_update_particle_offset()) {
    update_particle_offset_ = new ::CUserMsg_ParticleManager_UpdateParticleOffset(*from.update_particle_offset_);
  } else {
    update_particle_offset_ = nullptr;
  }
  if (from._internal_has_update_particle_ent()) {
    update_particle_ent_ = new ::CUserMsg_ParticleManager_UpdateParticleEnt(*from.update_particle_ent_);
  } else {
    update_particle_ent_ = nullptr;
  }
  if (from._internal_has_update_particle_should_draw()) {
    update_particle_should_draw_ = new ::CUserMsg_ParticleManager_UpdateParticleShouldDraw(*from.update_particle_should_draw_);
  } else {
    update_particle_should_draw_ = nullptr;
  }
  if (from._internal_has_update_particle_set_frozen()) {
    update_particle_set_frozen_ = new ::CUserMsg_ParticleManager_UpdateParticleSetFrozen(*from.update_particle_set_frozen_);
  } else {
    update_particle_set_frozen_ = nullptr;
  }
  if (from._internal_has_change_control_point_attachment()) {
    change_control_point_attachment_ = new ::CUserMsg_ParticleManager_ChangeControlPointAttachment(*from.change_control_point_attachment_);
  } else {
    change_control_point_attachment_ = nullptr;
  }
  if (from._internal_has_update_entity_position()) {
    update_entity_position_ = new ::CUserMsg_ParticleManager_UpdateEntityPosition(*from.update_entity_position_);
  } else {
    update_entity_position_ = nullptr;
  }
  if (from._internal_has_set_particle_fow_properties()) {
    set_particle_fow_properties_ = new ::CUserMsg_ParticleManager_SetParticleFoWProperties(*from.set_particle_fow_properties_);
  } else {
    set_particle_fow_properties_ = nullptr;
  }
  if (from._internal_has_set_particle_text()) {
    set_particle_text_ = new ::CUserMsg_ParticleManager_SetParticleText(*from.set_particle_text_);
  } else {
    set_particle_text_ = nullptr;
  }
  if (from._internal_has_set_particle_should_check_fow()) {
    set_particle_should_check_fow_ = new ::CUserMsg_ParticleManager_SetParticleShouldCheckFoW(*from.set_particle_should_check_fow_);
  } else {
    set_particle_should_check_fow_ = nullptr;
  }
  if (from._internal_has_set_control_point_model()) {
    set_control_point_model_ = new ::CUserMsg_ParticleManager_SetControlPointModel(*from.set_control_point_model_);
  } else {
    set_control_point_model_ = nullptr;
  }
  if (from._internal_has_set_control_point_snapshot()) {
    set_control_point_snapshot_ = new ::CUserMsg_ParticleManager_SetControlPointSnapshot(*from.set_control_point_snapshot_);
  } else {
    set_control_point_snapshot_ = nullptr;
  }
  if (from._internal_has_set_texture_attribute()) {
    set_texture_attribute_ = new ::CUserMsg_ParticleManager_SetTextureAttribute(*from.set_texture_attribute_);
  } else {
    set_texture_attribute_ = nullptr;
  }
  if (from._internal_has_set_scene_object_generic_flag()) {
    set_scene_object_generic_flag_ = new ::CUserMsg_ParticleManager_SetSceneObjectGenericFlag(*from.set_scene_object_generic_flag_);
  } else {
    set_scene_object_generic_flag_ = nullptr;
  }
  if (from._internal_has_set_scene_object_tint_and_desat()) {
    set_scene_object_tint_and_desat_ = new ::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat(*from.set_scene_object_tint_and_desat_);
  } else {
    set_scene_object_tint_and_desat_ = nullptr;
  }
  if (from._internal_has_destroy_particle_named()) {
    destroy_particle_named_ = new ::CUserMsg_ParticleManager_DestroyParticleNamed(*from.destroy_particle_named_);
  } else {
    destroy_particle_named_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager)
}

void CUserMsg_ParticleManager::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&release_particle_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&release_particle_index_)) + sizeof(index_));
}

CUserMsg_ParticleManager::~CUserMsg_ParticleManager() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_ParticleManager::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete release_particle_index_;
  if (this != internal_default_instance()) delete create_particle_;
  if (this != internal_default_instance()) delete destroy_particle_;
  if (this != internal_default_instance()) delete destroy_particle_involving_;
  if (this != internal_default_instance()) delete update_particle_;
  if (this != internal_default_instance()) delete update_particle_fwd_;
  if (this != internal_default_instance()) delete update_particle_orient_;
  if (this != internal_default_instance()) delete update_particle_fallback_;
  if (this != internal_default_instance()) delete update_particle_offset_;
  if (this != internal_default_instance()) delete update_particle_ent_;
  if (this != internal_default_instance()) delete update_particle_should_draw_;
  if (this != internal_default_instance()) delete update_particle_set_frozen_;
  if (this != internal_default_instance()) delete change_control_point_attachment_;
  if (this != internal_default_instance()) delete update_entity_position_;
  if (this != internal_default_instance()) delete set_particle_fow_properties_;
  if (this != internal_default_instance()) delete set_particle_text_;
  if (this != internal_default_instance()) delete set_particle_should_check_fow_;
  if (this != internal_default_instance()) delete set_control_point_model_;
  if (this != internal_default_instance()) delete set_control_point_snapshot_;
  if (this != internal_default_instance()) delete set_texture_attribute_;
  if (this != internal_default_instance()) delete set_scene_object_generic_flag_;
  if (this != internal_default_instance()) delete set_scene_object_tint_and_desat_;
  if (this != internal_default_instance()) delete destroy_particle_named_;
}

void CUserMsg_ParticleManager::ArenaDtor(void* object) {
  CUserMsg_ParticleManager* _this = reinterpret_cast< CUserMsg_ParticleManager* >(object);
  (void)_this;
}
void CUserMsg_ParticleManager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_ParticleManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_ParticleManager::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_ParticleManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(release_particle_index_ != nullptr);
      release_particle_index_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(create_particle_ != nullptr);
      create_particle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(destroy_particle_ != nullptr);
      destroy_particle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(destroy_particle_involving_ != nullptr);
      destroy_particle_involving_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(update_particle_ != nullptr);
      update_particle_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(update_particle_fwd_ != nullptr);
      update_particle_fwd_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(update_particle_orient_ != nullptr);
      update_particle_orient_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(update_particle_fallback_ != nullptr);
      update_particle_fallback_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(update_particle_offset_ != nullptr);
      update_particle_offset_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(update_particle_ent_ != nullptr);
      update_particle_ent_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(update_particle_should_draw_ != nullptr);
      update_particle_should_draw_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(update_particle_set_frozen_ != nullptr);
      update_particle_set_frozen_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(change_control_point_attachment_ != nullptr);
      change_control_point_attachment_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(update_entity_position_ != nullptr);
      update_entity_position_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(set_particle_fow_properties_ != nullptr);
      set_particle_fow_properties_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(set_particle_text_ != nullptr);
      set_particle_text_->Clear();
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(set_particle_should_check_fow_ != nullptr);
      set_particle_should_check_fow_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(set_control_point_model_ != nullptr);
      set_control_point_model_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(set_control_point_snapshot_ != nullptr);
      set_control_point_snapshot_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(set_texture_attribute_ != nullptr);
      set_texture_attribute_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(set_scene_object_generic_flag_ != nullptr);
      set_scene_object_generic_flag_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(set_scene_object_tint_and_desat_ != nullptr);
      set_scene_object_tint_and_desat_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(destroy_particle_named_ != nullptr);
      destroy_particle_named_->Clear();
    }
  }
  type_ = 0;
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_ParticleManager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PARTICLE_MESSAGE_IsValid(val))) {
            _internal_set_type(static_cast<::PARTICLE_MESSAGE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_particle_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_particle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy_particle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy_particle_involving(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_fwd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_orient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_fallback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_ent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_should_draw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_set_frozen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_control_point_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_entity_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_particle_fow_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_particle_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_particle_should_check_fow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetControlPointModel set_control_point_model = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_control_point_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetControlPointSnapshot set_control_point_snapshot = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_control_point_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetTextureAttribute set_texture_attribute = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_texture_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetSceneObjectGenericFlag set_scene_object_generic_flag = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_scene_object_generic_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.SetSceneObjectTintAndDesat set_scene_object_tint_and_desat = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_scene_object_tint_and_desat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMsg_ParticleManager.DestroyParticleNamed destroy_particle_named = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy_particle_named(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 1616u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_ParticleManager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional .CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::release_particle_index(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::create_particle(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::destroy_particle(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::destroy_particle_involving(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::update_particle(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::update_particle_fwd(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::update_particle_orient(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::update_particle_fallback(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::update_particle_offset(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::update_particle_ent(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::update_particle_should_draw(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::update_particle_set_frozen(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::change_control_point_attachment(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::update_entity_position(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::set_particle_fow_properties(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::set_particle_text(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::set_particle_should_check_fow(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetControlPointModel set_control_point_model = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::set_control_point_model(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetControlPointSnapshot set_control_point_snapshot = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::set_control_point_snapshot(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetTextureAttribute set_texture_attribute = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::set_texture_attribute(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetSceneObjectGenericFlag set_scene_object_generic_flag = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::set_scene_object_generic_flag(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.SetSceneObjectTintAndDesat set_scene_object_tint_and_desat = 25;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::set_scene_object_tint_and_desat(this), target, stream);
  }

  // optional .CUserMsg_ParticleManager.DestroyParticleNamed destroy_particle_named = 26;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::destroy_particle_named(this), target, stream);
  }

  // Extension range [100, 202)
  target = _extensions_._InternalSerialize(
      100, 202, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager)
  return target;
}

size_t CUserMsg_ParticleManager::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CUserMsg_ParticleManager)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t CUserMsg_ParticleManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_ParticleManager)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (((_has_bits_[0] & 0x01800000) ^ 0x01800000) == 0) {  // All required fields are present.
    // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_particle_index_);
    }

    // optional .CUserMsg_ParticleManager.CreateParticle create_particle = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *create_particle_);
    }

    // optional .CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destroy_particle_);
    }

    // optional .CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destroy_particle_involving_);
    }

    // optional .CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_);
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_fwd_);
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_orient_);
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_fallback_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_offset_);
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_ent_);
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_should_draw_);
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_particle_set_frozen_);
    }

    // optional .CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_control_point_attachment_);
    }

    // optional .CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_entity_position_);
    }

    // optional .CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_particle_fow_properties_);
    }

    // optional .CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_particle_text_);
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional .CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_particle_should_check_fow_);
    }

    // optional .CUserMsg_ParticleManager.SetControlPointModel set_control_point_model = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_control_point_model_);
    }

    // optional .CUserMsg_ParticleManager.SetControlPointSnapshot set_control_point_snapshot = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_control_point_snapshot_);
    }

    // optional .CUserMsg_ParticleManager.SetTextureAttribute set_texture_attribute = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_texture_attribute_);
    }

    // optional .CUserMsg_ParticleManager.SetSceneObjectGenericFlag set_scene_object_generic_flag = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_scene_object_generic_flag_);
    }

    // optional .CUserMsg_ParticleManager.SetSceneObjectTintAndDesat set_scene_object_tint_and_desat = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_scene_object_tint_and_desat_);
    }

    // optional .CUserMsg_ParticleManager.DestroyParticleNamed destroy_particle_named = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destroy_particle_named_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_ParticleManager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_ParticleManager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_ParticleManager)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager::MergeFrom(const CUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_release_particle_index()->::CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(from._internal_release_particle_index());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_create_particle()->::CUserMsg_ParticleManager_CreateParticle::MergeFrom(from._internal_create_particle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_destroy_particle()->::CUserMsg_ParticleManager_DestroyParticle::MergeFrom(from._internal_destroy_particle());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_destroy_particle_involving()->::CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(from._internal_destroy_particle_involving());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_update_particle()->::CUserMsg_ParticleManager_UpdateParticle::MergeFrom(from._internal_update_particle());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_update_particle_fwd()->::CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(from._internal_update_particle_fwd());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_update_particle_orient()->::CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(from._internal_update_particle_orient());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_update_particle_fallback()->::CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(from._internal_update_particle_fallback());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_update_particle_offset()->::CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(from._internal_update_particle_offset());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_update_particle_ent()->::CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(from._internal_update_particle_ent());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_update_particle_should_draw()->::CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(from._internal_update_particle_should_draw());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_update_particle_set_frozen()->::CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(from._internal_update_particle_set_frozen());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_change_control_point_attachment()->::CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(from._internal_change_control_point_attachment());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_update_entity_position()->::CUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(from._internal_update_entity_position());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_set_particle_fow_properties()->::CUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(from._internal_set_particle_fow_properties());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_set_particle_text()->::CUserMsg_ParticleManager_SetParticleText::MergeFrom(from._internal_set_particle_text());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_set_particle_should_check_fow()->::CUserMsg_ParticleManager_SetParticleShouldCheckFoW::MergeFrom(from._internal_set_particle_should_check_fow());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_set_control_point_model()->::CUserMsg_ParticleManager_SetControlPointModel::MergeFrom(from._internal_set_control_point_model());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_set_control_point_snapshot()->::CUserMsg_ParticleManager_SetControlPointSnapshot::MergeFrom(from._internal_set_control_point_snapshot());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_set_texture_attribute()->::CUserMsg_ParticleManager_SetTextureAttribute::MergeFrom(from._internal_set_texture_attribute());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_set_scene_object_generic_flag()->::CUserMsg_ParticleManager_SetSceneObjectGenericFlag::MergeFrom(from._internal_set_scene_object_generic_flag());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_set_scene_object_tint_and_desat()->::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat::MergeFrom(from._internal_set_scene_object_tint_and_desat());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_destroy_particle_named()->::CUserMsg_ParticleManager_DestroyParticleNamed::MergeFrom(from._internal_destroy_particle_named());
    }
    if (cached_has_bits & 0x00800000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_index(from._internal_index());
  }
}

void CUserMsg_ParticleManager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager::CopyFrom(const CUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CUserMsg_ParticleManager::InternalSwap(CUserMsg_ParticleManager* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager, index_)
      + sizeof(CUserMsg_ParticleManager::index_)
      - PROTOBUF_FIELD_OFFSET(CUserMsg_ParticleManager, release_particle_index_)>(
          reinterpret_cast<char*>(&release_particle_index_),
          reinterpret_cast<char*>(&other->release_particle_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_ParticleManager::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_HudError::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_HudError>()._has_bits_);
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMsg_HudError::CUserMsg_HudError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_HudError)
}
CUserMsg_HudError::CUserMsg_HudError(const CUserMsg_HudError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:CUserMsg_HudError)
}

void CUserMsg_HudError::SharedCtor() {
order_id_ = 0;
}

CUserMsg_HudError::~CUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:CUserMsg_HudError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_HudError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMsg_HudError::ArenaDtor(void* object) {
  CUserMsg_HudError* _this = reinterpret_cast< CUserMsg_HudError* >(object);
  (void)_this;
}
void CUserMsg_HudError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_HudError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_HudError::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_HudError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_HudError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_order_id(&has_bits);
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_HudError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_HudError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_HudError)
  return target;
}

size_t CUserMsg_HudError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_HudError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 order_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_HudError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_HudError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_HudError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_HudError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_HudError)
    MergeFrom(*source);
  }
}

void CUserMsg_HudError::MergeFrom(const CUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order_id()) {
    _internal_set_order_id(from._internal_order_id());
  }
}

void CUserMsg_HudError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_HudError::CopyFrom(const CUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_HudError::IsInitialized() const {
  return true;
}

void CUserMsg_HudError::InternalSwap(CUserMsg_HudError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(order_id_, other->order_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_HudError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMsg_CustomGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMsg_CustomGameEvent>()._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMsg_CustomGameEvent)
}
CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent(const CUserMsg_CustomGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_name()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserMsg_CustomGameEvent)
}

void CUserMsg_CustomGameEvent::SharedCtor() {
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserMsg_CustomGameEvent::~CUserMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:CUserMsg_CustomGameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMsg_CustomGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_CustomGameEvent::ArenaDtor(void* object) {
  CUserMsg_CustomGameEvent* _this = reinterpret_cast< CUserMsg_CustomGameEvent* >(object);
  (void)_this;
}
void CUserMsg_CustomGameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMsg_CustomGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMsg_CustomGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMsg_CustomGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMsg_CustomGameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserMsg_CustomGameEvent.event_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMsg_CustomGameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_CustomGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserMsg_CustomGameEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_CustomGameEvent)
  return target;
}

size_t CUserMsg_CustomGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMsg_CustomGameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_CustomGameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_CustomGameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMsg_CustomGameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMsg_CustomGameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMsg_CustomGameEvent)
    MergeFrom(*source);
  }
}

void CUserMsg_CustomGameEvent::MergeFrom(const CUserMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
  }
}

void CUserMsg_CustomGameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_CustomGameEvent::CopyFrom(const CUserMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_CustomGameEvent::IsInitialized() const {
  return true;
}

void CUserMsg_CustomGameEvent::InternalSwap(CUserMsg_CustomGameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMsg_CustomGameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageHapticsManagerPulse::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageHapticsManagerPulse>()._has_bits_);
  static void set_has_hand_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect_amplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_effect_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_effect_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageHapticsManagerPulse::CUserMessageHapticsManagerPulse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageHapticsManagerPulse)
}
CUserMessageHapticsManagerPulse::CUserMessageHapticsManagerPulse(const CUserMessageHapticsManagerPulse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hand_id_, &from.hand_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_duration_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(effect_duration_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageHapticsManagerPulse)
}

void CUserMessageHapticsManagerPulse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hand_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&effect_duration_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(effect_duration_));
}

CUserMessageHapticsManagerPulse::~CUserMessageHapticsManagerPulse() {
  // @@protoc_insertion_point(destructor:CUserMessageHapticsManagerPulse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageHapticsManagerPulse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageHapticsManagerPulse::ArenaDtor(void* object) {
  CUserMessageHapticsManagerPulse* _this = reinterpret_cast< CUserMessageHapticsManagerPulse* >(object);
  (void)_this;
}
void CUserMessageHapticsManagerPulse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageHapticsManagerPulse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageHapticsManagerPulse::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageHapticsManagerPulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hand_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_duration_) -
        reinterpret_cast<char*>(&hand_id_)) + sizeof(effect_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageHapticsManagerPulse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 hand_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hand_id(&has_bits);
          hand_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float effect_amplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_effect_amplitude(&has_bits);
          effect_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float effect_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_effect_frequency(&has_bits);
          effect_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float effect_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_effect_duration(&has_bits);
          effect_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageHapticsManagerPulse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHapticsManagerPulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hand_id(), target);
  }

  // optional float effect_amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_effect_amplitude(), target);
  }

  // optional float effect_frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_effect_frequency(), target);
  }

  // optional float effect_duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_effect_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHapticsManagerPulse)
  return target;
}

size_t CUserMessageHapticsManagerPulse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageHapticsManagerPulse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 hand_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hand_id());
    }

    // optional float effect_amplitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float effect_frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float effect_duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHapticsManagerPulse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageHapticsManagerPulse)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHapticsManagerPulse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageHapticsManagerPulse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageHapticsManagerPulse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageHapticsManagerPulse)
    MergeFrom(*source);
  }
}

void CUserMessageHapticsManagerPulse::MergeFrom(const CUserMessageHapticsManagerPulse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageHapticsManagerPulse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hand_id_ = from.hand_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      effect_amplitude_ = from.effect_amplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      effect_frequency_ = from.effect_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      effect_duration_ = from.effect_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHapticsManagerPulse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageHapticsManagerPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHapticsManagerPulse::CopyFrom(const CUserMessageHapticsManagerPulse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageHapticsManagerPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHapticsManagerPulse::IsInitialized() const {
  return true;
}

void CUserMessageHapticsManagerPulse::InternalSwap(CUserMessageHapticsManagerPulse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageHapticsManagerPulse, effect_duration_)
      + sizeof(CUserMessageHapticsManagerPulse::effect_duration_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageHapticsManagerPulse, hand_id_)>(
          reinterpret_cast<char*>(&hand_id_),
          reinterpret_cast<char*>(&other->hand_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageHapticsManagerPulse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageHapticsManagerEffect::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageHapticsManagerEffect>()._has_bits_);
  static void set_has_hand_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect_name_hash_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_effect_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CUserMessageHapticsManagerEffect::CUserMessageHapticsManagerEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageHapticsManagerEffect)
}
CUserMessageHapticsManagerEffect::CUserMessageHapticsManagerEffect(const CUserMessageHapticsManagerEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hand_id_, &from.hand_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_scale_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(effect_scale_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageHapticsManagerEffect)
}

void CUserMessageHapticsManagerEffect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hand_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&effect_scale_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(effect_scale_));
}

CUserMessageHapticsManagerEffect::~CUserMessageHapticsManagerEffect() {
  // @@protoc_insertion_point(destructor:CUserMessageHapticsManagerEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageHapticsManagerEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageHapticsManagerEffect::ArenaDtor(void* object) {
  CUserMessageHapticsManagerEffect* _this = reinterpret_cast< CUserMessageHapticsManagerEffect* >(object);
  (void)_this;
}
void CUserMessageHapticsManagerEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageHapticsManagerEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageHapticsManagerEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageHapticsManagerEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hand_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_scale_) -
        reinterpret_cast<char*>(&hand_id_)) + sizeof(effect_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageHapticsManagerEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 hand_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hand_id(&has_bits);
          hand_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 effect_name_hash_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_effect_name_hash_code(&has_bits);
          effect_name_hash_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float effect_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_effect_scale(&has_bits);
          effect_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageHapticsManagerEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHapticsManagerEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hand_id(), target);
  }

  // optional uint32 effect_name_hash_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_effect_name_hash_code(), target);
  }

  // optional float effect_scale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_effect_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHapticsManagerEffect)
  return target;
}

size_t CUserMessageHapticsManagerEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageHapticsManagerEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 hand_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hand_id());
    }

    // optional uint32 effect_name_hash_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_effect_name_hash_code());
    }

    // optional float effect_scale = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHapticsManagerEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageHapticsManagerEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHapticsManagerEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageHapticsManagerEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageHapticsManagerEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageHapticsManagerEffect)
    MergeFrom(*source);
  }
}

void CUserMessageHapticsManagerEffect::MergeFrom(const CUserMessageHapticsManagerEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageHapticsManagerEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hand_id_ = from.hand_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      effect_name_hash_code_ = from.effect_name_hash_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      effect_scale_ = from.effect_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHapticsManagerEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageHapticsManagerEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHapticsManagerEffect::CopyFrom(const CUserMessageHapticsManagerEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageHapticsManagerEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHapticsManagerEffect::IsInitialized() const {
  return true;
}

void CUserMessageHapticsManagerEffect::InternalSwap(CUserMessageHapticsManagerEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageHapticsManagerEffect, effect_scale_)
      + sizeof(CUserMessageHapticsManagerEffect::effect_scale_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageHapticsManagerEffect, hand_id_)>(
          reinterpret_cast<char*>(&hand_id_),
          reinterpret_cast<char*>(&other->hand_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageHapticsManagerEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageAnimStateGraphState::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageAnimStateGraphState>()._has_bits_);
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserMessageAnimStateGraphState::CUserMessageAnimStateGraphState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageAnimStateGraphState)
}
CUserMessageAnimStateGraphState::CUserMessageAnimStateGraphState(const CUserMessageAnimStateGraphState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  entity_index_ = from.entity_index_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageAnimStateGraphState)
}

void CUserMessageAnimStateGraphState::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entity_index_ = 0;
}

CUserMessageAnimStateGraphState::~CUserMessageAnimStateGraphState() {
  // @@protoc_insertion_point(destructor:CUserMessageAnimStateGraphState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageAnimStateGraphState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageAnimStateGraphState::ArenaDtor(void* object) {
  CUserMessageAnimStateGraphState* _this = reinterpret_cast< CUserMessageAnimStateGraphState* >(object);
  (void)_this;
}
void CUserMessageAnimStateGraphState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageAnimStateGraphState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageAnimStateGraphState::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageAnimStateGraphState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageAnimStateGraphState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entity_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entity_index(&has_bits);
          entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageAnimStateGraphState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageAnimStateGraphState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity_index(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageAnimStateGraphState)
  return target;
}

size_t CUserMessageAnimStateGraphState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageAnimStateGraphState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 entity_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAnimStateGraphState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageAnimStateGraphState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAnimStateGraphState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageAnimStateGraphState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageAnimStateGraphState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageAnimStateGraphState)
    MergeFrom(*source);
  }
}

void CUserMessageAnimStateGraphState::MergeFrom(const CUserMessageAnimStateGraphState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageAnimStateGraphState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      entity_index_ = from.entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageAnimStateGraphState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageAnimStateGraphState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAnimStateGraphState::CopyFrom(const CUserMessageAnimStateGraphState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageAnimStateGraphState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAnimStateGraphState::IsInitialized() const {
  return true;
}

void CUserMessageAnimStateGraphState::InternalSwap(CUserMessageAnimStateGraphState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(entity_index_, other->entity_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageAnimStateGraphState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCommandQueueState_command_queue_info_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCommandQueueState_command_queue_info_t>()._has_bits_);
  static void set_has_commands_queued(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_queue_desired_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starved_command_ticks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_dilation_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserMessageCommandQueueState_command_queue_info_t::CUserMessageCommandQueueState_command_queue_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCommandQueueState.command_queue_info_t)
}
CUserMessageCommandQueueState_command_queue_info_t::CUserMessageCommandQueueState_command_queue_info_t(const CUserMessageCommandQueueState_command_queue_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commands_queued_, &from.commands_queued_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_dilation_percent_) -
    reinterpret_cast<char*>(&commands_queued_)) + sizeof(time_dilation_percent_));
  // @@protoc_insertion_point(copy_constructor:CUserMessageCommandQueueState.command_queue_info_t)
}

void CUserMessageCommandQueueState_command_queue_info_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commands_queued_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_dilation_percent_) -
    reinterpret_cast<char*>(&commands_queued_)) + sizeof(time_dilation_percent_));
}

CUserMessageCommandQueueState_command_queue_info_t::~CUserMessageCommandQueueState_command_queue_info_t() {
  // @@protoc_insertion_point(destructor:CUserMessageCommandQueueState.command_queue_info_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCommandQueueState_command_queue_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserMessageCommandQueueState_command_queue_info_t::ArenaDtor(void* object) {
  CUserMessageCommandQueueState_command_queue_info_t* _this = reinterpret_cast< CUserMessageCommandQueueState_command_queue_info_t* >(object);
  (void)_this;
}
void CUserMessageCommandQueueState_command_queue_info_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCommandQueueState_command_queue_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCommandQueueState_command_queue_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCommandQueueState.command_queue_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&commands_queued_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_dilation_percent_) -
        reinterpret_cast<char*>(&commands_queued_)) + sizeof(time_dilation_percent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCommandQueueState_command_queue_info_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 commands_queued = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_commands_queued(&has_bits);
          commands_queued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 command_queue_desired_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_queue_desired_size(&has_bits);
          command_queue_desired_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starved_command_ticks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_starved_command_ticks(&has_bits);
          starved_command_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_dilation_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_dilation_percent(&has_bits);
          time_dilation_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCommandQueueState_command_queue_info_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCommandQueueState.command_queue_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 commands_queued = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_commands_queued(), target);
  }

  // optional uint32 command_queue_desired_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_command_queue_desired_size(), target);
  }

  // optional uint32 starved_command_ticks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_starved_command_ticks(), target);
  }

  // optional int32 time_dilation_percent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_dilation_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCommandQueueState.command_queue_info_t)
  return target;
}

size_t CUserMessageCommandQueueState_command_queue_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCommandQueueState.command_queue_info_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 commands_queued = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_commands_queued());
    }

    // optional uint32 command_queue_desired_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_command_queue_desired_size());
    }

    // optional uint32 starved_command_ticks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starved_command_ticks());
    }

    // optional int32 time_dilation_percent = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_dilation_percent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCommandQueueState_command_queue_info_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCommandQueueState.command_queue_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCommandQueueState_command_queue_info_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCommandQueueState_command_queue_info_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCommandQueueState.command_queue_info_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCommandQueueState.command_queue_info_t)
    MergeFrom(*source);
  }
}

void CUserMessageCommandQueueState_command_queue_info_t::MergeFrom(const CUserMessageCommandQueueState_command_queue_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCommandQueueState.command_queue_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      commands_queued_ = from.commands_queued_;
    }
    if (cached_has_bits & 0x00000002u) {
      command_queue_desired_size_ = from.command_queue_desired_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      starved_command_ticks_ = from.starved_command_ticks_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_dilation_percent_ = from.time_dilation_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCommandQueueState_command_queue_info_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCommandQueueState.command_queue_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCommandQueueState_command_queue_info_t::CopyFrom(const CUserMessageCommandQueueState_command_queue_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCommandQueueState.command_queue_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCommandQueueState_command_queue_info_t::IsInitialized() const {
  return true;
}

void CUserMessageCommandQueueState_command_queue_info_t::InternalSwap(CUserMessageCommandQueueState_command_queue_info_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageCommandQueueState_command_queue_info_t, time_dilation_percent_)
      + sizeof(CUserMessageCommandQueueState_command_queue_info_t::time_dilation_percent_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageCommandQueueState_command_queue_info_t, commands_queued_)>(
          reinterpret_cast<char*>(&commands_queued_),
          reinterpret_cast<char*>(&other->commands_queued_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCommandQueueState_command_queue_info_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserMessageCommandQueueState::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserMessageCommandQueueState>()._has_bits_);
  static void set_has_player_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CUserMessageCommandQueueState_command_queue_info_t& command_queue_info(const CUserMessageCommandQueueState* msg);
  static void set_has_command_queue_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CUserMessageCommandQueueState_command_queue_info_t&
CUserMessageCommandQueueState::_Internal::command_queue_info(const CUserMessageCommandQueueState* msg) {
  return *msg->command_queue_info_;
}
CUserMessageCommandQueueState::CUserMessageCommandQueueState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserMessageCommandQueueState)
}
CUserMessageCommandQueueState::CUserMessageCommandQueueState(const CUserMessageCommandQueueState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command_queue_info()) {
    command_queue_info_ = new ::CUserMessageCommandQueueState_command_queue_info_t(*from.command_queue_info_);
  } else {
    command_queue_info_ = nullptr;
  }
  player_entity_index_ = from.player_entity_index_;
  // @@protoc_insertion_point(copy_constructor:CUserMessageCommandQueueState)
}

void CUserMessageCommandQueueState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_queue_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_entity_index_) -
    reinterpret_cast<char*>(&command_queue_info_)) + sizeof(player_entity_index_));
}

CUserMessageCommandQueueState::~CUserMessageCommandQueueState() {
  // @@protoc_insertion_point(destructor:CUserMessageCommandQueueState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserMessageCommandQueueState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete command_queue_info_;
}

void CUserMessageCommandQueueState::ArenaDtor(void* object) {
  CUserMessageCommandQueueState* _this = reinterpret_cast< CUserMessageCommandQueueState* >(object);
  (void)_this;
}
void CUserMessageCommandQueueState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserMessageCommandQueueState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserMessageCommandQueueState::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserMessageCommandQueueState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(command_queue_info_ != nullptr);
    command_queue_info_->Clear();
  }
  player_entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserMessageCommandQueueState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_entity_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_entity_index(&has_bits);
          player_entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CUserMessageCommandQueueState.command_queue_info_t command_queue_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_queue_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserMessageCommandQueueState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCommandQueueState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_entity_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_entity_index(), target);
  }

  // optional .CUserMessageCommandQueueState.command_queue_info_t command_queue_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command_queue_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCommandQueueState)
  return target;
}

size_t CUserMessageCommandQueueState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserMessageCommandQueueState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CUserMessageCommandQueueState.command_queue_info_t command_queue_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_queue_info_);
    }

    // optional int32 player_entity_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_entity_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCommandQueueState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserMessageCommandQueueState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCommandQueueState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserMessageCommandQueueState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserMessageCommandQueueState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserMessageCommandQueueState)
    MergeFrom(*source);
  }
}

void CUserMessageCommandQueueState::MergeFrom(const CUserMessageCommandQueueState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserMessageCommandQueueState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_command_queue_info()->::CUserMessageCommandQueueState_command_queue_info_t::MergeFrom(from._internal_command_queue_info());
    }
    if (cached_has_bits & 0x00000002u) {
      player_entity_index_ = from.player_entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCommandQueueState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserMessageCommandQueueState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCommandQueueState::CopyFrom(const CUserMessageCommandQueueState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserMessageCommandQueueState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCommandQueueState::IsInitialized() const {
  return true;
}

void CUserMessageCommandQueueState::InternalSwap(CUserMessageCommandQueueState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserMessageCommandQueueState, player_entity_index_)
      + sizeof(CUserMessageCommandQueueState::player_entity_index_)
      - PROTOBUF_FIELD_OFFSET(CUserMessageCommandQueueState, command_queue_info_)>(
          reinterpret_cast<char*>(&command_queue_info_),
          reinterpret_cast<char*>(&other->command_queue_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserMessageCommandQueueState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CUserMessageAchievementEvent* Arena::CreateMaybeMessage< ::CUserMessageAchievementEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageAchievementEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCloseCaption* Arena::CreateMaybeMessage< ::CUserMessageCloseCaption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCloseCaption >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCloseCaptionDirect* Arena::CreateMaybeMessage< ::CUserMessageCloseCaptionDirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCloseCaptionDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCloseCaptionPlaceholder* Arena::CreateMaybeMessage< ::CUserMessageCloseCaptionPlaceholder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCloseCaptionPlaceholder >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCurrentTimescale* Arena::CreateMaybeMessage< ::CUserMessageCurrentTimescale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCurrentTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageDesiredTimescale* Arena::CreateMaybeMessage< ::CUserMessageDesiredTimescale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageDesiredTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageFade* Arena::CreateMaybeMessage< ::CUserMessageFade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageFade >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageShake* Arena::CreateMaybeMessage< ::CUserMessageShake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageShake >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageShakeDir* Arena::CreateMaybeMessage< ::CUserMessageShakeDir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageShakeDir >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageScreenTilt* Arena::CreateMaybeMessage< ::CUserMessageScreenTilt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageScreenTilt >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageSayText* Arena::CreateMaybeMessage< ::CUserMessageSayText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageSayText >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageSayText2* Arena::CreateMaybeMessage< ::CUserMessageSayText2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageSayText2 >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageHudMsg* Arena::CreateMaybeMessage< ::CUserMessageHudMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageHudMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageHudText* Arena::CreateMaybeMessage< ::CUserMessageHudText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageHudText >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageTextMsg* Arena::CreateMaybeMessage< ::CUserMessageTextMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageTextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageGameTitle* Arena::CreateMaybeMessage< ::CUserMessageGameTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageGameTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageResetHUD* Arena::CreateMaybeMessage< ::CUserMessageResetHUD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageResetHUD >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageSendAudio* Arena::CreateMaybeMessage< ::CUserMessageSendAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageSendAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageAudioParameter* Arena::CreateMaybeMessage< ::CUserMessageAudioParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageAudioParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageVoiceMask* Arena::CreateMaybeMessage< ::CUserMessageVoiceMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageVoiceMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageRequestState* Arena::CreateMaybeMessage< ::CUserMessageRequestState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageRequestState >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageHintText* Arena::CreateMaybeMessage< ::CUserMessageHintText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageHintText >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageKeyHintText* Arena::CreateMaybeMessage< ::CUserMessageKeyHintText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageKeyHintText >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageVoiceSubtitle* Arena::CreateMaybeMessage< ::CUserMessageVoiceSubtitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageVoiceSubtitle >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageVGUIMenu_Keys* Arena::CreateMaybeMessage< ::CUserMessageVGUIMenu_Keys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageVGUIMenu_Keys >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageVGUIMenu* Arena::CreateMaybeMessage< ::CUserMessageVGUIMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageVGUIMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageRumble* Arena::CreateMaybeMessage< ::CUserMessageRumble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageRumble >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageTrain* Arena::CreateMaybeMessage< ::CUserMessageTrain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageTrain >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageSayTextChannel* Arena::CreateMaybeMessage< ::CUserMessageSayTextChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageSayTextChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageColoredText* Arena::CreateMaybeMessage< ::CUserMessageColoredText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageColoredText >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageItemPickup* Arena::CreateMaybeMessage< ::CUserMessageItemPickup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageItemPickup >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageAmmoDenied* Arena::CreateMaybeMessage< ::CUserMessageAmmoDenied >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageAmmoDenied >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCrosshairAngle* Arena::CreateMaybeMessage< ::CUserMessageCrosshairAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCrosshairAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageShowMenu* Arena::CreateMaybeMessage< ::CUserMessageShowMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageShowMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCreditsMsg* Arena::CreateMaybeMessage< ::CUserMessageCreditsMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCreditsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMessagePlayJingle* Arena::CreateMaybeMessage< ::CEntityMessagePlayJingle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMessagePlayJingle >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMessageScreenOverlay* Arena::CreateMaybeMessage< ::CEntityMessageScreenOverlay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMessageScreenOverlay >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMessageRemoveAllDecals* Arena::CreateMaybeMessage< ::CEntityMessageRemoveAllDecals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMessageRemoveAllDecals >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMessagePropagateForce* Arena::CreateMaybeMessage< ::CEntityMessagePropagateForce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMessagePropagateForce >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMessageDoSpark* Arena::CreateMaybeMessage< ::CEntityMessageDoSpark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMessageDoSpark >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMessageFixAngle* Arena::CreateMaybeMessage< ::CEntityMessageFixAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMessageFixAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCameraTransition_Transition_DataDriven* Arena::CreateMaybeMessage< ::CUserMessageCameraTransition_Transition_DataDriven >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCameraTransition_Transition_DataDriven >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCameraTransition* Arena::CreateMaybeMessage< ::CUserMessageCameraTransition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCameraTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_ReleaseParticleIndex* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_ReleaseParticleIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_ReleaseParticleIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_CreateParticle* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_CreateParticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_CreateParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_DestroyParticle* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_DestroyParticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_DestroyParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_DestroyParticleInvolving* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_DestroyParticleInvolving >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_DestroyParticleInvolving >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_DestroyParticleNamed* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_DestroyParticleNamed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_DestroyParticleNamed >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticle* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticleFwd* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticleFwd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticleFwd >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticleOrient* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticleOrient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticleOrient >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticleFallback* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticleFallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticleFallback >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticleOffset* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticleOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticleOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticleEnt* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticleEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticleEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticleSetFrozen* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticleSetFrozen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticleSetFrozen >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateParticleShouldDraw* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateParticleShouldDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateParticleShouldDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_ChangeControlPointAttachment* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_ChangeControlPointAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_ChangeControlPointAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_UpdateEntityPosition* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_UpdateEntityPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_UpdateEntityPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetParticleFoWProperties* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetParticleFoWProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetParticleFoWProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetParticleShouldCheckFoW* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetParticleShouldCheckFoW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetParticleShouldCheckFoW >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetControlPointModel* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetControlPointModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetControlPointModel >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetControlPointSnapshot* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetControlPointSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetControlPointSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetParticleText* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetParticleText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetParticleText >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetTextureAttribute* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetTextureAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetTextureAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetSceneObjectGenericFlag* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetSceneObjectGenericFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetSceneObjectGenericFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager_SetSceneObjectTintAndDesat >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_ParticleManager* Arena::CreateMaybeMessage< ::CUserMsg_ParticleManager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_ParticleManager >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_HudError* Arena::CreateMaybeMessage< ::CUserMsg_HudError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_HudError >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMsg_CustomGameEvent* Arena::CreateMaybeMessage< ::CUserMsg_CustomGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMsg_CustomGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageHapticsManagerPulse* Arena::CreateMaybeMessage< ::CUserMessageHapticsManagerPulse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageHapticsManagerPulse >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageHapticsManagerEffect* Arena::CreateMaybeMessage< ::CUserMessageHapticsManagerEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageHapticsManagerEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageAnimStateGraphState* Arena::CreateMaybeMessage< ::CUserMessageAnimStateGraphState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageAnimStateGraphState >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCommandQueueState_command_queue_info_t* Arena::CreateMaybeMessage< ::CUserMessageCommandQueueState_command_queue_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCommandQueueState_command_queue_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserMessageCommandQueueState* Arena::CreateMaybeMessage< ::CUserMessageCommandQueueState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserMessageCommandQueueState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
