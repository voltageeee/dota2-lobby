// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_server.proto

#include "dota_gcmessages_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , disconnect_reason_(0)

  , num_bad_intervals_(0u)
  , peak_loss_pct_(0u){}
struct CMsgPoorNetworkConditions_PlayerDefaultTypeInternal {
  constexpr CMsgPoorNetworkConditions_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPoorNetworkConditions_PlayerDefaultTypeInternal() {}
  union {
    CMsgPoorNetworkConditions_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPoorNetworkConditions_PlayerDefaultTypeInternal _CMsgPoorNetworkConditions_Player_default_instance_;
constexpr CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , detection_type_(0)
{}
struct CMsgPoorNetworkConditionsDefaultTypeInternal {
  constexpr CMsgPoorNetworkConditionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPoorNetworkConditionsDefaultTypeInternal() {}
  union {
    CMsgPoorNetworkConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPoorNetworkConditionsDefaultTypeInternal _CMsgPoorNetworkConditions_default_instance_;
constexpr CMsgGameserverCrash::CMsgGameserverCrash(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , game_state_(0)

  , sentinel_save_time_(0u)
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , server_public_ip_addr_(0u)
  , server_port_(0u)
  , server_cluster_(0u)
  , pid_(0u)
  , custom_game_id_(PROTOBUF_ULONGLONG(0))
  , engine_(0u)
  , tournament_id_(0u){}
struct CMsgGameserverCrashDefaultTypeInternal {
  constexpr CMsgGameserverCrashDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameserverCrashDefaultTypeInternal() {}
  union {
    CMsgGameserverCrash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameserverCrashDefaultTypeInternal _CMsgGameserverCrash_default_instance_;
constexpr CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leaver_state_(nullptr)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , hero_id_(0u)
  , disconnect_reason_(0)
{}
struct CMsgConnectedPlayers_PlayerDefaultTypeInternal {
  constexpr CMsgConnectedPlayers_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConnectedPlayers_PlayerDefaultTypeInternal() {}
  union {
    CMsgConnectedPlayers_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConnectedPlayers_PlayerDefaultTypeInternal _CMsgConnectedPlayers_Player_default_instance_;
constexpr CMsgConnectedPlayers::CMsgConnectedPlayers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connected_players_()
  , disconnected_players_()
  , poor_network_conditions_(nullptr)
  , game_state_(0)

  , first_blood_happened_(false)
  , send_reason_(0)

  , radiant_kills_(0u)
  , building_state_(0u)
  , dire_kills_(0u)
  , radiant_lead_(0){}
struct CMsgConnectedPlayersDefaultTypeInternal {
  constexpr CMsgConnectedPlayersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConnectedPlayersDefaultTypeInternal() {}
  union {
    CMsgConnectedPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConnectedPlayersDefaultTypeInternal _CMsgConnectedPlayers_default_instance_;
constexpr CMsgGameServerInfo::CMsgGameServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_server_steamdatagram_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_public_ip_addr_(0u)
  , server_private_ip_addr_(0u)
  , server_port_(0u)
  , server_tv_port_(0u)
  , server_type_(0)

  , server_region_(0u)
  , server_loadavg_(0)
  , server_tv_broadcast_time_(0)
  , server_relay_connected_steam_id_(PROTOBUF_ULONGLONG(0))
  , server_game_time_(0)
  , relay_slots_max_(0u)
  , relays_connected_(0)
  , relay_clients_connected_(0)
  , relayed_game_server_steam_id_(PROTOBUF_ULONGLONG(0))
  , tv_secret_code_(PROTOBUF_ULONGLONG(0))
  , parent_relay_count_(0u)
  , server_version_(0u)
  , server_cluster_(0u)
  , server_hibernation_(false)
  , dev_force_server_type_(false)
  , is_recording_match_training_data_(false)
  , assigned_server_tv_port_(0u)
  , allow_custom_games_(0)

  , build_version_(0u)
  , tf_server_count_(0u)
  , srcds_instance_(0u){}
struct CMsgGameServerInfoDefaultTypeInternal {
  constexpr CMsgGameServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerInfoDefaultTypeInternal() {}
  union {
    CMsgGameServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerInfoDefaultTypeInternal _CMsgGameServerInfo_default_instance_;
constexpr CMsgLeaverDetected::CMsgLeaverDetected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leaver_state_(nullptr)
  , poor_network_conditions_(nullptr)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , leaver_status_(0)

  , server_cluster_(0u)
  , disconnect_reason_(0)
{}
struct CMsgLeaverDetectedDefaultTypeInternal {
  constexpr CMsgLeaverDetectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeaverDetectedDefaultTypeInternal() {}
  union {
    CMsgLeaverDetected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeaverDetectedDefaultTypeInternal _CMsgLeaverDetected_default_instance_;
constexpr CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgLeaverDetectedResponseDefaultTypeInternal {
  constexpr CMsgLeaverDetectedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeaverDetectedResponseDefaultTypeInternal() {}
  union {
    CMsgLeaverDetectedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeaverDetectedResponseDefaultTypeInternal _CMsgLeaverDetectedResponse_default_instance_;
constexpr CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(){}
struct CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal {
  constexpr CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyFinalPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal _CMsgDOTAFantasyFinalPlayerStats_default_instance_;
constexpr CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(){}
struct CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLivePlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal _CMsgDOTAFantasyLivePlayerStats_default_instance_;
constexpr CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , league_id_(0u)
  , series_id_(0u)
  , start_time_(0u)
  , series_type_(0u)
  , team_1_(0u)
  , team_2_(0u){}
struct CMsgDOTAFantasyMatchDefaultTypeInternal {
  constexpr CMsgDOTAFantasyMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyMatchDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyMatchDefaultTypeInternal _CMsgDOTAFantasyMatch_default_instance_;
constexpr CMsgDOTAUpdateClippy::CMsgDOTAUpdateClippy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : good_team_hero_ids_()
  , bad_team_hero_ids_(){}
struct CMsgDOTAUpdateClippyDefaultTypeInternal {
  constexpr CMsgDOTAUpdateClippyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAUpdateClippyDefaultTypeInternal() {}
  union {
    CMsgDOTAUpdateClippy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAUpdateClippyDefaultTypeInternal _CMsgDOTAUpdateClippy_default_instance_;
constexpr CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delayed_(nullptr){}
struct CMsgServerToGCRealtimeStatsDefaultTypeInternal {
  constexpr CMsgServerToGCRealtimeStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRealtimeStatsDefaultTypeInternal() {}
  union {
    CMsgServerToGCRealtimeStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRealtimeStatsDefaultTypeInternal _CMsgServerToGCRealtimeStats_default_instance_;
constexpr CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delayed_(false){}
struct CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal {
  constexpr CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal() {}
  union {
    CMsgGCToServerRealtimeStatsStartStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal _CMsgGCToServerRealtimeStatsStartStop_default_instance_;
constexpr CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_(false){}
struct CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal {
  constexpr CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal() {}
  union {
    CMsgGCToServerUpdateSteamBroadcasting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal _CMsgGCToServerUpdateSteamBroadcasting_default_instance_;
constexpr CMsgSignOutGameplayStats_CPlayer::CMsgSignOutGameplayStats_CPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timed_player_stats_()
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , player_slot_(0u)
  , hero_id_(0u){}
struct CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal {
  constexpr CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutGameplayStats_CPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal _CMsgSignOutGameplayStats_CPlayer_default_instance_;
constexpr CMsgSignOutGameplayStats_CTeam::CMsgSignOutGameplayStats_CTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timed_team_stats_()
  , players_()
  , is_winning_team_(false)
  , is_radiant_team_(false){}
struct CMsgSignOutGameplayStats_CTeamDefaultTypeInternal {
  constexpr CMsgSignOutGameplayStats_CTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGameplayStats_CTeamDefaultTypeInternal() {}
  union {
    CMsgSignOutGameplayStats_CTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGameplayStats_CTeamDefaultTypeInternal _CMsgSignOutGameplayStats_CTeam_default_instance_;
constexpr CMsgSignOutGameplayStats::CMsgSignOutGameplayStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_(){}
struct CMsgSignOutGameplayStatsDefaultTypeInternal {
  constexpr CMsgSignOutGameplayStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGameplayStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutGameplayStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGameplayStatsDefaultTypeInternal _CMsgSignOutGameplayStats_default_instance_;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dota_team_(0u)
  , winner_(false){}
struct CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pre_reduction_(0u)
  , post_reduction_(0u)
  , damage_type_(0)
{}
struct CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_default_instance_;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , ability_upgrades_()
  , additional_units_inventory_()
  , permanent_buffs_()
  , talent_ability_ids_()
  , hero_damage_received_()
  , item_purchase_times_()
  , hero_damage_dealt_()
  , custom_game_data_(nullptr)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , hero_id_(0u)
  , gold_(0u)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , leaver_status_(0u)
  , last_hits_(0u)
  , denies_(0u)
  , gold_per_min_(0u)
  , xp_per_minute_(0u)
  , gold_spent_(0u)
  , level_(0u)
  , scaled_hero_damage_(0u)
  , scaled_tower_damage_(0u)
  , scaled_hero_healing_(0u)
  , time_last_seen_(0u)
  , party_id_(PROTOBUF_ULONGLONG(0))
  , support_ability_value_(0u)
  , claimed_farm_gold_(0u)
  , support_gold_(0u)
  , claimed_denies_(0u)
  , claimed_misses_(0u)
  , misses_(0u)
  , net_worth_(0u)
  , match_player_flags_(0u)
  , hero_damage_(0u)
  , tower_damage_(0u)
  , hero_healing_(0u)
  , hero_pick_order_(0u)
  , lane_(0u)
  , hero_was_randomed_(false)
  , hero_was_dota_plus_suggestion_(false)
  , is_using_plus_guide_(false)
  , seconds_dead_(0u)
  , gold_lost_to_death_(0u)
  , command_count_(0u)
  , mouse_click_cast_command_count_(0u)
  , teleports_used_(0u)
  , cavern_crawl_map_variant_(0u)
  , bounty_runes_(0u)
  , outposts_captured_(0u)
  , dewards_(0u)
  , wards_placed_(0u)
  , camps_stacked_(0u)
  , player_slot_(0u){}
struct CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam_CPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_;
constexpr CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_(){}
struct CMsgGameMatchSignOut_CTeamDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_CTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeamDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_CTeamDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_default_instance_;
constexpr CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CAdditionalSignoutMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal _CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_;
constexpr CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , timestamp_(0u)
  , event_type_(0u)
  , game_time_(0)
  , replay_time_(0u){}
struct CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CSocialFeedMatchEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal _CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_;
constexpr CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publish_timestamp_(0u){}
struct CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CCustomGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal _CMsgGameMatchSignOut_CCustomGameData_default_instance_;
constexpr CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(0)
  , extra_data_1_(0u)
  , extra_data_2_(0u)
  , extra_data_3_(0u)
  , extra_data_4_(0u)
  , extra_data_5_(0u){}
struct CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_EventGameLeaderboardEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal _CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_;
constexpr CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , team_id_(0u)
  , placed_time_(0u)
  , building_state_(0u)
  , creep_state_(0u)
  , roshan_alive_(false)
  , position_x_(0u)
  , position_y_(0u){}
struct CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal {
  constexpr CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_WardPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal _CMsgGameMatchSignOut_WardPlacement_default_instance_;
constexpr CMsgGameMatchSignOut::CMsgGameMatchSignOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_players_()
  , teams_()
  , tower_status_()
  , barracks_status_()
  , picks_bans_()
  , player_strange_count_adjustments_()
  , additional_msgs_()
  , social_feed_events_()
  , team_scores_()
  , fantasy_stats_()
  , event_game_leaderboard_entries_()
  , ward_placements_()
  , extra_messages_()
  , server_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , poor_network_conditions_(nullptr)
  , custom_game_data_(nullptr)
  , gameplay_stats_(nullptr)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , duration_(0u)
  , date_(0u)
  , cluster_(0u)
  , first_blood_time_(0u)
  , event_score_(0u)
  , server_version_(0u)
  , average_networth_delta_(0)
  , good_guys_win_(false)
  , automatic_surrender_(false)
  , training_data_recorded_(false)
  , match_flags_(0u)
  , pre_game_duration_(0u){}
struct CMsgGameMatchSignOutDefaultTypeInternal {
  constexpr CMsgGameMatchSignOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOutDefaultTypeInternal _CMsgGameMatchSignOut_default_instance_;
constexpr CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : picks_bans_()
  , radiant_captain_account_id_(0u)
  , dire_captain_account_id_(0u){}
struct CMsgSignOutDraftInfoDefaultTypeInternal {
  constexpr CMsgSignOutDraftInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutDraftInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutDraftInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutDraftInfoDefaultTypeInternal _CMsgSignOutDraftInfo_default_instance_;
constexpr CMsgSignOutBotInfo::CMsgSignOutBotInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bot_difficulty_radiant_(0)

  , allow_cheats_(false)
  , created_lobby_(false)
  , bot_difficulty_dire_(0)
{}
struct CMsgSignOutBotInfoDefaultTypeInternal {
  constexpr CMsgSignOutBotInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutBotInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutBotInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutBotInfoDefaultTypeInternal _CMsgSignOutBotInfo_default_instance_;
constexpr CMsgSignOutTextMuteInfo_TextMuteMessage::CMsgSignOutTextMuteInfo_TextMuteMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_(0u)
  , caused_text_mute_(false){}
struct CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal {
  constexpr CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal() {}
  union {
    CMsgSignOutTextMuteInfo_TextMuteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal _CMsgSignOutTextMuteInfo_TextMuteMessage_default_instance_;
constexpr CMsgSignOutTextMuteInfo::CMsgSignOutTextMuteInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_mute_messages_(){}
struct CMsgSignOutTextMuteInfoDefaultTypeInternal {
  constexpr CMsgSignOutTextMuteInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutTextMuteInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutTextMuteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutTextMuteInfoDefaultTypeInternal _CMsgSignOutTextMuteInfo_default_instance_;
constexpr CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0)
  , rank_(0u)
  , hero_id_(0u)
  , rampages_(0u)
  , triple_kills_(0u)
  , first_blood_claimed_(0u)
  , first_blood_given_(0u)
  , couriers_killed_(0u)
  , aegises_snatched_(0u)
  , cheeses_eaten_(0u)
  , creeps_stacked_(0u)
  , fight_score_(0)
  , farm_score_(0)
  , support_score_(0)
  , push_score_(0)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , last_hits_(0u)
  , denies_(0u)
  , gpm_(0)
  , xppm_(0)
  , net_worth_(0)
  , damage_(0)
  , heals_(0)
  , rapiers_purchased_(0u)
  , observer_wards_placed_(0u)
  , wards_destroyed_(0u)
  , lobby_type_(0u){}
struct CMsgSignOutPlayerStatsDefaultTypeInternal {
  constexpr CMsgSignOutPlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutPlayerStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutPlayerStatsDefaultTypeInternal _CMsgSignOutPlayerStats_default_instance_;
constexpr CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , count_(0u){}
struct CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal {
  constexpr CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal _CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_default_instance_;
constexpr CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ping_details_()
  , account_id_(0u)
  , pings_(0u)
  , max_pings_per_interval_(0u)
  , teammate_pings_(0u)
  , max_teammate_pings_per_interval_(0u)
  , team_chat_messages_(0u)
  , all_chat_messages_(0u)
  , chat_wheel_messages_(0u)
  , pauses_(0u)
  , unpauses_(0u)
  , lines_drawn_(0u)
  , voice_chat_seconds_(0u)
  , chat_mutes_(0u)
  , voice_mutes_(0u){}
struct CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal {
  constexpr CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunicationSummary_PlayerCommunication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal _CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_;
constexpr CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_(){}
struct CMsgSignOutCommunicationSummaryDefaultTypeInternal {
  constexpr CMsgSignOutCommunicationSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutCommunicationSummaryDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunicationSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutCommunicationSummaryDefaultTypeInternal _CMsgSignOutCommunicationSummary_default_instance_;
constexpr CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , avg_kills_x16_(0u)
  , avg_deaths_x16_(0u)
  , avg_assists_x16_(0u)
  , avg_gpm_x16_(0u)
  , avg_xpm_x16_(0u)
  , best_kills_x16_(0u)
  , best_assists_x16_(0u)
  , best_gpm_x16_(0u)
  , best_xpm_x16_(0u)
  , win_streak_(0u)
  , best_win_streak_(0u)
  , games_played_(0u){}
struct CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal {
  constexpr CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignoutResponse_PlayerMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal _CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_;
constexpr CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timed_reward_details_()
  , xp_reward_details_()
  , players_metadata_()
  , match_details_(nullptr)
  , mvp_data_(nullptr)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , replay_salt_(0u)
  , leagueid_(0u)
  , metadata_private_key_(0u)
  , ow_salt_(0u)
  , ow_private_key_(PROTOBUF_ULONGLONG(0))
  , ow_replay_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGameMatchSignoutResponseDefaultTypeInternal {
  constexpr CMsgGameMatchSignoutResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignoutResponseDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignoutResponseDefaultTypeInternal _CMsgGameMatchSignoutResponse_default_instance_;
constexpr CMsgTimedRewardContainer::CMsgTimedRewardContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timed_reward_details_(){}
struct CMsgTimedRewardContainerDefaultTypeInternal {
  constexpr CMsgTimedRewardContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTimedRewardContainerDefaultTypeInternal() {}
  union {
    CMsgTimedRewardContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTimedRewardContainerDefaultTypeInternal _CMsgTimedRewardContainer_default_instance_;
constexpr CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_version_(0u)
  , local_attempt_(0u)
  , total_attempt_(0u)
  , seconds_waited_(0u){}
struct CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal {
  constexpr CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutPermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal _CMsgGameMatchSignOutPermissionRequest_default_instance_;
constexpr CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_granted_(false)
  , abandon_signout_(false)
  , retry_delay_seconds_(0u){}
struct CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal {
  constexpr CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal _CMsgGameMatchSignOutPermissionResponse_default_instance_;
constexpr CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_game_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_id_(0)

  , start_time_(0u){}
struct CMsgGameMatchSignOutEventGameDataDefaultTypeInternal {
  constexpr CMsgGameMatchSignOutEventGameDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutEventGameDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutEventGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOutEventGameDataDefaultTypeInternal _CMsgGameMatchSignOutEventGameData_default_instance_;
constexpr CMsgGameMatchSignOutPerfData::CMsgGameMatchSignOutPerfData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_frame_time_()
  , max_frame_time_()
  , average_compute_time_()
  , max_compute_time_()
  , average_client_tick_time_()
  , max_client_tick_time_()
  , average_client_simulate_time_()
  , max_client_simulate_time_()
  , average_output_time_()
  , max_output_time_()
  , average_wait_for_rendering_to_complete_time_()
  , max_wait_for_rendering_to_complete_time_()
  , average_swap_time_()
  , max_swap_time_()
  , average_frame_update_time_()
  , max_frame_update_time_()
  , average_idle_time_()
  , max_idle_time_()
  , average_input_processing_time_()
  , max_input_processing_time_()
  , server_average_frame_time_(0)
  , server_max_frame_time_(0){}
struct CMsgGameMatchSignOutPerfDataDefaultTypeInternal {
  constexpr CMsgGameMatchSignOutPerfDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutPerfDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutPerfData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOutPerfDataDefaultTypeInternal _CMsgGameMatchSignOutPerfData_default_instance_;
constexpr CMsgGameMatchSignOutBanData::CMsgGameMatchSignOutBanData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_bans_()
  , hero_ban_votes_(){}
struct CMsgGameMatchSignOutBanDataDefaultTypeInternal {
  constexpr CMsgGameMatchSignOutBanDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutBanDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutBanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameMatchSignOutBanDataDefaultTypeInternal _CMsgGameMatchSignOutBanData_default_instance_;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_id_(0u)
  , ability_level_(0u){}
struct CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal {
  constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : abilities_()
  , player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hero_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_slot_(0u)
  , hero_id_(0u)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , last_hits_(0u)
  , denies_(0u)
  , gold_(0u)
  , level_(0u)
  , gold_per_min_(0)
  , xp_per_min_(0)
  , ultimate_state_(0)

  , ultimate_cooldown_(0)
  , item0_(0u)
  , item1_(0u)
  , item2_(0u)
  , item3_(0u)
  , item4_(0u)
  , item5_(0u)
  , respawn_timer_(0u)
  , account_id_(0u)
  , position_x_(0)
  , position_y_(0)
  , net_worth_(0u){}
struct CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal {
  constexpr CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_;
constexpr CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , hero_picks_()
  , hero_bans_()
  , score_(0u)
  , tower_state_(0u)
  , barracks_state_(0u){}
struct CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal {
  constexpr CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_default_instance_;
constexpr CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_good_(nullptr)
  , team_bad_(nullptr)
  , tournament_id_(0u)
  , tournament_game_id_(0u)
  , duration_(0)
  , hltv_delay_(0)
  , roshan_respawn_timer_(0u)
  , league_id_(0u)
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTALiveScoreboardUpdateDefaultTypeInternal {
  constexpr CMsgDOTALiveScoreboardUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdateDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALiveScoreboardUpdateDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_default_instance_;
constexpr CMsgServerToGCRequestBatchPlayerResources::CMsgServerToGCRequestBatchPlayerResources(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_()
  , _account_ids_cached_byte_size_()
  , rank_types_()
  , _rank_types_cached_byte_size_(){}
struct CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal {
  constexpr CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestBatchPlayerResources _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResources_default_instance_;
constexpr CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , rank_(0u)
  , prevent_text_chat_(false)
  , prevent_voice_chat_(false)
  , rank_calibrated_(false)
  , low_priority_(false)
  , is_new_player_(false)
  , is_guide_player_(false){}
struct CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal {
  constexpr CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestBatchPlayerResourcesResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResourcesResponse_Result_default_instance_;
constexpr CMsgServerToGCRequestBatchPlayerResourcesResponse::CMsgServerToGCRequestBatchPlayerResourcesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal {
  constexpr CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestBatchPlayerResourcesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResourcesResponse_default_instance_;
constexpr CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : failed_loaders_()
  , abandoned_loaders_(){}
struct CMsgDOTAPlayerFailedToConnectDefaultTypeInternal {
  constexpr CMsgDOTAPlayerFailedToConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerFailedToConnectDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerFailedToConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPlayerFailedToConnectDefaultTypeInternal _CMsgDOTAPlayerFailedToConnect_default_instance_;
constexpr CMsgGCToRelayConnect::CMsgGCToRelayConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_tv_public_addr_(0u)
  , source_tv_private_addr_(0u)
  , game_server_steam_id_(PROTOBUF_ULONGLONG(0))
  , source_tv_port_(0u)
  , parent_count_(0u)
  , tv_unique_secret_code_(PROTOBUF_ULONGLONG(0))
  , source_tv_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCToRelayConnectDefaultTypeInternal {
  constexpr CMsgGCToRelayConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToRelayConnectDefaultTypeInternal() {}
  union {
    CMsgGCToRelayConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToRelayConnectDefaultTypeInternal _CMsgGCToRelayConnect_default_instance_;
constexpr CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relay_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCGCToLANServerRelayConnectDefaultTypeInternal {
  constexpr CMsgGCGCToLANServerRelayConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGCToLANServerRelayConnectDefaultTypeInternal() {}
  union {
    CMsgGCGCToLANServerRelayConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGCToLANServerRelayConnectDefaultTypeInternal _CMsgGCGCToLANServerRelayConnect_default_instance_;
constexpr CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToRelayConnectResponseDefaultTypeInternal {
  constexpr CMsgGCToRelayConnectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToRelayConnectResponseDefaultTypeInternal() {}
  union {
    CMsgGCToRelayConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToRelayConnectResponseDefaultTypeInternal _CMsgGCToRelayConnectResponse_default_instance_;
constexpr CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgGCBanStatusRequestDefaultTypeInternal {
  constexpr CMsgGCBanStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCBanStatusRequestDefaultTypeInternal() {}
  union {
    CMsgGCBanStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCBanStatusRequestDefaultTypeInternal _CMsgGCBanStatusRequest_default_instance_;
constexpr CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u)
  , low_priority_(false)
  , text_chat_banned_(false)
  , voice_chat_banned_(false){}
struct CMsgGCBanStatusResponseDefaultTypeInternal {
  constexpr CMsgGCBanStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCBanStatusResponseDefaultTypeInternal() {}
  union {
    CMsgGCBanStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCBanStatusResponseDefaultTypeInternal _CMsgGCBanStatusResponse_default_instance_;
constexpr CMsgTournamentItemEvent::CMsgTournamentItemEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_statues_()
  , loot_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , killer_account_id_(0u)
  , victim_account_id_(0u)
  , event_type_(0)

  , tv_delay_(0)
  , dota_time_(0)
  , replay_time_(0)
  , event_team_(0u)
  , multi_kill_count_(0u)
  , winner_score_(0u)
  , loser_score_(0u){}
struct CMsgTournamentItemEventDefaultTypeInternal {
  constexpr CMsgTournamentItemEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTournamentItemEventDefaultTypeInternal() {}
  union {
    CMsgTournamentItemEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTournamentItemEventDefaultTypeInternal _CMsgTournamentItemEvent_default_instance_;
constexpr CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_type_(0)

  , viewers_granted_(0u){}
struct CMsgTournamentItemEventResponseDefaultTypeInternal {
  constexpr CMsgTournamentItemEventResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTournamentItemEventResponseDefaultTypeInternal() {}
  union {
    CMsgTournamentItemEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTournamentItemEventResponseDefaultTypeInternal _CMsgTournamentItemEventResponse_default_instance_;
constexpr CMsgTeamFanfare::CMsgTeamFanfare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgTeamFanfareDefaultTypeInternal {
  constexpr CMsgTeamFanfareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTeamFanfareDefaultTypeInternal() {}
  union {
    CMsgTeamFanfare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTeamFanfareDefaultTypeInternal _CMsgTeamFanfare_default_instance_;
constexpr CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fanfare_goodguys_(0u)
  , fanfare_badguys_(0u){}
struct CMsgResponseTeamFanfareDefaultTypeInternal {
  constexpr CMsgResponseTeamFanfareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgResponseTeamFanfareDefaultTypeInternal() {}
  union {
    CMsgResponseTeamFanfare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgResponseTeamFanfareDefaultTypeInternal _CMsgResponseTeamFanfare_default_instance_;
constexpr CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_steam_ids_()
  , save_game_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , game_time_(0u){}
struct CMsgGameServerUploadSaveGameDefaultTypeInternal {
  constexpr CMsgGameServerUploadSaveGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerUploadSaveGameDefaultTypeInternal() {}
  union {
    CMsgGameServerUploadSaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerUploadSaveGameDefaultTypeInternal _CMsgGameServerUploadSaveGame_default_instance_;
constexpr CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgGameServerSaveGameResultDefaultTypeInternal {
  constexpr CMsgGameServerSaveGameResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerSaveGameResultDefaultTypeInternal() {}
  union {
    CMsgGameServerSaveGameResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerSaveGameResultDefaultTypeInternal _CMsgGameServerSaveGameResult_default_instance_;
constexpr CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : save_id_(0u){}
struct CMsgGameServerGetLoadGameDefaultTypeInternal {
  constexpr CMsgGameServerGetLoadGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerGetLoadGameDefaultTypeInternal() {}
  union {
    CMsgGameServerGetLoadGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerGetLoadGameDefaultTypeInternal _CMsgGameServerGetLoadGame_default_instance_;
constexpr CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : save_game_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGameServerGetLoadGameResultDefaultTypeInternal {
  constexpr CMsgGameServerGetLoadGameResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerGetLoadGameResultDefaultTypeInternal() {}
  union {
    CMsgGameServerGetLoadGameResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerGetLoadGameResultDefaultTypeInternal _CMsgGameServerGetLoadGameResult_default_instance_;
constexpr CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prize_list_(0u)
  , highest_roshan_level_(0u){}
struct CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal {
  constexpr CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal() {}
  union {
    CMsgDOTAGenerateDiretidePrizeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal _CMsgDOTAGenerateDiretidePrizeList_default_instance_;
constexpr CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_defs_()
  , steam_ids_()
  , prize_list_(0u){}
struct CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal {
  constexpr CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAGenerateDiretidePrizeListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal _CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_;
constexpr CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(0u)
  , prize_list_(0u){}
struct CMsgDOTARewardDiretidePrizesDefaultTypeInternal {
  constexpr CMsgDOTARewardDiretidePrizesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARewardDiretidePrizesDefaultTypeInternal() {}
  union {
    CMsgDOTARewardDiretidePrizes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARewardDiretidePrizesDefaultTypeInternal _CMsgDOTARewardDiretidePrizes_default_instance_;
constexpr CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prize_list_(0u){}
struct CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal {
  constexpr CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal() {}
  union {
    CMsgDOTADiretidePrizesRewardedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal _CMsgDOTADiretidePrizesRewardedResponse_default_instance_;
constexpr CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , points_(0)
  , premium_points_(0)
  , trade_ban_time_(0u)
  , eligible_for_periodic_adjustment_(false)
  , point_cap_periodic_resource_id_(0u){}
struct CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal {
  constexpr CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal() {}
  union {
    CMsgDOTAAwardEventPoints_AwardPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal _CMsgDOTAAwardEventPoints_AwardPoints_default_instance_;
constexpr CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : award_points_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , event_id_(0)

  , timestamp_(0u)
  , audit_action_(0u){}
struct CMsgDOTAAwardEventPointsDefaultTypeInternal {
  constexpr CMsgDOTAAwardEventPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAAwardEventPointsDefaultTypeInternal() {}
  union {
    CMsgDOTAAwardEventPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAAwardEventPointsDefaultTypeInternal _CMsgDOTAAwardEventPoints_default_instance_;
constexpr CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_account_ids_()
  , loot_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , no_trade_(false)
  , randomize_reward_(false){}
struct CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDropsDefaultTypeInternal {
  constexpr CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDropsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDropsDefaultTypeInternal() {}
  union {
    CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDropsDefaultTypeInternal _CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_;
constexpr CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drops_()
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgServerToGCSignoutAwardAdditionalDropsDefaultTypeInternal {
  constexpr CMsgServerToGCSignoutAwardAdditionalDropsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCSignoutAwardAdditionalDropsDefaultTypeInternal() {}
  union {
    CMsgServerToGCSignoutAwardAdditionalDrops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCSignoutAwardAdditionalDropsDefaultTypeInternal _CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_;
constexpr CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , time_elapsed_s_(0u){}
struct CMsgDOTAFrostivusTimeElapsed_UserDefaultTypeInternal {
  constexpr CMsgDOTAFrostivusTimeElapsed_UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFrostivusTimeElapsed_UserDefaultTypeInternal() {}
  union {
    CMsgDOTAFrostivusTimeElapsed_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFrostivusTimeElapsed_UserDefaultTypeInternal _CMsgDOTAFrostivusTimeElapsed_User_default_instance_;
constexpr CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , seconds_(0u){}
struct CMsgDOTAFrostivusTimeElapsedDefaultTypeInternal {
  constexpr CMsgDOTAFrostivusTimeElapsedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFrostivusTimeElapsedDefaultTypeInternal() {}
  union {
    CMsgDOTAFrostivusTimeElapsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFrostivusTimeElapsedDefaultTypeInternal _CMsgDOTAFrostivusTimeElapsed_default_instance_;
constexpr CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(PROTOBUF_ULONGLONG(0))
  , request_time_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCToServerPingRequestDefaultTypeInternal {
  constexpr CMsgGCToServerPingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerPingRequestDefaultTypeInternal() {}
  union {
    CMsgGCToServerPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerPingRequestDefaultTypeInternal _CMsgGCToServerPingRequest_default_instance_;
constexpr CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(PROTOBUF_ULONGLONG(0))
  , request_time_(PROTOBUF_ULONGLONG(0))
  , cluster_(0u){}
struct CMsgGCToServerPingResponseDefaultTypeInternal {
  constexpr CMsgGCToServerPingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerPingResponseDefaultTypeInternal() {}
  union {
    CMsgGCToServerPingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerPingResponseDefaultTypeInternal _CMsgGCToServerPingResponse_default_instance_;
constexpr CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCToServerConsoleCommandDefaultTypeInternal {
  constexpr CMsgGCToServerConsoleCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerConsoleCommandDefaultTypeInternal() {}
  union {
    CMsgGCToServerConsoleCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerConsoleCommandDefaultTypeInternal _CMsgGCToServerConsoleCommand_default_instance_;
constexpr CMsgServerGetEventPoints::CMsgServerGetEventPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_()
  , event_id_(0)
{}
struct CMsgServerGetEventPointsDefaultTypeInternal {
  constexpr CMsgServerGetEventPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerGetEventPointsDefaultTypeInternal() {}
  union {
    CMsgServerGetEventPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerGetEventPointsDefaultTypeInternal _CMsgServerGetEventPoints_default_instance_;
constexpr CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , points_total_(0u)
  , owned_(false){}
struct CMsgServerGetEventPointsResponse_PointsDefaultTypeInternal {
  constexpr CMsgServerGetEventPointsResponse_PointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerGetEventPointsResponse_PointsDefaultTypeInternal() {}
  union {
    CMsgServerGetEventPointsResponse_Points _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerGetEventPointsResponse_PointsDefaultTypeInternal _CMsgServerGetEventPointsResponse_Points_default_instance_;
constexpr CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , event_id_(0)
{}
struct CMsgServerGetEventPointsResponseDefaultTypeInternal {
  constexpr CMsgServerGetEventPointsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerGetEventPointsResponseDefaultTypeInternal() {}
  union {
    CMsgServerGetEventPointsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerGetEventPointsResponseDefaultTypeInternal _CMsgServerGetEventPointsResponse_default_instance_;
constexpr CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , question_id_(0u)
  , survey_key_(PROTOBUF_ULONGLONG(0))
  , extra_data_(PROTOBUF_ULONGLONG(0))
  , extra_data_32_(PROTOBUF_ULONGLONG(0))
  , expire_time_(0u){}
struct CMsgServerGrantSurveyPermission_SurveyDefaultTypeInternal {
  constexpr CMsgServerGrantSurveyPermission_SurveyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerGrantSurveyPermission_SurveyDefaultTypeInternal() {}
  union {
    CMsgServerGrantSurveyPermission_Survey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerGrantSurveyPermission_SurveyDefaultTypeInternal _CMsgServerGrantSurveyPermission_Survey_default_instance_;
constexpr CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : surveys_(){}
struct CMsgServerGrantSurveyPermissionDefaultTypeInternal {
  constexpr CMsgServerGrantSurveyPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerGrantSurveyPermissionDefaultTypeInternal() {}
  union {
    CMsgServerGrantSurveyPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerGrantSurveyPermissionDefaultTypeInternal _CMsgServerGrantSurveyPermission_default_instance_;
constexpr CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgServerGrantSurveyPermissionResponseDefaultTypeInternal {
  constexpr CMsgServerGrantSurveyPermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerGrantSurveyPermissionResponseDefaultTypeInternal() {}
  union {
    CMsgServerGrantSurveyPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerGrantSurveyPermissionResponseDefaultTypeInternal _CMsgServerGrantSurveyPermissionResponse_default_instance_;
constexpr CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , ip_(0u)
  , avg_ping_ms_(0u)
  , packet_loss_(0)
  , ping_deviation_(0)
  , full_resends_(0u){}
struct CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal {
  constexpr CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchConnectionStats_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal _CMsgServerToGCMatchConnectionStats_Player_default_instance_;
constexpr CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , region_id_(0u)
  , league_id_(0u)
  , cluster_id_(0u){}
struct CMsgServerToGCMatchConnectionStatsDefaultTypeInternal {
  constexpr CMsgServerToGCMatchConnectionStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchConnectionStatsDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchConnectionStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchConnectionStatsDefaultTypeInternal _CMsgServerToGCMatchConnectionStats_default_instance_;
constexpr CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectator_count_(0u){}
struct CMsgServerGCUpdateSpectatorCountDefaultTypeInternal {
  constexpr CMsgServerGCUpdateSpectatorCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerGCUpdateSpectatorCountDefaultTypeInternal() {}
  union {
    CMsgServerGCUpdateSpectatorCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerGCUpdateSpectatorCountDefaultTypeInternal _CMsgServerGCUpdateSpectatorCount_default_instance_;
constexpr CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal {
  constexpr CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal() {}
  union {
    CSerializedCombatLog_Dictionary_DictString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal _CSerializedCombatLog_Dictionary_DictString_default_instance_;
constexpr CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strings_(){}
struct CSerializedCombatLog_DictionaryDefaultTypeInternal {
  constexpr CSerializedCombatLog_DictionaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSerializedCombatLog_DictionaryDefaultTypeInternal() {}
  union {
    CSerializedCombatLog_Dictionary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSerializedCombatLog_DictionaryDefaultTypeInternal _CSerializedCombatLog_Dictionary_default_instance_;
constexpr CSerializedCombatLog::CSerializedCombatLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , dictionary_(nullptr)
  , version_(0u){}
struct CSerializedCombatLogDefaultTypeInternal {
  constexpr CSerializedCombatLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSerializedCombatLogDefaultTypeInternal() {}
  union {
    CSerializedCombatLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSerializedCombatLogDefaultTypeInternal _CSerializedCombatLog_default_instance_;
constexpr CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equips_()
  , account_id_(0u){}
struct CMsgServerToGCGetAdditionalEquipsResponse_CUserEquipsDefaultTypeInternal {
  constexpr CMsgServerToGCGetAdditionalEquipsResponse_CUserEquipsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetAdditionalEquipsResponse_CUserEquipsDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetAdditionalEquipsResponse_CUserEquipsDefaultTypeInternal _CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_;
constexpr CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equips_(){}
struct CMsgServerToGCGetAdditionalEquipsResponseDefaultTypeInternal {
  constexpr CMsgServerToGCGetAdditionalEquipsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetAdditionalEquipsResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetAdditionalEquipsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetAdditionalEquipsResponseDefaultTypeInternal _CMsgServerToGCGetAdditionalEquipsResponse_default_instance_;
constexpr CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_(){}
struct CMsgServerToGCGetProfileCardDefaultTypeInternal {
  constexpr CMsgServerToGCGetProfileCardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetProfileCardDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetProfileCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetProfileCardDefaultTypeInternal _CMsgServerToGCGetProfileCard_default_instance_;
constexpr CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cards_(){}
struct CMsgServerToGCGetProfileCardResponseDefaultTypeInternal {
  constexpr CMsgServerToGCGetProfileCardResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetProfileCardResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetProfileCardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetProfileCardResponseDefaultTypeInternal _CMsgServerToGCGetProfileCardResponse_default_instance_;
constexpr CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , item_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u){}
struct CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal {
  constexpr CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal() {}
  union {
    CMsgServerToGCVictoryPredictions_Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal _CMsgServerToGCVictoryPredictions_Record_default_instance_;
constexpr CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(){}
struct CMsgServerToGCVictoryPredictionsDefaultTypeInternal {
  constexpr CMsgServerToGCVictoryPredictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCVictoryPredictionsDefaultTypeInternal() {}
  union {
    CMsgServerToGCVictoryPredictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCVictoryPredictionsDefaultTypeInternal _CMsgServerToGCVictoryPredictions_default_instance_;
constexpr CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgServerToGCRequestStatusDefaultTypeInternal {
  constexpr CMsgServerToGCRequestStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestStatusDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRequestStatusDefaultTypeInternal _CMsgServerToGCRequestStatus_default_instance_;
constexpr CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0u){}
struct CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal {
  constexpr CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal _CMsgServerToGCRequestStatus_Response_default_instance_;
constexpr CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : winning_players_()
  , losing_players_()
  , arcana_owners_()
  , target_hero_id_(0u)
  , assassin_won_(false)
  , contract_completed_(false)
  , pa_is_radiant_(false)
  , contract_complete_time_(0){}
struct CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal {
  constexpr CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutAssassinMiniGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal _CMsgSignOutAssassinMiniGameInfo_default_instance_;
constexpr CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(0)
{}
struct CMsgServerToGCGetIngameEventDataDefaultTypeInternal {
  constexpr CMsgServerToGCGetIngameEventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetIngameEventDataDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetIngameEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetIngameEventDataDefaultTypeInternal _CMsgServerToGCGetIngameEventData_default_instance_;
constexpr CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_hero_ids_(){}
struct CMsgGCToServerIngameEventDataOraclePADefaultTypeInternal {
  constexpr CMsgGCToServerIngameEventDataOraclePADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerIngameEventDataOraclePADefaultTypeInternal() {}
  union {
    CMsgGCToServerIngameEventDataOraclePA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerIngameEventDataOraclePADefaultTypeInternal _CMsgGCToServerIngameEventDataOraclePA_default_instance_;
constexpr CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : killer_hero_id_(0u)
  , victim_hero_id_(0u)
  , kill_count_(0u){}
struct CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal {
  constexpr CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal() {}
  union {
    CMsgServerToGCKillSummaries_KillSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal _CMsgServerToGCKillSummaries_KillSummary_default_instance_;
constexpr CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summaries_()
  , ingameevent_id_(0u){}
struct CMsgServerToGCKillSummariesDefaultTypeInternal {
  constexpr CMsgServerToGCKillSummariesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCKillSummariesDefaultTypeInternal() {}
  union {
    CMsgServerToGCKillSummaries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCKillSummariesDefaultTypeInternal _CMsgServerToGCKillSummaries_default_instance_;
constexpr CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : granted_item_defs_()
  , item_def_(0u)
  , num_correct_(0u)
  , num_fails_(0u)
  , result_(1)
{}
struct CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal {
  constexpr CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal() {}
  union {
    CMsgGCToServerPredictionResult_Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal _CMsgGCToServerPredictionResult_Prediction_default_instance_;
constexpr CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predictions_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , correct_(false){}
struct CMsgGCToServerPredictionResultDefaultTypeInternal {
  constexpr CMsgGCToServerPredictionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerPredictionResultDefaultTypeInternal() {}
  union {
    CMsgGCToServerPredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerPredictionResultDefaultTypeInternal _CMsgGCToServerPredictionResult_default_instance_;
constexpr CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u){}
struct CMsgServerToGCLockCharmTradingDefaultTypeInternal {
  constexpr CMsgServerToGCLockCharmTradingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCLockCharmTradingDefaultTypeInternal() {}
  union {
    CMsgServerToGCLockCharmTrading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCLockCharmTradingDefaultTypeInternal _CMsgServerToGCLockCharmTrading_default_instance_;
constexpr CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0)

  , slot_id_(0u)
  , sequence_id_(0u)
  , progress_(0u)
  , challenge_rank_(0u){}
struct CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal {
  constexpr CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal() {}
  union {
    CMsgSignOutUpdatePlayerChallenge_Challenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal _CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_;
constexpr CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completed_()
  , rerolled_()
  , account_id_(0u)
  , hero_id_(0u)
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal {
  constexpr CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal() {}
  union {
    CMsgSignOutUpdatePlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal _CMsgSignOutUpdatePlayerChallenge_default_instance_;
constexpr CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reroll_msg_(nullptr)
  , account_id_(0u){}
struct CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal {
  constexpr CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal() {}
  union {
    CMsgServerToGCRerollPlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal _CMsgServerToGCRerollPlayerChallenge_default_instance_;
constexpr CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , winnings_(0u)
  , max_wager_(0u)
  , wager_(0u){}
struct CMsgSignOutWagerStats_PlayerDefaultTypeInternal {
  constexpr CMsgSignOutWagerStats_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutWagerStats_PlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutWagerStats_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutWagerStats_PlayerDefaultTypeInternal _CMsgSignOutWagerStats_Player_default_instance_;
constexpr CMsgSignOutWagerStats::CMsgSignOutWagerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , event_id_(0)
{}
struct CMsgSignOutWagerStatsDefaultTypeInternal {
  constexpr CMsgSignOutWagerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutWagerStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutWagerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutWagerStatsDefaultTypeInternal _CMsgSignOutWagerStats_default_instance_;
constexpr CMsgSpendWager_Player::CMsgSpendWager_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , wager_(0u)
  , wager_token_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSpendWager_PlayerDefaultTypeInternal {
  constexpr CMsgSpendWager_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpendWager_PlayerDefaultTypeInternal() {}
  union {
    CMsgSpendWager_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpendWager_PlayerDefaultTypeInternal _CMsgSpendWager_Player_default_instance_;
constexpr CMsgSpendWager::CMsgSpendWager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , event_id_(0)

  , timestamp_(0u)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , server_steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSpendWagerDefaultTypeInternal {
  constexpr CMsgSpendWagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpendWagerDefaultTypeInternal() {}
  union {
    CMsgSpendWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpendWagerDefaultTypeInternal _CMsgSpendWager_default_instance_;
constexpr CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , xp_gained_(0u)
  , wager_token_item_id_(PROTOBUF_ULONGLONG(0))
  , coins_spent_(0u)
  , rank_wager_(0u)
  , wager_streak_(0u){}
struct CMsgSignOutXPCoins_PlayerDefaultTypeInternal {
  constexpr CMsgSignOutXPCoins_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutXPCoins_PlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutXPCoins_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutXPCoins_PlayerDefaultTypeInternal _CMsgSignOutXPCoins_Player_default_instance_;
constexpr CMsgSignOutXPCoins::CMsgSignOutXPCoins(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , event_id_(0)

  , timestamp_(0u){}
struct CMsgSignOutXPCoinsDefaultTypeInternal {
  constexpr CMsgSignOutXPCoinsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutXPCoinsDefaultTypeInternal() {}
  union {
    CMsgSignOutXPCoins _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutXPCoinsDefaultTypeInternal _CMsgSignOutXPCoins_default_instance_;
constexpr CMsgSignOutBounties_Bounty::CMsgSignOutBounties_Bounty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : issuer_account_id_(0u)
  , completer_account_id_(0u)
  , target_account_id_(0u){}
struct CMsgSignOutBounties_BountyDefaultTypeInternal {
  constexpr CMsgSignOutBounties_BountyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutBounties_BountyDefaultTypeInternal() {}
  union {
    CMsgSignOutBounties_Bounty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutBounties_BountyDefaultTypeInternal _CMsgSignOutBounties_Bounty_default_instance_;
constexpr CMsgSignOutBounties::CMsgSignOutBounties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bounties_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , event_id_(0)

  , timestamp_(0u){}
struct CMsgSignOutBountiesDefaultTypeInternal {
  constexpr CMsgSignOutBountiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutBountiesDefaultTypeInternal() {}
  union {
    CMsgSignOutBounties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutBountiesDefaultTypeInternal _CMsgSignOutBounties_default_instance_;
constexpr CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_goal_id_(0u)
  , increment_amount_(0u){}
struct CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal {
  constexpr CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunityGoalProgress_EventGoalIncrement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal _CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_;
constexpr CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_increments_()
  , event_id_(0)
{}
struct CMsgSignOutCommunityGoalProgressDefaultTypeInternal {
  constexpr CMsgSignOutCommunityGoalProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutCommunityGoalProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunityGoalProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutCommunityGoalProgressDefaultTypeInternal _CMsgSignOutCommunityGoalProgress_default_instance_;
constexpr CMsgServerToGCPostMatchTip::CMsgServerToGCPostMatchTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , event_id_(0)

  , tipper_account_id_(0u)
  , recipient_account_id_(0u)
  , tip_amount_(0u){}
struct CMsgServerToGCPostMatchTipDefaultTypeInternal {
  constexpr CMsgServerToGCPostMatchTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCPostMatchTipDefaultTypeInternal() {}
  union {
    CMsgServerToGCPostMatchTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCPostMatchTipDefaultTypeInternal _CMsgServerToGCPostMatchTip_default_instance_;
constexpr CMsgServerToGCPostMatchTipResponse::CMsgServerToGCPostMatchTipResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , tipper_account_id_(0u)
  , recipient_account_id_(0u)
  , result_(0)
{}
struct CMsgServerToGCPostMatchTipResponseDefaultTypeInternal {
  constexpr CMsgServerToGCPostMatchTipResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCPostMatchTipResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCPostMatchTipResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCPostMatchTipResponseDefaultTypeInternal _CMsgServerToGCPostMatchTipResponse_default_instance_;
constexpr CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , hltv_delay_(0u)
  , league_id_(0u){}
struct CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal {
  constexpr CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal() {}
  union {
    CMsgServerToGCCloseCompendiumInGamePredictionVoting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal _CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_;
constexpr CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false){}
struct CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal {
  constexpr CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal _CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_;
constexpr CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prediction_id_(0u)
  , prediction_value_(0u)
  , prediction_value_is_mask_(false){}
struct CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal {
  constexpr CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal _CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_;
constexpr CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , league_id_(0u)
  , league_node_id_(0u){}
struct CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal {
  constexpr CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumInGamePredictionResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal _CMsgServerToGCCompendiumInGamePredictionResults_default_instance_;
constexpr CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prediction_id_(0u){}
struct CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal {
  constexpr CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumChosenInGamePredictions_Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal _CMsgServerToGCCompendiumChosenInGamePredictions_Prediction_default_instance_;
constexpr CMsgServerToGCCompendiumChosenInGamePredictions::CMsgServerToGCCompendiumChosenInGamePredictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predictions_chosen_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , league_id_(0u){}
struct CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal {
  constexpr CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumChosenInGamePredictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal _CMsgServerToGCCompendiumChosenInGamePredictions_default_instance_;
constexpr CMsgServerToGCCompendiumInGamePredictionResultsResponse::CMsgServerToGCCompendiumInGamePredictionResultsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false){}
struct CMsgServerToGCCompendiumInGamePredictionResultsResponseDefaultTypeInternal {
  constexpr CMsgServerToGCCompendiumInGamePredictionResultsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumInGamePredictionResultsResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumInGamePredictionResultsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCompendiumInGamePredictionResultsResponseDefaultTypeInternal _CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_;
constexpr CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(nullptr){}
struct CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal {
  constexpr CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal() {}
  union {
    CMsgGCToGCCompendiumInGamePredictionResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_;
constexpr CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inventory_items_()
  , talents_skilled_()
  , item_(0u)
  , gold_(0u)
  , net_worth_(0u)
  , game_time_(0u){}
struct CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal {
  constexpr CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_;
constexpr CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allied_hero_ids_()
  , enemy_hero_ids_()
  , item_purchases_()
  , player_slot_(0u)
  , account_id_(0u)
  , hero_id_(0u)
  , lane_(0u)
  , is_winner_(false){}
struct CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal {
  constexpr CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerItemPurchaseHistory_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_;
constexpr CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , mmr_(0u){}
struct CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal {
  constexpr CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerItemPurchaseHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_;
constexpr CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inventory_items_()
  , talents_skilled_()
  , available_neutral_items_()
  , item_(0u)
  , game_time_(0u){}
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal {
  constexpr CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_default_instance_;
constexpr CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allied_hero_ids_()
  , enemy_hero_ids_()
  , item_equips_()
  , account_id_(0u)
  , is_winner_(false){}
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal {
  constexpr CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player_default_instance_;
constexpr CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CMsgServerToGCMatchPlayerNeutralItemEquipHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal {
  constexpr CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_default_instance_;
constexpr CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , net_worth_(0u)
  , level_(0u)
  , deaths_(0u)
  , respawn_time_(0u)
  , has_buyback_(false)
  , has_aegis_(false)
  , has_rapier_(false)
  , distance_(0u){}
struct CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal {
  constexpr CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory_PlayerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_PlayerState_default_instance_;
constexpr CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_states_()
  , tower_health_pct_()
  , barracks_health_pct_()
  , team_(0u)
  , ancient_health_pct_(0u)
  , glyph_cooldown_(0u)
  , kills_(0u)
  , creep_distance_safe_(0u)
  , creep_distance_mid_(0u)
  , creep_distance_off_(0u){}
struct CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal {
  constexpr CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory_TeamState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_TeamState_default_instance_;
constexpr CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radiant_state_(nullptr)
  , dire_state_(nullptr)
  , game_time_(0u){}
struct CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal {
  constexpr CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory_MatchState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_MatchState_default_instance_;
constexpr CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_states_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , radiant_won_(false)
  , mmr_(0u){}
struct CMsgServerToGCMatchStateHistoryDefaultTypeInternal {
  constexpr CMsgServerToGCMatchStateHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCMatchStateHistoryDefaultTypeInternal _CMsgServerToGCMatchStateHistory_default_instance_;
constexpr CMsgMatchStateSteamMLEntry::CMsgMatchStateSteamMLEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_state_(nullptr)
  , mmr_(0u)
  , radiant_won_(false){}
struct CMsgMatchStateSteamMLEntryDefaultTypeInternal {
  constexpr CMsgMatchStateSteamMLEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchStateSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgMatchStateSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchStateSteamMLEntryDefaultTypeInternal _CMsgMatchStateSteamMLEntry_default_instance_;
constexpr CMsgLaneSelectionSteamMLEntry::CMsgLaneSelectionSteamMLEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_ids_()
  , lanes_(){}
struct CMsgLaneSelectionSteamMLEntryDefaultTypeInternal {
  constexpr CMsgLaneSelectionSteamMLEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLaneSelectionSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgLaneSelectionSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLaneSelectionSteamMLEntryDefaultTypeInternal _CMsgLaneSelectionSteamMLEntry_default_instance_;
constexpr CMsgAbilitySelectionSteamMLEntry::CMsgAbilitySelectionSteamMLEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enemy_hero_ids_()
  , abilities_()
  , mmr_(0u)
  , hero_id_(0u)
  , lane_(0u)
  , selected_ability_(0u){}
struct CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal {
  constexpr CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgAbilitySelectionSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal _CMsgAbilitySelectionSteamMLEntry_default_instance_;
constexpr CMsgItemPurchasePregameSteamMLEntry::CMsgItemPurchasePregameSteamMLEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allied_hero_ids_()
  , enemy_hero_ids_()
  , items_()
  , mmr_(0u)
  , lane_(0u)
  , balance_(0)
  , hero_id_(0u){}
struct CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal {
  constexpr CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgItemPurchasePregameSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal _CMsgItemPurchasePregameSteamMLEntry_default_instance_;
constexpr CMsgItemPurchaseSteamMLEntry::CMsgItemPurchaseSteamMLEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allied_hero_ids_()
  , enemy_hero_ids_()
  , items_()
  , items_to_be_purchased_()
  , mmr_(0u)
  , lane_(0u)
  , hero_id_(0u){}
struct CMsgItemPurchaseSteamMLEntryDefaultTypeInternal {
  constexpr CMsgItemPurchaseSteamMLEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgItemPurchaseSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgItemPurchaseSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgItemPurchaseSteamMLEntryDefaultTypeInternal _CMsgItemPurchaseSteamMLEntry_default_instance_;
constexpr CMsgItemPurchaseSequenceSteamMLEntry::CMsgItemPurchaseSequenceSteamMLEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allied_hero_ids_()
  , enemy_hero_ids_()
  , items_()
  , mmr_(0u)
  , lane_(0u)
  , hero_id_(0u)
  , item_to_be_purchased_(0u){}
struct CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal {
  constexpr CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgItemPurchaseSequenceSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal _CMsgItemPurchaseSequenceSteamMLEntry_default_instance_;
constexpr CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0u)
  , account_id_(0u)
  , map_variant_(0u)
  , hero_id_(0u)
  , turbo_mode_(false){}
struct CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal {
  constexpr CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal() {}
  union {
    CMsgServerToGCCavernCrawlIsHeroActive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActive_default_instance_;
constexpr CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , challenge_type_(0)

  , challenge_id1_(0u)
  , challenge_id2_(0u)
  , progress_value_start_(0u)
  , progress_value_end_(0u)
  , audit_data_(PROTOBUF_ULONGLONG(0))
  , team_won_(false)
  , hero_id_(0u){}
struct CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal {
  constexpr CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal() {}
  union {
    CMsgServerToGCPlayerChallengeHistory_PlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal _CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_default_instance_;
constexpr CMsgServerToGCPlayerChallengeHistory::CMsgServerToGCPlayerChallengeHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : challenge_records_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , average_rank_(0u){}
struct CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal {
  constexpr CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCPlayerChallengeHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal _CMsgServerToGCPlayerChallengeHistory_default_instance_;
constexpr CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_id_completed_(0u)
  , room_id_claimed_(0u){}
struct CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal {
  constexpr CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal() {}
  union {
    CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_default_instance_;
constexpr CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_results_()
  , result_(false)
  , potential_winnings_(0u)
  , potential_plus_shard_winnings_(0u){}
struct CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal {
  constexpr CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCCavernCrawlIsHeroActiveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_;
constexpr CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_instance_(0u){}
struct CMsgGCtoServerTensorflowInstanceDefaultTypeInternal {
  constexpr CMsgGCtoServerTensorflowInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCtoServerTensorflowInstanceDefaultTypeInternal() {}
  union {
    CMsgGCtoServerTensorflowInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCtoServerTensorflowInstanceDefaultTypeInternal _CMsgGCtoServerTensorflowInstance_default_instance_;
constexpr CMsgDetailedGameStats_PlayerStatEntry::CMsgDetailedGameStats_PlayerStatEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_earned_gold_(0u)
  , total_networth_(0u)
  , level_(0u)
  , total_dps_(0u)
  , average_dps_(0u)
  , ability_damage_output_(0u)
  , base_health_(0u)
  , total_health_(0u)
  , total_mana_(0u)
  , base_physical_damage_reduction_pct_(0)
  , total_physical_damage_reduction_pct_(0)
  , base_ability_damage_reduction_pct_(0)
  , total_ability_damage_reduction_pct_(0)
  , ability_damage_block_(0)
  , physical_damage_block_(0)
  , mana_regen_(0u)
  , health_regen_(0u)
  , physical_magic_dmg_pct_(0)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , gold_from_kills_(0u)
  , gold_from_creeps_(0u)
  , gold_shared_(0u)
  , xp_from_kills_(0u)
  , xp_from_creeps_(0u)
  , total_xp_(0u)
  , ability_casts_(0u)
  , item_casts_(0u)
  , total_time_stunned_(0)
  , item_count_(0u){}
struct CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal {
  constexpr CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_PlayerStatEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal _CMsgDetailedGameStats_PlayerStatEntry_default_instance_;
constexpr CMsgDetailedGameStats_GameStats::CMsgDetailedGameStats_GameStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tower_death_time_t1_(0u)
  , tower_death_time_t2_(0u)
  , tower_death_time_t3_(0u){}
struct CMsgDetailedGameStats_GameStatsDefaultTypeInternal {
  constexpr CMsgDetailedGameStats_GameStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_GameStatsDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_GameStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDetailedGameStats_GameStatsDefaultTypeInternal _CMsgDetailedGameStats_GameStats_default_instance_;
constexpr CMsgDetailedGameStats_MinuteEntry::CMsgDetailedGameStats_MinuteEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , minute_(0u){}
struct CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal {
  constexpr CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_MinuteEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal _CMsgDetailedGameStats_MinuteEntry_default_instance_;
constexpr CMsgDetailedGameStats_PlayerInfo::CMsgDetailedGameStats_PlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , hero_id_(0u)
  , player_slot_(0u){}
struct CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal {
  constexpr CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal _CMsgDetailedGameStats_PlayerInfo_default_instance_;
constexpr CMsgDetailedGameStats::CMsgDetailedGameStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minutes_()
  , player_info_()
  , game_stats_(nullptr){}
struct CMsgDetailedGameStatsDefaultTypeInternal {
  constexpr CMsgDetailedGameStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDetailedGameStatsDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDetailedGameStatsDefaultTypeInternal _CMsgDetailedGameStats_default_instance_;
constexpr CMsgAllStarStats_PlayerStats::CMsgAllStarStats_PlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : killstreak_()
  , num_multi_kills_()
  , account_id_(0u)
  , player_id_(0u)
  , killstreak_ended_(0u)
  , roshan_kills_(0u)
  , first_bloods_(0u)
  , courier_kills_(0u)
  , tower_kills_(0u)
  , first_taunt_(false)
  , first_high_five_(false)
  , first_ceb_(false)
  , first_tip_(false)
  , first_rapier_(false)
  , first_aegis_deny_(false)
  , last_to_die_(false)
  , first_to_wipe_(false)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u){}
struct CMsgAllStarStats_PlayerStatsDefaultTypeInternal {
  constexpr CMsgAllStarStats_PlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAllStarStats_PlayerStatsDefaultTypeInternal() {}
  union {
    CMsgAllStarStats_PlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAllStarStats_PlayerStatsDefaultTypeInternal _CMsgAllStarStats_PlayerStats_default_instance_;
constexpr CMsgAllStarStats::CMsgAllStarStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_stats_(){}
struct CMsgAllStarStatsDefaultTypeInternal {
  constexpr CMsgAllStarStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAllStarStatsDefaultTypeInternal() {}
  union {
    CMsgAllStarStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAllStarStatsDefaultTypeInternal _CMsgAllStarStats_default_instance_;
constexpr CMsgNeutralItemStats_NeutralItem::CMsgNeutralItemStats_NeutralItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(0u)
  , time_dropped_(0u)
  , team_(0u)
  , time_last_equipped_(0u)
  , time_last_unequipped_(0u)
  , duration_equipped_(0u){}
struct CMsgNeutralItemStats_NeutralItemDefaultTypeInternal {
  constexpr CMsgNeutralItemStats_NeutralItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNeutralItemStats_NeutralItemDefaultTypeInternal() {}
  union {
    CMsgNeutralItemStats_NeutralItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNeutralItemStats_NeutralItemDefaultTypeInternal _CMsgNeutralItemStats_NeutralItem_default_instance_;
constexpr CMsgNeutralItemStats::CMsgNeutralItemStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neutral_items_(){}
struct CMsgNeutralItemStatsDefaultTypeInternal {
  constexpr CMsgNeutralItemStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNeutralItemStatsDefaultTypeInternal() {}
  union {
    CMsgNeutralItemStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNeutralItemStatsDefaultTypeInternal _CMsgNeutralItemStats_default_instance_;
constexpr CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , ban_count_(0u)
  , pick_count_(0u){}
struct CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal {
  constexpr CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal() {}
  union {
    CMsgGCToServerLobbyHeroBanRates_HeroBanEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal _CMsgGCToServerLobbyHeroBanRates_HeroBanEntry_default_instance_;
constexpr CMsgGCToServerLobbyHeroBanRates::CMsgGCToServerLobbyHeroBanRates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ban_data_(){}
struct CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal {
  constexpr CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal() {}
  union {
    CMsgGCToServerLobbyHeroBanRates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal _CMsgGCToServerLobbyHeroBanRates_default_instance_;
constexpr CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contracts_()
  , guild_id_(0u)
  , event_id_(0u){}
struct CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal {
  constexpr CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildContractProgress_CompletedGuildEventContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal _CMsgSignOutGuildContractProgress_CompletedGuildEventContracts_default_instance_;
constexpr CMsgSignOutGuildContractProgress_PlayerContract::CMsgSignOutGuildContractProgress_PlayerContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completed_contracts_()
  , account_id_(0u){}
struct CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal {
  constexpr CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildContractProgress_PlayerContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal _CMsgSignOutGuildContractProgress_PlayerContract_default_instance_;
constexpr CMsgSignOutGuildContractProgress::CMsgSignOutGuildContractProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_contracts_(){}
struct CMsgSignOutGuildContractProgressDefaultTypeInternal {
  constexpr CMsgSignOutGuildContractProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGuildContractProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildContractProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGuildContractProgressDefaultTypeInternal _CMsgSignOutGuildContractProgress_default_instance_;
constexpr CMsgSignOutGuildChallengeProgress_ChallengeProgress::CMsgSignOutGuildChallengeProgress_ChallengeProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0u)
  , challenge_instance_id_(0u)
  , challenge_instance_timestamp_(0u)
  , challenge_period_serial_(0u)
  , progress_(0u)
  , challenge_parameter_(0u){}
struct CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal {
  constexpr CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildChallengeProgress_ChallengeProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal _CMsgSignOutGuildChallengeProgress_ChallengeProgress_default_instance_;
constexpr CMsgSignOutGuildChallengeProgress::CMsgSignOutGuildChallengeProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_challenges_progresses_(){}
struct CMsgSignOutGuildChallengeProgressDefaultTypeInternal {
  constexpr CMsgSignOutGuildChallengeProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutGuildChallengeProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildChallengeProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutGuildChallengeProgressDefaultTypeInternal _CMsgSignOutGuildChallengeProgress_default_instance_;
constexpr CMsgSignOutMVPStats_Player_KillEaterEvent::CMsgSignOutMVPStats_Player_KillEaterEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_type_(0u)
  , amount_(0u){}
struct CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal {
  constexpr CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal() {}
  union {
    CMsgSignOutMVPStats_Player_KillEaterEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal _CMsgSignOutMVPStats_Player_KillEaterEvent_default_instance_;
constexpr CMsgSignOutMVPStats_Player::CMsgSignOutMVPStats_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kill_eater_events_()
  , team_id_(0u)
  , team_networth_rank_(0u)
  , account_id_(0u)
  , hero_id_(0u)
  , role_(0u)
  , kills_(0)
  , deaths_(0)
  , assists_(0)
  , xp_(0)
  , net_worth_(0)
  , support_gold_spent_(0)
  , wards_placed_(0)
  , wards_spotted_for_dewarding_(0)
  , camps_stacked_(0)
  , last_hits_(0)
  , denies_(0)
  , building_damage_(0)
  , other_damage_(0)
  , triple_kills_(0)
  , rampages_(0)
  , first_blood_(0)
  , slot_(0u)
  , rank_(0u)
  , highest_killstreak_(0u){}
struct CMsgSignOutMVPStats_PlayerDefaultTypeInternal {
  constexpr CMsgSignOutMVPStats_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutMVPStats_PlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutMVPStats_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutMVPStats_PlayerDefaultTypeInternal _CMsgSignOutMVPStats_Player_default_instance_;
constexpr CMsgSignOutMVPStats::CMsgSignOutMVPStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , game_mode_(0u)
  , winning_team_(0u)
  , game_time_(0){}
struct CMsgSignOutMVPStatsDefaultTypeInternal {
  constexpr CMsgSignOutMVPStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSignOutMVPStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutMVPStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSignOutMVPStatsDefaultTypeInternal _CMsgSignOutMVPStats_default_instance_;
constexpr CMsgGCToServerRecordTrainingData::CMsgGCToServerRecordTrainingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_(false){}
struct CMsgGCToServerRecordTrainingDataDefaultTypeInternal {
  constexpr CMsgGCToServerRecordTrainingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerRecordTrainingDataDefaultTypeInternal() {}
  union {
    CMsgGCToServerRecordTrainingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerRecordTrainingDataDefaultTypeInternal _CMsgGCToServerRecordTrainingData_default_instance_;
constexpr CMsgServerToGCGetGuildContracts::CMsgServerToGCGetGuildContracts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_(){}
struct CMsgServerToGCGetGuildContractsDefaultTypeInternal {
  constexpr CMsgServerToGCGetGuildContractsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetGuildContractsDefaultTypeInternal _CMsgServerToGCGetGuildContracts_default_instance_;
constexpr CMsgServerToGCGetGuildContractsResponse_ContractDetails::CMsgServerToGCGetGuildContractsResponse_ContractDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(PROTOBUF_ULONGLONG(0))
  , challenge_instance_id_(0u)
  , challenge_parameter_(0u)
  , contract_stars_(0u)
  , contract_slot_(0u){}
struct CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal {
  constexpr CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContractsResponse_ContractDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_ContractDetails_default_instance_;
constexpr CMsgServerToGCGetGuildContractsResponse_Player::CMsgServerToGCGetGuildContractsResponse_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contracts_()
  , account_id_(0u)
  , guild_id_(0u)
  , event_id_(0)
{}
struct CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal {
  constexpr CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContractsResponse_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_Player_default_instance_;
constexpr CMsgServerToGCGetGuildContractsResponse::CMsgServerToGCGetGuildContractsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_contracts_(){}
struct CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal {
  constexpr CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContractsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_default_instance_;
constexpr CMsgMatchDiretideCandy_CandyDetails::CMsgMatchDiretideCandy_CandyDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(0u)
  , audit_(0u){}
struct CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal {
  constexpr CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal() {}
  union {
    CMsgMatchDiretideCandy_CandyDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal _CMsgMatchDiretideCandy_CandyDetails_default_instance_;
constexpr CMsgMatchDiretideCandy_PlayerCandy::CMsgMatchDiretideCandy_PlayerCandy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candy_breakdown_()
  , account_id_(0u)
  , candy_amount_(0u)
  , consumes_periodic_resource_(false){}
struct CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal {
  constexpr CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal() {}
  union {
    CMsgMatchDiretideCandy_PlayerCandy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal _CMsgMatchDiretideCandy_PlayerCandy_default_instance_;
constexpr CMsgMatchDiretideCandy::CMsgMatchDiretideCandy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_candy_data_()
  , event_id_(0)
{}
struct CMsgMatchDiretideCandyDefaultTypeInternal {
  constexpr CMsgMatchDiretideCandyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchDiretideCandyDefaultTypeInternal() {}
  union {
    CMsgMatchDiretideCandy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchDiretideCandyDefaultTypeInternal _CMsgMatchDiretideCandy_default_instance_;
constexpr CMsgGCToServerCheerData_CheerTypeCount::CMsgGCToServerCheerData_CheerTypeCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_type_(0u)
  , cheer_count_(0u){}
struct CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal {
  constexpr CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerData_CheerTypeCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal _CMsgGCToServerCheerData_CheerTypeCount_default_instance_;
constexpr CMsgGCToServerCheerData::CMsgGCToServerCheerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_types_()
  , radiant_cheers_(0u)
  , dire_cheers_(0u)
  , radiant_premium_cheers_(0u)
  , dire_premium_cheers_(0u){}
struct CMsgGCToServerCheerDataDefaultTypeInternal {
  constexpr CMsgGCToServerCheerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerDataDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerCheerDataDefaultTypeInternal _CMsgGCToServerCheerData_default_instance_;
constexpr CMsgCheerConfig::CMsgCheerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheers_enabled_(false)
  , is_valid_league_id_(false)
  , window_duration_(0)
  , window_bucket_count_(0u)
  , crowd_level_push_time_(0)
  , crowd_level_low_(0u)
  , crowd_level_medium_(0u)
  , crowd_level_high_(0u)
  , cheer_scale_start_(0)
  , cheer_scale_speed_(0)
  , cheer_scale_push_mark_(0u)
  , cheer_scale_pull_mark_(0u)
  , cheer_scale_pct_of_max_cps_clamp_(0)
  , cheer_factor_bronze_(0)
  , cheer_factor_silver_(0)
  , cheer_scale_dampener_lerp_time_(0u)
  , cheer_factor_gold_(0)
  , cheer_scale_dampener_value_(0){}
struct CMsgCheerConfigDefaultTypeInternal {
  constexpr CMsgCheerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCheerConfigDefaultTypeInternal() {}
  union {
    CMsgCheerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCheerConfigDefaultTypeInternal _CMsgCheerConfig_default_instance_;
constexpr CMsgGCToServerCheerConfig::CMsgGCToServerCheerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_config_(nullptr){}
struct CMsgGCToServerCheerConfigDefaultTypeInternal {
  constexpr CMsgGCToServerCheerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerConfigDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerCheerConfigDefaultTypeInternal _CMsgGCToServerCheerConfig_default_instance_;
constexpr CMsgServerToGCGetCheerConfig::CMsgServerToGCGetCheerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u){}
struct CMsgServerToGCGetCheerConfigDefaultTypeInternal {
  constexpr CMsgServerToGCGetCheerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetCheerConfigDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetCheerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetCheerConfigDefaultTypeInternal _CMsgServerToGCGetCheerConfig_default_instance_;
constexpr CMsgServerToGCGetCheerConfigResponse::CMsgServerToGCGetCheerConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_config_(nullptr){}
struct CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal {
  constexpr CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetCheerConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal _CMsgServerToGCGetCheerConfigResponse_default_instance_;
constexpr CMsgGCToServerCheerScalesOverride::CMsgGCToServerCheerScalesOverride(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scales_(){}
struct CMsgGCToServerCheerScalesOverrideDefaultTypeInternal {
  constexpr CMsgGCToServerCheerScalesOverrideDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerScalesOverrideDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerScalesOverride _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerCheerScalesOverrideDefaultTypeInternal _CMsgGCToServerCheerScalesOverride_default_instance_;
constexpr CMsgGCToServerGetCheerState::CMsgGCToServerGetCheerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToServerGetCheerStateDefaultTypeInternal {
  constexpr CMsgGCToServerGetCheerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerGetCheerStateDefaultTypeInternal() {}
  union {
    CMsgGCToServerGetCheerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerGetCheerStateDefaultTypeInternal _CMsgGCToServerGetCheerState_default_instance_;
constexpr CMsgCheerTypeState::CMsgCheerTypeState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_counts_()
  , max_per_second_(0)
  , cheer_scale_(0)
  , override_scale_(0){}
struct CMsgCheerTypeStateDefaultTypeInternal {
  constexpr CMsgCheerTypeStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCheerTypeStateDefaultTypeInternal() {}
  union {
    CMsgCheerTypeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCheerTypeStateDefaultTypeInternal _CMsgCheerTypeState_default_instance_;
constexpr CMsgCheerState::CMsgCheerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_types_()
  , radiant_crowd_level_(0u)
  , dire_crowd_level_(0u){}
struct CMsgCheerStateDefaultTypeInternal {
  constexpr CMsgCheerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCheerStateDefaultTypeInternal() {}
  union {
    CMsgCheerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCheerStateDefaultTypeInternal _CMsgCheerState_default_instance_;
constexpr CMsgServerToGCReportCheerState::CMsgServerToGCReportCheerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_config_(nullptr)
  , cheer_state_(nullptr){}
struct CMsgServerToGCReportCheerStateDefaultTypeInternal {
  constexpr CMsgServerToGCReportCheerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCReportCheerStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCReportCheerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCReportCheerStateDefaultTypeInternal _CMsgServerToGCReportCheerState_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fserver_2eproto[189];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, disconnect_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, num_bad_intervals_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, peak_loss_pct_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, detection_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, players_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, sentinel_save_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, server_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, engine_),
  0,
  1,
  2,
  3,
  9,
  11,
  4,
  5,
  6,
  7,
  8,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, leaver_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, disconnect_reason_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, connected_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, disconnected_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, poor_network_conditions_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, send_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, radiant_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, dire_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, radiant_lead_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, building_state_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  3,
  4,
  6,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_private_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, assigned_server_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, legacy_server_steamdatagram_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_hibernation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_loadavg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_tv_broadcast_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_relay_connected_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relay_slots_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relays_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relay_clients_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relayed_game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, parent_relay_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, tv_secret_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, allow_custom_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, build_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, tf_server_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, srcds_instance_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, dev_force_server_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, is_recording_match_training_data_),
  2,
  3,
  4,
  5,
  23,
  1,
  0,
  20,
  6,
  7,
  8,
  9,
  11,
  10,
  12,
  13,
  14,
  15,
  17,
  16,
  18,
  19,
  24,
  25,
  26,
  27,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, leaver_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, server_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, disconnect_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, poor_network_conditions_),
  2,
  3,
  0,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetectedResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetectedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetectedResponse, result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyFinalPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyFinalPlayerStats, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLivePlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLivePlayerStats, stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, team_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMatch, team_2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAUpdateClippy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAUpdateClippy, good_team_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAUpdateClippy, bad_team_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRealtimeStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRealtimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRealtimeStats, delayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRealtimeStatsStartStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRealtimeStatsStartStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRealtimeStatsStartStop, delayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerUpdateSteamBroadcasting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerUpdateSteamBroadcasting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerUpdateSteamBroadcasting, active_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, timed_player_stats_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, is_winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, is_radiant_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, timed_team_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, players_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, dota_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, winner_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, pre_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, post_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, damage_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, item_purchase_times_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, xp_per_minute_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, time_last_seen_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, support_ability_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, claimed_farm_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, support_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, claimed_denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, claimed_misses_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, misses_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, additional_units_inventory_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, permanent_buffs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, match_player_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, talent_ability_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_pick_order_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_was_randomed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_was_dota_plus_suggestion_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, is_using_plus_guide_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_received_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, seconds_dead_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, gold_lost_to_death_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, command_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, mouse_click_cast_command_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, teleports_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, cavern_crawl_map_variant_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, outposts_captured_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, dewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, player_slot_),
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  19,
  18,
  20,
  21,
  22,
  23,
  24,
  25,
  27,
  28,
  29,
  ~0u,
  ~0u,
  ~0u,
  0,
  26,
  ~0u,
  30,
  32,
  33,
  31,
  34,
  ~0u,
  ~0u,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, contents_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, replay_time_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CCustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CCustomGameData, publish_timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, name_suffix_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_3_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_4_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_5_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, placed_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, building_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, creep_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, roshan_alive_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, position_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, position_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, good_guys_win_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, date_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, num_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, tower_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, barracks_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, server_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, first_blood_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, event_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, picks_bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, fantasy_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, player_strange_count_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, automatic_surrender_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, poor_network_conditions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, additional_msgs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, social_feed_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, average_networth_delta_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, match_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, team_scores_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, pre_game_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, event_game_leaderboard_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, ward_placements_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, gameplay_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, extra_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, training_data_recorded_),
  4,
  5,
  12,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  0,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  13,
  10,
  1,
  ~0u,
  ~0u,
  11,
  2,
  15,
  ~0u,
  16,
  ~0u,
  ~0u,
  3,
  ~0u,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, radiant_captain_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, dire_captain_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, picks_bans_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, created_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, bot_difficulty_dire_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, caused_text_mute_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, chat_message_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo, text_mute_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, rampages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, first_blood_claimed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, first_blood_given_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, aegises_snatched_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, cheeses_eaten_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, creeps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, fight_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, farm_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, support_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, push_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, xppm_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, heals_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, rapiers_purchased_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, wards_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, lobby_type_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, max_pings_per_interval_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, teammate_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, max_teammate_pings_per_interval_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, team_chat_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, all_chat_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, chat_wheel_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, pauses_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, unpauses_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, lines_drawn_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, voice_chat_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, chat_mutes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, voice_mutes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, ping_details_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, win_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, games_played_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, replay_salt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, xp_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, leagueid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, metadata_private_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, match_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, players_metadata_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, mvp_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, ow_private_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, ow_salt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, ow_replay_id_),
  2,
  3,
  ~0u,
  ~0u,
  4,
  5,
  0,
  ~0u,
  1,
  7,
  6,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTimedRewardContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTimedRewardContainer, timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, local_attempt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, total_attempt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, seconds_waited_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, permission_granted_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, abandon_signout_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, retry_delay_seconds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, game_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, event_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, start_time_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, server_average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, server_max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_output_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_output_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, average_input_processing_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, max_input_processing_time_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutBanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutBanData, hero_bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutBanData, hero_ban_votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, player_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, hero_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, xp_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, item0_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, item1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, item2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, item3_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, item4_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, item5_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, respawn_timer_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, position_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, position_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, abilities_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, tower_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, barracks_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, hero_picks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, hero_bans_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, hltv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, team_good_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, team_bad_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, roshan_respawn_timer_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, match_id_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, rank_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, prevent_text_chat_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, prevent_voice_chat_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, rank_calibrated_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, low_priority_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, is_new_player_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, is_guide_player_),
  0,
  2,
  3,
  1,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerFailedToConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerFailedToConnect, failed_loaders_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerFailedToConnect, abandoned_loaders_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, source_tv_public_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, source_tv_private_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, source_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, parent_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, tv_unique_secret_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, source_tv_steamid_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGCToLANServerRelayConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGCToLANServerRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGCToLANServerRelayConnect, relay_steamid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusRequest, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, low_priority_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, text_chat_banned_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, voice_chat_banned_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, killer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, victim_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, tv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, dota_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, replay_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, loot_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, event_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, multi_kill_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, winner_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, loser_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, hero_statues_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, viewers_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgTeamFanfare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTeamFanfare, match_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, fanfare_goodguys_),
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, fanfare_badguys_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, save_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, player_steam_ids_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerSaveGameResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerSaveGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerSaveGameResult, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGame, save_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGameResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGameResult, save_game_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeList, prize_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeList, highest_roshan_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeListResponse, item_defs_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeListResponse, steam_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGenerateDiretidePrizeListResponse, prize_list_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARewardDiretidePrizes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARewardDiretidePrizes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARewardDiretidePrizes, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARewardDiretidePrizes, prize_list_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADiretidePrizesRewardedResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADiretidePrizesRewardedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADiretidePrizesRewardedResponse, prize_list_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, premium_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, trade_ban_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, eligible_for_periodic_adjustment_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, point_cap_periodic_resource_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, award_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, audit_action_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, loot_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, player_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, no_trade_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, randomize_reward_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops, drops_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCSignoutAwardAdditionalDrops, match_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed_User, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed_User, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed_User, time_elapsed_s_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed, seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed, users_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFrostivusTimeElapsed, match_id_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, request_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, request_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, cluster_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerConsoleCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerConsoleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerConsoleCommand, console_command_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPoints, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPoints, account_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse_Points, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse_Points, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse_Points, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse_Points, points_total_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse_Points, owned_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGetEventPointsResponse, points_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, question_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, expire_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, survey_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, extra_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission_Survey, extra_data_32_),
  0,
  1,
  5,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermission, surveys_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermissionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGrantSurveyPermissionResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, avg_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, packet_loss_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, ping_deviation_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, full_resends_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, region_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, cluster_id_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerGCUpdateSpectatorCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGCUpdateSpectatorCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGCUpdateSpectatorCount, spectator_count_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, id_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, value_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary, strings_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, version_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, dictionary_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, entries_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, equips_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetAdditionalEquipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetAdditionalEquipsResponse, equips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetProfileCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetProfileCard, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetProfileCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetProfileCardResponse, cards_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, item_ids_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus_Response, response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, winning_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, losing_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, arcana_owners_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, assassin_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, target_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, contract_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, contract_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, pa_is_radiant_),
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetIngameEventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetIngameEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetIngameEventData, event_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerIngameEventDataOraclePA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerIngameEventDataOraclePA, target_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, killer_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, victim_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, kill_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, ingameevent_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, summaries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, num_correct_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, num_fails_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, granted_item_defs_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, correct_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, predictions_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, progress_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, challenge_rank_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, rerolled_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, hero_id_),
  0,
  ~0u,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, reroll_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats_Player, winnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats_Player, max_wager_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats_Player, wager_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutWagerStats, event_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, wager_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, wager_token_item_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, server_steam_id_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, xp_gained_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, coins_spent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, wager_token_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, rank_wager_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, wager_streak_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, timestamp_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, issuer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, completer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, target_account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, bounties_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, timestamp_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, event_goal_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, increment_amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, event_increments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTip, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTip, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTip, tipper_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTip, recipient_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTip, tip_amount_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTipResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTipResponse, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTipResponse, tipper_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTipResponse, recipient_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPostMatchTipResponse, result_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, hltv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, league_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_value_is_mask_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, results_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, league_node_id_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction, prediction_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, predictions_chosen_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, league_id_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResultsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResultsResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCompendiumInGamePredictionResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCompendiumInGamePredictionResults, results_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, item_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, inventory_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, talents_skilled_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, item_purchases_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, is_winner_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, players_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, item_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, inventory_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, talents_skilled_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, available_neutral_items_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, item_equips_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, is_winner_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, players_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, has_buyback_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, has_aegis_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, has_rapier_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, player_states_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, tower_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, barracks_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, ancient_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, glyph_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, creep_distance_safe_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, creep_distance_mid_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, creep_distance_off_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, radiant_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, dire_state_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, radiant_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, match_states_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, match_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, radiant_won_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLaneSelectionSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLaneSelectionSteamMLEntry, hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgLaneSelectionSteamMLEntry, lanes_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, selected_ability_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, items_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, items_to_be_purchased_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, item_to_be_purchased_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, map_variant_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, turbo_mode_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, challenge_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, challenge_id1_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, challenge_id2_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, progress_value_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, progress_value_end_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, team_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, audit_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, hero_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, average_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, challenge_records_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, path_id_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, room_id_claimed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, potential_winnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, map_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, potential_plus_shard_winnings_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoServerTensorflowInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoServerTensorflowInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoServerTensorflowInstance, server_instance_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_earned_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_networth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_dps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, average_dps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, ability_damage_output_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, base_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_mana_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, base_physical_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_physical_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, base_ability_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_ability_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, ability_damage_block_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, physical_damage_block_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, mana_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, health_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, physical_magic_dmg_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, gold_from_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, gold_from_creeps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, gold_shared_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, xp_from_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, xp_from_creeps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, ability_casts_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, item_casts_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, total_time_stunned_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, item_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, tower_death_time_t1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, tower_death_time_t2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, tower_death_time_t3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, minute_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, player_slot_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, minutes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, player_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, game_stats_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, killstreak_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, num_multi_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, killstreak_ended_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_bloods_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, courier_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_taunt_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_high_five_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_ceb_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_tip_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_rapier_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_aegis_deny_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, last_to_die_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, first_to_wipe_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats_PlayerStats, assists_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAllStarStats, player_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, time_dropped_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, time_last_equipped_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, time_last_unequipped_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, duration_equipped_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats, neutral_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, ban_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, pick_count_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates, ban_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, contracts_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, completed_contracts_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress, player_contracts_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, challenge_instance_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, challenge_period_serial_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, progress_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, challenge_parameter_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress, guild_challenges_progresses_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, team_networth_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, role_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, support_gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, wards_spotted_for_dewarding_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, building_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, other_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, rampages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, first_blood_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, kill_eater_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, highest_killstreak_),
  0,
  1,
  2,
  21,
  22,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  ~0u,
  23,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, players_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRecordTrainingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRecordTrainingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRecordTrainingData, enable_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContracts, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, contract_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, contract_stars_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, contract_slot_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, contracts_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse, player_contracts_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, audit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, candy_amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, consumes_periodic_resource_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, candy_breakdown_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, player_candy_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, event_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, cheer_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, cheer_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, cheer_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, radiant_cheers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, dire_cheers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, radiant_premium_cheers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, dire_premium_cheers_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheers_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, is_valid_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, window_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, window_bucket_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, crowd_level_push_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, crowd_level_low_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, crowd_level_medium_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, crowd_level_high_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_scale_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_scale_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_scale_push_mark_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_scale_pull_mark_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_scale_pct_of_max_cps_clamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_scale_dampener_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_scale_dampener_lerp_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_factor_bronze_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_factor_silver_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, cheer_factor_gold_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  17,
  15,
  13,
  14,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerConfig, cheer_config_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfig, league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfigResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfigResponse, cheer_config_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerScalesOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerScalesOverride, scales_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerGetCheerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, cheer_counts_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, max_per_second_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, cheer_scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, override_scale_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, cheer_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, radiant_crowd_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, dire_crowd_level_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, cheer_config_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, cheer_state_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgPoorNetworkConditions_Player)},
  { 13, 20, sizeof(::CMsgPoorNetworkConditions)},
  { 22, 39, sizeof(::CMsgGameserverCrash)},
  { 51, 60, sizeof(::CMsgConnectedPlayers_Player)},
  { 64, 79, sizeof(::CMsgConnectedPlayers)},
  { 89, 122, sizeof(::CMsgGameServerInfo)},
  { 150, 161, sizeof(::CMsgLeaverDetected)},
  { 167, 173, sizeof(::CMsgLeaverDetectedResponse)},
  { 174, -1, sizeof(::CMsgDOTAFantasyFinalPlayerStats)},
  { 180, -1, sizeof(::CMsgDOTAFantasyLivePlayerStats)},
  { 186, 198, sizeof(::CMsgDOTAFantasyMatch)},
  { 205, -1, sizeof(::CMsgDOTAUpdateClippy)},
  { 212, 218, sizeof(::CMsgServerToGCRealtimeStats)},
  { 219, 225, sizeof(::CMsgGCToServerRealtimeStatsStartStop)},
  { 226, 232, sizeof(::CMsgGCToServerUpdateSteamBroadcasting)},
  { 233, 242, sizeof(::CMsgSignOutGameplayStats_CPlayer)},
  { 246, 255, sizeof(::CMsgSignOutGameplayStats_CTeam)},
  { 259, -1, sizeof(::CMsgSignOutGameplayStats)},
  { 265, 272, sizeof(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData)},
  { 274, 282, sizeof(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived)},
  { 285, 345, sizeof(::CMsgGameMatchSignOut_CTeam_CPlayer)},
  { 400, -1, sizeof(::CMsgGameMatchSignOut_CTeam)},
  { 406, 413, sizeof(::CMsgGameMatchSignOut_CAdditionalSignoutMsg)},
  { 415, 425, sizeof(::CMsgGameMatchSignOut_CSocialFeedMatchEvent)},
  { 430, 436, sizeof(::CMsgGameMatchSignOut_CCustomGameData)},
  { 437, 449, sizeof(::CMsgGameMatchSignOut_EventGameLeaderboardEntry)},
  { 456, 469, sizeof(::CMsgGameMatchSignOut_WardPlacement)},
  { 477, 512, sizeof(::CMsgGameMatchSignOut)},
  { 542, 550, sizeof(::CMsgSignOutDraftInfo)},
  { 553, 562, sizeof(::CMsgSignOutBotInfo)},
  { 566, 574, sizeof(::CMsgSignOutTextMuteInfo_TextMuteMessage)},
  { 577, -1, sizeof(::CMsgSignOutTextMuteInfo)},
  { 583, 618, sizeof(::CMsgSignOutPlayerStats)},
  { 648, 655, sizeof(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail)},
  { 657, 677, sizeof(::CMsgSignOutCommunicationSummary_PlayerCommunication)},
  { 692, -1, sizeof(::CMsgSignOutCommunicationSummary)},
  { 698, 716, sizeof(::CMsgGameMatchSignoutResponse_PlayerMetadata)},
  { 729, 746, sizeof(::CMsgGameMatchSignoutResponse)},
  { 758, -1, sizeof(::CMsgTimedRewardContainer)},
  { 764, 773, sizeof(::CMsgGameMatchSignOutPermissionRequest)},
  { 777, 785, sizeof(::CMsgGameMatchSignOutPermissionResponse)},
  { 788, 798, sizeof(::CMsgGameMatchSignOutEventGameData)},
  { 803, 830, sizeof(::CMsgGameMatchSignOutPerfData)},
  { 852, -1, sizeof(::CMsgGameMatchSignOutBanData)},
  { 859, 866, sizeof(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility)},
  { 868, 900, sizeof(::CMsgDOTALiveScoreboardUpdate_Team_Player)},
  { 927, 938, sizeof(::CMsgDOTALiveScoreboardUpdate_Team)},
  { 944, 958, sizeof(::CMsgDOTALiveScoreboardUpdate)},
  { 967, -1, sizeof(::CMsgServerToGCRequestBatchPlayerResources)},
  { 974, 987, sizeof(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result)},
  { 995, -1, sizeof(::CMsgServerToGCRequestBatchPlayerResourcesResponse)},
  { 1001, -1, sizeof(::CMsgDOTAPlayerFailedToConnect)},
  { 1008, 1020, sizeof(::CMsgGCToRelayConnect)},
  { 1027, 1033, sizeof(::CMsgGCGCToLANServerRelayConnect)},
  { 1034, -1, sizeof(::CMsgGCToRelayConnectResponse)},
  { 1039, 1045, sizeof(::CMsgGCBanStatusRequest)},
  { 1046, 1055, sizeof(::CMsgGCBanStatusResponse)},
  { 1059, 1076, sizeof(::CMsgTournamentItemEvent)},
  { 1088, 1095, sizeof(::CMsgTournamentItemEventResponse)},
  { 1097, 1103, sizeof(::CMsgTeamFanfare)},
  { 1104, 1111, sizeof(::CMsgResponseTeamFanfare)},
  { 1113, 1122, sizeof(::CMsgGameServerUploadSaveGame)},
  { 1126, 1132, sizeof(::CMsgGameServerSaveGameResult)},
  { 1133, 1139, sizeof(::CMsgGameServerGetLoadGame)},
  { 1140, 1146, sizeof(::CMsgGameServerGetLoadGameResult)},
  { 1147, 1154, sizeof(::CMsgDOTAGenerateDiretidePrizeList)},
  { 1156, 1164, sizeof(::CMsgDOTAGenerateDiretidePrizeListResponse)},
  { 1167, 1174, sizeof(::CMsgDOTARewardDiretidePrizes)},
  { 1176, 1182, sizeof(::CMsgDOTADiretidePrizesRewardedResponse)},
  { 1183, 1194, sizeof(::CMsgDOTAAwardEventPoints_AwardPoints)},
  { 1200, 1210, sizeof(::CMsgDOTAAwardEventPoints)},
  { 1215, 1224, sizeof(::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops)},
  { 1228, 1235, sizeof(::CMsgServerToGCSignoutAwardAdditionalDrops)},
  { 1237, 1244, sizeof(::CMsgDOTAFrostivusTimeElapsed_User)},
  { 1246, 1254, sizeof(::CMsgDOTAFrostivusTimeElapsed)},
  { 1257, 1264, sizeof(::CMsgGCToServerPingRequest)},
  { 1266, 1274, sizeof(::CMsgGCToServerPingResponse)},
  { 1277, 1283, sizeof(::CMsgGCToServerConsoleCommand)},
  { 1284, 1291, sizeof(::CMsgServerGetEventPoints)},
  { 1293, 1301, sizeof(::CMsgServerGetEventPointsResponse_Points)},
  { 1304, 1311, sizeof(::CMsgServerGetEventPointsResponse)},
  { 1313, 1324, sizeof(::CMsgServerGrantSurveyPermission_Survey)},
  { 1330, -1, sizeof(::CMsgServerGrantSurveyPermission)},
  { 1336, 1342, sizeof(::CMsgServerGrantSurveyPermissionResponse)},
  { 1343, 1354, sizeof(::CMsgServerToGCMatchConnectionStats_Player)},
  { 1360, 1370, sizeof(::CMsgServerToGCMatchConnectionStats)},
  { 1375, 1381, sizeof(::CMsgServerGCUpdateSpectatorCount)},
  { 1382, 1389, sizeof(::CSerializedCombatLog_Dictionary_DictString)},
  { 1391, -1, sizeof(::CSerializedCombatLog_Dictionary)},
  { 1397, 1405, sizeof(::CSerializedCombatLog)},
  { 1408, 1415, sizeof(::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips)},
  { 1417, -1, sizeof(::CMsgServerToGCGetAdditionalEquipsResponse)},
  { 1423, -1, sizeof(::CMsgServerToGCGetProfileCard)},
  { 1429, -1, sizeof(::CMsgServerToGCGetProfileCardResponse)},
  { 1435, 1443, sizeof(::CMsgServerToGCVictoryPredictions_Record)},
  { 1446, -1, sizeof(::CMsgServerToGCVictoryPredictions)},
  { 1452, -1, sizeof(::CMsgServerToGCRequestStatus)},
  { 1457, 1463, sizeof(::CMsgServerToGCRequestStatus_Response)},
  { 1464, 1477, sizeof(::CMsgSignOutAssassinMiniGameInfo)},
  { 1485, 1491, sizeof(::CMsgServerToGCGetIngameEventData)},
  { 1492, -1, sizeof(::CMsgGCToServerIngameEventDataOraclePA)},
  { 1498, 1506, sizeof(::CMsgServerToGCKillSummaries_KillSummary)},
  { 1509, 1516, sizeof(::CMsgServerToGCKillSummaries)},
  { 1518, 1528, sizeof(::CMsgGCToServerPredictionResult_Prediction)},
  { 1533, 1542, sizeof(::CMsgGCToServerPredictionResult)},
  { 1546, 1553, sizeof(::CMsgServerToGCLockCharmTrading)},
  { 1555, 1565, sizeof(::CMsgSignOutUpdatePlayerChallenge_Challenge)},
  { 1570, 1580, sizeof(::CMsgSignOutUpdatePlayerChallenge)},
  { 1585, 1592, sizeof(::CMsgServerToGCRerollPlayerChallenge)},
  { 1594, 1603, sizeof(::CMsgSignOutWagerStats_Player)},
  { 1607, 1614, sizeof(::CMsgSignOutWagerStats)},
  { 1616, 1624, sizeof(::CMsgSpendWager_Player)},
  { 1627, 1637, sizeof(::CMsgSpendWager)},
  { 1642, 1653, sizeof(::CMsgSignOutXPCoins_Player)},
  { 1659, 1668, sizeof(::CMsgSignOutXPCoins)},
  { 1672, 1680, sizeof(::CMsgSignOutBounties_Bounty)},
  { 1683, 1692, sizeof(::CMsgSignOutBounties)},
  { 1696, 1703, sizeof(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement)},
  { 1705, 1712, sizeof(::CMsgSignOutCommunityGoalProgress)},
  { 1714, 1724, sizeof(::CMsgServerToGCPostMatchTip)},
  { 1729, 1738, sizeof(::CMsgServerToGCPostMatchTipResponse)},
  { 1742, 1750, sizeof(::CMsgServerToGCCloseCompendiumInGamePredictionVoting)},
  { 1753, 1759, sizeof(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)},
  { 1760, 1768, sizeof(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult)},
  { 1771, 1780, sizeof(::CMsgServerToGCCompendiumInGamePredictionResults)},
  { 1784, 1790, sizeof(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction)},
  { 1791, 1799, sizeof(::CMsgServerToGCCompendiumChosenInGamePredictions)},
  { 1802, 1808, sizeof(::CMsgServerToGCCompendiumInGamePredictionResultsResponse)},
  { 1809, 1815, sizeof(::CMsgGCToGCCompendiumInGamePredictionResults)},
  { 1816, 1827, sizeof(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase)},
  { 1833, 1846, sizeof(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player)},
  { 1854, 1862, sizeof(::CMsgServerToGCMatchPlayerItemPurchaseHistory)},
  { 1865, 1875, sizeof(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip)},
  { 1880, 1890, sizeof(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player)},
  { 1895, 1902, sizeof(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory)},
  { 1904, 1918, sizeof(::CMsgServerToGCMatchStateHistory_PlayerState)},
  { 1927, 1942, sizeof(::CMsgServerToGCMatchStateHistory_TeamState)},
  { 1952, 1960, sizeof(::CMsgServerToGCMatchStateHistory_MatchState)},
  { 1963, 1972, sizeof(::CMsgServerToGCMatchStateHistory)},
  { 1976, 1984, sizeof(::CMsgMatchStateSteamMLEntry)},
  { 1987, -1, sizeof(::CMsgLaneSelectionSteamMLEntry)},
  { 1994, 2005, sizeof(::CMsgAbilitySelectionSteamMLEntry)},
  { 2011, 2023, sizeof(::CMsgItemPurchasePregameSteamMLEntry)},
  { 2030, 2042, sizeof(::CMsgItemPurchaseSteamMLEntry)},
  { 2049, 2061, sizeof(::CMsgItemPurchaseSequenceSteamMLEntry)},
  { 2068, 2078, sizeof(::CMsgServerToGCCavernCrawlIsHeroActive)},
  { 2083, 2097, sizeof(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge)},
  { 2106, 2114, sizeof(::CMsgServerToGCPlayerChallengeHistory)},
  { 2117, 2124, sizeof(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults)},
  { 2126, 2135, sizeof(::CMsgServerToGCCavernCrawlIsHeroActiveResponse)},
  { 2139, 2145, sizeof(::CMsgGCtoServerTensorflowInstance)},
  { 2146, 2182, sizeof(::CMsgDetailedGameStats_PlayerStatEntry)},
  { 2213, 2221, sizeof(::CMsgDetailedGameStats_GameStats)},
  { 2224, 2231, sizeof(::CMsgDetailedGameStats_MinuteEntry)},
  { 2233, 2241, sizeof(::CMsgDetailedGameStats_PlayerInfo)},
  { 2244, 2252, sizeof(::CMsgDetailedGameStats)},
  { 2255, 2280, sizeof(::CMsgAllStarStats_PlayerStats)},
  { 2300, -1, sizeof(::CMsgAllStarStats)},
  { 2306, 2317, sizeof(::CMsgNeutralItemStats_NeutralItem)},
  { 2323, -1, sizeof(::CMsgNeutralItemStats)},
  { 2329, 2337, sizeof(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry)},
  { 2340, -1, sizeof(::CMsgGCToServerLobbyHeroBanRates)},
  { 2346, 2354, sizeof(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts)},
  { 2357, 2364, sizeof(::CMsgSignOutGuildContractProgress_PlayerContract)},
  { 2366, -1, sizeof(::CMsgSignOutGuildContractProgress)},
  { 2372, 2384, sizeof(::CMsgSignOutGuildChallengeProgress_ChallengeProgress)},
  { 2391, -1, sizeof(::CMsgSignOutGuildChallengeProgress)},
  { 2397, 2404, sizeof(::CMsgSignOutMVPStats_Player_KillEaterEvent)},
  { 2406, 2436, sizeof(::CMsgSignOutMVPStats_Player)},
  { 2461, 2471, sizeof(::CMsgSignOutMVPStats)},
  { 2476, 2482, sizeof(::CMsgGCToServerRecordTrainingData)},
  { 2483, -1, sizeof(::CMsgServerToGCGetGuildContracts)},
  { 2489, 2499, sizeof(::CMsgServerToGCGetGuildContractsResponse_ContractDetails)},
  { 2504, 2513, sizeof(::CMsgServerToGCGetGuildContractsResponse_Player)},
  { 2517, -1, sizeof(::CMsgServerToGCGetGuildContractsResponse)},
  { 2523, 2530, sizeof(::CMsgMatchDiretideCandy_CandyDetails)},
  { 2532, 2541, sizeof(::CMsgMatchDiretideCandy_PlayerCandy)},
  { 2545, 2552, sizeof(::CMsgMatchDiretideCandy)},
  { 2554, 2561, sizeof(::CMsgGCToServerCheerData_CheerTypeCount)},
  { 2563, 2573, sizeof(::CMsgGCToServerCheerData)},
  { 2578, 2601, sizeof(::CMsgCheerConfig)},
  { 2619, 2625, sizeof(::CMsgGCToServerCheerConfig)},
  { 2626, 2632, sizeof(::CMsgServerToGCGetCheerConfig)},
  { 2633, 2639, sizeof(::CMsgServerToGCGetCheerConfigResponse)},
  { 2640, -1, sizeof(::CMsgGCToServerCheerScalesOverride)},
  { 2646, -1, sizeof(::CMsgGCToServerGetCheerState)},
  { 2651, 2660, sizeof(::CMsgCheerTypeState)},
  { 2664, 2672, sizeof(::CMsgCheerState)},
  { 2675, 2682, sizeof(::CMsgServerToGCReportCheerState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPoorNetworkConditions_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPoorNetworkConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameserverCrash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConnectedPlayers_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConnectedPlayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeaverDetected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeaverDetectedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyFinalPlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLivePlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAUpdateClippy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRealtimeStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerRealtimeStatsStartStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerUpdateSteamBroadcasting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGameplayStats_CPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGameplayStats_CTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGameplayStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_CTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_CCustomGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_WardPlacement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutDraftInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutBotInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutTextMuteInfo_TextMuteMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutTextMuteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutPlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutCommunicationSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignoutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTimedRewardContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOutPermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOutPermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOutEventGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOutPerfData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameMatchSignOutBanData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALiveScoreboardUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRequestBatchPlayerResources_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRequestBatchPlayerResourcesResponse_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRequestBatchPlayerResourcesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPlayerFailedToConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToRelayConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGCToLANServerRelayConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToRelayConnectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCBanStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCBanStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTournamentItemEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTournamentItemEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTeamFanfare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgResponseTeamFanfare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerUploadSaveGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerSaveGameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerGetLoadGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerGetLoadGameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAGenerateDiretidePrizeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARewardDiretidePrizes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADiretidePrizesRewardedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAAwardEventPoints_AwardPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAAwardEventPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFrostivusTimeElapsed_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFrostivusTimeElapsed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerPingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerPingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerConsoleCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerGetEventPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerGetEventPointsResponse_Points_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerGetEventPointsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerGrantSurveyPermission_Survey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerGrantSurveyPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerGrantSurveyPermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchConnectionStats_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchConnectionStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerGCUpdateSpectatorCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSerializedCombatLog_Dictionary_DictString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSerializedCombatLog_Dictionary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSerializedCombatLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetAdditionalEquipsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetProfileCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetProfileCardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCVictoryPredictions_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCVictoryPredictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRequestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRequestStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutAssassinMiniGameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetIngameEventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerIngameEventDataOraclePA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCKillSummaries_KillSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCKillSummaries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerPredictionResult_Prediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerPredictionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCLockCharmTrading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutUpdatePlayerChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRerollPlayerChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutWagerStats_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutWagerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpendWager_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpendWager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutXPCoins_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutXPCoins_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutBounties_Bounty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutBounties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutCommunityGoalProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCPostMatchTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCPostMatchTipResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCompendiumInGamePredictionResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCompendiumChosenInGamePredictions_Prediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCompendiumChosenInGamePredictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCCompendiumInGamePredictionResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchStateHistory_PlayerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchStateHistory_TeamState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchStateHistory_MatchState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCMatchStateHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchStateSteamMLEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLaneSelectionSteamMLEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAbilitySelectionSteamMLEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemPurchasePregameSteamMLEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemPurchaseSteamMLEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemPurchaseSequenceSteamMLEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCavernCrawlIsHeroActive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCPlayerChallengeHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCtoServerTensorflowInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDetailedGameStats_PlayerStatEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDetailedGameStats_GameStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDetailedGameStats_MinuteEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDetailedGameStats_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDetailedGameStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAllStarStats_PlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAllStarStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNeutralItemStats_NeutralItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNeutralItemStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerLobbyHeroBanRates_HeroBanEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerLobbyHeroBanRates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGuildContractProgress_CompletedGuildEventContracts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGuildContractProgress_PlayerContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGuildContractProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGuildChallengeProgress_ChallengeProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutGuildChallengeProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutMVPStats_Player_KillEaterEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutMVPStats_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSignOutMVPStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerRecordTrainingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetGuildContracts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetGuildContractsResponse_ContractDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetGuildContractsResponse_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetGuildContractsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchDiretideCandy_CandyDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchDiretideCandy_PlayerCandy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchDiretideCandy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerCheerData_CheerTypeCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerCheerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCheerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerCheerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetCheerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCGetCheerConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerCheerScalesOverride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerGetCheerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCheerTypeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCheerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCReportCheerState_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034dota_gcmessages_server.proto\032\023steammes"
  "sages.proto\032\025valveextensions.proto\032\027dota"
  "_shared_enums.proto\032\034dota_gcmessages_com"
  "mon.proto\032\025econ_gcmessages.proto\032\030networ"
  "k_connection.proto\032-dota_gcmessages_comm"
  "on_match_management.proto\032\026gcsdk_gcmessa"
  "ges.proto\"\311\002\n\031CMsgPoorNetworkConditions\022"
  "R\n\016detection_type\030\001 \001(\0162\033.EPoorNetworkCo"
  "nditionsType:\035k_EPoorNetworkConditions_N"
  "one\0222\n\007players\030\002 \003(\0132!.CMsgPoorNetworkCo"
  "nditions.Player\032\243\001\n\006Player\022\022\n\naccount_id"
  "\030\001 \001(\r\022S\n\021disconnect_reason\030\002 \001(\0162\034.ENet"
  "workDisconnectionReason:\032NETWORK_DISCONN"
  "ECT_INVALID\022\031\n\021num_bad_intervals\030\003 \001(\r\022\025"
  "\n\rpeak_loss_pct\030\004 \001(\r\"\306\002\n\023CMsgGameserver"
  "Crash\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobby_id\030\002 \001("
  "\006\022>\n\ngame_state\030\003 \001(\0162\017.DOTA_GameState:\031"
  "DOTA_GAMERULES_STATE_INIT\022\032\n\022sentinel_sa"
  "ve_time\030\004 \001(\007\022\026\n\016custom_game_id\030\013 \001(\006\022\025\n"
  "\rtournament_id\030\014 \001(\r\022\027\n\017server_steam_id\030"
  "\005 \001(\006\022\035\n\025server_public_ip_addr\030\006 \001(\007\022\023\n\013"
  "server_port\030\007 \001(\r\022\026\n\016server_cluster\030\010 \001("
  "\r\022\013\n\003pid\030\t \001(\r\022\016\n\006engine\030\n \001(\r\"\366\006\n\024CMsgC"
  "onnectedPlayers\0227\n\021connected_players\030\001 \003"
  "(\0132\034.CMsgConnectedPlayers.Player\022:\n\024disc"
  "onnected_players\030\007 \003(\0132\034.CMsgConnectedPl"
  "ayers.Player\022>\n\ngame_state\030\002 \001(\0162\017.DOTA_"
  "GameState:\031DOTA_GAMERULES_STATE_INIT\022\034\n\024"
  "first_blood_happened\030\006 \001(\010\022;\n\027poor_netwo"
  "rk_conditions\030\n \001(\0132\032.CMsgPoorNetworkCon"
  "ditions\022>\n\013send_reason\030\010 \001(\0162 .CMsgConne"
  "ctedPlayers.SendReason:\007INVALID\022\025\n\rradia"
  "nt_kills\030\013 \001(\r\022\022\n\ndire_kills\030\014 \001(\r\022\024\n\014ra"
  "diant_lead\030\016 \001(\005\022\026\n\016building_state\030\017 \001(\r"
  "\032\250\001\n\006Player\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007hero_id"
  "\030\002 \001(\r\022&\n\014leaver_state\030\003 \001(\0132\020.CMsgLeave"
  "rState\022S\n\021disconnect_reason\030\004 \001(\0162\034.ENet"
  "workDisconnectionReason:\032NETWORK_DISCONN"
  "ECT_INVALID\"\211\002\n\nSendReason\022\013\n\007INVALID\020\000\022"
  "\r\n\tHEARTBEAT\020\001\022\016\n\nGAME_STATE\020\002\022\017\n\013FIRST_"
  "BLOOD\020\003\022\024\n\020PLAYER_CONNECTED\020\004\022\017\n\013PLAYER_"
  "HERO\020\005\022$\n PLAYER_DISCONNECTED_CONSEQUENC"
  "ES\020\006\022&\n\"PLAYER_DISCONNECTED_NOCONSEQUENC"
  "ES\020\007\022\025\n\021GAMESTATE_TIMEOUT\020\n\022\023\n\017MASS_DISC"
  "ONNECT\020\013\022\t\n\005KILLS\020\r\022\022\n\016BUILDING_STATE\020\016\""
  "\274\010\n\022CMsgGameServerInfo\022\035\n\025server_public_"
  "ip_addr\030\001 \001(\007\022\036\n\026server_private_ip_addr\030"
  "\002 \001(\007\022\023\n\013server_port\030\003 \001(\r\022\026\n\016server_tv_"
  "port\030\004 \001(\r\022\037\n\027assigned_server_tv_port\030\026 "
  "\001(\r\022+\n#legacy_server_steamdatagram_addre"
  "ss\030\033 \001(\014\022\022\n\nserver_key\030\005 \001(\t\022\032\n\022server_h"
  "ibernation\030\006 \001(\010\022@\n\013server_type\030\007 \001(\0162\036."
  "CMsgGameServerInfo.ServerType:\013UNSPECIFI"
  "ED\022\025\n\rserver_region\030\010 \001(\r\022\026\n\016server_load"
  "avg\030\t \001(\002\022 \n\030server_tv_broadcast_time\030\n "
  "\001(\002\022\030\n\020server_game_time\030\013 \001(\002\022\'\n\037server_"
  "relay_connected_steam_id\030\014 \001(\006\022\027\n\017relay_"
  "slots_max\030\r \001(\r\022\030\n\020relays_connected\030\016 \001("
  "\005\022\037\n\027relay_clients_connected\030\017 \001(\005\022$\n\034re"
  "layed_game_server_steam_id\030\020 \001(\006\022\032\n\022pare"
  "nt_relay_count\030\021 \001(\r\022\026\n\016tv_secret_code\030\022"
  " \001(\006\022\026\n\016server_version\030\023 \001(\r\022\026\n\016server_c"
  "luster\030\024 \001(\r\022A\n\022allow_custom_games\030\027 \001(\016"
  "2\037.CMsgGameServerInfo.CustomGames:\004BOTH\022"
  "\025\n\rbuild_version\030\030 \001(\r\022\027\n\017tf_server_coun"
  "t\030\031 \001(\r\022\026\n\016srcds_instance\030\032 \001(\r\022\035\n\025dev_f"
  "orce_server_type\030\034 \001(\010\022(\n is_recording_m"
  "atch_training_data\030\035 \001(\010\"|\n\nServerType\022\017"
  "\n\013UNSPECIFIED\020\000\022\010\n\004GAME\020\001\022\t\n\005PROXY\020\002\022\016\n\n"
  "TENSORFLOW\020\003\022\r\n\tDOTA_ONLY\020\004\022\024\n\020CUSTOM_GA"
  "ME_ONLY\020\005\022\023\n\017EVENT_GAME_ONLY\020\006\"6\n\013Custom"
  "Games\022\010\n\004BOTH\020\000\022\010\n\004NONE\020\001\022\010\n\004ONLY\020\002\022\t\n\005E"
  "VENT\020\003\"\266\002\n\022CMsgLeaverDetected\022\020\n\010steam_i"
  "d\030\001 \001(\006\022<\n\rleaver_status\030\002 \001(\0162\023.DOTALea"
  "verStatus_t:\020DOTA_LEAVER_NONE\022&\n\014leaver_"
  "state\030\004 \001(\0132\020.CMsgLeaverState\022\026\n\016server_"
  "cluster\030\005 \001(\r\022S\n\021disconnect_reason\030\006 \001(\016"
  "2\034.ENetworkDisconnectionReason:\032NETWORK_"
  "DISCONNECT_INVALID\022;\n\027poor_network_condi"
  "tions\030\007 \001(\0132\032.CMsgPoorNetworkConditions\""
  ",\n\032CMsgLeaverDetectedResponse\022\016\n\006result\030"
  "\001 \001(\r\"M\n\037CMsgDOTAFantasyFinalPlayerStats"
  "\022*\n\005stats\030\002 \003(\0132\033.CMsgDOTAFantasyPlayerS"
  "tats\"L\n\036CMsgDOTAFantasyLivePlayerStats\022*"
  "\n\005stats\030\002 \003(\0132\033.CMsgDOTAFantasyPlayerSta"
  "ts\"\227\001\n\024CMsgDOTAFantasyMatch\022\020\n\010match_id\030"
  "\001 \001(\004\022\021\n\tleague_id\030\002 \001(\r\022\021\n\tseries_id\030\003 "
  "\001(\r\022\022\n\nstart_time\030\004 \001(\r\022\023\n\013series_type\030\005"
  " \001(\r\022\016\n\006team_1\030\006 \001(\r\022\016\n\006team_2\030\007 \001(\r\"M\n\024"
  "CMsgDOTAUpdateClippy\022\032\n\022good_team_hero_i"
  "ds\030\001 \003(\r\022\031\n\021bad_team_hero_ids\030\002 \003(\r\"O\n\033C"
  "MsgServerToGCRealtimeStats\0220\n\007delayed\030\001 "
  "\001(\0132\037.CMsgDOTARealtimeGameStatsTerse\"7\n$"
  "CMsgGCToServerRealtimeStatsStartStop\022\017\n\007"
  "delayed\030\001 \001(\010\"7\n%CMsgGCToServerUpdateSte"
  "amBroadcasting\022\016\n\006active\030\001 \001(\010\"\343\002\n\030CMsgS"
  "ignOutGameplayStats\022.\n\005teams\030\001 \003(\0132\037.CMs"
  "gSignOutGameplayStats.CTeam\032v\n\007CPlayer\022\020"
  "\n\010steam_id\030\001 \001(\006\022\023\n\013player_slot\030\002 \001(\r\022\017\n"
  "\007hero_id\030\003 \001(\r\0223\n\022timed_player_stats\030\004 \003"
  "(\0132\027.CMatchPlayerTimedStats\032\236\001\n\005CTeam\022\027\n"
  "\017is_winning_team\030\001 \001(\010\022\027\n\017is_radiant_tea"
  "m\030\002 \001(\010\022/\n\020timed_team_stats\030\003 \003(\0132\025.CMat"
  "chTeamTimedStats\0222\n\007players\030\004 \003(\0132!.CMsg"
  "SignOutGameplayStats.CPlayer\"\356\034\n\024CMsgGam"
  "eMatchSignOut\022\026\n\010match_id\030\001 \001(\004B\004\200\246\035\001\022\020\n"
  "\010duration\030\002 \001(\r\022\025\n\rgood_guys_win\030\003 \001(\010\022\014"
  "\n\004date\030\004 \001(\007\022\023\n\013num_players\030\005 \003(\r\022*\n\005tea"
  "ms\030\006 \003(\0132\033.CMsgGameMatchSignOut.CTeam\022\024\n"
  "\014tower_status\030\010 \003(\r\022\027\n\017barracks_status\030\t"
  " \003(\r\022\017\n\007cluster\030\n \001(\r\022\023\n\013server_addr\030\013 \001"
  "(\t\022\030\n\020first_blood_time\030\014 \001(\r\022\023\n\013event_sc"
  "ore\030\016 \001(\r\022*\n\npicks_bans\030\017 \003(\0132\026.CMatchHe"
  "roSelectEvent\0222\n\rfantasy_stats\030) \003(\0132\033.C"
  "MsgDOTAFantasyPlayerStats\022O\n player_stra"
  "nge_count_adjustments\030\021 \003(\0132%.CMsgEconPl"
  "ayerStrangeCountAdjustment\022\033\n\023automatic_"
  "surrender\030\022 \001(\010\022\026\n\016server_version\030\023 \001(\r\022"
  ";\n\027poor_network_conditions\030# \001(\0132\032.CMsgP"
  "oorNetworkConditions\022D\n\017additional_msgs\030"
  "\024 \003(\0132+.CMsgGameMatchSignOut.CAdditional"
  "SignoutMsg\022G\n\022social_feed_events\030$ \003(\0132+"
  ".CMsgGameMatchSignOut.CSocialFeedMatchEv"
  "ent\022\036\n\026average_networth_delta\030\026 \001(\021\022\?\n\020c"
  "ustom_game_data\030% \001(\0132%.CMsgGameMatchSig"
  "nOut.CCustomGameData\022\023\n\013match_flags\030& \001("
  "\r\022\023\n\013team_scores\030\' \003(\r\022\031\n\021pre_game_durat"
  "ion\030( \001(\r\022W\n\036event_game_leaderboard_entr"
  "ies\030* \003(\0132/.CMsgGameMatchSignOut.EventGa"
  "meLeaderboardEntry\022<\n\017ward_placements\030+ "
  "\003(\0132#.CMsgGameMatchSignOut.WardPlacement"
  "\0221\n\016gameplay_stats\030, \001(\0132\031.CMsgSignOutGa"
  "meplayStats\022\'\n\016extra_messages\0306 \003(\0132\017.CE"
  "xtraMsgBlock\022\036\n\026training_data_recorded\0307"
  " \001(\010\032\217\017\n\005CTeam\0224\n\007players\030\001 \003(\0132#.CMsgGa"
  "meMatchSignOut.CTeam.CPlayer\032\317\016\n\007CPlayer"
  "\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007hero_id\030\003 \001(\r\022\r\n\005i"
  "tems\030\004 \003(\r\022\033\n\023item_purchase_times\030\? \003(\r\022"
  "\014\n\004gold\030\005 \001(\r\022\r\n\005kills\030\006 \001(\r\022\016\n\006deaths\030\007"
  " \001(\r\022\017\n\007assists\030\010 \001(\r\022\025\n\rleaver_status\030\t"
  " \001(\r\022\021\n\tlast_hits\030\n \001(\r\022\016\n\006denies\030\013 \001(\r\022"
  "\024\n\014gold_per_min\030\014 \001(\r\022\025\n\rxp_per_minute\030\r"
  " \001(\r\022\022\n\ngold_spent\030\016 \001(\r\022\r\n\005level\030\017 \001(\r\022"
  "\032\n\022scaled_hero_damage\030\020 \001(\r\022\033\n\023scaled_to"
  "wer_damage\030\021 \001(\r\022\033\n\023scaled_hero_healing\030"
  "\022 \001(\r\022\026\n\016time_last_seen\030\023 \001(\r\022\035\n\025support"
  "_ability_value\030\024 \001(\r\022\020\n\010party_id\030\025 \001(\004\022\031"
  "\n\021claimed_farm_gold\030\033 \001(\r\022\024\n\014support_gol"
  "d\030\034 \001(\r\022\026\n\016claimed_denies\030\035 \001(\r\022\026\n\016claim"
  "ed_misses\030\036 \001(\r\022\016\n\006misses\030\037 \001(\r\022\021\n\tnet_w"
  "orth\030\" \001(\r\022\023\n\013hero_damage\030% \001(\r\022\024\n\014tower"
  "_damage\030& \001(\r\022\024\n\014hero_healing\030\' \001(\r\0225\n\020a"
  "bility_upgrades\030  \003(\0132\033.CMatchPlayerAbil"
  "ityUpgrade\022B\n\032additional_units_inventory"
  "\030! \003(\0132\036.CMatchAdditionalUnitInventory\0223"
  "\n\017permanent_buffs\030( \003(\0132\032.CMatchPlayerPe"
  "rmanentBuff\022M\n\020custom_game_data\030# \001(\01323."
  "CMsgGameMatchSignOut.CTeam.CPlayer.CCust"
  "omGameData\022\032\n\022match_player_flags\030$ \001(\r\022\032"
  "\n\022talent_ability_ids\030) \003(\r\022\027\n\017hero_pick_"
  "order\030* \001(\r\022\031\n\021hero_was_randomed\030+ \001(\010\022%"
  "\n\035hero_was_dota_plus_suggestion\0302 \001(\010\022\014\n"
  "\004lane\030- \001(\r\022\033\n\023is_using_plus_guide\030/ \001(\010"
  "\022T\n\024hero_damage_received\0300 \003(\01326.CMsgGam"
  "eMatchSignOut.CTeam.CPlayer.HeroDamageRe"
  "ceived\022Q\n\021hero_damage_dealt\030@ \003(\01326.CMsg"
  "GameMatchSignOut.CTeam.CPlayer.HeroDamag"
  "eReceived\022\024\n\014seconds_dead\0303 \001(\r\022\032\n\022gold_"
  "lost_to_death\0304 \001(\r\022\025\n\rcommand_count\0305 \001"
  "(\r\022&\n\036mouse_click_cast_command_count\0306 \001"
  "(\r\022\026\n\016teleports_used\0307 \001(\r\022 \n\030cavern_cra"
  "wl_map_variant\0308 \001(\r\022\024\n\014bounty_runes\0309 \001"
  "(\r\022\031\n\021outposts_captured\030: \001(\r\022\017\n\007dewards"
  "\030; \001(\r\022\024\n\014wards_placed\030< \001(\r\022\025\n\rcamps_st"
  "acked\030= \001(\r\022\023\n\013player_slot\030> \001(\r\0324\n\017CCus"
  "tomGameData\022\021\n\tdota_team\030\001 \001(\r\022\016\n\006winner"
  "\030\002 \001(\010\032\242\001\n\022HeroDamageReceived\022\025\n\rpre_red"
  "uction\030\001 \001(\r\022\026\n\016post_reduction\030\002 \001(\r\022]\n\013"
  "damage_type\030\003 \001(\01622.CMsgGameMatchSignOut"
  ".CTeam.CPlayer.HeroDamageType:\024HERO_DAMA"
  "GE_PHYSICAL\"Y\n\016HeroDamageType\022\030\n\024HERO_DA"
  "MAGE_PHYSICAL\020\000\022\027\n\023HERO_DAMAGE_MAGICAL\020\001"
  "\022\024\n\020HERO_DAMAGE_PURE\020\002\0325\n\025CAdditionalSig"
  "noutMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002 \001(\014\032z\n"
  "\025CSocialFeedMatchEvent\022\022\n\naccount_id\030\001 \001"
  "(\r\022\021\n\ttimestamp\030\002 \001(\r\022\022\n\nevent_type\030\003 \001("
  "\r\022\021\n\tgame_time\030\004 \001(\005\022\023\n\013replay_time\030\005 \001("
  "\r\032,\n\017CCustomGameData\022\031\n\021publish_timestam"
  "p\030\001 \001(\r\032\255\001\n\031EventGameLeaderboardEntry\022\023\n"
  "\013name_suffix\030\001 \001(\t\022\r\n\005score\030\002 \001(\005\022\024\n\014ext"
  "ra_data_1\030\003 \001(\r\022\024\n\014extra_data_2\030\004 \001(\r\022\024\n"
  "\014extra_data_3\030\005 \001(\r\022\024\n\014extra_data_4\030\006 \001("
  "\r\022\024\n\014extra_data_5\030\007 \001(\r\032\263\001\n\rWardPlacemen"
  "t\022\021\n\tplayer_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\023\n"
  "\013placed_time\030\003 \001(\r\022\026\n\016building_state\030\004 \001"
  "(\r\022\023\n\013creep_state\030\005 \001(\r\022\024\n\014roshan_alive\030"
  "\006 \001(\010\022\022\n\nposition_x\030\007 \001(\r\022\022\n\nposition_y\030"
  "\010 \001(\r\"\207\001\n\024CMsgSignOutDraftInfo\022\"\n\032radian"
  "t_captain_account_id\030\001 \001(\r\022\037\n\027dire_capta"
  "in_account_id\030\002 \001(\r\022*\n\npicks_bans\030\003 \003(\0132"
  "\026.CMatchHeroSelectEvent\"\326\001\n\022CMsgSignOutB"
  "otInfo\022\024\n\014allow_cheats\030\001 \001(\010\022J\n\026bot_diff"
  "iculty_radiant\030\002 \001(\0162\022.DOTABotDifficulty"
  ":\026BOT_DIFFICULTY_PASSIVE\022\025\n\rcreated_lobb"
  "y\030\003 \001(\010\022G\n\023bot_difficulty_dire\030\005 \001(\0162\022.D"
  "OTABotDifficulty:\026BOT_DIFFICULTY_PASSIVE"
  "\"\262\001\n\027CMsgSignOutTextMuteInfo\022D\n\022text_mut"
  "e_messages\030\001 \003(\0132(.CMsgSignOutTextMuteIn"
  "fo.TextMuteMessage\032Q\n\017TextMuteMessage\022\016\n"
  "\006region\030\001 \001(\r\022\030\n\020caused_text_mute\030\002 \001(\010\022"
  "\024\n\014chat_message\030\003 \001(\t\"\372\004\n\026CMsgSignOutPla"
  "yerStats\022\022\n\naccount_id\030\001 \001(\005\022\020\n\010match_id"
  "\030\002 \001(\004\022\014\n\004rank\030\003 \001(\r\022\017\n\007hero_id\030\004 \001(\r\022\020\n"
  "\010rampages\030\005 \001(\r\022\024\n\014triple_kills\030\006 \001(\r\022\033\n"
  "\023first_blood_claimed\030\007 \001(\r\022\031\n\021first_bloo"
  "d_given\030\010 \001(\r\022\027\n\017couriers_killed\030\t \001(\r\022\030"
  "\n\020aegises_snatched\030\n \001(\r\022\025\n\rcheeses_eate"
  "n\030\013 \001(\r\022\026\n\016creeps_stacked\030\014 \001(\r\022\023\n\013fight"
  "_score\030\r \001(\002\022\022\n\nfarm_score\030\016 \001(\002\022\025\n\rsupp"
  "ort_score\030\017 \001(\002\022\022\n\npush_score\030\020 \001(\002\022\r\n\005k"
  "ills\030\021 \001(\r\022\016\n\006deaths\030\022 \001(\r\022\017\n\007assists\030\023 "
  "\001(\r\022\021\n\tlast_hits\030\024 \001(\r\022\016\n\006denies\030\025 \001(\r\022\013"
  "\n\003gpm\030\026 \001(\002\022\014\n\004xppm\030\027 \001(\002\022\021\n\tnet_worth\030\030"
  " \001(\002\022\016\n\006damage\030\031 \001(\002\022\r\n\005heals\030\032 \001(\002\022\031\n\021r"
  "apiers_purchased\030\033 \001(\r\022\035\n\025observer_wards"
  "_placed\030\034 \001(\r\022\027\n\017wards_destroyed\030\035 \001(\r\022\022"
  "\n\nlobby_type\030\036 \001(\r\"\326\004\n\037CMsgSignOutCommun"
  "icationSummary\022E\n\007players\030\001 \003(\01324.CMsgSi"
  "gnOutCommunicationSummary.PlayerCommunic"
  "ation\032\353\003\n\023PlayerCommunication\022\022\n\naccount"
  "_id\030\001 \001(\r\022\r\n\005pings\030\002 \001(\r\022\036\n\026max_pings_pe"
  "r_interval\030\003 \001(\r\022\026\n\016teammate_pings\030\004 \001(\r"
  "\022\'\n\037max_teammate_pings_per_interval\030\005 \001("
  "\r\022\032\n\022team_chat_messages\030\006 \001(\r\022\031\n\021all_cha"
  "t_messages\030\007 \001(\r\022\033\n\023chat_wheel_messages\030"
  "\010 \001(\r\022\016\n\006pauses\030\t \001(\r\022\020\n\010unpauses\030\n \001(\r\022"
  "\023\n\013lines_drawn\030\013 \001(\r\022\032\n\022voice_chat_secon"
  "ds\030\014 \001(\r\022\022\n\nchat_mutes\030\r \001(\r\022\023\n\013voice_mu"
  "tes\030\016 \001(\r\022U\n\014ping_details\030\017 \003(\0132\?.CMsgSi"
  "gnOutCommunicationSummary.PlayerCommunic"
  "ation.PingDetail\032)\n\nPingDetail\022\014\n\004type\030\001"
  " \001(\r\022\r\n\005count\030\002 \001(\r\"\340\005\n\034CMsgGameMatchSig"
  "noutResponse\022\020\n\010match_id\030\001 \001(\004\022\023\n\013replay"
  "_salt\030\002 \001(\007\0227\n\024timed_reward_details\030\003 \003("
  "\0132\031.CLobbyTimedRewardDetails\022.\n\021xp_rewar"
  "d_details\030\004 \003(\0132\023.CSODOTALobbyMember\022\020\n\010"
  "leagueid\030\005 \001(\r\022\034\n\024metadata_private_key\030\007"
  " \001(\007\022%\n\rmatch_details\030\010 \001(\0132\016.CMsgDOTAMa"
  "tch\022F\n\020players_metadata\030\t \003(\0132,.CMsgGame"
  "MatchSignoutResponse.PlayerMetadata\022\033\n\010m"
  "vp_data\030\n \001(\0132\t.CMvpData\022\026\n\016ow_private_k"
  "ey\030\013 \001(\006\022\017\n\007ow_salt\030\014 \001(\007\022\024\n\014ow_replay_i"
  "d\030\r \001(\004\032\264\002\n\016PlayerMetadata\022\017\n\007hero_id\030\001 "
  "\001(\r\022\025\n\ravg_kills_x16\030\002 \001(\r\022\026\n\016avg_deaths"
  "_x16\030\003 \001(\r\022\027\n\017avg_assists_x16\030\004 \001(\r\022\023\n\013a"
  "vg_gpm_x16\030\005 \001(\r\022\023\n\013avg_xpm_x16\030\006 \001(\r\022\026\n"
  "\016best_kills_x16\030\007 \001(\r\022\030\n\020best_assists_x1"
  "6\030\010 \001(\r\022\024\n\014best_gpm_x16\030\t \001(\r\022\024\n\014best_xp"
  "m_x16\030\n \001(\r\022\022\n\nwin_streak\030\013 \001(\r\022\027\n\017best_"
  "win_streak\030\014 \001(\r\022\024\n\014games_played\030\r \001(\r\"S"
  "\n\030CMsgTimedRewardContainer\0227\n\024timed_rewa"
  "rd_details\030\001 \003(\0132\031.CLobbyTimedRewardDeta"
  "ils\"\205\001\n%CMsgGameMatchSignOutPermissionRe"
  "quest\022\026\n\016server_version\030\001 \001(\r\022\025\n\rlocal_a"
  "ttempt\030\002 \001(\r\022\025\n\rtotal_attempt\030\003 \001(\r\022\026\n\016s"
  "econds_waited\030\004 \001(\r\"\213\001\n&CMsgGameMatchSig"
  "nOutPermissionResponse\022!\n\022permission_gra"
  "nted\030\001 \001(\010:\005false\022\036\n\017abandon_signout\030\002 \001"
  "(\010:\005false\022\036\n\023retry_delay_seconds\030\003 \001(\r:\001"
  "0\"\237\001\n!CMsgGameMatchSignOutEventGameData\022"
  "(\n\010event_id\030\001 \001(\0162\007.EEvent:\rEVENT_ID_NON"
  "E\022\021\n\tgame_name\030\002 \001(\t\022\020\n\010map_name\030\003 \001(\t\022\027"
  "\n\017event_game_data\030\004 \001(\014\022\022\n\nstart_time\030\005 "
  "\001(\r\"\340\005\n\034CMsgGameMatchSignOutPerfData\022\032\n\022"
  "average_frame_time\030\001 \003(\002\022\026\n\016max_frame_ti"
  "me\030\002 \003(\002\022!\n\031server_average_frame_time\030\003 "
  "\001(\002\022\035\n\025server_max_frame_time\030\004 \001(\002\022\034\n\024av"
  "erage_compute_time\030\005 \003(\002\022\030\n\020max_compute_"
  "time\030\006 \003(\002\022 \n\030average_client_tick_time\030\007"
  " \003(\002\022\034\n\024max_client_tick_time\030\010 \003(\002\022$\n\034av"
  "erage_client_simulate_time\030\t \003(\002\022 \n\030max_"
  "client_simulate_time\030\n \003(\002\022\033\n\023average_ou"
  "tput_time\030\013 \003(\002\022\027\n\017max_output_time\030\014 \003(\002"
  "\0223\n+average_wait_for_rendering_to_comple"
  "te_time\030\r \003(\002\022/\n\'max_wait_for_rendering_"
  "to_complete_time\030\016 \003(\002\022\031\n\021average_swap_t"
  "ime\030\017 \003(\002\022\025\n\rmax_swap_time\030\020 \003(\002\022!\n\031aver"
  "age_frame_update_time\030\021 \003(\002\022\035\n\025max_frame"
  "_update_time\030\022 \003(\002\022\031\n\021average_idle_time\030"
  "\023 \003(\002\022\025\n\rmax_idle_time\030\024 \003(\002\022%\n\035average_"
  "input_processing_time\030\025 \003(\002\022!\n\031max_input"
  "_processing_time\030\026 \003(\002\"H\n\033CMsgGameMatchS"
  "ignOutBanData\022\021\n\thero_bans\030\001 \003(\r\022\026\n\016hero"
  "_ban_votes\030\002 \003(\r\"\264\n\n\034CMsgDOTALiveScorebo"
  "ardUpdate\022\025\n\rtournament_id\030\001 \001(\r\022\032\n\022tour"
  "nament_game_id\030\002 \001(\r\022\020\n\010duration\030\003 \001(\002\022\022"
  "\n\nhltv_delay\030\004 \001(\005\0225\n\tteam_good\030\005 \001(\0132\"."
  "CMsgDOTALiveScoreboardUpdate.Team\0224\n\010tea"
  "m_bad\030\006 \001(\0132\".CMsgDOTALiveScoreboardUpda"
  "te.Team\022\034\n\024roshan_respawn_timer\030\007 \001(\r\022\021\n"
  "\tleague_id\030\010 \001(\r\022\020\n\010match_id\030\t \001(\004\032\212\010\n\004T"
  "eam\022:\n\007players\030\001 \003(\0132).CMsgDOTALiveScore"
  "boardUpdate.Team.Player\022\r\n\005score\030\002 \001(\r\022\023"
  "\n\013tower_state\030\003 \001(\r\022\026\n\016barracks_state\030\004 "
  "\001(\r\022\022\n\nhero_picks\030\005 \003(\r\022\021\n\thero_bans\030\006 \003"
  "(\r\032\342\006\n\006Player\022\023\n\013player_slot\030\001 \001(\r\022\023\n\013pl"
  "ayer_name\030\002 \001(\t\022\021\n\thero_name\030\003 \001(\t\022\017\n\007he"
  "ro_id\030\004 \001(\r\022\r\n\005kills\030\005 \001(\r\022\016\n\006deaths\030\006 \001"
  "(\r\022\017\n\007assists\030\007 \001(\r\022\021\n\tlast_hits\030\010 \001(\r\022\016"
  "\n\006denies\030\t \001(\r\022\014\n\004gold\030\n \001(\r\022\r\n\005level\030\013 "
  "\001(\r\022\024\n\014gold_per_min\030\014 \001(\002\022\022\n\nxp_per_min\030"
  "\r \001(\002\022s\n\016ultimate_state\030\016 \001(\0162;.CMsgDOTA"
  "LiveScoreboardUpdate.Team.Player.DOTAUlt"
  "imateState:\036k_EDOTAUltimateStateNotLearn"
  "ed\022\031\n\021ultimate_cooldown\030\017 \001(\002\022\r\n\005item0\030\020"
  " \001(\r\022\r\n\005item1\030\021 \001(\r\022\r\n\005item2\030\022 \001(\r\022\r\n\005it"
  "em3\030\023 \001(\r\022\r\n\005item4\030\024 \001(\r\022\r\n\005item5\030\025 \001(\r\022"
  "\025\n\rrespawn_timer\030\026 \001(\r\022\022\n\naccount_id\030\027 \001"
  "(\r\022\022\n\nposition_x\030\030 \001(\002\022\022\n\nposition_y\030\031 \001"
  "(\002\022\021\n\tnet_worth\030\032 \001(\r\022H\n\tabilities\030\033 \003(\013"
  "25.CMsgDOTALiveScoreboardUpdate.Team.Pla"
  "yer.HeroAbility\0328\n\013HeroAbility\022\022\n\nabilit"
  "y_id\030\001 \001(\r\022\025\n\rability_level\030\002 \001(\r\"\233\001\n\021DO"
  "TAUltimateState\022\"\n\036k_EDOTAUltimateStateN"
  "otLearned\020\000\022 \n\034k_EDOTAUltimateStateCoold"
  "own\020\001\022!\n\035k_EDOTAUltimateStateNeedsMana\020\002"
  "\022\035\n\031k_EDOTAUltimateStateReady\020\003\"\\\n)CMsgS"
  "erverToGCRequestBatchPlayerResources\022\027\n\013"
  "account_ids\030\001 \003(\rB\002\020\001\022\026\n\nrank_types\030\004 \003("
  "\rB\002\020\001\"\302\002\n1CMsgServerToGCRequestBatchPlay"
  "erResourcesResponse\022J\n\007results\030\006 \003(\01329.C"
  "MsgServerToGCRequestBatchPlayerResources"
  "Response.Result\032\300\001\n\006Result\022\022\n\naccount_id"
  "\030\001 \001(\r\022\031\n\021prevent_text_chat\030\002 \001(\010\022\032\n\022pre"
  "vent_voice_chat\030\003 \001(\010\022\014\n\004rank\030\004 \001(\r\022\027\n\017r"
  "ank_calibrated\030\005 \001(\010\022\024\n\014low_priority\030\006 \001"
  "(\010\022\025\n\ris_new_player\030\007 \001(\010\022\027\n\017is_guide_pl"
  "ayer\030\010 \001(\010\"R\n\035CMsgDOTAPlayerFailedToConn"
  "ect\022\026\n\016failed_loaders\030\001 \003(\006\022\031\n\021abandoned"
  "_loaders\030\002 \003(\006\"\333\001\n\024CMsgGCToRelayConnect\022"
  "\035\n\025source_tv_public_addr\030\001 \001(\r\022\036\n\026source"
  "_tv_private_addr\030\002 \001(\r\022\026\n\016source_tv_port"
  "\030\003 \001(\r\022\034\n\024game_server_steam_id\030\004 \001(\004\022\024\n\014"
  "parent_count\030\005 \001(\r\022\035\n\025tv_unique_secret_c"
  "ode\030\006 \001(\006\022\031\n\021source_tv_steamid\030\007 \001(\006\"8\n\037"
  "CMsgGCGCToLANServerRelayConnect\022\025\n\rrelay"
  "_steamid\030\001 \001(\006\"\036\n\034CMsgGCToRelayConnectRe"
  "sponse\",\n\026CMsgGCBanStatusRequest\022\022\n\nacco"
  "unt_id\030\001 \001(\r\"t\n\027CMsgGCBanStatusResponse\022"
  "\016\n\006result\030\001 \001(\r\022\024\n\014low_priority\030\002 \001(\010\022\030\n"
  "\020text_chat_banned\030\003 \001(\010\022\031\n\021voice_chat_ba"
  "nned\030\004 \001(\010\"\336\002\n\027CMsgTournamentItemEvent\022\031"
  "\n\021killer_account_id\030\001 \001(\007\022\031\n\021victim_acco"
  "unt_id\030\002 \001(\007\022:\n\nevent_type\030\003 \001(\0162\026.DOTA_"
  "TournamentEvents:\016TE_FIRST_BLOOD\022\020\n\010tv_d"
  "elay\030\004 \001(\005\022\021\n\tdota_time\030\005 \001(\005\022\023\n\013replay_"
  "time\030\006 \001(\002\022\021\n\tloot_list\030\007 \001(\t\022\022\n\nevent_t"
  "eam\030\010 \001(\r\022\030\n\020multi_kill_count\030\t \001(\r\022\024\n\014w"
  "inner_score\030\n \001(\r\022\023\n\013loser_score\030\013 \001(\r\022+"
  "\n\014hero_statues\030\014 \003(\0132\025.CProtoItemHeroSta"
  "tue\"v\n\037CMsgTournamentItemEventResponse\022:"
  "\n\nevent_type\030\001 \001(\0162\026.DOTA_TournamentEven"
  "ts:\016TE_FIRST_BLOOD\022\027\n\017viewers_granted\030\006 "
  "\001(\r\"#\n\017CMsgTeamFanfare\022\020\n\010match_id\030\001 \001(\004"
  "\"L\n\027CMsgResponseTeamFanfare\022\030\n\020fanfare_g"
  "oodguys\030\001 \001(\r\022\027\n\017fanfare_badguys\030\002 \001(\r\"u"
  "\n\034CMsgGameServerUploadSaveGame\022\021\n\tgame_t"
  "ime\030\001 \001(\r\022\026\n\016save_game_data\030\002 \001(\014\022\020\n\010lob"
  "by_id\030\003 \001(\004\022\030\n\020player_steam_ids\030\004 \003(\004\"\266\001"
  "\n\034CMsgGameServerSaveGameResult\022D\n\006result"
  "\030\001 \001(\0162$.CMsgGameServerSaveGameResult.Re"
  "sult:\016SaveSuccessful\"P\n\006Result\022\022\n\016SaveSu"
  "ccessful\020\000\022\023\n\017SessionNotFound\020\001\022\021\n\rDatab"
  "aseError\020\002\022\n\n\006TooBig\020\003\",\n\031CMsgGameServer"
  "GetLoadGame\022\017\n\007save_id\030\001 \001(\r\"9\n\037CMsgGame"
  "ServerGetLoadGameResult\022\026\n\016save_game_dat"
  "a\030\001 \001(\014\"U\n!CMsgDOTAGenerateDiretidePrize"
  "List\022\022\n\nprize_list\030\001 \001(\r\022\034\n\024highest_rosh"
  "an_level\030\002 \001(\r\"e\n)CMsgDOTAGenerateDireti"
  "dePrizeListResponse\022\021\n\titem_defs\030\001 \003(\r\022\021"
  "\n\tsteam_ids\030\002 \003(\006\022\022\n\nprize_list\030\003 \001(\r\"@\n"
  "\034CMsgDOTARewardDiretidePrizes\022\014\n\004team\030\001 "
  "\001(\r\022\022\n\nprize_list\030\002 \001(\r\"<\n&CMsgDOTADiret"
  "idePrizesRewardedResponse\022\022\n\nprize_list\030"
  "\001 \001(\r\"\374\002\n\030CMsgDOTAAwardEventPoints\022;\n\014aw"
  "ard_points\030\001 \003(\0132%.CMsgDOTAAwardEventPoi"
  "nts.AwardPoints\022\020\n\010match_id\030\002 \001(\004\022(\n\010eve"
  "nt_id\030\004 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022\021\n\tt"
  "imestamp\030\005 \001(\r\022\024\n\014audit_action\030\006 \001(\r\032\275\001\n"
  "\013AwardPoints\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006poin"
  "ts\030\002 \001(\005\022\026\n\016premium_points\030\003 \001(\005\022\026\n\016trad"
  "e_ban_time\030\005 \001(\r\022/\n eligible_for_periodi"
  "c_adjustment\030\006 \001(\010:\005false\022)\n\036point_cap_p"
  "eriodic_resource_id\030\007 \001(\r:\0010\"\366\001\n)CMsgSer"
  "verToGCSignoutAwardAdditionalDrops\022I\n\005dr"
  "ops\030\001 \003(\0132:.CMsgServerToGCSignoutAwardAd"
  "ditionalDrops.AdditionalDrops\022\020\n\010match_i"
  "d\030\002 \001(\004\032l\n\017AdditionalDrops\022\021\n\tloot_list\030"
  "\001 \001(\t\022\032\n\022player_account_ids\030\002 \003(\r\022\020\n\010no_"
  "trade\030\003 \001(\010\022\030\n\020randomize_reward\030\004 \001(\010\"\250\001"
  "\n\034CMsgDOTAFrostivusTimeElapsed\022\017\n\007second"
  "s\030\001 \001(\r\0221\n\005users\030\002 \003(\0132\".CMsgDOTAFrostiv"
  "usTimeElapsed.User\022\020\n\010match_id\030\003 \001(\004\0322\n\004"
  "User\022\022\n\naccount_id\030\001 \001(\r\022\026\n\016time_elapsed"
  "_s\030\002 \001(\r\"E\n\031CMsgGCToServerPingRequest\022\022\n"
  "\nrequest_id\030\001 \001(\006\022\024\n\014request_time\030\002 \001(\004\""
  "W\n\032CMsgGCToServerPingResponse\022\022\n\nrequest"
  "_id\030\001 \001(\006\022\024\n\014request_time\030\002 \001(\004\022\017\n\007clust"
  "er\030\003 \001(\r\"7\n\034CMsgGCToServerConsoleCommand"
  "\022\027\n\017console_command\030\001 \001(\t\"X\n\030CMsgServerG"
  "etEventPoints\022(\n\010event_id\030\001 \001(\0162\007.EEvent"
  ":\rEVENT_ID_NONE\022\022\n\naccount_id\030\002 \003(\r\"\311\001\n "
  "CMsgServerGetEventPointsResponse\022(\n\010even"
  "t_id\030\001 \001(\0162\007.EEvent:\rEVENT_ID_NONE\0228\n\006po"
  "ints\030\002 \003(\0132(.CMsgServerGetEventPointsRes"
  "ponse.Points\032A\n\006Points\022\022\n\naccount_id\030\001 \001"
  "(\r\022\024\n\014points_total\030\002 \001(\r\022\r\n\005owned\030\004 \001(\010\""
  "\343\001\n\037CMsgServerGrantSurveyPermission\0228\n\007s"
  "urveys\030\001 \003(\0132\'.CMsgServerGrantSurveyPerm"
  "ission.Survey\032\205\001\n\006Survey\022\022\n\naccount_id\030\001"
  " \001(\r\022\023\n\013question_id\030\002 \001(\r\022\023\n\013expire_time"
  "\030\003 \001(\r\022\022\n\nsurvey_key\030\004 \001(\004\022\022\n\nextra_data"
  "\030\005 \001(\004\022\025\n\rextra_data_32\030\006 \001(\004\"9\n\'CMsgSer"
  "verGrantSurveyPermissionResponse\022\016\n\006resu"
  "lt\030\001 \001(\r\"\260\002\n\"CMsgServerToGCMatchConnecti"
  "onStats\022\020\n\010match_id\030\001 \001(\004\022\021\n\tregion_id\030\002"
  " \001(\r\022\021\n\tleague_id\030\003 \001(\r\022;\n\007players\030\004 \003(\013"
  "2*.CMsgServerToGCMatchConnectionStats.Pl"
  "ayer\022\022\n\ncluster_id\030\005 \001(\r\032\200\001\n\006Player\022\022\n\na"
  "ccount_id\030\001 \001(\r\022\n\n\002ip\030\002 \001(\007\022\023\n\013avg_ping_"
  "ms\030\003 \001(\r\022\023\n\013packet_loss\030\005 \001(\002\022\026\n\016ping_de"
  "viation\030\006 \001(\002\022\024\n\014full_resends\030\007 \001(\r\";\n C"
  "MsgServerGCUpdateSpectatorCount\022\027\n\017spect"
  "ator_count\030\001 \001(\r\"\374\001\n\024CSerializedCombatLo"
  "g\022\017\n\007version\030\001 \001(\r\0224\n\ndictionary\030\002 \001(\0132 "
  ".CSerializedCombatLog.Dictionary\022(\n\007entr"
  "ies\030\003 \003(\0132\027.CMsgDOTACombatLogEntry\032s\n\nDi"
  "ctionary\022<\n\007strings\030\001 \003(\0132+.CSerializedC"
  "ombatLog.Dictionary.DictString\032\'\n\nDictSt"
  "ring\022\n\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \002(\t\"\275\001\n)CMsg"
  "ServerToGCGetAdditionalEquipsResponse\022F\n"
  "\006equips\030\001 \003(\01326.CMsgServerToGCGetAdditio"
  "nalEquipsResponse.CUserEquips\032H\n\013CUserEq"
  "uips\022\022\n\naccount_id\030\001 \001(\r\022%\n\006equips\030\002 \003(\013"
  "2\025.CAdditionalEquipSlot\"3\n\034CMsgServerToG"
  "CGetProfileCard\022\023\n\013account_ids\030\001 \003(\r\"K\n$"
  "CMsgServerToGCGetProfileCardResponse\022#\n\005"
  "cards\030\001 \003(\0132\024.CMsgDOTAProfileCard\"\236\001\n CM"
  "sgServerToGCVictoryPredictions\0229\n\007record"
  "s\030\001 \003(\0132(.CMsgServerToGCVictoryPredictio"
  "ns.Record\032\?\n\006Record\022\022\n\naccount_id\030\001 \001(\r\022"
  "\017\n\007item_id\030\002 \001(\004\022\020\n\010item_ids\030\005 \003(\004\"\035\n\033CM"
  "sgServerToGCRequestStatus\"8\n$CMsgServerT"
  "oGCRequestStatus_Response\022\020\n\010response\030\001 "
  "\001(\r\"\352\001\n\037CMsgSignOutAssassinMiniGameInfo\022"
  "\027\n\017winning_players\030\001 \003(\006\022\026\n\016losing_playe"
  "rs\030\002 \003(\006\022\025\n\rarcana_owners\030\003 \003(\006\022\024\n\014assas"
  "sin_won\030\004 \001(\010\022\026\n\016target_hero_id\030\005 \001(\r\022\032\n"
  "\022contract_completed\030\006 \001(\010\022\036\n\026contract_co"
  "mplete_time\030\007 \001(\002\022\025\n\rpa_is_radiant\030\010 \001(\010"
  "\"I\n CMsgServerToGCGetIngameEventData\022%\n\005"
  "event\030\001 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"@\n%C"
  "MsgGCToServerIngameEventDataOraclePA\022\027\n\017"
  "target_hero_ids\030\001 \003(\r\"\305\001\n\033CMsgServerToGC"
  "KillSummaries\022\026\n\016ingameevent_id\030\001 \001(\r\022;\n"
  "\tsummaries\030\002 \003(\0132(.CMsgServerToGCKillSum"
  "maries.KillSummary\032Q\n\013KillSummary\022\026\n\016kil"
  "ler_hero_id\030\001 \001(\r\022\026\n\016victim_hero_id\030\002 \001("
  "\r\022\022\n\nkill_count\030\003 \001(\r\"\226\003\n\036CMsgGCToServer"
  "PredictionResult\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010"
  "match_id\030\002 \001(\004\022\017\n\007correct\030\003 \001(\010\022\?\n\013predi"
  "ctions\030\004 \003(\0132*.CMsgGCToServerPredictionR"
  "esult.Prediction\032\373\001\n\nPrediction\022\020\n\010item_"
  "def\030\001 \001(\r\022\023\n\013num_correct\030\002 \001(\r\022\021\n\tnum_fa"
  "ils\030\003 \001(\r\022Y\n\006result\030\004 \001(\01622.CMsgGCToServ"
  "erPredictionResult.Prediction.EResult:\025k"
  "_eResult_ItemGranted\022\031\n\021granted_item_def"
  "s\030\006 \003(\r\"=\n\007EResult\022\031\n\025k_eResult_ItemGran"
  "ted\020\001\022\027\n\023k_eResult_Destroyed\020\002\"E\n\036CMsgSe"
  "rverToGCLockCharmTrading\022\022\n\naccount_id\030\001"
  " \001(\r\022\017\n\007item_id\030\002 \001(\004\"\340\002\n CMsgSignOutUpd"
  "atePlayerChallenge\022\022\n\naccount_id\030\001 \001(\r\022>"
  "\n\tcompleted\030\002 \003(\0132+.CMsgSignOutUpdatePla"
  "yerChallenge.Challenge\022=\n\010rerolled\030\003 \003(\013"
  "2+.CMsgSignOutUpdatePlayerChallenge.Chal"
  "lenge\022\020\n\010match_id\030\004 \001(\004\022\017\n\007hero_id\030\005 \001(\r"
  "\032\205\001\n\tChallenge\022(\n\010event_id\030\001 \001(\0162\007.EEven"
  "t:\rEVENT_ID_NONE\022\017\n\007slot_id\030\002 \001(\r\022\023\n\013seq"
  "uence_id\030\003 \001(\r\022\020\n\010progress\030\004 \001(\r\022\026\n\016chal"
  "lenge_rank\030\005 \001(\r\"s\n#CMsgServerToGCReroll"
  "PlayerChallenge\022\022\n\naccount_id\030\001 \001(\r\0228\n\nr"
  "eroll_msg\030\002 \001(\0132$.CMsgClientToGCRerollPl"
  "ayerChallenge\"\303\001\n\025CMsgSignOutWagerStats\022"
  ".\n\007players\030\001 \003(\0132\035.CMsgSignOutWagerStats"
  ".Player\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVEN"
  "T_ID_NONE\032P\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022"
  "\020\n\010winnings\030\002 \001(\r\022\021\n\tmax_wager\030\003 \001(\r\022\r\n\005"
  "wager\030\004 \001(\r\"\353\001\n\016CMsgSpendWager\022\'\n\007player"
  "s\030\001 \003(\0132\026.CMsgSpendWager.Player\022(\n\010event"
  "_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022\021\n\ttim"
  "estamp\030\003 \001(\r\022\020\n\010match_id\030\004 \001(\004\022\027\n\017server"
  "_steam_id\030\005 \001(\004\032H\n\006Player\022\022\n\naccount_id\030"
  "\001 \001(\r\022\r\n\005wager\030\002 \001(\r\022\033\n\023wager_token_item"
  "_id\030\003 \001(\004\"\236\002\n\022CMsgSignOutXPCoins\022+\n\007play"
  "ers\030\001 \003(\0132\032.CMsgSignOutXPCoins.Player\022(\n"
  "\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022"
  "\020\n\010match_id\030\003 \001(\004\022\021\n\ttimestamp\030\004 \001(\r\032\213\001\n"
  "\006Player\022\022\n\naccount_id\030\001 \001(\r\022\021\n\txp_gained"
  "\030\002 \001(\r\022\023\n\013coins_spent\030\003 \001(\r\022\033\n\023wager_tok"
  "en_item_id\030\004 \001(\004\022\022\n\nrank_wager\030\005 \001(\r\022\024\n\014"
  "wager_streak\030\006 \001(\r\"\361\001\n\023CMsgSignOutBounti"
  "es\022-\n\010bounties\030\001 \003(\0132\033.CMsgSignOutBounti"
  "es.Bounty\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEV"
  "ENT_ID_NONE\022\020\n\010match_id\030\003 \001(\004\022\021\n\ttimesta"
  "mp\030\004 \001(\r\032\\\n\006Bounty\022\031\n\021issuer_account_id\030"
  "\001 \001(\r\022\034\n\024completer_account_id\030\002 \001(\r\022\031\n\021t"
  "arget_account_id\030\003 \001(\r\"\343\001\n CMsgSignOutCo"
  "mmunityGoalProgress\022(\n\010event_id\030\001 \001(\0162\007."
  "EEvent:\rEVENT_ID_NONE\022N\n\020event_increment"
  "s\030\002 \003(\01324.CMsgSignOutCommunityGoalProgre"
  "ss.EventGoalIncrement\032E\n\022EventGoalIncrem"
  "ent\022\025\n\revent_goal_id\030\001 \001(\r\022\030\n\020increment_"
  "amount\030\002 \001(\r\"\245\001\n\032CMsgServerToGCPostMatch"
  "Tip\022(\n\010event_id\030\001 \001(\0162\007.EEvent:\rEVENT_ID"
  "_NONE\022\020\n\010match_id\030\002 \001(\004\022\031\n\021tipper_accoun"
  "t_id\030\003 \001(\r\022\034\n\024recipient_account_id\030\004 \001(\r"
  "\022\022\n\ntip_amount\030\005 \001(\r\"\330\001\n\"CMsgServerToGCP"
  "ostMatchTipResponse\022\020\n\010match_id\030\001 \001(\004\022\031\n"
  "\021tipper_account_id\030\002 \001(\r\022\034\n\024recipient_ac"
  "count_id\030\003 \001(\r\022C\n\006result\030\004 \001(\0162*.CMsgSer"
  "verToGCPostMatchTipResponse.Result:\007SUCC"
  "ESS\"\"\n\006Result\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020\001\""
  "n\n3CMsgServerToGCCloseCompendiumInGamePr"
  "edictionVoting\022\020\n\010match_id\030\001 \001(\004\022\022\n\nhltv"
  "_delay\030\002 \001(\r\022\021\n\tleague_id\030\003 \001(\r\"M\n;CMsgS"
  "erverToGCCloseCompendiumInGamePrediction"
  "VotingResponse\022\016\n\006result\030\001 \001(\010\"\251\002\n/CMsgS"
  "erverToGCCompendiumInGamePredictionResul"
  "ts\022\020\n\010match_id\030\001 \001(\004\022R\n\007results\030\002 \003(\0132A."
  "CMsgServerToGCCompendiumInGamePrediction"
  "Results.PredictionResult\022\021\n\tleague_id\030\003 "
  "\001(\r\022\026\n\016league_node_id\030\004 \001(\r\032e\n\020Predictio"
  "nResult\022\025\n\rprediction_id\030\001 \001(\r\022\030\n\020predic"
  "tion_value\030\002 \001(\r\022 \n\030prediction_value_is_"
  "mask\030\003 \001(\010\"\324\001\n/CMsgServerToGCCompendiumC"
  "hosenInGamePredictions\022\020\n\010match_id\030\001 \001(\004"
  "\022W\n\022predictions_chosen\030\002 \003(\0132;.CMsgServe"
  "rToGCCompendiumChosenInGamePredictions.P"
  "rediction\022\021\n\tleague_id\030\003 \001(\r\032#\n\nPredicti"
  "on\022\025\n\rprediction_id\030\001 \001(\r\"I\n7CMsgServerT"
  "oGCCompendiumInGamePredictionResultsResp"
  "onse\022\016\n\006result\030\001 \001(\010\"p\n+CMsgGCToGCCompen"
  "diumInGamePredictionResults\022A\n\007results\030\001"
  " \001(\01320.CMsgServerToGCCompendiumInGamePre"
  "dictionResults\"\204\004\n,CMsgServerToGCMatchPl"
  "ayerItemPurchaseHistory\022\020\n\010match_id\030\001 \001("
  "\004\022\013\n\003mmr\030\002 \001(\r\022E\n\007players\030\003 \003(\01324.CMsgSe"
  "rverToGCMatchPlayerItemPurchaseHistory.P"
  "layer\032\202\001\n\014ItemPurchase\022\014\n\004item\030\001 \001(\r\022\014\n\004"
  "gold\030\002 \001(\r\022\021\n\tnet_worth\030\003 \001(\r\022\021\n\tgame_ti"
  "me\030\004 \001(\r\022\027\n\017inventory_items\030\005 \003(\r\022\027\n\017tal"
  "ents_skilled\030\007 \003(\010\032\350\001\n\006Player\022\023\n\013player_"
  "slot\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\022\017\n\007hero_i"
  "d\030\003 \001(\r\022\027\n\017allied_hero_ids\030\004 \003(\r\022\026\n\016enem"
  "y_hero_ids\030\005 \003(\r\022R\n\016item_purchases\030\006 \003(\013"
  "2:.CMsgServerToGCMatchPlayerItemPurchase"
  "History.ItemPurchase\022\014\n\004lane\030\007 \001(\r\022\021\n\tis"
  "_winner\030\010 \001(\010\"\305\003\n0CMsgServerToGCMatchPla"
  "yerNeutralItemEquipHistory\022\020\n\010match_id\030\001"
  " \001(\004\022I\n\007players\030\002 \003(\01328.CMsgServerToGCMa"
  "tchPlayerNeutralItemEquipHistory.Player\032"
  "\177\n\tItemEquip\022\014\n\004item\030\001 \001(\r\022\021\n\tgame_time\030"
  "\002 \001(\r\022\027\n\017inventory_items\030\003 \003(\r\022\027\n\017talent"
  "s_skilled\030\004 \003(\010\022\037\n\027available_neutral_ite"
  "ms\030\005 \003(\r\032\262\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022"
  "\027\n\017allied_hero_ids\030\002 \003(\r\022\026\n\016enemy_hero_i"
  "ds\030\003 \003(\r\022P\n\013item_equips\030\004 \003(\0132;.CMsgServ"
  "erToGCMatchPlayerNeutralItemEquipHistory"
  ".ItemEquip\022\021\n\tis_winner\030\005 \001(\010\"\266\006\n\037CMsgSe"
  "rverToGCMatchStateHistory\022\020\n\010match_id\030\001 "
  "\001(\004\022\023\n\013radiant_won\030\002 \001(\010\022\013\n\003mmr\030\003 \001(\r\022A\n"
  "\014match_states\030\004 \003(\0132+.CMsgServerToGCMatc"
  "hStateHistory.MatchState\032\264\001\n\013PlayerState"
  "\022\017\n\007hero_id\030\001 \001(\r\022\021\n\tnet_worth\030\002 \001(\r\022\r\n\005"
  "level\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\024\n\014respawn_t"
  "ime\030\005 \001(\r\022\023\n\013has_buyback\030\006 \001(\010\022\021\n\thas_ae"
  "gis\030\007 \001(\010\022\022\n\nhas_rapier\030\010 \001(\010\022\020\n\010distanc"
  "e\030\t \001(\r\032\277\002\n\tTeamState\022\014\n\004team\030\001 \001(\r\022I\n\rp"
  "layer_states\030\002 \003(\0132,.CMsgServerToGCMatch"
  "StateHistory.PlayerStateB\004\340\344\035\005\022\036\n\020tower_"
  "health_pct\030\003 \003(\rB\004\340\344\035\013\022!\n\023barracks_healt"
  "h_pct\030\004 \003(\rB\004\340\344\035\003\022\032\n\022ancient_health_pct\030"
  "\005 \001(\r\022\026\n\016glyph_cooldown\030\006 \001(\r\022\r\n\005kills\030\007"
  " \001(\r\022\033\n\023creep_distance_safe\030\010 \001(\r\022\032\n\022cre"
  "ep_distance_mid\030\t \001(\r\022\032\n\022creep_distance_"
  "off\030\n \001(\r\032\242\001\n\nMatchState\022\021\n\tgame_time\030\001 "
  "\001(\r\022A\n\rradiant_state\030\002 \001(\0132*.CMsgServerT"
  "oGCMatchStateHistory.TeamState\022>\n\ndire_s"
  "tate\030\003 \001(\0132*.CMsgServerToGCMatchStateHis"
  "tory.TeamState\"\200\001\n\032CMsgMatchStateSteamML"
  "Entry\022@\n\013match_state\030\001 \001(\0132+.CMsgServerT"
  "oGCMatchStateHistory.MatchState\022\013\n\003mmr\030\002"
  " \001(\r\022\023\n\013radiant_won\030\003 \001(\010\"L\n\035CMsgLaneSel"
  "ectionSteamMLEntry\022\026\n\010hero_ids\030\001 \003(\rB\004\340\344"
  "\035\n\022\023\n\005lanes\030\002 \003(\rB\004\340\344\035\006\"\237\001\n CMsgAbilityS"
  "electionSteamMLEntry\022\013\n\003mmr\030\001 \001(\r\022\017\n\007her"
  "o_id\030\002 \001(\r\022\034\n\016enemy_hero_ids\030\003 \003(\rB\004\340\344\035\004"
  "\022\014\n\004lane\030\004 \001(\r\022\027\n\tabilities\030\005 \003(\rB\004\340\344\035\031\022"
  "\030\n\020selected_ability\030\006 \001(\r\"\264\001\n#CMsgItemPu"
  "rchasePregameSteamMLEntry\022\013\n\003mmr\030\001 \001(\r\022\014"
  "\n\004lane\030\002 \001(\r\022\017\n\007balance\030\003 \001(\002\022\017\n\007hero_id"
  "\030\004 \001(\r\022\035\n\017allied_hero_ids\030\005 \003(\rB\004\340\344\035\004\022\034\n"
  "\016enemy_hero_ids\030\006 \003(\rB\004\340\344\035\005\022\023\n\005items\030\007 \003"
  "(\rB\004\340\344\035\t\"\301\001\n\034CMsgItemPurchaseSteamMLEntr"
  "y\022\013\n\003mmr\030\001 \001(\r\022\014\n\004lane\030\002 \001(\r\022\017\n\007hero_id\030"
  "\003 \001(\r\022\035\n\017allied_hero_ids\030\004 \003(\rB\004\340\344\035\004\022\034\n\016"
  "enemy_hero_ids\030\005 \003(\rB\004\340\344\035\005\022\023\n\005items\030\006 \003("
  "\rB\004\340\344\035\024\022#\n\025items_to_be_purchased\030\007 \003(\rB\004"
  "\340\344\035\024\"\302\001\n$CMsgItemPurchaseSequenceSteamML"
  "Entry\022\013\n\003mmr\030\001 \001(\r\022\014\n\004lane\030\002 \001(\r\022\017\n\007hero"
  "_id\030\003 \001(\r\022\035\n\017allied_hero_ids\030\004 \003(\rB\004\340\344\035\004"
  "\022\034\n\016enemy_hero_ids\030\005 \003(\rB\004\340\344\035\005\022\023\n\005items\030"
  "\006 \003(\rB\004\340\344\035\024\022\034\n\024item_to_be_purchased\030\007 \001("
  "\r\"\207\001\n%CMsgServerToGCCavernCrawlIsHeroAct"
  "ive\022\020\n\010event_id\030\001 \001(\r\022\022\n\naccount_id\030\002 \001("
  "\r\022\023\n\013map_variant\030\003 \001(\r\022\017\n\007hero_id\030\004 \001(\r\022"
  "\022\n\nturbo_mode\030\005 \001(\010\"\304\003\n$CMsgServerToGCPl"
  "ayerChallengeHistory\022\020\n\010match_id\030\001 \001(\004\022\024"
  "\n\014average_rank\030\002 \001(\r\022P\n\021challenge_record"
  "s\030\003 \003(\01325.CMsgServerToGCPlayerChallengeH"
  "istory.PlayerChallenge\032\241\002\n\017PlayerChallen"
  "ge\022\022\n\naccount_id\030\001 \001(\r\022[\n\016challenge_type"
  "\030\002 \001(\0162\034.EPlayerChallengeHistoryType:%k_"
  "EPlayerChallengeHistoryType_Invalid\022\025\n\rc"
  "hallenge_id1\030\003 \001(\r\022\025\n\rchallenge_id2\030\004 \001("
  "\r\022\034\n\024progress_value_start\030\005 \001(\r\022\032\n\022progr"
  "ess_value_end\030\006 \001(\r\022\020\n\010team_won\030\007 \001(\010\022\022\n"
  "\naudit_data\030\010 \001(\004\022\017\n\007hero_id\030\t \001(\r\"\224\002\n-C"
  "MsgServerToGCCavernCrawlIsHeroActiveResp"
  "onse\022\016\n\006result\030\001 \001(\010\022\032\n\022potential_winnin"
  "gs\030\002 \001(\r\022N\n\013map_results\030\003 \003(\01329.CMsgServ"
  "erToGCCavernCrawlIsHeroActiveResponse.Ma"
  "pResults\022%\n\035potential_plus_shard_winning"
  "s\030\004 \001(\r\032@\n\nMapResults\022\031\n\021path_id_complet"
  "ed\030\001 \001(\r\022\027\n\017room_id_claimed\030\002 \001(\r\";\n CMs"
  "gGCtoServerTensorflowInstance\022\027\n\017server_"
  "instance\030\001 \001(\r\"\343\t\n\025CMsgDetailedGameStats"
  "\0223\n\007minutes\030\001 \003(\0132\".CMsgDetailedGameStat"
  "s.MinuteEntry\0226\n\013player_info\030\002 \003(\0132!.CMs"
  "gDetailedGameStats.PlayerInfo\0224\n\ngame_st"
  "ats\030\003 \001(\0132 .CMsgDetailedGameStats.GameSt"
  "ats\032\244\006\n\017PlayerStatEntry\022\031\n\021total_earned_"
  "gold\030\001 \001(\r\022\026\n\016total_networth\030\002 \001(\r\022\r\n\005le"
  "vel\030\003 \001(\r\022\021\n\ttotal_dps\030\004 \001(\r\022\023\n\013average_"
  "dps\030\005 \001(\r\022\035\n\025ability_damage_output\030\006 \001(\r"
  "\022\023\n\013base_health\030\007 \001(\r\022\024\n\014total_health\030\010 "
  "\001(\r\022\022\n\ntotal_mana\030\t \001(\r\022*\n\"base_physical"
  "_damage_reduction_pct\030\n \001(\002\022+\n#total_phy"
  "sical_damage_reduction_pct\030\013 \001(\002\022)\n!base"
  "_ability_damage_reduction_pct\030\014 \001(\002\022*\n\"t"
  "otal_ability_damage_reduction_pct\030\r \001(\002\022"
  "\034\n\024ability_damage_block\030\016 \001(\002\022\035\n\025physica"
  "l_damage_block\030\017 \001(\002\022\022\n\nmana_regen\030\020 \001(\r"
  "\022\024\n\014health_regen\030\021 \001(\r\022\036\n\026physical_magic"
  "_dmg_pct\030\022 \001(\002\022\r\n\005kills\030\023 \001(\r\022\016\n\006deaths\030"
  "\024 \001(\r\022\017\n\007assists\030\025 \001(\r\022\027\n\017gold_from_kill"
  "s\030\026 \001(\r\022\030\n\020gold_from_creeps\030\027 \001(\r\022\023\n\013gol"
  "d_shared\030\030 \001(\r\022\025\n\rxp_from_kills\030\031 \001(\r\022\026\n"
  "\016xp_from_creeps\030\032 \001(\r\022\020\n\010total_xp\030\033 \001(\r\022"
  "\025\n\rability_casts\030\034 \001(\r\022\022\n\nitem_casts\030\035 \001"
  "(\r\022\032\n\022total_time_stunned\030\036 \001(\002\022\022\n\nitem_c"
  "ount\030\037 \001(\r\032b\n\tGameStats\022\033\n\023tower_death_t"
  "ime_t1\030\001 \001(\r\022\033\n\023tower_death_time_t2\030\002 \001("
  "\r\022\033\n\023tower_death_time_t3\030\003 \001(\r\032T\n\013Minute"
  "Entry\022\016\n\006minute\030\001 \001(\r\0225\n\005stats\030\002 \003(\0132&.C"
  "MsgDetailedGameStats.PlayerStatEntry\032F\n\n"
  "PlayerInfo\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007hero_i"
  "d\030\002 \001(\r\022\023\n\013player_slot\030\003 \001(\r\"\375\003\n\020CMsgAll"
  "StarStats\0223\n\014player_stats\030\001 \003(\0132\035.CMsgAl"
  "lStarStats.PlayerStats\032\263\003\n\013PlayerStats\022\022"
  "\n\naccount_id\030\001 \001(\r\022\021\n\tplayer_id\030\002 \001(\r\022\022\n"
  "\nkillstreak\030\003 \003(\r\022\027\n\017num_multi_kills\030\004 \003"
  "(\r\022\030\n\020killstreak_ended\030\005 \001(\r\022\024\n\014roshan_k"
  "ills\030\006 \001(\r\022\024\n\014first_bloods\030\007 \001(\r\022\025\n\rcour"
  "ier_kills\030\010 \001(\r\022\023\n\013tower_kills\030\t \001(\r\022\023\n\013"
  "first_taunt\030\n \001(\010\022\027\n\017first_high_five\030\013 \001"
  "(\010\022\021\n\tfirst_ceb\030\014 \001(\010\022\021\n\tfirst_tip\030\r \001(\010"
  "\022\024\n\014first_rapier\030\016 \001(\010\022\030\n\020first_aegis_de"
  "ny\030\017 \001(\010\022\023\n\013last_to_die\030\020 \001(\010\022\025\n\rfirst_t"
  "o_wipe\030\021 \001(\010\022\r\n\005kills\030\022 \001(\r\022\016\n\006deaths\030\023 "
  "\001(\r\022\017\n\007assists\030\024 \001(\r\"\352\001\n\024CMsgNeutralItem"
  "Stats\0228\n\rneutral_items\030\001 \003(\0132!.CMsgNeutr"
  "alItemStats.NeutralItem\032\227\001\n\013NeutralItem\022"
  "\017\n\007item_id\030\001 \001(\r\022\024\n\014time_dropped\030\002 \001(\r\022\014"
  "\n\004team\030\003 \001(\r\022\032\n\022time_last_equipped\030\004 \001(\r"
  "\022\034\n\024time_last_unequipped\030\005 \001(\r\022\031\n\021durati"
  "on_equipped\030\006 \001(\r\"\252\001\n\037CMsgGCToServerLobb"
  "yHeroBanRates\022\?\n\010ban_data\030\001 \003(\0132-.CMsgGC"
  "ToServerLobbyHeroBanRates.HeroBanEntry\032F"
  "\n\014HeroBanEntry\022\017\n\007hero_id\030\001 \001(\r\022\021\n\tban_c"
  "ount\030\002 \001(\r\022\022\n\npick_count\030\003 \001(\r\"\311\002\n CMsgS"
  "ignOutGuildContractProgress\022J\n\020player_co"
  "ntracts\030\001 \003(\01320.CMsgSignOutGuildContract"
  "Progress.PlayerContract\032U\n\034CompletedGuil"
  "dEventContracts\022\020\n\010guild_id\030\001 \001(\r\022\020\n\010eve"
  "nt_id\030\002 \001(\r\022\021\n\tcontracts\030\003 \003(\004\032\201\001\n\016Playe"
  "rContract\022\022\n\naccount_id\030\001 \001(\r\022[\n\023complet"
  "ed_contracts\030\002 \003(\0132>.CMsgSignOutGuildCon"
  "tractProgress.CompletedGuildEventContrac"
  "ts\"\315\002\n!CMsgSignOutGuildChallengeProgress"
  "\022Y\n\033guild_challenges_progresses\030\001 \003(\01324."
  "CMsgSignOutGuildChallengeProgress.Challe"
  "ngeProgress\032\314\001\n\021ChallengeProgress\022\020\n\010gui"
  "ld_id\030\001 \001(\r\022\020\n\010event_id\030\002 \001(\r\022\035\n\025challen"
  "ge_instance_id\030\003 \001(\r\022$\n\034challenge_instan"
  "ce_timestamp\030\004 \001(\r\022\037\n\027challenge_period_s"
  "erial\030\005 \001(\r\022\020\n\010progress\030\006 \001(\r\022\033\n\023challen"
  "ge_parameter\030\007 \001(\r\"\375\005\n\023CMsgSignOutMVPSta"
  "ts\022\020\n\010match_id\030\001 \001(\004\022\021\n\tgame_mode\030\002 \001(\r\022"
  "\024\n\014winning_team\030\003 \001(\r\022\021\n\tgame_time\030\004 \001(\002"
  "\022,\n\007players\030\005 \003(\0132\033.CMsgSignOutMVPStats."
  "Player\032\351\004\n\006Player\022\017\n\007team_id\030\001 \001(\r\022\032\n\022te"
  "am_networth_rank\030\002 \001(\r\022\022\n\naccount_id\030\003 \001"
  "(\r\022\014\n\004slot\030  \001(\r\022\014\n\004rank\030! \001(\r\022\017\n\007hero_i"
  "d\030\004 \001(\r\022\014\n\004role\030\005 \001(\r\022\r\n\005kills\030\006 \001(\005\022\016\n\006"
  "deaths\030\007 \001(\005\022\017\n\007assists\030\010 \001(\005\022\n\n\002xp\030\t \001("
  "\005\022\021\n\tnet_worth\030\n \001(\005\022\032\n\022support_gold_spe"
  "nt\030\014 \001(\005\022\024\n\014wards_placed\030\r \001(\005\022#\n\033wards_"
  "spotted_for_dewarding\030\016 \001(\005\022\025\n\rcamps_sta"
  "cked\030\017 \001(\005\022\021\n\tlast_hits\030\020 \001(\005\022\016\n\006denies\030"
  "\021 \001(\005\022\027\n\017building_damage\030\023 \001(\005\022\024\n\014other_"
  "damage\030\024 \001(\005\022\024\n\014triple_kills\030\032 \001(\005\022\020\n\010ra"
  "mpages\030\034 \001(\005\022\023\n\013first_blood\030\037 \001(\005\022E\n\021kil"
  "l_eater_events\030\" \003(\0132*.CMsgSignOutMVPSta"
  "ts.Player.KillEaterEvent\022\032\n\022highest_kill"
  "streak\030# \001(\r\0324\n\016KillEaterEvent\022\022\n\nevent_"
  "type\030\001 \002(\r\022\016\n\006amount\030\002 \002(\r\"2\n CMsgGCToSe"
  "rverRecordTrainingData\022\016\n\006enable\030\001 \001(\010\"6"
  "\n\037CMsgServerToGCGetGuildContracts\022\023\n\013acc"
  "ount_ids\030\001 \003(\r\"\260\003\n\'CMsgServerToGCGetGuil"
  "dContractsResponse\022I\n\020player_contracts\030\001"
  " \003(\0132/.CMsgServerToGCGetGuildContractsRe"
  "sponse.Player\032\221\001\n\017ContractDetails\022\023\n\013con"
  "tract_id\030\001 \001(\004\022\035\n\025challenge_instance_id\030"
  "\002 \001(\r\022\033\n\023challenge_parameter\030\003 \001(\r\022\026\n\016co"
  "ntract_stars\030\004 \001(\r\022\025\n\rcontract_slot\030\005 \001("
  "\r\032\245\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010guil"
  "d_id\030\002 \001(\r\022(\n\010event_id\030\003 \001(\0162\007.EEvent:\rE"
  "VENT_ID_NONE\022K\n\tcontracts\030\004 \003(\01328.CMsgSe"
  "rverToGCGetGuildContractsResponse.Contra"
  "ctDetails\"\316\002\n\026CMsgMatchDiretideCandy\022>\n\021"
  "player_candy_data\030\001 \003(\0132#.CMsgMatchDiret"
  "ideCandy.PlayerCandy\022(\n\010event_id\030\002 \001(\0162\007"
  ".EEvent:\rEVENT_ID_NONE\032-\n\014CandyDetails\022\016"
  "\n\006amount\030\001 \001(\r\022\r\n\005audit\030\002 \001(\r\032\232\001\n\013Player"
  "Candy\022\022\n\naccount_id\030\001 \001(\r\022\024\n\014candy_amoun"
  "t\030\003 \001(\r\022\"\n\032consumes_periodic_resource\030\004 "
  "\001(\010\022=\n\017candy_breakdown\030\005 \003(\0132$.CMsgMatch"
  "DiretideCandy.CandyDetails\"\374\001\n\027CMsgGCToS"
  "erverCheerData\022<\n\013cheer_types\030\001 \003(\0132\'.CM"
  "sgGCToServerCheerData.CheerTypeCount\022\026\n\016"
  "radiant_cheers\030\002 \001(\r\022\023\n\013dire_cheers\030\003 \001("
  "\r\022\036\n\026radiant_premium_cheers\030\004 \001(\r\022\033\n\023dir"
  "e_premium_cheers\030\005 \001(\r\0329\n\016CheerTypeCount"
  "\022\022\n\ncheer_type\030\001 \001(\r\022\023\n\013cheer_count\030\002 \001("
  "\r\"\250\004\n\017CMsgCheerConfig\022\026\n\016cheers_enabled\030"
  "\001 \001(\010\022\032\n\022is_valid_league_id\030\002 \001(\010\022\027\n\017win"
  "dow_duration\030\003 \001(\002\022\033\n\023window_bucket_coun"
  "t\030\004 \001(\r\022\035\n\025crowd_level_push_time\030\006 \001(\002\022\027"
  "\n\017crowd_level_low\030\n \001(\r\022\032\n\022crowd_level_m"
  "edium\030\013 \001(\r\022\030\n\020crowd_level_high\030\014 \001(\r\022\031\n"
  "\021cheer_scale_start\030\r \001(\002\022\031\n\021cheer_scale_"
  "speed\030\016 \001(\002\022\035\n\025cheer_scale_push_mark\030\017 \001"
  "(\r\022\035\n\025cheer_scale_pull_mark\030\020 \001(\r\022(\n che"
  "er_scale_pct_of_max_cps_clamp\030\021 \001(\002\022\"\n\032c"
  "heer_scale_dampener_value\030\025 \001(\002\022&\n\036cheer"
  "_scale_dampener_lerp_time\030\026 \001(\r\022\033\n\023cheer"
  "_factor_bronze\030\022 \001(\002\022\033\n\023cheer_factor_sil"
  "ver\030\023 \001(\002\022\031\n\021cheer_factor_gold\030\024 \001(\002\"C\n\031"
  "CMsgGCToServerCheerConfig\022&\n\014cheer_confi"
  "g\030\001 \001(\0132\020.CMsgCheerConfig\"1\n\034CMsgServerT"
  "oGCGetCheerConfig\022\021\n\tleague_id\030\001 \001(\r\"N\n$"
  "CMsgServerToGCGetCheerConfigResponse\022&\n\014"
  "cheer_config\030\002 \001(\0132\020.CMsgCheerConfig\"3\n!"
  "CMsgGCToServerCheerScalesOverride\022\016\n\006sca"
  "les\030\001 \003(\002\"\035\n\033CMsgGCToServerGetCheerState"
  "\"o\n\022CMsgCheerTypeState\022\024\n\014cheer_counts\030\001"
  " \003(\r\022\026\n\016max_per_second\030\002 \001(\002\022\023\n\013cheer_sc"
  "ale\030\003 \001(\002\022\026\n\016override_scale\030\004 \001(\002\"q\n\016CMs"
  "gCheerState\022(\n\013cheer_types\030\001 \003(\0132\023.CMsgC"
  "heerTypeState\022\033\n\023radiant_crowd_level\030\002 \001"
  "(\r\022\030\n\020dire_crowd_level\030\003 \001(\r\"n\n\036CMsgServ"
  "erToGCReportCheerState\022&\n\014cheer_config\030\001"
  " \001(\0132\020.CMsgCheerConfig\022$\n\013cheer_state\030\002 "
  "\001(\0132\017.CMsgCheerState*\306\001\n\032EPoorNetworkCon"
  "ditionsType\022!\n\035k_EPoorNetworkConditions_"
  "None\020\000\022$\n k_EPoorNetworkConditions_Unkno"
  "wn\020\001\022+\n\'k_EPoorNetworkConditions_MassDis"
  "connect\020\002\0222\n.k_EPoorNetworkConditions_Ex"
  "cessBadQosIntervals\020\003B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fserver_2eproto_deps[8] = {
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_econ_5fgcmessages_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_network_5fconnection_2eproto,
  &::descriptor_table_steammessages_2eproto,
  &::descriptor_table_valveextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fserver_2eproto = {
  false, false, 31988, descriptor_table_protodef_dota_5fgcmessages_5fserver_2eproto, "dota_gcmessages_server.proto", 
  &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once, descriptor_table_dota_5fgcmessages_5fserver_2eproto_deps, 8, 189,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fserver_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fserver_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fserver_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return descriptor_table_dota_5fgcmessages_5fserver_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fserver_2eproto(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[0];
}
bool CMsgConnectedPlayers_SendReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::INVALID;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::HEARTBEAT;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAME_STATE;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::FIRST_BLOOD;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_CONNECTED;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_HERO;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_CONSEQUENCES;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_NOCONSEQUENCES;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAMESTATE_TIMEOUT;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::MASS_DISCONNECT;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::KILLS;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::BUILDING_STATE;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MIN;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MAX;
constexpr int CMsgConnectedPlayers::SendReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[1];
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::TENSORFLOW;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::DOTA_ONLY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::CUSTOM_GAME_ONLY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::EVENT_GAME_ONLY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
constexpr int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerInfo_CustomGames_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[2];
}
bool CMsgGameServerInfo_CustomGames_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::BOTH;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::NONE;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::ONLY;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::EVENT;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MIN;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MAX;
constexpr int CMsgGameServerInfo::CustomGames_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[3];
}
bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HERO_DAMAGE_PHYSICAL;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HERO_DAMAGE_MAGICAL;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HERO_DAMAGE_PURE;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HeroDamageType_MIN;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HeroDamageType_MAX;
constexpr int CMsgGameMatchSignOut_CTeam_CPlayer::HeroDamageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[4];
}
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNotLearned;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateCooldown;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNeedsMana;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateReady;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MIN;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MAX;
constexpr int CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[5];
}
bool CMsgGameServerSaveGameResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SaveSuccessful;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SessionNotFound;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::DatabaseError;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::TooBig;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MIN;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MAX;
constexpr int CMsgGameServerSaveGameResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCToServerPredictionResult_Prediction_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[6];
}
bool CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_ItemGranted;
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_Destroyed;
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MIN;
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MAX;
constexpr int CMsgGCToServerPredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgServerToGCPostMatchTipResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[7];
}
bool CMsgServerToGCPostMatchTipResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::SUCCESS;
constexpr CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::FAILURE;
constexpr CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::Result_MIN;
constexpr CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::Result_MAX;
constexpr int CMsgServerToGCPostMatchTipResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPoorNetworkConditionsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[8];
}
bool EPoorNetworkConditionsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgPoorNetworkConditions_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPoorNetworkConditions_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_bad_intervals(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_peak_loss_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPoorNetworkConditions.Player)
}
CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(const CMsgPoorNetworkConditions_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_loss_pct_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(peak_loss_pct_));
  // @@protoc_insertion_point(copy_constructor:CMsgPoorNetworkConditions.Player)
}

void CMsgPoorNetworkConditions_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&peak_loss_pct_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(peak_loss_pct_));
}

CMsgPoorNetworkConditions_Player::~CMsgPoorNetworkConditions_Player() {
  // @@protoc_insertion_point(destructor:CMsgPoorNetworkConditions.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPoorNetworkConditions_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPoorNetworkConditions_Player::ArenaDtor(void* object) {
  CMsgPoorNetworkConditions_Player* _this = reinterpret_cast< CMsgPoorNetworkConditions_Player* >(object);
  (void)_this;
}
void CMsgPoorNetworkConditions_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPoorNetworkConditions_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPoorNetworkConditions_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPoorNetworkConditions.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peak_loss_pct_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(peak_loss_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPoorNetworkConditions_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENetworkDisconnectionReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::ENetworkDisconnectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 num_bad_intervals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_bad_intervals(&has_bits);
          num_bad_intervals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 peak_loss_pct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_peak_loss_pct(&has_bits);
          peak_loss_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPoorNetworkConditions_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPoorNetworkConditions.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_disconnect_reason(), target);
  }

  // optional uint32 num_bad_intervals = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_bad_intervals(), target);
  }

  // optional uint32 peak_loss_pct = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peak_loss_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPoorNetworkConditions.Player)
  return target;
}

size_t CMsgPoorNetworkConditions_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPoorNetworkConditions.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
    }

    // optional uint32 num_bad_intervals = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_bad_intervals());
    }

    // optional uint32 peak_loss_pct = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_peak_loss_pct());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPoorNetworkConditions.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPoorNetworkConditions_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPoorNetworkConditions_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPoorNetworkConditions.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPoorNetworkConditions.Player)
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const CMsgPoorNetworkConditions_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPoorNetworkConditions.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_bad_intervals_ = from.num_bad_intervals_;
    }
    if (cached_has_bits & 0x00000008u) {
      peak_loss_pct_ = from.peak_loss_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPoorNetworkConditions.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const CMsgPoorNetworkConditions_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPoorNetworkConditions.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions_Player::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions_Player::InternalSwap(CMsgPoorNetworkConditions_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, peak_loss_pct_)
      + sizeof(CMsgPoorNetworkConditions_Player::peak_loss_pct_)
      - PROTOBUF_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPoorNetworkConditions_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPoorNetworkConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPoorNetworkConditions>()._has_bits_);
  static void set_has_detection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPoorNetworkConditions)
}
CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(const CMsgPoorNetworkConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detection_type_ = from.detection_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgPoorNetworkConditions)
}

void CMsgPoorNetworkConditions::SharedCtor() {
detection_type_ = 0;
}

CMsgPoorNetworkConditions::~CMsgPoorNetworkConditions() {
  // @@protoc_insertion_point(destructor:CMsgPoorNetworkConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPoorNetworkConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPoorNetworkConditions::ArenaDtor(void* object) {
  CMsgPoorNetworkConditions* _this = reinterpret_cast< CMsgPoorNetworkConditions* >(object);
  (void)_this;
}
void CMsgPoorNetworkConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPoorNetworkConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPoorNetworkConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPoorNetworkConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  detection_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPoorNetworkConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPoorNetworkConditionsType_IsValid(val))) {
            _internal_set_detection_type(static_cast<::EPoorNetworkConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPoorNetworkConditions.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPoorNetworkConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPoorNetworkConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_detection_type(), target);
  }

  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPoorNetworkConditions)
  return target;
}

size_t CMsgPoorNetworkConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPoorNetworkConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_detection_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPoorNetworkConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPoorNetworkConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPoorNetworkConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPoorNetworkConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPoorNetworkConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPoorNetworkConditions)
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions::MergeFrom(const CMsgPoorNetworkConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPoorNetworkConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from._internal_has_detection_type()) {
    _internal_set_detection_type(from._internal_detection_type());
  }
}

void CMsgPoorNetworkConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPoorNetworkConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions::CopyFrom(const CMsgPoorNetworkConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPoorNetworkConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions::InternalSwap(CMsgPoorNetworkConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  swap(detection_type_, other->detection_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPoorNetworkConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameserverCrash::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameserverCrash>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sentinel_save_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_public_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgGameserverCrash::CMsgGameserverCrash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameserverCrash)
}
CMsgGameserverCrash::CMsgGameserverCrash(const CMsgGameserverCrash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(tournament_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameserverCrash)
}

void CMsgGameserverCrash::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(tournament_id_));
}

CMsgGameserverCrash::~CMsgGameserverCrash() {
  // @@protoc_insertion_point(destructor:CMsgGameserverCrash)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameserverCrash::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameserverCrash::ArenaDtor(void* object) {
  CMsgGameserverCrash* _this = reinterpret_cast< CMsgGameserverCrash* >(object);
  (void)_this;
}
void CMsgGameserverCrash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameserverCrash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameserverCrash::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameserverCrash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_cluster_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(server_cluster_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_id_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(tournament_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameserverCrash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed32 sentinel_save_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_sentinel_save_time(&has_bits);
          sentinel_save_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_public_ip_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_server_public_ip_addr(&has_bits);
          server_public_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_cluster = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_server_cluster(&has_bits);
          server_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 engine = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_engine(&has_bits);
          engine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 custom_game_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameserverCrash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameserverCrash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_game_state(), target);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_sentinel_save_time(), target);
  }

  // optional fixed64 server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_server_steam_id(), target);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_server_public_ip_addr(), target);
  }

  // optional uint32 server_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_server_port(), target);
  }

  // optional uint32 server_cluster = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_server_cluster(), target);
  }

  // optional uint32 pid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pid(), target);
  }

  // optional uint32 engine = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_engine(), target);
  }

  // optional fixed64 custom_game_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_custom_game_id(), target);
  }

  // optional uint32 tournament_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tournament_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameserverCrash)
  return target;
}

size_t CMsgGameserverCrash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameserverCrash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional fixed64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional fixed32 sentinel_save_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_steam_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_public_ip_addr = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

    // optional uint32 server_cluster = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_cluster());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 pid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pid());
    }

    // optional fixed64 custom_game_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 engine = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_engine());
    }

    // optional uint32 tournament_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameserverCrash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameserverCrash)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameserverCrash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameserverCrash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameserverCrash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameserverCrash)
    MergeFrom(*source);
  }
}

void CMsgGameserverCrash::MergeFrom(const CMsgGameserverCrash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameserverCrash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      sentinel_save_time_ = from.sentinel_save_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_public_ip_addr_ = from.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_cluster_ = from.server_cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000200u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000800u) {
      tournament_id_ = from.tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameserverCrash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameserverCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameserverCrash::CopyFrom(const CMsgGameserverCrash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameserverCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameserverCrash::IsInitialized() const {
  return true;
}

void CMsgGameserverCrash::InternalSwap(CMsgGameserverCrash* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameserverCrash, tournament_id_)
      + sizeof(CMsgGameserverCrash::tournament_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameserverCrash, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameserverCrash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgConnectedPlayers_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConnectedPlayers_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgLeaverState& leaver_state(const CMsgConnectedPlayers_Player* msg);
  static void set_has_leaver_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgLeaverState&
CMsgConnectedPlayers_Player::_Internal::leaver_state(const CMsgConnectedPlayers_Player* msg) {
  return *msg->leaver_state_;
}
void CMsgConnectedPlayers_Player::clear_leaver_state() {
  if (leaver_state_ != nullptr) leaver_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgConnectedPlayers.Player)
}
CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaver_state()) {
    leaver_state_ = new ::CMsgLeaverState(*from.leaver_state_);
  } else {
    leaver_state_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgConnectedPlayers.Player)
}

void CMsgConnectedPlayers_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leaver_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&leaver_state_)) + sizeof(disconnect_reason_));
}

CMsgConnectedPlayers_Player::~CMsgConnectedPlayers_Player() {
  // @@protoc_insertion_point(destructor:CMsgConnectedPlayers.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgConnectedPlayers_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leaver_state_;
}

void CMsgConnectedPlayers_Player::ArenaDtor(void* object) {
  CMsgConnectedPlayers_Player* _this = reinterpret_cast< CMsgConnectedPlayers_Player* >(object);
  (void)_this;
}
void CMsgConnectedPlayers_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConnectedPlayers_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConnectedPlayers_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConnectedPlayers.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(leaver_state_ != nullptr);
    leaver_state_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnect_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConnectedPlayers_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLeaverState leaver_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaver_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENetworkDisconnectionReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::ENetworkDisconnectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConnectedPlayers_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectedPlayers.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional .CMsgLeaverState leaver_state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leaver_state(this), target, stream);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_disconnect_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectedPlayers.Player)
  return target;
}

size_t CMsgConnectedPlayers_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConnectedPlayers.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgLeaverState leaver_state = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leaver_state_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConnectedPlayers_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgConnectedPlayers.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectedPlayers_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgConnectedPlayers_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgConnectedPlayers.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgConnectedPlayers.Player)
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers_Player::MergeFrom(const CMsgConnectedPlayers_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConnectedPlayers.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_leaver_state()->::CMsgLeaverState::MergeFrom(from._internal_leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectedPlayers_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgConnectedPlayers.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers_Player::CopyFrom(const CMsgConnectedPlayers_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConnectedPlayers.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers_Player::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers_Player::InternalSwap(CMsgConnectedPlayers_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers_Player, disconnect_reason_)
      + sizeof(CMsgConnectedPlayers_Player::disconnect_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers_Player, leaver_state_)>(
          reinterpret_cast<char*>(&leaver_state_),
          reinterpret_cast<char*>(&other->leaver_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConnectedPlayers_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgConnectedPlayers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConnectedPlayers>()._has_bits_);
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_blood_happened(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgConnectedPlayers* msg);
  static void set_has_poor_network_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_send_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_radiant_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dire_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_radiant_lead(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_building_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgPoorNetworkConditions&
CMsgConnectedPlayers::_Internal::poor_network_conditions(const CMsgConnectedPlayers* msg) {
  return *msg->poor_network_conditions_;
}
CMsgConnectedPlayers::CMsgConnectedPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  connected_players_(arena),
  disconnected_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgConnectedPlayers)
}
CMsgConnectedPlayers::CMsgConnectedPlayers(const CMsgConnectedPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      connected_players_(from.connected_players_),
      disconnected_players_(from.disconnected_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_poor_network_conditions()) {
    poor_network_conditions_ = new ::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = nullptr;
  }
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&radiant_lead_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(radiant_lead_));
  // @@protoc_insertion_point(copy_constructor:CMsgConnectedPlayers)
}

void CMsgConnectedPlayers::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&poor_network_conditions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radiant_lead_) -
    reinterpret_cast<char*>(&poor_network_conditions_)) + sizeof(radiant_lead_));
}

CMsgConnectedPlayers::~CMsgConnectedPlayers() {
  // @@protoc_insertion_point(destructor:CMsgConnectedPlayers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgConnectedPlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete poor_network_conditions_;
}

void CMsgConnectedPlayers::ArenaDtor(void* object) {
  CMsgConnectedPlayers* _this = reinterpret_cast< CMsgConnectedPlayers* >(object);
  (void)_this;
}
void CMsgConnectedPlayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConnectedPlayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConnectedPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConnectedPlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_players_.Clear();
  disconnected_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(poor_network_conditions_ != nullptr);
    poor_network_conditions_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&game_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radiant_lead_) -
        reinterpret_cast<char*>(&game_state_)) + sizeof(radiant_lead_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConnectedPlayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgConnectedPlayers.Player connected_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connected_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool first_blood_happened = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_first_blood_happened(&has_bits);
          first_blood_happened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disconnected_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgConnectedPlayers_SendReason_IsValid(val))) {
            _internal_set_send_reason(static_cast<::CMsgConnectedPlayers_SendReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_poor_network_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_kills = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_radiant_kills(&has_bits);
          radiant_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_kills = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_dire_kills(&has_bits);
          dire_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 radiant_lead = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_radiant_lead(&has_bits);
          radiant_lead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 building_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_building_state(&has_bits);
          building_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConnectedPlayers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectedPlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connected_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_connected_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_state(), target);
  }

  // optional bool first_blood_happened = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_first_blood_happened(), target);
  }

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disconnected_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_disconnected_players(i), target, stream);
  }

  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_send_reason(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::poor_network_conditions(this), target, stream);
  }

  // optional uint32 radiant_kills = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_radiant_kills(), target);
  }

  // optional uint32 dire_kills = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_dire_kills(), target);
  }

  // optional int32 radiant_lead = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_radiant_lead(), target);
  }

  // optional uint32 building_state = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_building_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectedPlayers)
  return target;
}

size_t CMsgConnectedPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConnectedPlayers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  total_size += 1UL * this->_internal_connected_players_size();
  for (const auto& msg : this->connected_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  total_size += 1UL * this->_internal_disconnected_players_size();
  for (const auto& msg : this->disconnected_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poor_network_conditions_);
    }

    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional bool first_blood_happened = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_send_reason());
    }

    // optional uint32 radiant_kills = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_kills());
    }

    // optional uint32 building_state = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_building_state());
    }

    // optional uint32 dire_kills = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_kills());
    }

    // optional int32 radiant_lead = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_radiant_lead());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConnectedPlayers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgConnectedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectedPlayers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgConnectedPlayers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgConnectedPlayers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgConnectedPlayers)
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers::MergeFrom(const CMsgConnectedPlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConnectedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connected_players_.MergeFrom(from.connected_players_);
  disconnected_players_.MergeFrom(from.disconnected_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(from._internal_poor_network_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_reason_ = from.send_reason_;
    }
    if (cached_has_bits & 0x00000010u) {
      radiant_kills_ = from.radiant_kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      dire_kills_ = from.dire_kills_;
    }
    if (cached_has_bits & 0x00000080u) {
      radiant_lead_ = from.radiant_lead_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectedPlayers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgConnectedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers::CopyFrom(const CMsgConnectedPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConnectedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers::InternalSwap(CMsgConnectedPlayers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connected_players_.InternalSwap(&other->connected_players_);
  disconnected_players_.InternalSwap(&other->disconnected_players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers, radiant_lead_)
      + sizeof(CMsgConnectedPlayers::radiant_lead_)
      - PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers, poor_network_conditions_)>(
          reinterpret_cast<char*>(&poor_network_conditions_),
          reinterpret_cast<char*>(&other->poor_network_conditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConnectedPlayers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerInfo>()._has_bits_);
  static void set_has_server_public_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_private_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_assigned_server_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_legacy_server_steamdatagram_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_hibernation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_server_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_loadavg(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_tv_broadcast_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_server_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_server_relay_connected_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_relay_slots_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_relays_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_relay_clients_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_relayed_game_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_parent_relay_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tv_secret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_server_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_allow_custom_games(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_build_version(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tf_server_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_srcds_instance(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_dev_force_server_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_is_recording_match_training_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

CMsgGameServerInfo::CMsgGameServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerInfo)
}
CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_key()) {
    server_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_key(), 
      GetArena());
  }
  legacy_server_steamdatagram_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_legacy_server_steamdatagram_address()) {
    legacy_server_steamdatagram_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_legacy_server_steamdatagram_address(), 
      GetArena());
  }
  ::memcpy(&server_public_ip_addr_, &from.server_public_ip_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&srcds_instance_) -
    reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(srcds_instance_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerInfo)
}

void CMsgGameServerInfo::SharedCtor() {
server_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
legacy_server_steamdatagram_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_public_ip_addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srcds_instance_) -
    reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(srcds_instance_));
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgGameServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legacy_server_steamdatagram_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerInfo::ArenaDtor(void* object) {
  CMsgGameServerInfo* _this = reinterpret_cast< CMsgGameServerInfo* >(object);
  (void)_this;
}
void CMsgGameServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      legacy_server_steamdatagram_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&server_public_ip_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(server_region_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&server_loadavg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relayed_game_server_steam_id_) -
        reinterpret_cast<char*>(&server_loadavg_)) + sizeof(relayed_game_server_steam_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tv_secret_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assigned_server_tv_port_) -
        reinterpret_cast<char*>(&tv_secret_code_)) + sizeof(assigned_server_tv_port_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&allow_custom_games_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&srcds_instance_) -
        reinterpret_cast<char*>(&allow_custom_games_)) + sizeof(srcds_instance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_server_public_ip_addr(&has_bits);
          server_public_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_private_ip_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_server_private_ip_addr(&has_bits);
          server_private_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_tv_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_tv_port(&has_bits);
          server_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_server_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerInfo.server_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool server_hibernation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_server_hibernation(&has_bits);
          server_hibernation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerInfo_ServerType_IsValid(val))) {
            _internal_set_server_type(static_cast<::CMsgGameServerInfo_ServerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 server_region = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float server_loadavg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_server_loadavg(&has_bits);
          server_loadavg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float server_tv_broadcast_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_server_tv_broadcast_time(&has_bits);
          server_tv_broadcast_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float server_game_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_server_game_time(&has_bits);
          server_game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_server_relay_connected_steam_id(&has_bits);
          server_relay_connected_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 relay_slots_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_relay_slots_max(&has_bits);
          relay_slots_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 relays_connected = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_relays_connected(&has_bits);
          relays_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 relay_clients_connected = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_relay_clients_connected(&has_bits);
          relay_clients_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_relayed_game_server_steam_id(&has_bits);
          relayed_game_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 parent_relay_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_parent_relay_count(&has_bits);
          parent_relay_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 tv_secret_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_tv_secret_code(&has_bits);
          tv_secret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_cluster = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_server_cluster(&has_bits);
          server_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assigned_server_tv_port = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_assigned_server_tv_port(&has_bits);
          assigned_server_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerInfo_CustomGames_IsValid(val))) {
            _internal_set_allow_custom_games(static_cast<::CMsgGameServerInfo_CustomGames>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 build_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_build_version(&has_bits);
          build_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tf_server_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tf_server_count(&has_bits);
          tf_server_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 srcds_instance = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_srcds_instance(&has_bits);
          srcds_instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes legacy_server_steamdatagram_address = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_legacy_server_steamdatagram_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dev_force_server_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_dev_force_server_type(&has_bits);
          dev_force_server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_recording_match_training_data = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_is_recording_match_training_data(&has_bits);
          is_recording_match_training_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 server_public_ip_addr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_server_public_ip_addr(), target);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_server_private_ip_addr(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_port(), target);
  }

  // optional uint32 server_tv_port = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_tv_port(), target);
  }

  // optional string server_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_key().data(), static_cast<int>(this->_internal_server_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerInfo.server_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_server_key(), target);
  }

  // optional bool server_hibernation = 6;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_server_hibernation(), target);
  }

  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_server_type(), target);
  }

  // optional uint32 server_region = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_server_region(), target);
  }

  // optional float server_loadavg = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_server_loadavg(), target);
  }

  // optional float server_tv_broadcast_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_server_tv_broadcast_time(), target);
  }

  // optional float server_game_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_server_game_time(), target);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(12, this->_internal_server_relay_connected_steam_id(), target);
  }

  // optional uint32 relay_slots_max = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_relay_slots_max(), target);
  }

  // optional int32 relays_connected = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_relays_connected(), target);
  }

  // optional int32 relay_clients_connected = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_relay_clients_connected(), target);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(16, this->_internal_relayed_game_server_steam_id(), target);
  }

  // optional uint32 parent_relay_count = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_parent_relay_count(), target);
  }

  // optional fixed64 tv_secret_code = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(18, this->_internal_tv_secret_code(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_server_version(), target);
  }

  // optional uint32 server_cluster = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_server_cluster(), target);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_assigned_server_tv_port(), target);
  }

  // optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_allow_custom_games(), target);
  }

  // optional uint32 build_version = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_build_version(), target);
  }

  // optional uint32 tf_server_count = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tf_server_count(), target);
  }

  // optional uint32 srcds_instance = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_srcds_instance(), target);
  }

  // optional bytes legacy_server_steamdatagram_address = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_legacy_server_steamdatagram_address(), target);
  }

  // optional bool dev_force_server_type = 28;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_dev_force_server_type(), target);
  }

  // optional bool is_recording_match_training_data = 29;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_is_recording_match_training_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerInfo)
  return target;
}

size_t CMsgGameServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_key = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_key());
    }

    // optional bytes legacy_server_steamdatagram_address = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_legacy_server_steamdatagram_address());
    }

    // optional fixed32 server_public_ip_addr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_private_ip_addr = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

    // optional uint32 server_tv_port = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_tv_port());
    }

    // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_type());
    }

    // optional uint32 server_region = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float server_loadavg = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float server_tv_broadcast_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_relay_connected_steam_id = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional float server_game_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 relay_slots_max = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relay_slots_max());
    }

    // optional int32 relays_connected = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relays_connected());
    }

    // optional int32 relay_clients_connected = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relay_clients_connected());
    }

    // optional fixed64 relayed_game_server_steam_id = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 tv_secret_code = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional uint32 parent_relay_count = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_relay_count());
    }

    // optional uint32 server_version = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional uint32 server_cluster = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_cluster());
    }

    // optional bool server_hibernation = 6;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool dev_force_server_type = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool is_recording_match_training_data = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint32 assigned_server_tv_port = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assigned_server_tv_port());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_allow_custom_games());
    }

    // optional uint32 build_version = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_build_version());
    }

    // optional uint32 tf_server_count = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tf_server_count());
    }

    // optional uint32 srcds_instance = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_srcds_instance());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerInfo)
    MergeFrom(*source);
  }
}

void CMsgGameServerInfo::MergeFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_key(from._internal_server_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_legacy_server_steamdatagram_address(from._internal_legacy_server_steamdatagram_address());
    }
    if (cached_has_bits & 0x00000004u) {
      server_public_ip_addr_ = from.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_private_ip_addr_ = from.server_private_ip_addr_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_tv_port_ = from.server_tv_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_type_ = from.server_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      server_loadavg_ = from.server_loadavg_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_tv_broadcast_time_ = from.server_tv_broadcast_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_relay_connected_steam_id_ = from.server_relay_connected_steam_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      server_game_time_ = from.server_game_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      relay_slots_max_ = from.relay_slots_max_;
    }
    if (cached_has_bits & 0x00002000u) {
      relays_connected_ = from.relays_connected_;
    }
    if (cached_has_bits & 0x00004000u) {
      relay_clients_connected_ = from.relay_clients_connected_;
    }
    if (cached_has_bits & 0x00008000u) {
      relayed_game_server_steam_id_ = from.relayed_game_server_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tv_secret_code_ = from.tv_secret_code_;
    }
    if (cached_has_bits & 0x00020000u) {
      parent_relay_count_ = from.parent_relay_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      server_cluster_ = from.server_cluster_;
    }
    if (cached_has_bits & 0x00100000u) {
      server_hibernation_ = from.server_hibernation_;
    }
    if (cached_has_bits & 0x00200000u) {
      dev_force_server_type_ = from.dev_force_server_type_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_recording_match_training_data_ = from.is_recording_match_training_data_;
    }
    if (cached_has_bits & 0x00800000u) {
      assigned_server_tv_port_ = from.assigned_server_tv_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      allow_custom_games_ = from.allow_custom_games_;
    }
    if (cached_has_bits & 0x02000000u) {
      build_version_ = from.build_version_;
    }
    if (cached_has_bits & 0x04000000u) {
      tf_server_count_ = from.tf_server_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      srcds_instance_ = from.srcds_instance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {
  return true;
}

void CMsgGameServerInfo::InternalSwap(CMsgGameServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_key_.Swap(&other->server_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  legacy_server_steamdatagram_address_.Swap(&other->legacy_server_steamdatagram_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerInfo, srcds_instance_)
      + sizeof(CMsgGameServerInfo::srcds_instance_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerInfo, server_public_ip_addr_)>(
          reinterpret_cast<char*>(&server_public_ip_addr_),
          reinterpret_cast<char*>(&other->server_public_ip_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeaverDetected::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeaverDetected>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leaver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgLeaverState& leaver_state(const CMsgLeaverDetected* msg);
  static void set_has_leaver_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgLeaverDetected* msg);
  static void set_has_poor_network_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgLeaverState&
CMsgLeaverDetected::_Internal::leaver_state(const CMsgLeaverDetected* msg) {
  return *msg->leaver_state_;
}
const ::CMsgPoorNetworkConditions&
CMsgLeaverDetected::_Internal::poor_network_conditions(const CMsgLeaverDetected* msg) {
  return *msg->poor_network_conditions_;
}
void CMsgLeaverDetected::clear_leaver_state() {
  if (leaver_state_ != nullptr) leaver_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgLeaverDetected::CMsgLeaverDetected(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaverDetected)
}
CMsgLeaverDetected::CMsgLeaverDetected(const CMsgLeaverDetected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaver_state()) {
    leaver_state_ = new ::CMsgLeaverState(*from.leaver_state_);
  } else {
    leaver_state_ = nullptr;
  }
  if (from._internal_has_poor_network_conditions()) {
    poor_network_conditions_ = new ::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverDetected)
}

void CMsgLeaverDetected::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leaver_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&leaver_state_)) + sizeof(disconnect_reason_));
}

CMsgLeaverDetected::~CMsgLeaverDetected() {
  // @@protoc_insertion_point(destructor:CMsgLeaverDetected)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeaverDetected::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leaver_state_;
  if (this != internal_default_instance()) delete poor_network_conditions_;
}

void CMsgLeaverDetected::ArenaDtor(void* object) {
  CMsgLeaverDetected* _this = reinterpret_cast< CMsgLeaverDetected* >(object);
  (void)_this;
}
void CMsgLeaverDetected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeaverDetected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeaverDetected::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaverDetected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(leaver_state_ != nullptr);
      leaver_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poor_network_conditions_ != nullptr);
      poor_network_conditions_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnect_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaverDetected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALeaverStatus_t_IsValid(val))) {
            _internal_set_leaver_status(static_cast<::DOTALeaverStatus_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgLeaverState leaver_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaver_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_cluster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_server_cluster(&has_bits);
          server_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENetworkDisconnectionReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::ENetworkDisconnectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_poor_network_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeaverDetected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverDetected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_leaver_status(), target);
  }

  // optional .CMsgLeaverState leaver_state = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::leaver_state(this), target, stream);
  }

  // optional uint32 server_cluster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_cluster(), target);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_disconnect_reason(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::poor_network_conditions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverDetected)
  return target;
}

size_t CMsgLeaverDetected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaverDetected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgLeaverState leaver_state = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leaver_state_);
    }

    // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poor_network_conditions_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leaver_status());
    }

    // optional uint32 server_cluster = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_cluster());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaverDetected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeaverDetected)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverDetected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeaverDetected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeaverDetected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeaverDetected)
    MergeFrom(*source);
  }
}

void CMsgLeaverDetected::MergeFrom(const CMsgLeaverDetected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaverDetected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_leaver_state()->::CMsgLeaverState::MergeFrom(from._internal_leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(from._internal_poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_cluster_ = from.server_cluster_;
    }
    if (cached_has_bits & 0x00000020u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLeaverDetected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeaverDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetected::CopyFrom(const CMsgLeaverDetected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaverDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetected::IsInitialized() const {
  return true;
}

void CMsgLeaverDetected::InternalSwap(CMsgLeaverDetected* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLeaverDetected, disconnect_reason_)
      + sizeof(CMsgLeaverDetected::disconnect_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgLeaverDetected, leaver_state_)>(
          reinterpret_cast<char*>(&leaver_state_),
          reinterpret_cast<char*>(&other->leaver_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaverDetected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeaverDetectedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeaverDetectedResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaverDetectedResponse)
}
CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverDetectedResponse)
}

void CMsgLeaverDetectedResponse::SharedCtor() {
result_ = 0u;
}

CMsgLeaverDetectedResponse::~CMsgLeaverDetectedResponse() {
  // @@protoc_insertion_point(destructor:CMsgLeaverDetectedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeaverDetectedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLeaverDetectedResponse::ArenaDtor(void* object) {
  CMsgLeaverDetectedResponse* _this = reinterpret_cast< CMsgLeaverDetectedResponse* >(object);
  (void)_this;
}
void CMsgLeaverDetectedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeaverDetectedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeaverDetectedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaverDetectedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaverDetectedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeaverDetectedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverDetectedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverDetectedResponse)
  return target;
}

size_t CMsgLeaverDetectedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaverDetectedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaverDetectedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeaverDetectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverDetectedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeaverDetectedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeaverDetectedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeaverDetectedResponse)
    MergeFrom(*source);
  }
}

void CMsgLeaverDetectedResponse::MergeFrom(const CMsgLeaverDetectedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaverDetectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgLeaverDetectedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeaverDetectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetectedResponse::CopyFrom(const CMsgLeaverDetectedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaverDetectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetectedResponse::IsInitialized() const {
  return true;
}

void CMsgLeaverDetectedResponse::InternalSwap(CMsgLeaverDetectedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaverDetectedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyFinalPlayerStats::_Internal {
 public:
};

void CMsgDOTAFantasyFinalPlayerStats::clear_stats() {
  stats_.Clear();
}
CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyFinalPlayerStats)
}
CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(const CMsgDOTAFantasyFinalPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyFinalPlayerStats)
}

void CMsgDOTAFantasyFinalPlayerStats::SharedCtor() {
}

CMsgDOTAFantasyFinalPlayerStats::~CMsgDOTAFantasyFinalPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyFinalPlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyFinalPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyFinalPlayerStats::ArenaDtor(void* object) {
  CMsgDOTAFantasyFinalPlayerStats* _this = reinterpret_cast< CMsgDOTAFantasyFinalPlayerStats* >(object);
  (void)_this;
}
void CMsgDOTAFantasyFinalPlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyFinalPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyFinalPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyFinalPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyFinalPlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyFinalPlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyFinalPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyFinalPlayerStats)
  return target;
}

size_t CMsgDOTAFantasyFinalPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyFinalPlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyFinalPlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyFinalPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyFinalPlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyFinalPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyFinalPlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyFinalPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyFinalPlayerStats::MergeFrom(const CMsgDOTAFantasyFinalPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyFinalPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTAFantasyFinalPlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyFinalPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyFinalPlayerStats::CopyFrom(const CMsgDOTAFantasyFinalPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyFinalPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyFinalPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyFinalPlayerStats::InternalSwap(CMsgDOTAFantasyFinalPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyFinalPlayerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLivePlayerStats::_Internal {
 public:
};

void CMsgDOTAFantasyLivePlayerStats::clear_stats() {
  stats_.Clear();
}
CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLivePlayerStats)
}
CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(const CMsgDOTAFantasyLivePlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLivePlayerStats)
}

void CMsgDOTAFantasyLivePlayerStats::SharedCtor() {
}

CMsgDOTAFantasyLivePlayerStats::~CMsgDOTAFantasyLivePlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLivePlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLivePlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLivePlayerStats::ArenaDtor(void* object) {
  CMsgDOTAFantasyLivePlayerStats* _this = reinterpret_cast< CMsgDOTAFantasyLivePlayerStats* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLivePlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLivePlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLivePlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLivePlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLivePlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLivePlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLivePlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLivePlayerStats)
  return target;
}

size_t CMsgDOTAFantasyLivePlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLivePlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLivePlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLivePlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLivePlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLivePlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLivePlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLivePlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLivePlayerStats::MergeFrom(const CMsgDOTAFantasyLivePlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLivePlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTAFantasyLivePlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLivePlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLivePlayerStats::CopyFrom(const CMsgDOTAFantasyLivePlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLivePlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLivePlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLivePlayerStats::InternalSwap(CMsgDOTAFantasyLivePlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLivePlayerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyMatch>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyMatch)
}
CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch(const CMsgDOTAFantasyMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_2_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(team_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMatch)
}

void CMsgDOTAFantasyMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_2_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(team_2_));
}

CMsgDOTAFantasyMatch::~CMsgDOTAFantasyMatch() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyMatch::ArenaDtor(void* object) {
  CMsgDOTAFantasyMatch* _this = reinterpret_cast< CMsgDOTAFantasyMatch* >(object);
  (void)_this;
}
void CMsgDOTAFantasyMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_2_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(team_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_series_type(&has_bits);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_1(&has_bits);
          team_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_2(&has_bits);
          team_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 series_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_series_id(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_time(), target);
  }

  // optional uint32 series_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_series_type(), target);
  }

  // optional uint32 team_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_team_1(), target);
  }

  // optional uint32 team_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_team_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMatch)
  return target;
}

size_t CMsgDOTAFantasyMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 series_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 series_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 team_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_1());
    }

    // optional uint32 team_2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMatch::MergeFrom(const CMsgDOTAFantasyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_1_ = from.team_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_2_ = from.team_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMatch::CopyFrom(const CMsgDOTAFantasyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMatch::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMatch::InternalSwap(CMsgDOTAFantasyMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMatch, team_2_)
      + sizeof(CMsgDOTAFantasyMatch::team_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMatch, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAUpdateClippy::_Internal {
 public:
};

CMsgDOTAUpdateClippy::CMsgDOTAUpdateClippy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  good_team_hero_ids_(arena),
  bad_team_hero_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAUpdateClippy)
}
CMsgDOTAUpdateClippy::CMsgDOTAUpdateClippy(const CMsgDOTAUpdateClippy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      good_team_hero_ids_(from.good_team_hero_ids_),
      bad_team_hero_ids_(from.bad_team_hero_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAUpdateClippy)
}

void CMsgDOTAUpdateClippy::SharedCtor() {
}

CMsgDOTAUpdateClippy::~CMsgDOTAUpdateClippy() {
  // @@protoc_insertion_point(destructor:CMsgDOTAUpdateClippy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAUpdateClippy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAUpdateClippy::ArenaDtor(void* object) {
  CMsgDOTAUpdateClippy* _this = reinterpret_cast< CMsgDOTAUpdateClippy* >(object);
  (void)_this;
}
void CMsgDOTAUpdateClippy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAUpdateClippy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAUpdateClippy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAUpdateClippy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  good_team_hero_ids_.Clear();
  bad_team_hero_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAUpdateClippy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 good_team_hero_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_good_team_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_good_team_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bad_team_hero_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bad_team_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bad_team_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAUpdateClippy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAUpdateClippy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 good_team_hero_ids = 1;
  for (int i = 0, n = this->_internal_good_team_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_good_team_hero_ids(i), target);
  }

  // repeated uint32 bad_team_hero_ids = 2;
  for (int i = 0, n = this->_internal_bad_team_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bad_team_hero_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAUpdateClippy)
  return target;
}

size_t CMsgDOTAUpdateClippy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAUpdateClippy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 good_team_hero_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->good_team_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_good_team_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 bad_team_hero_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bad_team_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bad_team_hero_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAUpdateClippy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAUpdateClippy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAUpdateClippy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAUpdateClippy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAUpdateClippy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAUpdateClippy)
    MergeFrom(*source);
  }
}

void CMsgDOTAUpdateClippy::MergeFrom(const CMsgDOTAUpdateClippy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAUpdateClippy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  good_team_hero_ids_.MergeFrom(from.good_team_hero_ids_);
  bad_team_hero_ids_.MergeFrom(from.bad_team_hero_ids_);
}

void CMsgDOTAUpdateClippy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAUpdateClippy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAUpdateClippy::CopyFrom(const CMsgDOTAUpdateClippy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAUpdateClippy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAUpdateClippy::IsInitialized() const {
  return true;
}

void CMsgDOTAUpdateClippy::InternalSwap(CMsgDOTAUpdateClippy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  good_team_hero_ids_.InternalSwap(&other->good_team_hero_ids_);
  bad_team_hero_ids_.InternalSwap(&other->bad_team_hero_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAUpdateClippy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRealtimeStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRealtimeStats>()._has_bits_);
  static const ::CMsgDOTARealtimeGameStatsTerse& delayed(const CMsgServerToGCRealtimeStats* msg);
  static void set_has_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTARealtimeGameStatsTerse&
CMsgServerToGCRealtimeStats::_Internal::delayed(const CMsgServerToGCRealtimeStats* msg) {
  return *msg->delayed_;
}
void CMsgServerToGCRealtimeStats::clear_delayed() {
  if (delayed_ != nullptr) delayed_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRealtimeStats)
}
CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(const CMsgServerToGCRealtimeStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_delayed()) {
    delayed_ = new ::CMsgDOTARealtimeGameStatsTerse(*from.delayed_);
  } else {
    delayed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRealtimeStats)
}

void CMsgServerToGCRealtimeStats::SharedCtor() {
delayed_ = nullptr;
}

CMsgServerToGCRealtimeStats::~CMsgServerToGCRealtimeStats() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRealtimeStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRealtimeStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete delayed_;
}

void CMsgServerToGCRealtimeStats::ArenaDtor(void* object) {
  CMsgServerToGCRealtimeStats* _this = reinterpret_cast< CMsgServerToGCRealtimeStats* >(object);
  (void)_this;
}
void CMsgServerToGCRealtimeStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRealtimeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRealtimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRealtimeStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(delayed_ != nullptr);
    delayed_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRealtimeStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_delayed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRealtimeStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRealtimeStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::delayed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRealtimeStats)
  return target;
}

size_t CMsgServerToGCRealtimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRealtimeStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delayed_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRealtimeStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRealtimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRealtimeStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRealtimeStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRealtimeStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRealtimeStats)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRealtimeStats::MergeFrom(const CMsgServerToGCRealtimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRealtimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_delayed()) {
    _internal_mutable_delayed()->::CMsgDOTARealtimeGameStatsTerse::MergeFrom(from._internal_delayed());
  }
}

void CMsgServerToGCRealtimeStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRealtimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRealtimeStats::CopyFrom(const CMsgServerToGCRealtimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRealtimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRealtimeStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCRealtimeStats::InternalSwap(CMsgServerToGCRealtimeStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delayed_, other->delayed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRealtimeStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerRealtimeStatsStartStop::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerRealtimeStatsStartStop>()._has_bits_);
  static void set_has_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerRealtimeStatsStartStop)
}
CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(const CMsgGCToServerRealtimeStatsStartStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delayed_ = from.delayed_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerRealtimeStatsStartStop)
}

void CMsgGCToServerRealtimeStatsStartStop::SharedCtor() {
delayed_ = false;
}

CMsgGCToServerRealtimeStatsStartStop::~CMsgGCToServerRealtimeStatsStartStop() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerRealtimeStatsStartStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerRealtimeStatsStartStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerRealtimeStatsStartStop::ArenaDtor(void* object) {
  CMsgGCToServerRealtimeStatsStartStop* _this = reinterpret_cast< CMsgGCToServerRealtimeStatsStartStop* >(object);
  (void)_this;
}
void CMsgGCToServerRealtimeStatsStartStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerRealtimeStatsStartStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerRealtimeStatsStartStop::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerRealtimeStatsStartStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerRealtimeStatsStartStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool delayed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_delayed(&has_bits);
          delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerRealtimeStatsStartStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerRealtimeStatsStartStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_delayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerRealtimeStatsStartStop)
  return target;
}

size_t CMsgGCToServerRealtimeStatsStartStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerRealtimeStatsStartStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool delayed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerRealtimeStatsStartStop)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerRealtimeStatsStartStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerRealtimeStatsStartStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerRealtimeStatsStartStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerRealtimeStatsStartStop)
    MergeFrom(*source);
  }
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerRealtimeStatsStartStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_delayed()) {
    _internal_set_delayed(from._internal_delayed());
  }
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerRealtimeStatsStartStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerRealtimeStatsStartStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerRealtimeStatsStartStop::IsInitialized() const {
  return true;
}

void CMsgGCToServerRealtimeStatsStartStop::InternalSwap(CMsgGCToServerRealtimeStatsStartStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delayed_, other->delayed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerRealtimeStatsStartStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerUpdateSteamBroadcasting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerUpdateSteamBroadcasting>()._has_bits_);
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerUpdateSteamBroadcasting)
}
CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting(const CMsgGCToServerUpdateSteamBroadcasting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerUpdateSteamBroadcasting)
}

void CMsgGCToServerUpdateSteamBroadcasting::SharedCtor() {
active_ = false;
}

CMsgGCToServerUpdateSteamBroadcasting::~CMsgGCToServerUpdateSteamBroadcasting() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerUpdateSteamBroadcasting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerUpdateSteamBroadcasting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerUpdateSteamBroadcasting::ArenaDtor(void* object) {
  CMsgGCToServerUpdateSteamBroadcasting* _this = reinterpret_cast< CMsgGCToServerUpdateSteamBroadcasting* >(object);
  (void)_this;
}
void CMsgGCToServerUpdateSteamBroadcasting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerUpdateSteamBroadcasting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerUpdateSteamBroadcasting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerUpdateSteamBroadcasting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerUpdateSteamBroadcasting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerUpdateSteamBroadcasting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerUpdateSteamBroadcasting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool active = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerUpdateSteamBroadcasting)
  return target;
}

size_t CMsgGCToServerUpdateSteamBroadcasting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerUpdateSteamBroadcasting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool active = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerUpdateSteamBroadcasting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerUpdateSteamBroadcasting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerUpdateSteamBroadcasting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerUpdateSteamBroadcasting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerUpdateSteamBroadcasting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerUpdateSteamBroadcasting)
    MergeFrom(*source);
  }
}

void CMsgGCToServerUpdateSteamBroadcasting::MergeFrom(const CMsgGCToServerUpdateSteamBroadcasting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerUpdateSteamBroadcasting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_active()) {
    _internal_set_active(from._internal_active());
  }
}

void CMsgGCToServerUpdateSteamBroadcasting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerUpdateSteamBroadcasting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerUpdateSteamBroadcasting::CopyFrom(const CMsgGCToServerUpdateSteamBroadcasting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerUpdateSteamBroadcasting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerUpdateSteamBroadcasting::IsInitialized() const {
  return true;
}

void CMsgGCToServerUpdateSteamBroadcasting::InternalSwap(CMsgGCToServerUpdateSteamBroadcasting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerUpdateSteamBroadcasting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGameplayStats_CPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGameplayStats_CPlayer>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void CMsgSignOutGameplayStats_CPlayer::clear_timed_player_stats() {
  timed_player_stats_.Clear();
}
CMsgSignOutGameplayStats_CPlayer::CMsgSignOutGameplayStats_CPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timed_player_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGameplayStats.CPlayer)
}
CMsgSignOutGameplayStats_CPlayer::CMsgSignOutGameplayStats_CPlayer(const CMsgSignOutGameplayStats_CPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      timed_player_stats_(from.timed_player_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGameplayStats.CPlayer)
}

void CMsgSignOutGameplayStats_CPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(hero_id_));
}

CMsgSignOutGameplayStats_CPlayer::~CMsgSignOutGameplayStats_CPlayer() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGameplayStats.CPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGameplayStats_CPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGameplayStats_CPlayer::ArenaDtor(void* object) {
  CMsgSignOutGameplayStats_CPlayer* _this = reinterpret_cast< CMsgSignOutGameplayStats_CPlayer* >(object);
  (void)_this;
}
void CMsgSignOutGameplayStats_CPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGameplayStats_CPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGameplayStats_CPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGameplayStats.CPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timed_player_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGameplayStats_CPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchPlayerTimedStats timed_player_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGameplayStats_CPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGameplayStats.CPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated .CMatchPlayerTimedStats timed_player_stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timed_player_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_timed_player_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGameplayStats.CPlayer)
  return target;
}

size_t CMsgSignOutGameplayStats_CPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGameplayStats.CPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMatchPlayerTimedStats timed_player_stats = 4;
  total_size += 1UL * this->_internal_timed_player_stats_size();
  for (const auto& msg : this->timed_player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGameplayStats_CPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGameplayStats.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGameplayStats_CPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGameplayStats_CPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGameplayStats.CPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGameplayStats.CPlayer)
    MergeFrom(*source);
  }
}

void CMsgSignOutGameplayStats_CPlayer::MergeFrom(const CMsgSignOutGameplayStats_CPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGameplayStats.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_player_stats_.MergeFrom(from.timed_player_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutGameplayStats_CPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGameplayStats.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGameplayStats_CPlayer::CopyFrom(const CMsgSignOutGameplayStats_CPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGameplayStats.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGameplayStats_CPlayer::IsInitialized() const {
  return true;
}

void CMsgSignOutGameplayStats_CPlayer::InternalSwap(CMsgSignOutGameplayStats_CPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timed_player_stats_.InternalSwap(&other->timed_player_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CPlayer, hero_id_)
      + sizeof(CMsgSignOutGameplayStats_CPlayer::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CPlayer, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGameplayStats_CPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGameplayStats_CTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGameplayStats_CTeam>()._has_bits_);
  static void set_has_is_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_radiant_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CMsgSignOutGameplayStats_CTeam::clear_timed_team_stats() {
  timed_team_stats_.Clear();
}
CMsgSignOutGameplayStats_CTeam::CMsgSignOutGameplayStats_CTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timed_team_stats_(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGameplayStats.CTeam)
}
CMsgSignOutGameplayStats_CTeam::CMsgSignOutGameplayStats_CTeam(const CMsgSignOutGameplayStats_CTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      timed_team_stats_(from.timed_team_stats_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_winning_team_, &from.is_winning_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_radiant_team_) -
    reinterpret_cast<char*>(&is_winning_team_)) + sizeof(is_radiant_team_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGameplayStats.CTeam)
}

void CMsgSignOutGameplayStats_CTeam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_winning_team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_radiant_team_) -
    reinterpret_cast<char*>(&is_winning_team_)) + sizeof(is_radiant_team_));
}

CMsgSignOutGameplayStats_CTeam::~CMsgSignOutGameplayStats_CTeam() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGameplayStats.CTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGameplayStats_CTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGameplayStats_CTeam::ArenaDtor(void* object) {
  CMsgSignOutGameplayStats_CTeam* _this = reinterpret_cast< CMsgSignOutGameplayStats_CTeam* >(object);
  (void)_this;
}
void CMsgSignOutGameplayStats_CTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGameplayStats_CTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGameplayStats_CTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGameplayStats.CTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timed_team_stats_.Clear();
  players_.Clear();
  ::memset(&is_winning_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_radiant_team_) -
      reinterpret_cast<char*>(&is_winning_team_)) + sizeof(is_radiant_team_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGameplayStats_CTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_winning_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_winning_team(&has_bits);
          is_winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_radiant_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_radiant_team(&has_bits);
          is_radiant_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchTeamTimedStats timed_team_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_team_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGameplayStats_CTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGameplayStats.CTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_winning_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_winning_team(), target);
  }

  // optional bool is_radiant_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_radiant_team(), target);
  }

  // repeated .CMatchTeamTimedStats timed_team_stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timed_team_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_timed_team_stats(i), target, stream);
  }

  // repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGameplayStats.CTeam)
  return target;
}

size_t CMsgSignOutGameplayStats_CTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGameplayStats.CTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMatchTeamTimedStats timed_team_stats = 3;
  total_size += 1UL * this->_internal_timed_team_stats_size();
  for (const auto& msg : this->timed_team_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_winning_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_radiant_team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGameplayStats_CTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGameplayStats.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGameplayStats_CTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGameplayStats_CTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGameplayStats.CTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGameplayStats.CTeam)
    MergeFrom(*source);
  }
}

void CMsgSignOutGameplayStats_CTeam::MergeFrom(const CMsgSignOutGameplayStats_CTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGameplayStats.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_team_stats_.MergeFrom(from.timed_team_stats_);
  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_winning_team_ = from.is_winning_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_radiant_team_ = from.is_radiant_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutGameplayStats_CTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGameplayStats.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGameplayStats_CTeam::CopyFrom(const CMsgSignOutGameplayStats_CTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGameplayStats.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGameplayStats_CTeam::IsInitialized() const {
  return true;
}

void CMsgSignOutGameplayStats_CTeam::InternalSwap(CMsgSignOutGameplayStats_CTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timed_team_stats_.InternalSwap(&other->timed_team_stats_);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CTeam, is_radiant_team_)
      + sizeof(CMsgSignOutGameplayStats_CTeam::is_radiant_team_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CTeam, is_winning_team_)>(
          reinterpret_cast<char*>(&is_winning_team_),
          reinterpret_cast<char*>(&other->is_winning_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGameplayStats_CTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGameplayStats::_Internal {
 public:
};

CMsgSignOutGameplayStats::CMsgSignOutGameplayStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGameplayStats)
}
CMsgSignOutGameplayStats::CMsgSignOutGameplayStats(const CMsgSignOutGameplayStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGameplayStats)
}

void CMsgSignOutGameplayStats::SharedCtor() {
}

CMsgSignOutGameplayStats::~CMsgSignOutGameplayStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGameplayStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGameplayStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGameplayStats::ArenaDtor(void* object) {
  CMsgSignOutGameplayStats* _this = reinterpret_cast< CMsgSignOutGameplayStats* >(object);
  (void)_this;
}
void CMsgSignOutGameplayStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGameplayStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGameplayStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGameplayStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGameplayStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGameplayStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGameplayStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGameplayStats)
  return target;
}

size_t CMsgSignOutGameplayStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGameplayStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGameplayStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGameplayStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGameplayStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGameplayStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGameplayStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGameplayStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutGameplayStats::MergeFrom(const CMsgSignOutGameplayStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGameplayStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
}

void CMsgSignOutGameplayStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGameplayStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGameplayStats::CopyFrom(const CMsgSignOutGameplayStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGameplayStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGameplayStats::IsInitialized() const {
  return true;
}

void CMsgSignOutGameplayStats::InternalSwap(CMsgSignOutGameplayStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGameplayStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>()._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}
CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dota_team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* _this = reinterpret_cast< CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winner_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool winner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_winner(&has_bits);
          winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dota_team());
    }

    // optional bool winner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_ = from.winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, winner_)
      + sizeof(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::winner_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, dota_team_)>(
          reinterpret_cast<char*>(&dota_team_),
          reinterpret_cast<char*>(&other->dota_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>()._has_bits_);
  static void set_has_pre_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_post_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
}
CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pre_reduction_, &from.pre_reduction_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_type_) -
    reinterpret_cast<char*>(&pre_reduction_)) + sizeof(damage_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pre_reduction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_type_) -
    reinterpret_cast<char*>(&pre_reduction_)) + sizeof(damage_type_));
}

CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::~CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* _this = reinterpret_cast< CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pre_reduction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_type_) -
        reinterpret_cast<char*>(&pre_reduction_)) + sizeof(damage_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pre_reduction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pre_reduction(&has_bits);
          pre_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 post_reduction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_post_reduction(&has_bits);
          post_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_IsValid(val))) {
            _internal_set_damage_type(static_cast<::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pre_reduction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pre_reduction(), target);
  }

  // optional uint32 post_reduction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_post_reduction(), target);
  }

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_damage_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pre_reduction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pre_reduction());
    }

    // optional uint32 post_reduction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_post_reduction());
    }

    // optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_damage_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pre_reduction_ = from.pre_reduction_;
    }
    if (cached_has_bits & 0x00000002u) {
      post_reduction_ = from.post_reduction_;
    }
    if (cached_has_bits & 0x00000004u) {
      damage_type_ = from.damage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, damage_type_)
      + sizeof(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::damage_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, pre_reduction_)>(
          reinterpret_cast<char*>(&pre_reduction_),
          reinterpret_cast<char*>(&other->pre_reduction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_CTeam_CPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CTeam_CPlayer>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_leaver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gold_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_xp_per_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_scaled_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_scaled_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_scaled_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_time_last_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_support_ability_value(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_claimed_farm_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_support_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_claimed_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_claimed_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& custom_game_data(const CMsgGameMatchSignOut_CTeam_CPlayer* msg);
  static void set_has_custom_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_player_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_hero_pick_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_hero_was_randomed(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_hero_was_dota_plus_suggestion(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_is_using_plus_guide(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_seconds_dead(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_gold_lost_to_death(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_command_count(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_mouse_click_cast_command_count(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_teleports_used(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_cavern_crawl_map_variant(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_outposts_captured(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_dewards(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
};

const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData&
CMsgGameMatchSignOut_CTeam_CPlayer::_Internal::custom_game_data(const CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
  return *msg->custom_game_data_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_permanent_buffs() {
  permanent_buffs_.Clear();
}
CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena),
  ability_upgrades_(arena),
  additional_units_inventory_(arena),
  permanent_buffs_(arena),
  talent_ability_ids_(arena),
  hero_damage_received_(arena),
  item_purchase_times_(arena),
  hero_damage_dealt_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam.CPlayer)
}
CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_),
      ability_upgrades_(from.ability_upgrades_),
      additional_units_inventory_(from.additional_units_inventory_),
      permanent_buffs_(from.permanent_buffs_),
      talent_ability_ids_(from.talent_ability_ids_),
      hero_damage_received_(from.hero_damage_received_),
      item_purchase_times_(from.item_purchase_times_),
      hero_damage_dealt_(from.hero_damage_dealt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_custom_game_data()) {
    custom_game_data_ = new ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(player_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer)
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&custom_game_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&custom_game_data_)) + sizeof(player_slot_));
}

CMsgGameMatchSignOut_CTeam_CPlayer::~CMsgGameMatchSignOut_CTeam_CPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete custom_game_data_;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_CTeam_CPlayer* _this = reinterpret_cast< CMsgGameMatchSignOut_CTeam_CPlayer* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_CTeam_CPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  permanent_buffs_.Clear();
  talent_ability_ids_.Clear();
  hero_damage_received_.Clear();
  item_purchase_times_.Clear();
  hero_damage_dealt_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(custom_game_data_ != nullptr);
    custom_game_data_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaver_status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(leaver_status_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&last_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaled_tower_damage_) -
        reinterpret_cast<char*>(&last_hits_)) + sizeof(scaled_tower_damage_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&scaled_hero_healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&claimed_misses_) -
        reinterpret_cast<char*>(&scaled_hero_healing_)) + sizeof(claimed_misses_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&misses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_) -
        reinterpret_cast<char*>(&misses_)) + sizeof(lane_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hero_was_randomed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teleports_used_) -
        reinterpret_cast<char*>(&hero_was_randomed_)) + sizeof(teleports_used_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&cavern_crawl_map_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_slot_) -
        reinterpret_cast<char*>(&cavern_crawl_map_variant_)) + sizeof(player_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam_CPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&_has_bits_);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&_has_bits_);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gold(&_has_bits_);
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_kills(&_has_bits_);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_deaths(&_has_bits_);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_assists(&_has_bits_);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leaver_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_leaver_status(&_has_bits_);
          leaver_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_hits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_last_hits(&_has_bits_);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_denies(&_has_bits_);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_per_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gold_per_min(&_has_bits_);
          gold_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_per_minute = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_xp_per_minute(&_has_bits_);
          xp_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_spent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_gold_spent(&_has_bits_);
          gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_level(&_has_bits_);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scaled_hero_damage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_scaled_hero_damage(&_has_bits_);
          scaled_hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scaled_tower_damage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_scaled_tower_damage(&_has_bits_);
          scaled_tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scaled_hero_healing = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_scaled_hero_healing(&_has_bits_);
          scaled_hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_last_seen = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_time_last_seen(&_has_bits_);
          time_last_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_ability_value = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_support_ability_value(&_has_bits_);
          support_ability_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 party_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_party_id(&_has_bits_);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_farm_gold = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_claimed_farm_gold(&_has_bits_);
          claimed_farm_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_gold = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_support_gold(&_has_bits_);
          support_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_denies = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_claimed_denies(&_has_bits_);
          claimed_denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_misses = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_claimed_misses(&_has_bits_);
          claimed_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 misses = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_misses(&_has_bits_);
          misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ability_upgrades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_additional_units_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_net_worth(&_has_bits_);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_player_flags = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_match_player_flags(&_has_bits_);
          match_player_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_damage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hero_damage(&_has_bits_);
          hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_damage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tower_damage(&_has_bits_);
          tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_healing = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hero_healing(&_has_bits_);
          hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_permanent_buffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 talent_ability_ids = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_talent_ability_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<328>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_talent_ability_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_pick_order = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hero_pick_order(&_has_bits_);
          hero_pick_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hero_was_randomed = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_hero_was_randomed(&_has_bits_);
          hero_was_randomed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_lane(&_has_bits_);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_using_plus_guide = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_using_plus_guide(&_has_bits_);
          is_using_plus_guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hero_damage_received(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool hero_was_dota_plus_suggestion = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_hero_was_dota_plus_suggestion(&_has_bits_);
          hero_was_dota_plus_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_dead = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_seconds_dead(&_has_bits_);
          seconds_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_lost_to_death = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_gold_lost_to_death(&_has_bits_);
          gold_lost_to_death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 command_count = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_command_count(&_has_bits_);
          command_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mouse_click_cast_command_count = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_mouse_click_cast_command_count(&_has_bits_);
          mouse_click_cast_command_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teleports_used = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_teleports_used(&_has_bits_);
          teleports_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cavern_crawl_map_variant = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_cavern_crawl_map_variant(&_has_bits_);
          cavern_crawl_map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounty_runes = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_bounty_runes(&_has_bits_);
          bounty_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 outposts_captured = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_outposts_captured(&_has_bits_);
          outposts_captured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dewards = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_dewards(&_has_bits_);
          dewards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards_placed = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_wards_placed(&_has_bits_);
          wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_camps_stacked(&_has_bits_);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_player_slot(&_has_bits_);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 item_purchase_times = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_item_purchase_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<504>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_purchase_times(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hero_damage_dealt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<514>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_CTeam_CPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 items = 4;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_items(i), target);
  }

  // optional uint32 gold = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gold(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_assists(), target);
  }

  // optional uint32 leaver_status = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_leaver_status(), target);
  }

  // optional uint32 last_hits = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_denies(), target);
  }

  // optional uint32 gold_per_min = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_gold_per_min(), target);
  }

  // optional uint32 xp_per_minute = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_xp_per_minute(), target);
  }

  // optional uint32 gold_spent = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_gold_spent(), target);
  }

  // optional uint32 level = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_level(), target);
  }

  // optional uint32 scaled_hero_damage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_scaled_hero_healing(), target);
  }

  // optional uint32 time_last_seen = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_time_last_seen(), target);
  }

  // optional uint32 support_ability_value = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_support_ability_value(), target);
  }

  // optional uint64 party_id = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_party_id(), target);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 28;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_support_gold(), target);
  }

  // optional uint32 claimed_denies = 29;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 30;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_claimed_misses(), target);
  }

  // optional uint32 misses = 31;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_misses(), target);
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ability_upgrades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_ability_upgrades(i), target, stream);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_units_inventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_additional_units_inventory(i), target, stream);
  }

  // optional uint32 net_worth = 34;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_net_worth(), target);
  }

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::custom_game_data(this), target, stream);
  }

  // optional uint32 match_player_flags = 36;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_match_player_flags(), target);
  }

  // optional uint32 hero_damage = 37;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_hero_damage(), target);
  }

  // optional uint32 tower_damage = 38;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_tower_damage(), target);
  }

  // optional uint32 hero_healing = 39;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_hero_healing(), target);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permanent_buffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_permanent_buffs(i), target, stream);
  }

  // repeated uint32 talent_ability_ids = 41;
  for (int i = 0, n = this->_internal_talent_ability_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_talent_ability_ids(i), target);
  }

  // optional uint32 hero_pick_order = 42;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_hero_pick_order(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool hero_was_randomed = 43;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_hero_was_randomed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 lane = 45;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_lane(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_using_plus_guide = 47;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_is_using_plus_guide(), target);
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_damage_received_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_hero_damage_received(i), target, stream);
  }

  // optional bool hero_was_dota_plus_suggestion = 50;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_hero_was_dota_plus_suggestion(), target);
  }

  // optional uint32 seconds_dead = 51;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_seconds_dead(), target);
  }

  // optional uint32 gold_lost_to_death = 52;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_gold_lost_to_death(), target);
  }

  // optional uint32 command_count = 53;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_command_count(), target);
  }

  // optional uint32 mouse_click_cast_command_count = 54;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_mouse_click_cast_command_count(), target);
  }

  // optional uint32 teleports_used = 55;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_teleports_used(), target);
  }

  // optional uint32 cavern_crawl_map_variant = 56;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_cavern_crawl_map_variant(), target);
  }

  // optional uint32 bounty_runes = 57;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(57, this->_internal_bounty_runes(), target);
  }

  // optional uint32 outposts_captured = 58;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_outposts_captured(), target);
  }

  // optional uint32 dewards = 59;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_dewards(), target);
  }

  // optional uint32 wards_placed = 60;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_wards_placed(), target);
  }

  // optional uint32 camps_stacked = 61;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_camps_stacked(), target);
  }

  // optional uint32 player_slot = 62;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_player_slot(), target);
  }

  // repeated uint32 item_purchase_times = 63;
  for (int i = 0, n = this->_internal_item_purchase_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_item_purchase_times(i), target);
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_damage_dealt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, this->_internal_hero_damage_dealt(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 items = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  total_size += 2UL * this->_internal_ability_upgrades_size();
  for (const auto& msg : this->ability_upgrades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  total_size += 2UL * this->_internal_additional_units_inventory_size();
  for (const auto& msg : this->additional_units_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
  total_size += 2UL * this->_internal_permanent_buffs_size();
  for (const auto& msg : this->permanent_buffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 talent_ability_ids = 41;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->talent_ability_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_talent_ability_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
  total_size += 2UL * this->_internal_hero_damage_received_size();
  for (const auto& msg : this->hero_damage_received_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 item_purchase_times = 63;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_purchase_times_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_purchase_times_size());
    total_size += data_size;
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
  total_size += 2UL * this->_internal_hero_damage_dealt_size();
  for (const auto& msg : this->hero_damage_dealt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 gold = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
    }

    // optional uint32 kills = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 leaver_status = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaver_status());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 last_hits = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 denies = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional uint32 gold_per_min = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_per_min());
    }

    // optional uint32 xp_per_minute = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_per_minute());
    }

    // optional uint32 gold_spent = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_spent());
    }

    // optional uint32 level = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 scaled_hero_damage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scaled_tower_damage());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 scaled_hero_healing = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scaled_hero_healing());
    }

    // optional uint32 time_last_seen = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_last_seen());
    }

    // optional uint64 party_id = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_party_id());
    }

    // optional uint32 support_ability_value = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_ability_value());
    }

    // optional uint32 claimed_farm_gold = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_farm_gold());
    }

    // optional uint32 support_gold = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_gold());
    }

    // optional uint32 claimed_denies = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_denies());
    }

    // optional uint32 claimed_misses = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_misses());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 misses = 31;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_misses());
    }

    // optional uint32 net_worth = 34;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 match_player_flags = 36;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_player_flags());
    }

    // optional uint32 hero_damage = 37;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_damage());
    }

    // optional uint32 tower_damage = 38;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_damage());
    }

    // optional uint32 hero_healing = 39;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_healing());
    }

    // optional uint32 hero_pick_order = 42;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_pick_order());
    }

    // optional uint32 lane = 45;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool hero_was_randomed = 43;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_dota_plus_suggestion = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool is_using_plus_guide = 47;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional uint32 seconds_dead = 51;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_dead());
    }

    // optional uint32 gold_lost_to_death = 52;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_lost_to_death());
    }

    // optional uint32 command_count = 53;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_command_count());
    }

    // optional uint32 mouse_click_cast_command_count = 54;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mouse_click_cast_command_count());
    }

    // optional uint32 teleports_used = 55;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teleports_used());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 cavern_crawl_map_variant = 56;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cavern_crawl_map_variant());
    }

    // optional uint32 bounty_runes = 57;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounty_runes());
    }

    // optional uint32 outposts_captured = 58;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outposts_captured());
    }

    // optional uint32 dewards = 59;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dewards());
    }

    // optional uint32 wards_placed = 60;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_placed());
    }

    // optional uint32 camps_stacked = 61;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 player_slot = 62;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_CTeam_CPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.CTeam.CPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.CTeam.CPlayer)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  permanent_buffs_.MergeFrom(from.permanent_buffs_);
  talent_ability_ids_.MergeFrom(from.talent_ability_ids_);
  hero_damage_received_.MergeFrom(from.hero_damage_received_);
  item_purchase_times_.MergeFrom(from.item_purchase_times_);
  hero_damage_dealt_.MergeFrom(from.hero_damage_dealt_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_custom_game_data()->::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(from._internal_custom_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      leaver_status_ = from.leaver_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000200u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000400u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00000800u) {
      xp_per_minute_ = from.xp_per_minute_;
    }
    if (cached_has_bits & 0x00001000u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x00002000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00004000u) {
      scaled_hero_damage_ = from.scaled_hero_damage_;
    }
    if (cached_has_bits & 0x00008000u) {
      scaled_tower_damage_ = from.scaled_tower_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      scaled_hero_healing_ = from.scaled_hero_healing_;
    }
    if (cached_has_bits & 0x00020000u) {
      time_last_seen_ = from.time_last_seen_;
    }
    if (cached_has_bits & 0x00040000u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      support_ability_value_ = from.support_ability_value_;
    }
    if (cached_has_bits & 0x00100000u) {
      claimed_farm_gold_ = from.claimed_farm_gold_;
    }
    if (cached_has_bits & 0x00200000u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x00400000u) {
      claimed_denies_ = from.claimed_denies_;
    }
    if (cached_has_bits & 0x00800000u) {
      claimed_misses_ = from.claimed_misses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      misses_ = from.misses_;
    }
    if (cached_has_bits & 0x02000000u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x04000000u) {
      match_player_flags_ = from.match_player_flags_;
    }
    if (cached_has_bits & 0x08000000u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x10000000u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x20000000u) {
      hero_healing_ = from.hero_healing_;
    }
    if (cached_has_bits & 0x40000000u) {
      hero_pick_order_ = from.hero_pick_order_;
    }
    if (cached_has_bits & 0x80000000u) {
      lane_ = from.lane_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hero_was_randomed_ = from.hero_was_randomed_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_was_dota_plus_suggestion_ = from.hero_was_dota_plus_suggestion_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_using_plus_guide_ = from.is_using_plus_guide_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_dead_ = from.seconds_dead_;
    }
    if (cached_has_bits & 0x00000010u) {
      gold_lost_to_death_ = from.gold_lost_to_death_;
    }
    if (cached_has_bits & 0x00000020u) {
      command_count_ = from.command_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      mouse_click_cast_command_count_ = from.mouse_click_cast_command_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      teleports_used_ = from.teleports_used_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      cavern_crawl_map_variant_ = from.cavern_crawl_map_variant_;
    }
    if (cached_has_bits & 0x00000200u) {
      bounty_runes_ = from.bounty_runes_;
    }
    if (cached_has_bits & 0x00000400u) {
      outposts_captured_ = from.outposts_captured_;
    }
    if (cached_has_bits & 0x00000800u) {
      dewards_ = from.dewards_;
    }
    if (cached_has_bits & 0x00001000u) {
      wards_placed_ = from.wards_placed_;
    }
    if (cached_has_bits & 0x00002000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00004000u) {
      player_slot_ = from.player_slot_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  items_.InternalSwap(&other->items_);
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  additional_units_inventory_.InternalSwap(&other->additional_units_inventory_);
  permanent_buffs_.InternalSwap(&other->permanent_buffs_);
  talent_ability_ids_.InternalSwap(&other->talent_ability_ids_);
  hero_damage_received_.InternalSwap(&other->hero_damage_received_);
  item_purchase_times_.InternalSwap(&other->item_purchase_times_);
  hero_damage_dealt_.InternalSwap(&other->hero_damage_dealt_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, player_slot_)
      + sizeof(CMsgGameMatchSignOut_CTeam_CPlayer::player_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, custom_game_data_)>(
          reinterpret_cast<char*>(&custom_game_data_),
          reinterpret_cast<char*>(&other->custom_game_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam_CPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_CTeam::_Internal {
 public:
};

CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam)
}
CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam)
}

void CMsgGameMatchSignOut_CTeam::SharedCtor() {
}

CMsgGameMatchSignOut_CTeam::~CMsgGameMatchSignOut_CTeam() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_CTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOut_CTeam::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_CTeam* _this = reinterpret_cast< CMsgGameMatchSignOut_CTeam* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_CTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_CTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_CTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_CTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.CTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.CTeam)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const CMsgGameMatchSignOut_CTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const CMsgGameMatchSignOut_CTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam::InternalSwap(CMsgGameMatchSignOut_CTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_CAdditionalSignoutMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CAdditionalSignoutMsg>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}
CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contents()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::~CMsgGameMatchSignOut_CAdditionalSignoutMsg() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_CAdditionalSignoutMsg* _this = reinterpret_cast< CMsgGameMatchSignOut_CAdditionalSignoutMsg* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    contents_.ClearNonDefaultToEmpty();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CAdditionalSignoutMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_CAdditionalSignoutMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return target;
}

size_t CMsgGameMatchSignOut_CAdditionalSignoutMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes contents = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contents());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CAdditionalSignoutMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_CAdditionalSignoutMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contents(from._internal_contents());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::InternalSwap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contents_.Swap(&other->contents_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CAdditionalSignoutMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_CSocialFeedMatchEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CSocialFeedMatchEvent>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_replay_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}
CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&replay_time_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(replay_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_time_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(replay_time_));
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent::~CMsgGameMatchSignOut_CSocialFeedMatchEvent() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_CSocialFeedMatchEvent* _this = reinterpret_cast< CMsgGameMatchSignOut_CSocialFeedMatchEvent* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replay_time_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(replay_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CSocialFeedMatchEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 replay_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_replay_time(&has_bits);
          replay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_CSocialFeedMatchEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_event_type(), target);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_time(), target);
  }

  // optional uint32 replay_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_replay_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return target;
}

size_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 event_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_type());
    }

    // optional int32 game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_time());
    }

    // optional uint32 replay_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_replay_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CSocialFeedMatchEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_CSocialFeedMatchEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      replay_time_ = from.replay_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::InternalSwap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, replay_time_)
      + sizeof(CMsgGameMatchSignOut_CSocialFeedMatchEvent::replay_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CSocialFeedMatchEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_CCustomGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CCustomGameData>()._has_bits_);
  static void set_has_publish_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CCustomGameData)
}
CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(const CMsgGameMatchSignOut_CCustomGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publish_timestamp_ = from.publish_timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CCustomGameData)
}

void CMsgGameMatchSignOut_CCustomGameData::SharedCtor() {
publish_timestamp_ = 0u;
}

CMsgGameMatchSignOut_CCustomGameData::~CMsgGameMatchSignOut_CCustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CCustomGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_CCustomGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOut_CCustomGameData::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_CCustomGameData* _this = reinterpret_cast< CMsgGameMatchSignOut_CCustomGameData* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_CCustomGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_CCustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CCustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CCustomGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 publish_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_publish_timestamp(&has_bits);
          publish_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_CCustomGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CCustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publish_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_publish_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CCustomGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 publish_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_publish_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CCustomGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_CCustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.CCustomGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.CCustomGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publish_timestamp()) {
    _internal_set_publish_timestamp(from._internal_publish_timestamp());
  }
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CCustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publish_timestamp_, other->publish_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CCustomGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_EventGameLeaderboardEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_EventGameLeaderboardEntry>()._has_bits_);
  static void set_has_name_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extra_data_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extra_data_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_extra_data_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_extra_data_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_extra_data_5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}
CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_suffix()) {
    name_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_suffix(), 
      GetArena());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_data_5_) -
    reinterpret_cast<char*>(&score_)) + sizeof(extra_data_5_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedCtor() {
name_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_data_5_) -
    reinterpret_cast<char*>(&score_)) + sizeof(extra_data_5_));
}

CMsgGameMatchSignOut_EventGameLeaderboardEntry::~CMsgGameMatchSignOut_EventGameLeaderboardEntry() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_EventGameLeaderboardEntry* _this = reinterpret_cast< CMsgGameMatchSignOut_EventGameLeaderboardEntry* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_suffix_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extra_data_5_) -
        reinterpret_cast<char*>(&score_)) + sizeof(extra_data_5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_EventGameLeaderboardEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name_suffix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extra_data_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_extra_data_1(&has_bits);
          extra_data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extra_data_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_extra_data_2(&has_bits);
          extra_data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extra_data_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_extra_data_3(&has_bits);
          extra_data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extra_data_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_extra_data_4(&has_bits);
          extra_data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extra_data_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_extra_data_5(&has_bits);
          extra_data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_EventGameLeaderboardEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name_suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_suffix().data(), static_cast<int>(this->_internal_name_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_suffix(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // optional uint32 extra_data_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_extra_data_1(), target);
  }

  // optional uint32 extra_data_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_extra_data_2(), target);
  }

  // optional uint32 extra_data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_extra_data_3(), target);
  }

  // optional uint32 extra_data_4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_extra_data_4(), target);
  }

  // optional uint32 extra_data_5 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_extra_data_5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return target;
}

size_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name_suffix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_suffix());
    }

    // optional int32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_score());
    }

    // optional uint32 extra_data_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extra_data_1());
    }

    // optional uint32 extra_data_2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extra_data_2());
    }

    // optional uint32 extra_data_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extra_data_3());
    }

    // optional uint32 extra_data_4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extra_data_4());
    }

    // optional uint32 extra_data_5 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extra_data_5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_EventGameLeaderboardEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_EventGameLeaderboardEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name_suffix(from._internal_name_suffix());
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      extra_data_1_ = from.extra_data_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      extra_data_2_ = from.extra_data_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      extra_data_3_ = from.extra_data_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      extra_data_4_ = from.extra_data_4_;
    }
    if (cached_has_bits & 0x00000040u) {
      extra_data_5_ = from.extra_data_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::CopyFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::InternalSwap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_suffix_.Swap(&other->name_suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_5_)
      + sizeof(CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_5_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_EventGameLeaderboardEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut_WardPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_WardPlacement>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_placed_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_building_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creep_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_roshan_alive(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.WardPlacement)
}
CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement(const CMsgGameMatchSignOut_WardPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_y_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(position_y_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.WardPlacement)
}

void CMsgGameMatchSignOut_WardPlacement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_y_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(position_y_));
}

CMsgGameMatchSignOut_WardPlacement::~CMsgGameMatchSignOut_WardPlacement() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.WardPlacement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut_WardPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOut_WardPlacement::ArenaDtor(void* object) {
  CMsgGameMatchSignOut_WardPlacement* _this = reinterpret_cast< CMsgGameMatchSignOut_WardPlacement* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut_WardPlacement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut_WardPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut_WardPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.WardPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_y_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(position_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_WardPlacement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 placed_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_placed_time(&has_bits);
          placed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 building_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_building_state(&has_bits);
          building_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creep_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_creep_state(&has_bits);
          creep_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool roshan_alive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_roshan_alive(&has_bits);
          roshan_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_position_x(&has_bits);
          position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_position_y(&has_bits);
          position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut_WardPlacement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.WardPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional uint32 placed_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_placed_time(), target);
  }

  // optional uint32 building_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_building_state(), target);
  }

  // optional uint32 creep_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_creep_state(), target);
  }

  // optional bool roshan_alive = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_roshan_alive(), target);
  }

  // optional uint32 position_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_position_x(), target);
  }

  // optional uint32 position_y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_position_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.WardPlacement)
  return target;
}

size_t CMsgGameMatchSignOut_WardPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.WardPlacement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 placed_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_placed_time());
    }

    // optional uint32 building_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_building_state());
    }

    // optional uint32 creep_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep_state());
    }

    // optional bool roshan_alive = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 position_x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position_x());
    }

    // optional uint32 position_y = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_WardPlacement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut.WardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_WardPlacement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut_WardPlacement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut.WardPlacement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut.WardPlacement)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_WardPlacement::MergeFrom(const CMsgGameMatchSignOut_WardPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.WardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      placed_time_ = from.placed_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      creep_state_ = from.creep_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      roshan_alive_ = from.roshan_alive_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      position_y_ = from.position_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_WardPlacement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut.WardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_WardPlacement::CopyFrom(const CMsgGameMatchSignOut_WardPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.WardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_WardPlacement::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_WardPlacement::InternalSwap(CMsgGameMatchSignOut_WardPlacement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_WardPlacement, position_y_)
      + sizeof(CMsgGameMatchSignOut_WardPlacement::position_y_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_WardPlacement, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_WardPlacement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOut::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_good_guys_win(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_blood_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_event_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_automatic_surrender(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgGameMatchSignOut* msg);
  static void set_has_poor_network_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_average_networth_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgGameMatchSignOut_CCustomGameData& custom_game_data(const CMsgGameMatchSignOut* msg);
  static void set_has_custom_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pre_game_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::CMsgSignOutGameplayStats& gameplay_stats(const CMsgGameMatchSignOut* msg);
  static void set_has_gameplay_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_training_data_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::CMsgPoorNetworkConditions&
CMsgGameMatchSignOut::_Internal::poor_network_conditions(const CMsgGameMatchSignOut* msg) {
  return *msg->poor_network_conditions_;
}
const ::CMsgGameMatchSignOut_CCustomGameData&
CMsgGameMatchSignOut::_Internal::custom_game_data(const CMsgGameMatchSignOut* msg) {
  return *msg->custom_game_data_;
}
const ::CMsgSignOutGameplayStats&
CMsgGameMatchSignOut::_Internal::gameplay_stats(const CMsgGameMatchSignOut* msg) {
  return *msg->gameplay_stats_;
}
void CMsgGameMatchSignOut::clear_picks_bans() {
  picks_bans_.Clear();
}
void CMsgGameMatchSignOut::clear_fantasy_stats() {
  fantasy_stats_.Clear();
}
void CMsgGameMatchSignOut::clear_player_strange_count_adjustments() {
  player_strange_count_adjustments_.Clear();
}
void CMsgGameMatchSignOut::clear_extra_messages() {
  extra_messages_.Clear();
}
CMsgGameMatchSignOut::CMsgGameMatchSignOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  num_players_(arena),
  teams_(arena),
  tower_status_(arena),
  barracks_status_(arena),
  picks_bans_(arena),
  player_strange_count_adjustments_(arena),
  additional_msgs_(arena),
  social_feed_events_(arena),
  team_scores_(arena),
  fantasy_stats_(arena),
  event_game_leaderboard_entries_(arena),
  ward_placements_(arena),
  extra_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut)
}
CMsgGameMatchSignOut::CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      num_players_(from.num_players_),
      teams_(from.teams_),
      tower_status_(from.tower_status_),
      barracks_status_(from.barracks_status_),
      picks_bans_(from.picks_bans_),
      player_strange_count_adjustments_(from.player_strange_count_adjustments_),
      additional_msgs_(from.additional_msgs_),
      social_feed_events_(from.social_feed_events_),
      team_scores_(from.team_scores_),
      fantasy_stats_(from.fantasy_stats_),
      event_game_leaderboard_entries_(from.event_game_leaderboard_entries_),
      ward_placements_(from.ward_placements_),
      extra_messages_(from.extra_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_addr()) {
    server_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_addr(), 
      GetArena());
  }
  if (from._internal_has_poor_network_conditions()) {
    poor_network_conditions_ = new ::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = nullptr;
  }
  if (from._internal_has_custom_game_data()) {
    custom_game_data_ = new ::CMsgGameMatchSignOut_CCustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  if (from._internal_has_gameplay_stats()) {
    gameplay_stats_ = new ::CMsgSignOutGameplayStats(*from.gameplay_stats_);
  } else {
    gameplay_stats_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_game_duration_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(pre_game_duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut)
}

void CMsgGameMatchSignOut::SharedCtor() {
server_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&poor_network_conditions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pre_game_duration_) -
    reinterpret_cast<char*>(&poor_network_conditions_)) + sizeof(pre_game_duration_));
}

CMsgGameMatchSignOut::~CMsgGameMatchSignOut() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete poor_network_conditions_;
  if (this != internal_default_instance()) delete custom_game_data_;
  if (this != internal_default_instance()) delete gameplay_stats_;
}

void CMsgGameMatchSignOut::ArenaDtor(void* object) {
  CMsgGameMatchSignOut* _this = reinterpret_cast< CMsgGameMatchSignOut* >(object);
  (void)_this;
}
void CMsgGameMatchSignOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOut::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_players_.Clear();
  teams_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  player_strange_count_adjustments_.Clear();
  additional_msgs_.Clear();
  social_feed_events_.Clear();
  team_scores_.Clear();
  fantasy_stats_.Clear();
  event_game_leaderboard_entries_.Clear();
  ward_placements_.Clear();
  extra_messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      server_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poor_network_conditions_ != nullptr);
      poor_network_conditions_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(custom_game_data_ != nullptr);
      custom_game_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gameplay_stats_ != nullptr);
      gameplay_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(cluster_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&first_blood_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_flags_) -
        reinterpret_cast<char*>(&first_blood_time_)) + sizeof(match_flags_));
  }
  pre_game_duration_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool good_guys_win = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_good_guys_win(&has_bits);
          good_guys_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_date(&has_bits);
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num_players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_num_players(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_num_players(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 tower_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tower_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tower_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 barracks_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_barracks_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_barracks_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cluster = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cluster(&has_bits);
          cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_server_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameMatchSignOut.server_addr");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_blood_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_first_blood_time(&has_bits);
          first_blood_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_score = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_event_score(&has_bits);
          event_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchHeroSelectEvent picks_bans = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_player_strange_count_adjustments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool automatic_surrender = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_automatic_surrender(&has_bits);
          automatic_surrender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_additional_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional sint32 average_networth_delta = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_average_networth_delta(&has_bits);
          average_networth_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poor_network_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_social_feed_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_flags = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_match_flags(&has_bits);
          match_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 team_scores = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_team_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<312>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_team_scores(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pre_game_duration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pre_game_duration(&has_bits);
          pre_game_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fantasy_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_game_leaderboard_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ward_placements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgSignOutGameplayStats gameplay_stats = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplay_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CExtraMsgBlock extra_messages = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extra_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool training_data_recorded = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_training_data_recorded(&has_bits);
          training_data_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional bool good_guys_win = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_good_guys_win(), target);
  }

  // optional fixed32 date = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_date(), target);
  }

  // repeated uint32 num_players = 5;
  for (int i = 0, n = this->_internal_num_players_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_players(i), target);
  }

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_teams(i), target, stream);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0, n = this->_internal_tower_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tower_status(i), target);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0, n = this->_internal_barracks_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_barracks_status(i), target);
  }

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cluster(), target);
  }

  // optional string server_addr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_addr().data(), static_cast<int>(this->_internal_server_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOut.server_addr");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_server_addr(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_first_blood_time(), target);
  }

  // optional uint32 event_score = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_event_score(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picks_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_picks_bans(i), target, stream);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_strange_count_adjustments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_player_strange_count_adjustments(i), target, stream);
  }

  // optional bool automatic_surrender = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_automatic_surrender(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_server_version(), target);
  }

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_additional_msgs(i), target, stream);
  }

  // optional sint32 average_networth_delta = 22;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(22, this->_internal_average_networth_delta(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::poor_network_conditions(this), target, stream);
  }

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_social_feed_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_social_feed_events(i), target, stream);
  }

  // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::custom_game_data(this), target, stream);
  }

  // optional uint32 match_flags = 38;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_match_flags(), target);
  }

  // repeated uint32 team_scores = 39;
  for (int i = 0, n = this->_internal_team_scores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_team_scores(i), target);
  }

  // optional uint32 pre_game_duration = 40;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_pre_game_duration(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fantasy_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, this->_internal_fantasy_stats(i), target, stream);
  }

  // repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_game_leaderboard_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, this->_internal_event_game_leaderboard_entries(i), target, stream);
  }

  // repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ward_placements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_ward_placements(i), target, stream);
  }

  // optional .CMsgSignOutGameplayStats gameplay_stats = 44;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::gameplay_stats(this), target, stream);
  }

  // repeated .CExtraMsgBlock extra_messages = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, this->_internal_extra_messages(i), target, stream);
  }

  // optional bool training_data_recorded = 55;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->_internal_training_data_recorded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut)
  return target;
}

size_t CMsgGameMatchSignOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 num_players = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_players_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_players_size());
    total_size += data_size;
  }

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tower_status = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tower_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tower_status_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->barracks_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_barracks_status_size());
    total_size += data_size;
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  total_size += 1UL * this->_internal_picks_bans_size();
  for (const auto& msg : this->picks_bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  total_size += 2UL * this->_internal_player_strange_count_adjustments_size();
  for (const auto& msg : this->player_strange_count_adjustments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  total_size += 2UL * this->_internal_additional_msgs_size();
  for (const auto& msg : this->additional_msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  total_size += 2UL * this->_internal_social_feed_events_size();
  for (const auto& msg : this->social_feed_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 team_scores = 39;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->team_scores_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_scores_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  total_size += 2UL * this->_internal_fantasy_stats_size();
  for (const auto& msg : this->fantasy_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  total_size += 2UL * this->_internal_event_game_leaderboard_entries_size();
  for (const auto& msg : this->event_game_leaderboard_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  total_size += 2UL * this->_internal_ward_placements_size();
  for (const auto& msg : this->ward_placements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CExtraMsgBlock extra_messages = 54;
  total_size += 2UL * this->_internal_extra_messages_size();
  for (const auto& msg : this->extra_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_addr = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_addr());
    }

    // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poor_network_conditions_);
    }

    // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional .CMsgSignOutGameplayStats gameplay_stats = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gameplay_stats_);
    }

    // optional uint64 match_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional fixed32 date = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 cluster = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cluster());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 first_blood_time = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_blood_time());
    }

    // optional uint32 event_score = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_score());
    }

    // optional uint32 server_version = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional sint32 average_networth_delta = 22;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_average_networth_delta());
    }

    // optional bool good_guys_win = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool automatic_surrender = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool training_data_recorded = 55;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional uint32 match_flags = 38;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_flags());
    }

  }
  // optional uint32 pre_game_duration = 40;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pre_game_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOut)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOut)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut::MergeFrom(const CMsgGameMatchSignOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_players_.MergeFrom(from.num_players_);
  teams_.MergeFrom(from.teams_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  player_strange_count_adjustments_.MergeFrom(from.player_strange_count_adjustments_);
  additional_msgs_.MergeFrom(from.additional_msgs_);
  social_feed_events_.MergeFrom(from.social_feed_events_);
  team_scores_.MergeFrom(from.team_scores_);
  fantasy_stats_.MergeFrom(from.fantasy_stats_);
  event_game_leaderboard_entries_.MergeFrom(from.event_game_leaderboard_entries_);
  ward_placements_.MergeFrom(from.ward_placements_);
  extra_messages_.MergeFrom(from.extra_messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_addr(from._internal_server_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(from._internal_poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_custom_game_data()->::CMsgGameMatchSignOut_CCustomGameData::MergeFrom(from._internal_custom_game_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_gameplay_stats()->::CMsgSignOutGameplayStats::MergeFrom(from._internal_gameplay_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000080u) {
      cluster_ = from.cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      first_blood_time_ = from.first_blood_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      event_score_ = from.event_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      average_networth_delta_ = from.average_networth_delta_;
    }
    if (cached_has_bits & 0x00001000u) {
      good_guys_win_ = from.good_guys_win_;
    }
    if (cached_has_bits & 0x00002000u) {
      automatic_surrender_ = from.automatic_surrender_;
    }
    if (cached_has_bits & 0x00004000u) {
      training_data_recorded_ = from.training_data_recorded_;
    }
    if (cached_has_bits & 0x00008000u) {
      match_flags_ = from.match_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_pre_game_duration(from._internal_pre_game_duration());
  }
}

void CMsgGameMatchSignOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut::CopyFrom(const CMsgGameMatchSignOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut::InternalSwap(CMsgGameMatchSignOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  num_players_.InternalSwap(&other->num_players_);
  teams_.InternalSwap(&other->teams_);
  tower_status_.InternalSwap(&other->tower_status_);
  barracks_status_.InternalSwap(&other->barracks_status_);
  picks_bans_.InternalSwap(&other->picks_bans_);
  player_strange_count_adjustments_.InternalSwap(&other->player_strange_count_adjustments_);
  additional_msgs_.InternalSwap(&other->additional_msgs_);
  social_feed_events_.InternalSwap(&other->social_feed_events_);
  team_scores_.InternalSwap(&other->team_scores_);
  fantasy_stats_.InternalSwap(&other->fantasy_stats_);
  event_game_leaderboard_entries_.InternalSwap(&other->event_game_leaderboard_entries_);
  ward_placements_.InternalSwap(&other->ward_placements_);
  extra_messages_.InternalSwap(&other->extra_messages_);
  server_addr_.Swap(&other->server_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut, pre_game_duration_)
      + sizeof(CMsgGameMatchSignOut::pre_game_duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut, poor_network_conditions_)>(
          reinterpret_cast<char*>(&poor_network_conditions_),
          reinterpret_cast<char*>(&other->poor_network_conditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutDraftInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutDraftInfo>()._has_bits_);
  static void set_has_radiant_captain_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dire_captain_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CMsgSignOutDraftInfo::clear_picks_bans() {
  picks_bans_.Clear();
}
CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  picks_bans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutDraftInfo)
}
CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(const CMsgSignOutDraftInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      picks_bans_(from.picks_bans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radiant_captain_account_id_, &from.radiant_captain_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dire_captain_account_id_) -
    reinterpret_cast<char*>(&radiant_captain_account_id_)) + sizeof(dire_captain_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutDraftInfo)
}

void CMsgSignOutDraftInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radiant_captain_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dire_captain_account_id_) -
    reinterpret_cast<char*>(&radiant_captain_account_id_)) + sizeof(dire_captain_account_id_));
}

CMsgSignOutDraftInfo::~CMsgSignOutDraftInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutDraftInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutDraftInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutDraftInfo::ArenaDtor(void* object) {
  CMsgSignOutDraftInfo* _this = reinterpret_cast< CMsgSignOutDraftInfo* >(object);
  (void)_this;
}
void CMsgSignOutDraftInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutDraftInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutDraftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutDraftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picks_bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&radiant_captain_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_captain_account_id_) -
        reinterpret_cast<char*>(&radiant_captain_account_id_)) + sizeof(dire_captain_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutDraftInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 radiant_captain_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_radiant_captain_account_id(&has_bits);
          radiant_captain_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_captain_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dire_captain_account_id(&has_bits);
          dire_captain_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchHeroSelectEvent picks_bans = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutDraftInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutDraftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 radiant_captain_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_radiant_captain_account_id(), target);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dire_captain_account_id(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picks_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_picks_bans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutDraftInfo)
  return target;
}

size_t CMsgSignOutDraftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutDraftInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  total_size += 1UL * this->_internal_picks_bans_size();
  for (const auto& msg : this->picks_bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 radiant_captain_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_captain_account_id());
    }

    // optional uint32 dire_captain_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_captain_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutDraftInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutDraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutDraftInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutDraftInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutDraftInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutDraftInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutDraftInfo::MergeFrom(const CMsgSignOutDraftInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutDraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picks_bans_.MergeFrom(from.picks_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radiant_captain_account_id_ = from.radiant_captain_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      dire_captain_account_id_ = from.dire_captain_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutDraftInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutDraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutDraftInfo::CopyFrom(const CMsgSignOutDraftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutDraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutDraftInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutDraftInfo::InternalSwap(CMsgSignOutDraftInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picks_bans_.InternalSwap(&other->picks_bans_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutDraftInfo, dire_captain_account_id_)
      + sizeof(CMsgSignOutDraftInfo::dire_captain_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutDraftInfo, radiant_captain_account_id_)>(
          reinterpret_cast<char*>(&radiant_captain_account_id_),
          reinterpret_cast<char*>(&other->radiant_captain_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutDraftInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutBotInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutBotInfo>()._has_bits_);
  static void set_has_allow_cheats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bot_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_created_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bot_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSignOutBotInfo::CMsgSignOutBotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutBotInfo)
}
CMsgSignOutBotInfo::CMsgSignOutBotInfo(const CMsgSignOutBotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bot_difficulty_radiant_, &from.bot_difficulty_radiant_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&bot_difficulty_radiant_)) + sizeof(bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBotInfo)
}

void CMsgSignOutBotInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bot_difficulty_radiant_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&bot_difficulty_radiant_)) + sizeof(bot_difficulty_dire_));
}

CMsgSignOutBotInfo::~CMsgSignOutBotInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBotInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutBotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutBotInfo::ArenaDtor(void* object) {
  CMsgSignOutBotInfo* _this = reinterpret_cast< CMsgSignOutBotInfo* >(object);
  (void)_this;
}
void CMsgSignOutBotInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutBotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutBotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutBotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&bot_difficulty_radiant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_difficulty_dire_) -
        reinterpret_cast<char*>(&bot_difficulty_radiant_)) + sizeof(bot_difficulty_dire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutBotInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool allow_cheats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allow_cheats(&has_bits);
          allow_cheats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool created_lobby = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_created_lobby(&has_bits);
          created_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutBotInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_cheats(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bot_difficulty_radiant(), target);
  }

  // optional bool created_lobby = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_created_lobby(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_bot_difficulty_dire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBotInfo)
  return target;
}

size_t CMsgSignOutBotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutBotInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool created_lobby = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty_dire());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutBotInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutBotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutBotInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutBotInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutBotInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutBotInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutBotInfo::MergeFrom(const CMsgSignOutBotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutBotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00000004u) {
      created_lobby_ = from.created_lobby_;
    }
    if (cached_has_bits & 0x00000008u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutBotInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutBotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutBotInfo::CopyFrom(const CMsgSignOutBotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutBotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBotInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutBotInfo::InternalSwap(CMsgSignOutBotInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutBotInfo, bot_difficulty_dire_)
      + sizeof(CMsgSignOutBotInfo::bot_difficulty_dire_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutBotInfo, bot_difficulty_radiant_)>(
          reinterpret_cast<char*>(&bot_difficulty_radiant_),
          reinterpret_cast<char*>(&other->bot_difficulty_radiant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutBotInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutTextMuteInfo_TextMuteMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutTextMuteInfo_TextMuteMessage>()._has_bits_);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caused_text_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutTextMuteInfo_TextMuteMessage::CMsgSignOutTextMuteInfo_TextMuteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutTextMuteInfo.TextMuteMessage)
}
CMsgSignOutTextMuteInfo_TextMuteMessage::CMsgSignOutTextMuteInfo_TextMuteMessage(const CMsgSignOutTextMuteInfo_TextMuteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chat_message()) {
    chat_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_message(), 
      GetArena());
  }
  ::memcpy(&region_, &from.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&caused_text_mute_) -
    reinterpret_cast<char*>(&region_)) + sizeof(caused_text_mute_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutTextMuteInfo.TextMuteMessage)
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::SharedCtor() {
chat_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&caused_text_mute_) -
    reinterpret_cast<char*>(&region_)) + sizeof(caused_text_mute_));
}

CMsgSignOutTextMuteInfo_TextMuteMessage::~CMsgSignOutTextMuteInfo_TextMuteMessage() {
  // @@protoc_insertion_point(destructor:CMsgSignOutTextMuteInfo.TextMuteMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chat_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::ArenaDtor(void* object) {
  CMsgSignOutTextMuteInfo_TextMuteMessage* _this = reinterpret_cast< CMsgSignOutTextMuteInfo_TextMuteMessage* >(object);
  (void)_this;
}
void CMsgSignOutTextMuteInfo_TextMuteMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutTextMuteInfo_TextMuteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chat_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&caused_text_mute_) -
        reinterpret_cast<char*>(&region_)) + sizeof(caused_text_mute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutTextMuteInfo_TextMuteMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool caused_text_mute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_caused_text_mute(&has_bits);
          caused_text_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string chat_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chat_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutTextMuteInfo_TextMuteMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_region(), target);
  }

  // optional bool caused_text_mute = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_caused_text_mute(), target);
  }

  // optional string chat_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_message().data(), static_cast<int>(this->_internal_chat_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chat_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutTextMuteInfo.TextMuteMessage)
  return target;
}

size_t CMsgSignOutTextMuteInfo_TextMuteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string chat_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_message());
    }

    // optional uint32 region = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

    // optional bool caused_text_mute = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutTextMuteInfo_TextMuteMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutTextMuteInfo_TextMuteMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutTextMuteInfo.TextMuteMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutTextMuteInfo.TextMuteMessage)
    MergeFrom(*source);
  }
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::MergeFrom(const CMsgSignOutTextMuteInfo_TextMuteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chat_message(from._internal_chat_message());
    }
    if (cached_has_bits & 0x00000002u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      caused_text_mute_ = from.caused_text_mute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::CopyFrom(const CMsgSignOutTextMuteInfo_TextMuteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutTextMuteInfo_TextMuteMessage::IsInitialized() const {
  return true;
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::InternalSwap(CMsgSignOutTextMuteInfo_TextMuteMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chat_message_.Swap(&other->chat_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutTextMuteInfo_TextMuteMessage, caused_text_mute_)
      + sizeof(CMsgSignOutTextMuteInfo_TextMuteMessage::caused_text_mute_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutTextMuteInfo_TextMuteMessage, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutTextMuteInfo_TextMuteMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutTextMuteInfo::_Internal {
 public:
};

CMsgSignOutTextMuteInfo::CMsgSignOutTextMuteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  text_mute_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutTextMuteInfo)
}
CMsgSignOutTextMuteInfo::CMsgSignOutTextMuteInfo(const CMsgSignOutTextMuteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      text_mute_messages_(from.text_mute_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutTextMuteInfo)
}

void CMsgSignOutTextMuteInfo::SharedCtor() {
}

CMsgSignOutTextMuteInfo::~CMsgSignOutTextMuteInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutTextMuteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutTextMuteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutTextMuteInfo::ArenaDtor(void* object) {
  CMsgSignOutTextMuteInfo* _this = reinterpret_cast< CMsgSignOutTextMuteInfo* >(object);
  (void)_this;
}
void CMsgSignOutTextMuteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutTextMuteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutTextMuteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutTextMuteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_mute_messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutTextMuteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_mute_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutTextMuteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutTextMuteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_mute_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_text_mute_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutTextMuteInfo)
  return target;
}

size_t CMsgSignOutTextMuteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutTextMuteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
  total_size += 1UL * this->_internal_text_mute_messages_size();
  for (const auto& msg : this->text_mute_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutTextMuteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutTextMuteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutTextMuteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutTextMuteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutTextMuteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutTextMuteInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutTextMuteInfo::MergeFrom(const CMsgSignOutTextMuteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutTextMuteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_mute_messages_.MergeFrom(from.text_mute_messages_);
}

void CMsgSignOutTextMuteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutTextMuteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutTextMuteInfo::CopyFrom(const CMsgSignOutTextMuteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutTextMuteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutTextMuteInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutTextMuteInfo::InternalSwap(CMsgSignOutTextMuteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_mute_messages_.InternalSwap(&other->text_mute_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutTextMuteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutPlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutPlayerStats>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_first_blood_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_first_blood_given(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_couriers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_aegises_snatched(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cheeses_eaten(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_creeps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_farm_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_support_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_push_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_xppm(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_heals(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_rapiers_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_observer_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_wards_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutPlayerStats)
}
CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(const CMsgSignOutPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_type_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutPlayerStats)
}

void CMsgSignOutPlayerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_type_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_type_));
}

CMsgSignOutPlayerStats::~CMsgSignOutPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutPlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutPlayerStats::ArenaDtor(void* object) {
  CMsgSignOutPlayerStats* _this = reinterpret_cast< CMsgSignOutPlayerStats* >(object);
  (void)_this;
}
void CMsgSignOutPlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_blood_given_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(first_blood_given_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&couriers_killed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&push_score_) -
        reinterpret_cast<char*>(&couriers_killed_)) + sizeof(push_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(net_worth_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_type_) -
        reinterpret_cast<char*>(&damage_)) + sizeof(lobby_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutPlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rampages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rampages(&has_bits);
          rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_triple_kills(&has_bits);
          triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_blood_claimed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_first_blood_claimed(&has_bits);
          first_blood_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_blood_given = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_first_blood_given(&has_bits);
          first_blood_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 couriers_killed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_couriers_killed(&has_bits);
          couriers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 aegises_snatched = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_aegises_snatched(&has_bits);
          aegises_snatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheeses_eaten = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cheeses_eaten(&has_bits);
          cheeses_eaten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creeps_stacked = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_creeps_stacked(&has_bits);
          creeps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fight_score = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_fight_score(&has_bits);
          fight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float farm_score = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_farm_score(&has_bits);
          farm_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float support_score = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_support_score(&has_bits);
          support_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float push_score = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_push_score(&has_bits);
          push_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_hits = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_last_hits(&has_bits);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_denies(&has_bits);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gpm = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_gpm(&has_bits);
          gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xppm = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_xppm(&has_bits);
          xppm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float net_worth = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float heals = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_heals(&has_bits);
          heals_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 rapiers_purchased = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_rapiers_purchased(&has_bits);
          rapiers_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 observer_wards_placed = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_observer_wards_placed(&has_bits);
          observer_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards_destroyed = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_wards_destroyed(&has_bits);
          wards_destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutPlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional uint32 rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rank(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional uint32 rampages = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rampages(), target);
  }

  // optional uint32 triple_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_triple_kills(), target);
  }

  // optional uint32 first_blood_claimed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_first_blood_claimed(), target);
  }

  // optional uint32 first_blood_given = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_first_blood_given(), target);
  }

  // optional uint32 couriers_killed = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_couriers_killed(), target);
  }

  // optional uint32 aegises_snatched = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_aegises_snatched(), target);
  }

  // optional uint32 cheeses_eaten = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cheeses_eaten(), target);
  }

  // optional uint32 creeps_stacked = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_creeps_stacked(), target);
  }

  // optional float fight_score = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_fight_score(), target);
  }

  // optional float farm_score = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_farm_score(), target);
  }

  // optional float support_score = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_support_score(), target);
  }

  // optional float push_score = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_push_score(), target);
  }

  // optional uint32 kills = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_assists(), target);
  }

  // optional uint32 last_hits = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_denies(), target);
  }

  // optional float gpm = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_gpm(), target);
  }

  // optional float xppm = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_xppm(), target);
  }

  // optional float net_worth = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_net_worth(), target);
  }

  // optional float damage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_damage(), target);
  }

  // optional float heals = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_heals(), target);
  }

  // optional uint32 rapiers_purchased = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_rapiers_purchased(), target);
  }

  // optional uint32 observer_wards_placed = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_observer_wards_placed(), target);
  }

  // optional uint32 wards_destroyed = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_wards_destroyed(), target);
  }

  // optional uint32 lobby_type = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_lobby_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutPlayerStats)
  return target;
}

size_t CMsgSignOutPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutPlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional int32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_account_id());
    }

    // optional uint32 rank = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 rampages = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rampages());
    }

    // optional uint32 triple_kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_triple_kills());
    }

    // optional uint32 first_blood_claimed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_blood_claimed());
    }

    // optional uint32 first_blood_given = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_blood_given());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 couriers_killed = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_couriers_killed());
    }

    // optional uint32 aegises_snatched = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aegises_snatched());
    }

    // optional uint32 cheeses_eaten = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheeses_eaten());
    }

    // optional uint32 creeps_stacked = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creeps_stacked());
    }

    // optional float fight_score = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float farm_score = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float support_score = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float push_score = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 kills = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 last_hits = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 denies = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional float gpm = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float xppm = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float net_worth = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional float damage = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float heals = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 rapiers_purchased = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rapiers_purchased());
    }

    // optional uint32 observer_wards_placed = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_observer_wards_placed());
    }

    // optional uint32 wards_destroyed = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_destroyed());
    }

    // optional uint32 lobby_type = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutPlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutPlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutPlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutPlayerStats::MergeFrom(const CMsgSignOutPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00000020u) {
      triple_kills_ = from.triple_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      first_blood_claimed_ = from.first_blood_claimed_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_blood_given_ = from.first_blood_given_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      couriers_killed_ = from.couriers_killed_;
    }
    if (cached_has_bits & 0x00000200u) {
      aegises_snatched_ = from.aegises_snatched_;
    }
    if (cached_has_bits & 0x00000400u) {
      cheeses_eaten_ = from.cheeses_eaten_;
    }
    if (cached_has_bits & 0x00000800u) {
      creeps_stacked_ = from.creeps_stacked_;
    }
    if (cached_has_bits & 0x00001000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00002000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      support_score_ = from.support_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      push_score_ = from.push_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00020000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00040000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00080000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00100000u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00200000u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00400000u) {
      xppm_ = from.xppm_;
    }
    if (cached_has_bits & 0x00800000u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      heals_ = from.heals_;
    }
    if (cached_has_bits & 0x04000000u) {
      rapiers_purchased_ = from.rapiers_purchased_;
    }
    if (cached_has_bits & 0x08000000u) {
      observer_wards_placed_ = from.observer_wards_placed_;
    }
    if (cached_has_bits & 0x10000000u) {
      wards_destroyed_ = from.wards_destroyed_;
    }
    if (cached_has_bits & 0x20000000u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutPlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutPlayerStats::CopyFrom(const CMsgSignOutPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutPlayerStats::IsInitialized() const {
  return true;
}

void CMsgSignOutPlayerStats::InternalSwap(CMsgSignOutPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutPlayerStats, lobby_type_)
      + sizeof(CMsgSignOutPlayerStats::lobby_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutPlayerStats, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutPlayerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
}
CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(count_));
}

CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::~CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::ArenaDtor(void* object) {
  CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* _this = reinterpret_cast< CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* >(object);
  (void)_this;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&type_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  return target;
}

size_t CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::MergeFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, count_)
      + sizeof(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::count_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutCommunicationSummary_PlayerCommunication::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunicationSummary_PlayerCommunication>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_pings_per_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teammate_pings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_teammate_pings_per_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_chat_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_all_chat_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chat_wheel_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pauses(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unpauses(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lines_drawn(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_voice_chat_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chat_mutes(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_voice_mutes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ping_details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
}
CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(const CMsgSignOutCommunicationSummary_PlayerCommunication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ping_details_(from.ping_details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&voice_mutes_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(voice_mutes_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voice_mutes_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(voice_mutes_));
}

CMsgSignOutCommunicationSummary_PlayerCommunication::~CMsgSignOutCommunicationSummary_PlayerCommunication() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::ArenaDtor(void* object) {
  CMsgSignOutCommunicationSummary_PlayerCommunication* _this = reinterpret_cast< CMsgSignOutCommunicationSummary_PlayerCommunication* >(object);
  (void)_this;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_details_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_wheel_messages_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(chat_wheel_messages_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&pauses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&voice_mutes_) -
        reinterpret_cast<char*>(&pauses_)) + sizeof(voice_mutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunicationSummary_PlayerCommunication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pings(&has_bits);
          pings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_pings_per_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_pings_per_interval(&has_bits);
          max_pings_per_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teammate_pings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teammate_pings(&has_bits);
          teammate_pings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_teammate_pings_per_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_teammate_pings_per_interval(&has_bits);
          max_teammate_pings_per_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_chat_messages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_chat_messages(&has_bits);
          team_chat_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 all_chat_messages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_all_chat_messages(&has_bits);
          all_chat_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chat_wheel_messages = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_chat_wheel_messages(&has_bits);
          chat_wheel_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pauses = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pauses(&has_bits);
          pauses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unpauses = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_unpauses(&has_bits);
          unpauses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lines_drawn = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lines_drawn(&has_bits);
          lines_drawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 voice_chat_seconds = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_voice_chat_seconds(&has_bits);
          voice_chat_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chat_mutes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_chat_mutes(&has_bits);
          chat_mutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 voice_mutes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_voice_mutes(&has_bits);
          voice_mutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ping_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutCommunicationSummary_PlayerCommunication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 pings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pings(), target);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_pings_per_interval(), target);
  }

  // optional uint32 teammate_pings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teammate_pings(), target);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_teammate_pings_per_interval(), target);
  }

  // optional uint32 team_chat_messages = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_team_chat_messages(), target);
  }

  // optional uint32 all_chat_messages = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_all_chat_messages(), target);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_chat_wheel_messages(), target);
  }

  // optional uint32 pauses = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pauses(), target);
  }

  // optional uint32 unpauses = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_unpauses(), target);
  }

  // optional uint32 lines_drawn = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_lines_drawn(), target);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_voice_chat_seconds(), target);
  }

  // optional uint32 chat_mutes = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_chat_mutes(), target);
  }

  // optional uint32 voice_mutes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_voice_mutes(), target);
  }

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ping_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_ping_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary.PlayerCommunication)
  return target;
}

size_t CMsgSignOutCommunicationSummary_PlayerCommunication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
  total_size += 1UL * this->_internal_ping_details_size();
  for (const auto& msg : this->ping_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 pings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pings());
    }

    // optional uint32 max_pings_per_interval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_pings_per_interval());
    }

    // optional uint32 teammate_pings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teammate_pings());
    }

    // optional uint32 max_teammate_pings_per_interval = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_teammate_pings_per_interval());
    }

    // optional uint32 team_chat_messages = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_chat_messages());
    }

    // optional uint32 all_chat_messages = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_all_chat_messages());
    }

    // optional uint32 chat_wheel_messages = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_wheel_messages());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 pauses = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pauses());
    }

    // optional uint32 unpauses = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unpauses());
    }

    // optional uint32 lines_drawn = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lines_drawn());
    }

    // optional uint32 voice_chat_seconds = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_voice_chat_seconds());
    }

    // optional uint32 chat_mutes = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_mutes());
    }

    // optional uint32 voice_mutes = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_voice_mutes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary_PlayerCommunication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutCommunicationSummary_PlayerCommunication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutCommunicationSummary.PlayerCommunication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutCommunicationSummary.PlayerCommunication)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ping_details_.MergeFrom(from.ping_details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pings_ = from.pings_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_pings_per_interval_ = from.max_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      teammate_pings_ = from.teammate_pings_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_teammate_pings_per_interval_ = from.max_teammate_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_chat_messages_ = from.team_chat_messages_;
    }
    if (cached_has_bits & 0x00000040u) {
      all_chat_messages_ = from.all_chat_messages_;
    }
    if (cached_has_bits & 0x00000080u) {
      chat_wheel_messages_ = from.chat_wheel_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      pauses_ = from.pauses_;
    }
    if (cached_has_bits & 0x00000200u) {
      unpauses_ = from.unpauses_;
    }
    if (cached_has_bits & 0x00000400u) {
      lines_drawn_ = from.lines_drawn_;
    }
    if (cached_has_bits & 0x00000800u) {
      voice_chat_seconds_ = from.voice_chat_seconds_;
    }
    if (cached_has_bits & 0x00001000u) {
      chat_mutes_ = from.chat_mutes_;
    }
    if (cached_has_bits & 0x00002000u) {
      voice_mutes_ = from.voice_mutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ping_details_.InternalSwap(&other->ping_details_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, voice_mutes_)
      + sizeof(CMsgSignOutCommunicationSummary_PlayerCommunication::voice_mutes_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunicationSummary_PlayerCommunication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutCommunicationSummary::_Internal {
 public:
};

CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunicationSummary)
}
CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(const CMsgSignOutCommunicationSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary)
}

void CMsgSignOutCommunicationSummary::SharedCtor() {
}

CMsgSignOutCommunicationSummary::~CMsgSignOutCommunicationSummary() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutCommunicationSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutCommunicationSummary::ArenaDtor(void* object) {
  CMsgSignOutCommunicationSummary* _this = reinterpret_cast< CMsgSignOutCommunicationSummary* >(object);
  (void)_this;
}
void CMsgSignOutCommunicationSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutCommunicationSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutCommunicationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunicationSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunicationSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutCommunicationSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary)
  return target;
}

size_t CMsgSignOutCommunicationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunicationSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunicationSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutCommunicationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutCommunicationSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutCommunicationSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutCommunicationSummary)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary::MergeFrom(const CMsgSignOutCommunicationSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunicationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutCommunicationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const CMsgSignOutCommunicationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunicationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary::InternalSwap(CMsgSignOutCommunicationSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunicationSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignoutResponse_PlayerMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignoutResponse_PlayerMetadata>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avg_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_deaths_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_best_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_best_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_games_played(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignoutResponse.PlayerMetadata)
}
CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(const CMsgGameMatchSignoutResponse_PlayerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&games_played_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(games_played_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignoutResponse.PlayerMetadata)
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&games_played_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(games_played_));
}

CMsgGameMatchSignoutResponse_PlayerMetadata::~CMsgGameMatchSignoutResponse_PlayerMetadata() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignoutResponse.PlayerMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::ArenaDtor(void* object) {
  CMsgGameMatchSignoutResponse_PlayerMetadata* _this = reinterpret_cast< CMsgGameMatchSignoutResponse_PlayerMetadata* >(object);
  (void)_this;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_assists_x16_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(best_assists_x16_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&best_gpm_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&games_played_) -
        reinterpret_cast<char*>(&best_gpm_x16_)) + sizeof(games_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignoutResponse_PlayerMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_kills_x16 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_avg_kills_x16(&has_bits);
          avg_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_deaths_x16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_avg_deaths_x16(&has_bits);
          avg_deaths_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_assists_x16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_avg_assists_x16(&has_bits);
          avg_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_gpm_x16 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_avg_gpm_x16(&has_bits);
          avg_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_xpm_x16 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_avg_xpm_x16(&has_bits);
          avg_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_kills_x16 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_best_kills_x16(&has_bits);
          best_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_assists_x16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_best_assists_x16(&has_bits);
          best_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_gpm_x16 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_best_gpm_x16(&has_bits);
          best_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_xpm_x16 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_best_xpm_x16(&has_bits);
          best_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 win_streak = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_win_streak(&has_bits);
          win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_win_streak = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_best_win_streak(&has_bits);
          best_win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 games_played = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_games_played(&has_bits);
          games_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignoutResponse_PlayerMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 avg_kills_x16 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_win_streak(), target);
  }

  // optional uint32 best_win_streak = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_best_win_streak(), target);
  }

  // optional uint32 games_played = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_games_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignoutResponse.PlayerMetadata)
  return target;
}

size_t CMsgGameMatchSignoutResponse_PlayerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 avg_kills_x16 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_kills_x16());
    }

    // optional uint32 best_assists_x16 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_assists_x16());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 best_gpm_x16 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_xpm_x16());
    }

    // optional uint32 win_streak = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_win_streak());
    }

    // optional uint32 best_win_streak = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_win_streak());
    }

    // optional uint32 games_played = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_games_played());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse_PlayerMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignoutResponse_PlayerMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignoutResponse.PlayerMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignoutResponse.PlayerMetadata)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::MergeFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00000800u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      games_played_ = from.games_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::CopyFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse_PlayerMetadata::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::InternalSwap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, games_played_)
      + sizeof(CMsgGameMatchSignoutResponse_PlayerMetadata::games_played_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignoutResponse_PlayerMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignoutResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignoutResponse>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_replay_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leagueid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_metadata_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgDOTAMatch& match_details(const CMsgGameMatchSignoutResponse* msg);
  static void set_has_match_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMvpData& mvp_data(const CMsgGameMatchSignoutResponse* msg);
  static void set_has_mvp_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ow_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ow_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ow_replay_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgDOTAMatch&
CMsgGameMatchSignoutResponse::_Internal::match_details(const CMsgGameMatchSignoutResponse* msg) {
  return *msg->match_details_;
}
const ::CMvpData&
CMsgGameMatchSignoutResponse::_Internal::mvp_data(const CMsgGameMatchSignoutResponse* msg) {
  return *msg->mvp_data_;
}
void CMsgGameMatchSignoutResponse::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
void CMsgGameMatchSignoutResponse::clear_xp_reward_details() {
  xp_reward_details_.Clear();
}
void CMsgGameMatchSignoutResponse::clear_match_details() {
  if (match_details_ != nullptr) match_details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignoutResponse::clear_mvp_data() {
  if (mvp_data_ != nullptr) mvp_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timed_reward_details_(arena),
  xp_reward_details_(arena),
  players_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignoutResponse)
}
CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      timed_reward_details_(from.timed_reward_details_),
      xp_reward_details_(from.xp_reward_details_),
      players_metadata_(from.players_metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_details()) {
    match_details_ = new ::CMsgDOTAMatch(*from.match_details_);
  } else {
    match_details_ = nullptr;
  }
  if (from._internal_has_mvp_data()) {
    mvp_data_ = new ::CMvpData(*from.mvp_data_);
  } else {
    mvp_data_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ow_replay_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(ow_replay_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignoutResponse)
}

void CMsgGameMatchSignoutResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ow_replay_id_) -
    reinterpret_cast<char*>(&match_details_)) + sizeof(ow_replay_id_));
}

CMsgGameMatchSignoutResponse::~CMsgGameMatchSignoutResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignoutResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_details_;
  if (this != internal_default_instance()) delete mvp_data_;
}

void CMsgGameMatchSignoutResponse::ArenaDtor(void* object) {
  CMsgGameMatchSignoutResponse* _this = reinterpret_cast< CMsgGameMatchSignoutResponse* >(object);
  (void)_this;
}
void CMsgGameMatchSignoutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timed_reward_details_.Clear();
  xp_reward_details_.Clear();
  players_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_details_ != nullptr);
      match_details_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mvp_data_ != nullptr);
      mvp_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ow_private_key_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(ow_private_key_));
  }
  ow_replay_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 replay_salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_replay_salt(&has_bits);
          replay_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyMember xp_reward_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xp_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 leagueid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_leagueid(&has_bits);
          leagueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 metadata_private_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_metadata_private_key(&has_bits);
          metadata_private_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAMatch match_details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMvpData mvp_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvp_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 ow_private_key = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_ow_private_key(&has_bits);
          ow_private_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 ow_salt = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ow_salt(&has_bits);
          ow_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint64 ow_replay_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ow_replay_id(&has_bits);
          ow_replay_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignoutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional fixed32 replay_salt = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_replay_salt(), target);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timed_reward_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_timed_reward_details(i), target, stream);
  }

  // repeated .CSODOTALobbyMember xp_reward_details = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_xp_reward_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_xp_reward_details(i), target, stream);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_leagueid(), target);
  }

  // optional fixed32 metadata_private_key = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_metadata_private_key(), target);
  }

  // optional .CMsgDOTAMatch match_details = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::match_details(this), target, stream);
  }

  // repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_players_metadata(i), target, stream);
  }

  // optional .CMvpData mvp_data = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mvp_data(this), target, stream);
  }

  // optional fixed64 ow_private_key = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_ow_private_key(), target);
  }

  // optional fixed32 ow_salt = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(12, this->_internal_ow_salt(), target);
  }

  // optional uint64 ow_replay_id = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_ow_replay_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignoutResponse)
  return target;
}

size_t CMsgGameMatchSignoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignoutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  total_size += 1UL * this->_internal_timed_reward_details_size();
  for (const auto& msg : this->timed_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobbyMember xp_reward_details = 4;
  total_size += 1UL * this->_internal_xp_reward_details_size();
  for (const auto& msg : this->xp_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  total_size += 1UL * this->_internal_players_metadata_size();
  for (const auto& msg : this->players_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgDOTAMatch match_details = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_details_);
    }

    // optional .CMvpData mvp_data = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mvp_data_);
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional fixed32 replay_salt = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 leagueid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leagueid());
    }

    // optional fixed32 metadata_private_key = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 ow_salt = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed64 ow_private_key = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint64 ow_replay_id = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ow_replay_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignoutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignoutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignoutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignoutResponse)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse::MergeFrom(const CMsgGameMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  xp_reward_details_.MergeFrom(from.xp_reward_details_);
  players_metadata_.MergeFrom(from.players_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match_details()->::CMsgDOTAMatch::MergeFrom(from._internal_match_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mvp_data()->::CMvpData::MergeFrom(from._internal_mvp_data());
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      replay_salt_ = from.replay_salt_;
    }
    if (cached_has_bits & 0x00000010u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00000020u) {
      metadata_private_key_ = from.metadata_private_key_;
    }
    if (cached_has_bits & 0x00000040u) {
      ow_salt_ = from.ow_salt_;
    }
    if (cached_has_bits & 0x00000080u) {
      ow_private_key_ = from.ow_private_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ow_replay_id(from._internal_ow_replay_id());
  }
}

void CMsgGameMatchSignoutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse::CopyFrom(const CMsgGameMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse::InternalSwap(CMsgGameMatchSignoutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timed_reward_details_.InternalSwap(&other->timed_reward_details_);
  xp_reward_details_.InternalSwap(&other->xp_reward_details_);
  players_metadata_.InternalSwap(&other->players_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse, ow_replay_id_)
      + sizeof(CMsgGameMatchSignoutResponse::ow_replay_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse, match_details_)>(
          reinterpret_cast<char*>(&match_details_),
          reinterpret_cast<char*>(&other->match_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignoutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTimedRewardContainer::_Internal {
 public:
};

void CMsgTimedRewardContainer::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
CMsgTimedRewardContainer::CMsgTimedRewardContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timed_reward_details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTimedRewardContainer)
}
CMsgTimedRewardContainer::CMsgTimedRewardContainer(const CMsgTimedRewardContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      timed_reward_details_(from.timed_reward_details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTimedRewardContainer)
}

void CMsgTimedRewardContainer::SharedCtor() {
}

CMsgTimedRewardContainer::~CMsgTimedRewardContainer() {
  // @@protoc_insertion_point(destructor:CMsgTimedRewardContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTimedRewardContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgTimedRewardContainer::ArenaDtor(void* object) {
  CMsgTimedRewardContainer* _this = reinterpret_cast< CMsgTimedRewardContainer* >(object);
  (void)_this;
}
void CMsgTimedRewardContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTimedRewardContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTimedRewardContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTimedRewardContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timed_reward_details_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTimedRewardContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTimedRewardContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTimedRewardContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timed_reward_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_timed_reward_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTimedRewardContainer)
  return target;
}

size_t CMsgTimedRewardContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTimedRewardContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
  total_size += 1UL * this->_internal_timed_reward_details_size();
  for (const auto& msg : this->timed_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTimedRewardContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTimedRewardContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTimedRewardContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTimedRewardContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTimedRewardContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTimedRewardContainer)
    MergeFrom(*source);
  }
}

void CMsgTimedRewardContainer::MergeFrom(const CMsgTimedRewardContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTimedRewardContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_reward_details_.MergeFrom(from.timed_reward_details_);
}

void CMsgTimedRewardContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTimedRewardContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTimedRewardContainer::CopyFrom(const CMsgTimedRewardContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTimedRewardContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTimedRewardContainer::IsInitialized() const {
  return true;
}

void CMsgTimedRewardContainer::InternalSwap(CMsgTimedRewardContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timed_reward_details_.InternalSwap(&other->timed_reward_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTimedRewardContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOutPermissionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutPermissionRequest>()._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_attempt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_attempt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_waited(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutPermissionRequest)
}
CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_version_, &from.server_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_waited_) -
    reinterpret_cast<char*>(&server_version_)) + sizeof(seconds_waited_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPermissionRequest)
}

void CMsgGameMatchSignOutPermissionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_waited_) -
    reinterpret_cast<char*>(&server_version_)) + sizeof(seconds_waited_));
}

CMsgGameMatchSignOutPermissionRequest::~CMsgGameMatchSignOutPermissionRequest() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPermissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOutPermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOutPermissionRequest::ArenaDtor(void* object) {
  CMsgGameMatchSignOutPermissionRequest* _this = reinterpret_cast< CMsgGameMatchSignOutPermissionRequest* >(object);
  (void)_this;
}
void CMsgGameMatchSignOutPermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOutPermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOutPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&server_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_waited_) -
        reinterpret_cast<char*>(&server_version_)) + sizeof(seconds_waited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutPermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 local_attempt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_local_attempt(&has_bits);
          local_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_attempt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_attempt(&has_bits);
          total_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_waited = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seconds_waited(&has_bits);
          seconds_waited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOutPermissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_version(), target);
  }

  // optional uint32 local_attempt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_attempt(), target);
  }

  // optional uint32 total_attempt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_attempt(), target);
  }

  // optional uint32 seconds_waited = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seconds_waited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPermissionRequest)
  return target;
}

size_t CMsgGameMatchSignOutPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutPermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 server_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional uint32 local_attempt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_local_attempt());
    }

    // optional uint32 total_attempt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_attempt());
    }

    // optional uint32 seconds_waited = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_waited());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOutPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOutPermissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOutPermissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOutPermissionRequest)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      local_attempt_ = from.local_attempt_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_attempt_ = from.total_attempt_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_waited_ = from.seconds_waited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOutPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionRequest::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionRequest::InternalSwap(CMsgGameMatchSignOutPermissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, seconds_waited_)
      + sizeof(CMsgGameMatchSignOutPermissionRequest::seconds_waited_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, server_version_)>(
          reinterpret_cast<char*>(&server_version_),
          reinterpret_cast<char*>(&other->server_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutPermissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOutPermissionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutPermissionResponse>()._has_bits_);
  static void set_has_permission_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_abandon_signout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_retry_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutPermissionResponse)
}
CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&permission_granted_, &from.permission_granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_delay_seconds_) -
    reinterpret_cast<char*>(&permission_granted_)) + sizeof(retry_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPermissionResponse)
}

void CMsgGameMatchSignOutPermissionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&permission_granted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&retry_delay_seconds_) -
    reinterpret_cast<char*>(&permission_granted_)) + sizeof(retry_delay_seconds_));
}

CMsgGameMatchSignOutPermissionResponse::~CMsgGameMatchSignOutPermissionResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPermissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOutPermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOutPermissionResponse::ArenaDtor(void* object) {
  CMsgGameMatchSignOutPermissionResponse* _this = reinterpret_cast< CMsgGameMatchSignOutPermissionResponse* >(object);
  (void)_this;
}
void CMsgGameMatchSignOutPermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOutPermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOutPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&permission_granted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retry_delay_seconds_) -
        reinterpret_cast<char*>(&permission_granted_)) + sizeof(retry_delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutPermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool permission_granted = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_permission_granted(&has_bits);
          permission_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool abandon_signout = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abandon_signout(&has_bits);
          abandon_signout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retry_delay_seconds = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_retry_delay_seconds(&has_bits);
          retry_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOutPermissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool permission_granted = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_permission_granted(), target);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_abandon_signout(), target);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_retry_delay_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPermissionResponse)
  return target;
}

size_t CMsgGameMatchSignOutPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutPermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool permission_granted = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool abandon_signout = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 retry_delay_seconds = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retry_delay_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOutPermissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOutPermissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOutPermissionResponse)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      permission_granted_ = from.permission_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      abandon_signout_ = from.abandon_signout_;
    }
    if (cached_has_bits & 0x00000004u) {
      retry_delay_seconds_ = from.retry_delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionResponse::InternalSwap(CMsgGameMatchSignOutPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, retry_delay_seconds_)
      + sizeof(CMsgGameMatchSignOutPermissionResponse::retry_delay_seconds_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, permission_granted_)>(
          reinterpret_cast<char*>(&permission_granted_),
          reinterpret_cast<char*>(&other->permission_granted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutPermissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOutEventGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutEventGameData>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutEventGameData)
}
CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(const CMsgGameMatchSignOutEventGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArena());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_name()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArena());
  }
  event_game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_game_data()) {
    event_game_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_game_data(), 
      GetArena());
  }
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutEventGameData)
}

void CMsgGameMatchSignOutEventGameData::SharedCtor() {
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(start_time_));
}

CMsgGameMatchSignOutEventGameData::~CMsgGameMatchSignOutEventGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutEventGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOutEventGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_game_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOutEventGameData::ArenaDtor(void* object) {
  CMsgGameMatchSignOutEventGameData* _this = reinterpret_cast< CMsgGameMatchSignOutEventGameData* >(object);
  (void)_this;
}
void CMsgGameMatchSignOutEventGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOutEventGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOutEventGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutEventGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      event_game_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutEventGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameMatchSignOutEventGameData.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameMatchSignOutEventGameData.map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes event_game_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_event_game_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOutEventGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutEventGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOutEventGameData.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOutEventGameData.map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_name(), target);
  }

  // optional bytes event_game_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_event_game_data(), target);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutEventGameData)
  return target;
}

size_t CMsgGameMatchSignOutEventGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutEventGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional string map_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional bytes event_game_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_event_game_data());
    }

    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutEventGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOutEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutEventGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOutEventGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOutEventGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOutEventGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutEventGameData::MergeFrom(const CMsgGameMatchSignOutEventGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_event_game_data(from._internal_event_game_data());
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutEventGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOutEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutEventGameData::CopyFrom(const CMsgGameMatchSignOutEventGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutEventGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutEventGameData::InternalSwap(CMsgGameMatchSignOutEventGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  event_game_data_.Swap(&other->event_game_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, start_time_)
      + sizeof(CMsgGameMatchSignOutEventGameData::start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutEventGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOutPerfData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutPerfData>()._has_bits_);
  static void set_has_server_average_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_max_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameMatchSignOutPerfData::CMsgGameMatchSignOutPerfData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  average_frame_time_(arena),
  max_frame_time_(arena),
  average_compute_time_(arena),
  max_compute_time_(arena),
  average_client_tick_time_(arena),
  max_client_tick_time_(arena),
  average_client_simulate_time_(arena),
  max_client_simulate_time_(arena),
  average_output_time_(arena),
  max_output_time_(arena),
  average_wait_for_rendering_to_complete_time_(arena),
  max_wait_for_rendering_to_complete_time_(arena),
  average_swap_time_(arena),
  max_swap_time_(arena),
  average_frame_update_time_(arena),
  max_frame_update_time_(arena),
  average_idle_time_(arena),
  max_idle_time_(arena),
  average_input_processing_time_(arena),
  max_input_processing_time_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutPerfData)
}
CMsgGameMatchSignOutPerfData::CMsgGameMatchSignOutPerfData(const CMsgGameMatchSignOutPerfData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      average_frame_time_(from.average_frame_time_),
      max_frame_time_(from.max_frame_time_),
      average_compute_time_(from.average_compute_time_),
      max_compute_time_(from.max_compute_time_),
      average_client_tick_time_(from.average_client_tick_time_),
      max_client_tick_time_(from.max_client_tick_time_),
      average_client_simulate_time_(from.average_client_simulate_time_),
      max_client_simulate_time_(from.max_client_simulate_time_),
      average_output_time_(from.average_output_time_),
      max_output_time_(from.max_output_time_),
      average_wait_for_rendering_to_complete_time_(from.average_wait_for_rendering_to_complete_time_),
      max_wait_for_rendering_to_complete_time_(from.max_wait_for_rendering_to_complete_time_),
      average_swap_time_(from.average_swap_time_),
      max_swap_time_(from.max_swap_time_),
      average_frame_update_time_(from.average_frame_update_time_),
      max_frame_update_time_(from.max_frame_update_time_),
      average_idle_time_(from.average_idle_time_),
      max_idle_time_(from.max_idle_time_),
      average_input_processing_time_(from.average_input_processing_time_),
      max_input_processing_time_(from.max_input_processing_time_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_average_frame_time_, &from.server_average_frame_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_max_frame_time_) -
    reinterpret_cast<char*>(&server_average_frame_time_)) + sizeof(server_max_frame_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPerfData)
}

void CMsgGameMatchSignOutPerfData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_average_frame_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_max_frame_time_) -
    reinterpret_cast<char*>(&server_average_frame_time_)) + sizeof(server_max_frame_time_));
}

CMsgGameMatchSignOutPerfData::~CMsgGameMatchSignOutPerfData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPerfData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOutPerfData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOutPerfData::ArenaDtor(void* object) {
  CMsgGameMatchSignOutPerfData* _this = reinterpret_cast< CMsgGameMatchSignOutPerfData* >(object);
  (void)_this;
}
void CMsgGameMatchSignOutPerfData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOutPerfData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOutPerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutPerfData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  average_frame_time_.Clear();
  max_frame_time_.Clear();
  average_compute_time_.Clear();
  max_compute_time_.Clear();
  average_client_tick_time_.Clear();
  max_client_tick_time_.Clear();
  average_client_simulate_time_.Clear();
  max_client_simulate_time_.Clear();
  average_output_time_.Clear();
  max_output_time_.Clear();
  average_wait_for_rendering_to_complete_time_.Clear();
  max_wait_for_rendering_to_complete_time_.Clear();
  average_swap_time_.Clear();
  max_swap_time_.Clear();
  average_frame_update_time_.Clear();
  max_frame_update_time_.Clear();
  average_idle_time_.Clear();
  max_idle_time_.Clear();
  average_input_processing_time_.Clear();
  max_input_processing_time_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&server_average_frame_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_max_frame_time_) -
        reinterpret_cast<char*>(&server_average_frame_time_)) + sizeof(server_max_frame_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutPerfData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float average_frame_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_frame_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_frame_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_frame_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_frame_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_frame_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float server_average_frame_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_server_average_frame_time(&has_bits);
          server_average_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float server_max_frame_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_server_max_frame_time(&has_bits);
          server_max_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float average_compute_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_compute_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_compute_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_compute_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_compute_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_compute_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_client_tick_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_client_tick_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_client_tick_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_client_tick_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_client_tick_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_client_tick_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_client_simulate_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_client_simulate_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_client_simulate_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_client_simulate_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_client_simulate_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<85>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_client_simulate_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_output_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_output_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_output_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_output_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_output_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_output_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_wait_for_rendering_to_complete_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_wait_for_rendering_to_complete_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_wait_for_rendering_to_complete_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_wait_for_rendering_to_complete_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_wait_for_rendering_to_complete_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<117>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_wait_for_rendering_to_complete_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_swap_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_swap_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<125>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_swap_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_swap_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_swap_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<133>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_swap_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_frame_update_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_frame_update_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<141>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_frame_update_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_frame_update_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_frame_update_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<149>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_frame_update_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_idle_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_idle_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<157>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_idle_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_idle_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_idle_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<165>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_idle_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float average_input_processing_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_input_processing_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<173>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_input_processing_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_input_processing_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_input_processing_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<181>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_input_processing_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOutPerfData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPerfData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float average_frame_time = 1;
  for (int i = 0, n = this->_internal_average_frame_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_average_frame_time(i), target);
  }

  // repeated float max_frame_time = 2;
  for (int i = 0, n = this->_internal_max_frame_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_frame_time(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float server_average_frame_time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_server_average_frame_time(), target);
  }

  // optional float server_max_frame_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_server_max_frame_time(), target);
  }

  // repeated float average_compute_time = 5;
  for (int i = 0, n = this->_internal_average_compute_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_average_compute_time(i), target);
  }

  // repeated float max_compute_time = 6;
  for (int i = 0, n = this->_internal_max_compute_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max_compute_time(i), target);
  }

  // repeated float average_client_tick_time = 7;
  for (int i = 0, n = this->_internal_average_client_tick_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_average_client_tick_time(i), target);
  }

  // repeated float max_client_tick_time = 8;
  for (int i = 0, n = this->_internal_max_client_tick_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_max_client_tick_time(i), target);
  }

  // repeated float average_client_simulate_time = 9;
  for (int i = 0, n = this->_internal_average_client_simulate_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_average_client_simulate_time(i), target);
  }

  // repeated float max_client_simulate_time = 10;
  for (int i = 0, n = this->_internal_max_client_simulate_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_max_client_simulate_time(i), target);
  }

  // repeated float average_output_time = 11;
  for (int i = 0, n = this->_internal_average_output_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_average_output_time(i), target);
  }

  // repeated float max_output_time = 12;
  for (int i = 0, n = this->_internal_max_output_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_max_output_time(i), target);
  }

  // repeated float average_wait_for_rendering_to_complete_time = 13;
  for (int i = 0, n = this->_internal_average_wait_for_rendering_to_complete_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_average_wait_for_rendering_to_complete_time(i), target);
  }

  // repeated float max_wait_for_rendering_to_complete_time = 14;
  for (int i = 0, n = this->_internal_max_wait_for_rendering_to_complete_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_max_wait_for_rendering_to_complete_time(i), target);
  }

  // repeated float average_swap_time = 15;
  for (int i = 0, n = this->_internal_average_swap_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_average_swap_time(i), target);
  }

  // repeated float max_swap_time = 16;
  for (int i = 0, n = this->_internal_max_swap_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_max_swap_time(i), target);
  }

  // repeated float average_frame_update_time = 17;
  for (int i = 0, n = this->_internal_average_frame_update_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_average_frame_update_time(i), target);
  }

  // repeated float max_frame_update_time = 18;
  for (int i = 0, n = this->_internal_max_frame_update_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_max_frame_update_time(i), target);
  }

  // repeated float average_idle_time = 19;
  for (int i = 0, n = this->_internal_average_idle_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_average_idle_time(i), target);
  }

  // repeated float max_idle_time = 20;
  for (int i = 0, n = this->_internal_max_idle_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_max_idle_time(i), target);
  }

  // repeated float average_input_processing_time = 21;
  for (int i = 0, n = this->_internal_average_input_processing_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_average_input_processing_time(i), target);
  }

  // repeated float max_input_processing_time = 22;
  for (int i = 0, n = this->_internal_max_input_processing_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_max_input_processing_time(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPerfData)
  return target;
}

size_t CMsgGameMatchSignOutPerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutPerfData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float average_frame_time = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_frame_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_frame_time_size());
    total_size += data_size;
  }

  // repeated float max_frame_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_frame_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_frame_time_size());
    total_size += data_size;
  }

  // repeated float average_compute_time = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_compute_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_compute_time_size());
    total_size += data_size;
  }

  // repeated float max_compute_time = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_compute_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_compute_time_size());
    total_size += data_size;
  }

  // repeated float average_client_tick_time = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_client_tick_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_client_tick_time_size());
    total_size += data_size;
  }

  // repeated float max_client_tick_time = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_client_tick_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_client_tick_time_size());
    total_size += data_size;
  }

  // repeated float average_client_simulate_time = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_client_simulate_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_client_simulate_time_size());
    total_size += data_size;
  }

  // repeated float max_client_simulate_time = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_client_simulate_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_client_simulate_time_size());
    total_size += data_size;
  }

  // repeated float average_output_time = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_output_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_output_time_size());
    total_size += data_size;
  }

  // repeated float max_output_time = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_output_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_output_time_size());
    total_size += data_size;
  }

  // repeated float average_wait_for_rendering_to_complete_time = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_wait_for_rendering_to_complete_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_wait_for_rendering_to_complete_time_size());
    total_size += data_size;
  }

  // repeated float max_wait_for_rendering_to_complete_time = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_wait_for_rendering_to_complete_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_wait_for_rendering_to_complete_time_size());
    total_size += data_size;
  }

  // repeated float average_swap_time = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_swap_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_swap_time_size());
    total_size += data_size;
  }

  // repeated float max_swap_time = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_swap_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_swap_time_size());
    total_size += data_size;
  }

  // repeated float average_frame_update_time = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_frame_update_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_frame_update_time_size());
    total_size += data_size;
  }

  // repeated float max_frame_update_time = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_frame_update_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_frame_update_time_size());
    total_size += data_size;
  }

  // repeated float average_idle_time = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_idle_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_idle_time_size());
    total_size += data_size;
  }

  // repeated float max_idle_time = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_idle_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_idle_time_size());
    total_size += data_size;
  }

  // repeated float average_input_processing_time = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_input_processing_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_average_input_processing_time_size());
    total_size += data_size;
  }

  // repeated float max_input_processing_time = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_input_processing_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_input_processing_time_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float server_average_frame_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float server_max_frame_time = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutPerfData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOutPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutPerfData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOutPerfData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOutPerfData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOutPerfData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPerfData::MergeFrom(const CMsgGameMatchSignOutPerfData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  average_frame_time_.MergeFrom(from.average_frame_time_);
  max_frame_time_.MergeFrom(from.max_frame_time_);
  average_compute_time_.MergeFrom(from.average_compute_time_);
  max_compute_time_.MergeFrom(from.max_compute_time_);
  average_client_tick_time_.MergeFrom(from.average_client_tick_time_);
  max_client_tick_time_.MergeFrom(from.max_client_tick_time_);
  average_client_simulate_time_.MergeFrom(from.average_client_simulate_time_);
  max_client_simulate_time_.MergeFrom(from.max_client_simulate_time_);
  average_output_time_.MergeFrom(from.average_output_time_);
  max_output_time_.MergeFrom(from.max_output_time_);
  average_wait_for_rendering_to_complete_time_.MergeFrom(from.average_wait_for_rendering_to_complete_time_);
  max_wait_for_rendering_to_complete_time_.MergeFrom(from.max_wait_for_rendering_to_complete_time_);
  average_swap_time_.MergeFrom(from.average_swap_time_);
  max_swap_time_.MergeFrom(from.max_swap_time_);
  average_frame_update_time_.MergeFrom(from.average_frame_update_time_);
  max_frame_update_time_.MergeFrom(from.max_frame_update_time_);
  average_idle_time_.MergeFrom(from.average_idle_time_);
  max_idle_time_.MergeFrom(from.max_idle_time_);
  average_input_processing_time_.MergeFrom(from.average_input_processing_time_);
  max_input_processing_time_.MergeFrom(from.max_input_processing_time_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_average_frame_time_ = from.server_average_frame_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_max_frame_time_ = from.server_max_frame_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutPerfData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOutPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPerfData::CopyFrom(const CMsgGameMatchSignOutPerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPerfData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPerfData::InternalSwap(CMsgGameMatchSignOutPerfData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  average_frame_time_.InternalSwap(&other->average_frame_time_);
  max_frame_time_.InternalSwap(&other->max_frame_time_);
  average_compute_time_.InternalSwap(&other->average_compute_time_);
  max_compute_time_.InternalSwap(&other->max_compute_time_);
  average_client_tick_time_.InternalSwap(&other->average_client_tick_time_);
  max_client_tick_time_.InternalSwap(&other->max_client_tick_time_);
  average_client_simulate_time_.InternalSwap(&other->average_client_simulate_time_);
  max_client_simulate_time_.InternalSwap(&other->max_client_simulate_time_);
  average_output_time_.InternalSwap(&other->average_output_time_);
  max_output_time_.InternalSwap(&other->max_output_time_);
  average_wait_for_rendering_to_complete_time_.InternalSwap(&other->average_wait_for_rendering_to_complete_time_);
  max_wait_for_rendering_to_complete_time_.InternalSwap(&other->max_wait_for_rendering_to_complete_time_);
  average_swap_time_.InternalSwap(&other->average_swap_time_);
  max_swap_time_.InternalSwap(&other->max_swap_time_);
  average_frame_update_time_.InternalSwap(&other->average_frame_update_time_);
  max_frame_update_time_.InternalSwap(&other->max_frame_update_time_);
  average_idle_time_.InternalSwap(&other->average_idle_time_);
  max_idle_time_.InternalSwap(&other->max_idle_time_);
  average_input_processing_time_.InternalSwap(&other->average_input_processing_time_);
  max_input_processing_time_.InternalSwap(&other->max_input_processing_time_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPerfData, server_max_frame_time_)
      + sizeof(CMsgGameMatchSignOutPerfData::server_max_frame_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPerfData, server_average_frame_time_)>(
          reinterpret_cast<char*>(&server_average_frame_time_),
          reinterpret_cast<char*>(&other->server_average_frame_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutPerfData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameMatchSignOutBanData::_Internal {
 public:
};

CMsgGameMatchSignOutBanData::CMsgGameMatchSignOutBanData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hero_bans_(arena),
  hero_ban_votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutBanData)
}
CMsgGameMatchSignOutBanData::CMsgGameMatchSignOutBanData(const CMsgGameMatchSignOutBanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hero_bans_(from.hero_bans_),
      hero_ban_votes_(from.hero_ban_votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutBanData)
}

void CMsgGameMatchSignOutBanData::SharedCtor() {
}

CMsgGameMatchSignOutBanData::~CMsgGameMatchSignOutBanData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutBanData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameMatchSignOutBanData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameMatchSignOutBanData::ArenaDtor(void* object) {
  CMsgGameMatchSignOutBanData* _this = reinterpret_cast< CMsgGameMatchSignOutBanData* >(object);
  (void)_this;
}
void CMsgGameMatchSignOutBanData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameMatchSignOutBanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameMatchSignOutBanData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutBanData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_bans_.Clear();
  hero_ban_votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutBanData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 hero_bans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_bans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_bans(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hero_ban_votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_ban_votes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_ban_votes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameMatchSignOutBanData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutBanData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hero_bans = 1;
  for (int i = 0, n = this->_internal_hero_bans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_bans(i), target);
  }

  // repeated uint32 hero_ban_votes = 2;
  for (int i = 0, n = this->_internal_hero_ban_votes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_ban_votes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutBanData)
  return target;
}

size_t CMsgGameMatchSignOutBanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutBanData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hero_bans = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hero_bans_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hero_bans_size());
    total_size += data_size;
  }

  // repeated uint32 hero_ban_votes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hero_ban_votes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hero_ban_votes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutBanData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameMatchSignOutBanData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutBanData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameMatchSignOutBanData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameMatchSignOutBanData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameMatchSignOutBanData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutBanData::MergeFrom(const CMsgGameMatchSignOutBanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutBanData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_bans_.MergeFrom(from.hero_bans_);
  hero_ban_votes_.MergeFrom(from.hero_ban_votes_);
}

void CMsgGameMatchSignOutBanData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameMatchSignOutBanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutBanData::CopyFrom(const CMsgGameMatchSignOutBanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutBanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutBanData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutBanData::InternalSwap(CMsgGameMatchSignOutBanData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hero_bans_.InternalSwap(&other->hero_bans_);
  hero_ban_votes_.InternalSwap(&other->hero_ban_votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutBanData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>()._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}
CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_level_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ArenaDtor(void* object) {
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* _this = reinterpret_cast< CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* >(object);
  (void)_this;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_level_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ability_level(&has_bits);
          ability_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional uint32 ability_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 ability_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_level_ = from.ability_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_level_)
      + sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ability_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_id_)>(
          reinterpret_cast<char*>(&ability_id_),
          reinterpret_cast<char*>(&other->ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALiveScoreboardUpdate_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate_Team_Player>()._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gold_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_xp_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ultimate_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ultimate_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_item0(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_item1(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_item2(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_item3(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_item4(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_item5(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_respawn_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  abilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
}
CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero_name()) {
    hero_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero_name(), 
      GetArena());
  }
  ::memcpy(&player_slot_, &from.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&player_slot_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&player_slot_)) + sizeof(net_worth_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player::~CMsgDOTALiveScoreboardUpdate_Team_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::ArenaDtor(void* object) {
  CMsgDOTALiveScoreboardUpdate_Team_Player* _this = reinterpret_cast< CMsgDOTALiveScoreboardUpdate_Team_Player* >(object);
  (void)_this;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hero_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_hits_) -
        reinterpret_cast<char*>(&player_slot_)) + sizeof(last_hits_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&denies_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item0_) -
        reinterpret_cast<char*>(&denies_)) + sizeof(item0_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&item1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_x_) -
        reinterpret_cast<char*>(&item1_)) + sizeof(position_x_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&position_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&position_y_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate_Team_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hero_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_hits = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_last_hits(&has_bits);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_denies(&has_bits);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gold(&has_bits);
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gold_per_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_gold_per_min(&has_bits);
          gold_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xp_per_min = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_xp_per_min(&has_bits);
          xp_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(val))) {
            _internal_set_ultimate_state(static_cast<::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float ultimate_cooldown = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ultimate_cooldown(&has_bits);
          ultimate_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 item0 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_item0(&has_bits);
          item0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_item1(&has_bits);
          item1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_item2(&has_bits);
          item2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_item3(&has_bits);
          item3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_item4(&has_bits);
          item4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item5 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_item5(&has_bits);
          item5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 respawn_timer = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_respawn_timer(&has_bits);
          respawn_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float position_x = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_position_x(&has_bits);
          position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float position_y = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_position_y(&has_bits);
          position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_name().data(), static_cast<int>(this->_internal_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hero_name(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_assists(), target);
  }

  // optional uint32 last_hits = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_denies(), target);
  }

  // optional uint32 gold = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_gold(), target);
  }

  // optional uint32 level = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_level(), target);
  }

  // optional float gold_per_min = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_gold_per_min(), target);
  }

  // optional float xp_per_min = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_xp_per_min(), target);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_ultimate_state(), target);
  }

  // optional float ultimate_cooldown = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_ultimate_cooldown(), target);
  }

  // optional uint32 item0 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_item0(), target);
  }

  // optional uint32 item1 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_item1(), target);
  }

  // optional uint32 item2 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_item2(), target);
  }

  // optional uint32 item3 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_item3(), target);
  }

  // optional uint32 item4 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_item4(), target);
  }

  // optional uint32 item5 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_item5(), target);
  }

  // optional uint32 respawn_timer = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_respawn_timer(), target);
  }

  // optional uint32 account_id = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_account_id(), target);
  }

  // optional float position_x = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_position_x(), target);
  }

  // optional float position_y = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_position_y(), target);
  }

  // optional uint32 net_worth = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_net_worth(), target);
  }

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_abilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_abilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team.Player)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  total_size += 2UL * this->_internal_abilities_size();
  for (const auto& msg : this->abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional string hero_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_name());
    }

    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 kills = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 last_hits = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 denies = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional uint32 gold = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
    }

    // optional uint32 level = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional float gold_per_min = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float xp_per_min = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ultimate_state());
    }

    // optional float ultimate_cooldown = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 item0 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item0());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 item1 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item1());
    }

    // optional uint32 item2 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item2());
    }

    // optional uint32 item3 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item3());
    }

    // optional uint32 item4 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item4());
    }

    // optional uint32 item5 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item5());
    }

    // optional uint32 respawn_timer = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_respawn_timer());
    }

    // optional uint32 account_id = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional float position_x = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional float position_y = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 net_worth = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate_Team_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALiveScoreboardUpdate.Team.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALiveScoreboardUpdate.Team.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hero_name(from._internal_hero_name());
    }
    if (cached_has_bits & 0x00000004u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_hits_ = from.last_hits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000200u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00001000u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x00002000u) {
      ultimate_state_ = from.ultimate_state_;
    }
    if (cached_has_bits & 0x00004000u) {
      ultimate_cooldown_ = from.ultimate_cooldown_;
    }
    if (cached_has_bits & 0x00008000u) {
      item0_ = from.item0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      item1_ = from.item1_;
    }
    if (cached_has_bits & 0x00020000u) {
      item2_ = from.item2_;
    }
    if (cached_has_bits & 0x00040000u) {
      item3_ = from.item3_;
    }
    if (cached_has_bits & 0x00080000u) {
      item4_ = from.item4_;
    }
    if (cached_has_bits & 0x00100000u) {
      item5_ = from.item5_;
    }
    if (cached_has_bits & 0x00200000u) {
      respawn_timer_ = from.respawn_timer_;
    }
    if (cached_has_bits & 0x00400000u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      position_x_ = from.position_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x02000000u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  abilities_.InternalSwap(&other->abilities_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hero_name_.Swap(&other->hero_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, net_worth_)
      + sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player::net_worth_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, player_slot_)>(
          reinterpret_cast<char*>(&player_slot_),
          reinterpret_cast<char*>(&other->player_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALiveScoreboardUpdate_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate_Team>()._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tower_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_barracks_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  hero_picks_(arena),
  hero_bans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate.Team)
}
CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      hero_picks_(from.hero_picks_),
      hero_bans_(from.hero_bans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&barracks_state_) -
    reinterpret_cast<char*>(&score_)) + sizeof(barracks_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team)
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&barracks_state_) -
    reinterpret_cast<char*>(&score_)) + sizeof(barracks_state_));
}

CMsgDOTALiveScoreboardUpdate_Team::~CMsgDOTALiveScoreboardUpdate_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALiveScoreboardUpdate_Team::ArenaDtor(void* object) {
  CMsgDOTALiveScoreboardUpdate_Team* _this = reinterpret_cast< CMsgDOTALiveScoreboardUpdate_Team* >(object);
  (void)_this;
}
void CMsgDOTALiveScoreboardUpdate_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALiveScoreboardUpdate_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  hero_picks_.Clear();
  hero_bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&barracks_state_) -
        reinterpret_cast<char*>(&score_)) + sizeof(barracks_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tower_state(&has_bits);
          tower_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 barracks_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_barracks_state(&has_bits);
          barracks_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hero_picks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_picks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_picks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hero_bans = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_bans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_bans(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALiveScoreboardUpdate_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // optional uint32 tower_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tower_state(), target);
  }

  // optional uint32 barracks_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_barracks_state(), target);
  }

  // repeated uint32 hero_picks = 5;
  for (int i = 0, n = this->_internal_hero_picks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_picks(i), target);
  }

  // repeated uint32 hero_bans = 6;
  for (int i = 0, n = this->_internal_hero_bans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hero_bans(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 hero_picks = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hero_picks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hero_picks_size());
    total_size += data_size;
  }

  // repeated uint32 hero_bans = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hero_bans_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hero_bans_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 tower_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_state());
    }

    // optional uint32 barracks_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_barracks_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALiveScoreboardUpdate.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALiveScoreboardUpdate.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  hero_picks_.MergeFrom(from.hero_picks_);
  hero_bans_.MergeFrom(from.hero_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      tower_state_ = from.tower_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      barracks_state_ = from.barracks_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  hero_picks_.InternalSwap(&other->hero_picks_);
  hero_bans_.InternalSwap(&other->hero_bans_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, barracks_state_)
      + sizeof(CMsgDOTALiveScoreboardUpdate_Team::barracks_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALiveScoreboardUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate>()._has_bits_);
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tournament_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hltv_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgDOTALiveScoreboardUpdate_Team& team_good(const CMsgDOTALiveScoreboardUpdate* msg);
  static void set_has_team_good(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTALiveScoreboardUpdate_Team& team_bad(const CMsgDOTALiveScoreboardUpdate* msg);
  static void set_has_team_bad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roshan_respawn_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgDOTALiveScoreboardUpdate_Team&
CMsgDOTALiveScoreboardUpdate::_Internal::team_good(const CMsgDOTALiveScoreboardUpdate* msg) {
  return *msg->team_good_;
}
const ::CMsgDOTALiveScoreboardUpdate_Team&
CMsgDOTALiveScoreboardUpdate::_Internal::team_bad(const CMsgDOTALiveScoreboardUpdate* msg) {
  return *msg->team_bad_;
}
CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate)
}
CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_good()) {
    team_good_ = new ::CMsgDOTALiveScoreboardUpdate_Team(*from.team_good_);
  } else {
    team_good_ = nullptr;
  }
  if (from._internal_has_team_bad()) {
    team_bad_ = new ::CMsgDOTALiveScoreboardUpdate_Team(*from.team_bad_);
  } else {
    team_bad_ = nullptr;
  }
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate)
}

void CMsgDOTALiveScoreboardUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_good_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&team_good_)) + sizeof(match_id_));
}

CMsgDOTALiveScoreboardUpdate::~CMsgDOTALiveScoreboardUpdate() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALiveScoreboardUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete team_good_;
  if (this != internal_default_instance()) delete team_bad_;
}

void CMsgDOTALiveScoreboardUpdate::ArenaDtor(void* object) {
  CMsgDOTALiveScoreboardUpdate* _this = reinterpret_cast< CMsgDOTALiveScoreboardUpdate* >(object);
  (void)_this;
}
void CMsgDOTALiveScoreboardUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALiveScoreboardUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_good_ != nullptr);
      team_good_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(team_bad_ != nullptr);
      team_bad_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(league_id_));
  }
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tournament_game_id(&has_bits);
          tournament_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 hltv_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hltv_delay(&has_bits);
          hltv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_good(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_bad(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roshan_respawn_timer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_roshan_respawn_timer(&has_bits);
          roshan_respawn_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALiveScoreboardUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tournament_game_id(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  // optional int32 hltv_delay = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hltv_delay(), target);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::team_good(this), target, stream);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::team_bad(this), target, stream);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_roshan_respawn_timer(), target);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_league_id(), target);
  }

  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_good_);
    }

    // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_bad_);
    }

    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 tournament_game_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_game_id());
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 hltv_delay = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hltv_delay());
    }

    // optional uint32 roshan_respawn_timer = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roshan_respawn_timer());
    }

    // optional uint32 league_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

  }
  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALiveScoreboardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALiveScoreboardUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALiveScoreboardUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const CMsgDOTALiveScoreboardUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_team_good()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from._internal_team_good());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_team_bad()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from._internal_team_bad());
    }
    if (cached_has_bits & 0x00000004u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      hltv_delay_ = from.hltv_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      roshan_respawn_timer_ = from.roshan_respawn_timer_;
    }
    if (cached_has_bits & 0x00000080u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALiveScoreboardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const CMsgDOTALiveScoreboardUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate::InternalSwap(CMsgDOTALiveScoreboardUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, match_id_)
      + sizeof(CMsgDOTALiveScoreboardUpdate::match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, team_good_)>(
          reinterpret_cast<char*>(&team_good_),
          reinterpret_cast<char*>(&other->team_good_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRequestBatchPlayerResources::_Internal {
 public:
};

CMsgServerToGCRequestBatchPlayerResources::CMsgServerToGCRequestBatchPlayerResources(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena),
  rank_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestBatchPlayerResources)
}
CMsgServerToGCRequestBatchPlayerResources::CMsgServerToGCRequestBatchPlayerResources(const CMsgServerToGCRequestBatchPlayerResources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_ids_(from.account_ids_),
      rank_types_(from.rank_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestBatchPlayerResources)
}

void CMsgServerToGCRequestBatchPlayerResources::SharedCtor() {
}

CMsgServerToGCRequestBatchPlayerResources::~CMsgServerToGCRequestBatchPlayerResources() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestBatchPlayerResources)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRequestBatchPlayerResources::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCRequestBatchPlayerResources::ArenaDtor(void* object) {
  CMsgServerToGCRequestBatchPlayerResources* _this = reinterpret_cast< CMsgServerToGCRequestBatchPlayerResources* >(object);
  (void)_this;
}
void CMsgServerToGCRequestBatchPlayerResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRequestBatchPlayerResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRequestBatchPlayerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestBatchPlayerResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  rank_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestBatchPlayerResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rank_types = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rank_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_rank_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRequestBatchPlayerResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestBatchPlayerResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  {
    int byte_size = _account_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_account_ids(), byte_size, target);
    }
  }

  // repeated uint32 rank_types = 4 [packed = true];
  {
    int byte_size = _rank_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_rank_types(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestBatchPlayerResources)
  return target;
}

size_t CMsgServerToGCRequestBatchPlayerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestBatchPlayerResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _account_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 rank_types = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rank_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rank_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestBatchPlayerResources::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRequestBatchPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestBatchPlayerResources* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRequestBatchPlayerResources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRequestBatchPlayerResources)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRequestBatchPlayerResources)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestBatchPlayerResources::MergeFrom(const CMsgServerToGCRequestBatchPlayerResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestBatchPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  rank_types_.MergeFrom(from.rank_types_);
}

void CMsgServerToGCRequestBatchPlayerResources::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRequestBatchPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestBatchPlayerResources::CopyFrom(const CMsgServerToGCRequestBatchPlayerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestBatchPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestBatchPlayerResources::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestBatchPlayerResources::InternalSwap(CMsgServerToGCRequestBatchPlayerResources* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
  rank_types_.InternalSwap(&other->rank_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestBatchPlayerResources::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prevent_text_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prevent_voice_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_calibrated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_new_player(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_guide_player(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
}
CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_guide_player_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_guide_player_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_guide_player_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_guide_player_));
}

CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::~CMsgServerToGCRequestBatchPlayerResourcesResponse_Result() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::ArenaDtor(void* object) {
  CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* _this = reinterpret_cast< CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* >(object);
  (void)_this;
}
void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_guide_player_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(is_guide_player_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prevent_text_chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prevent_text_chat(&has_bits);
          prevent_text_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prevent_voice_chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prevent_voice_chat(&has_bits);
          prevent_voice_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rank_calibrated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rank_calibrated(&has_bits);
          rank_calibrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_low_priority(&has_bits);
          low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_new_player = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_new_player(&has_bits);
          is_new_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_guide_player = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_guide_player(&has_bits);
          is_guide_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool prevent_text_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_prevent_text_chat(), target);
  }

  // optional bool prevent_voice_chat = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_prevent_voice_chat(), target);
  }

  // optional uint32 rank = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rank(), target);
  }

  // optional bool rank_calibrated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_rank_calibrated(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_low_priority(), target);
  }

  // optional bool is_new_player = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_new_player(), target);
  }

  // optional bool is_guide_player = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_guide_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  return target;
}

size_t CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 rank = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional bool prevent_text_chat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool prevent_voice_chat = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rank_calibrated = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_new_player = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_guide_player = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::MergeFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      prevent_text_chat_ = from.prevent_text_chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevent_voice_chat_ = from.prevent_voice_chat_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_calibrated_ = from.rank_calibrated_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_priority_ = from.low_priority_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_new_player_ = from.is_new_player_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_guide_player_ = from.is_guide_player_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CopyFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::InternalSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, is_guide_player_)
      + sizeof(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::is_guide_player_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRequestBatchPlayerResourcesResponse::_Internal {
 public:
};

CMsgServerToGCRequestBatchPlayerResourcesResponse::CMsgServerToGCRequestBatchPlayerResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse)
}
CMsgServerToGCRequestBatchPlayerResourcesResponse::CMsgServerToGCRequestBatchPlayerResourcesResponse(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse)
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::SharedCtor() {
}

CMsgServerToGCRequestBatchPlayerResourcesResponse::~CMsgServerToGCRequestBatchPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::ArenaDtor(void* object) {
  CMsgServerToGCRequestBatchPlayerResourcesResponse* _this = reinterpret_cast< CMsgServerToGCRequestBatchPlayerResourcesResponse* >(object);
  (void)_this;
}
void CMsgServerToGCRequestBatchPlayerResourcesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRequestBatchPlayerResourcesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestBatchPlayerResourcesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRequestBatchPlayerResourcesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  return target;
}

size_t CMsgServerToGCRequestBatchPlayerResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestBatchPlayerResourcesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRequestBatchPlayerResourcesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRequestBatchPlayerResourcesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRequestBatchPlayerResourcesResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::MergeFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::CopyFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestBatchPlayerResourcesResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::InternalSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestBatchPlayerResourcesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPlayerFailedToConnect::_Internal {
 public:
};

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  failed_loaders_(arena),
  abandoned_loaders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerFailedToConnect)
}
CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      failed_loaders_(from.failed_loaders_),
      abandoned_loaders_(from.abandoned_loaders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerFailedToConnect)
}

void CMsgDOTAPlayerFailedToConnect::SharedCtor() {
}

CMsgDOTAPlayerFailedToConnect::~CMsgDOTAPlayerFailedToConnect() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerFailedToConnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPlayerFailedToConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPlayerFailedToConnect::ArenaDtor(void* object) {
  CMsgDOTAPlayerFailedToConnect* _this = reinterpret_cast< CMsgDOTAPlayerFailedToConnect* >(object);
  (void)_this;
}
void CMsgDOTAPlayerFailedToConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPlayerFailedToConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPlayerFailedToConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerFailedToConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failed_loaders_.Clear();
  abandoned_loaders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerFailedToConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 failed_loaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failed_loaders(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_failed_loaders(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 abandoned_loaders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_abandoned_loaders(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_abandoned_loaders(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPlayerFailedToConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerFailedToConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  for (int i = 0, n = this->_internal_failed_loaders_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_failed_loaders(i), target);
  }

  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0, n = this->_internal_abandoned_loaders_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_abandoned_loaders(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerFailedToConnect)
  return target;
}

size_t CMsgDOTAPlayerFailedToConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerFailedToConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_failed_loaders_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_failed_loaders_size());
    total_size += data_size;
  }

  // repeated fixed64 abandoned_loaders = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_abandoned_loaders_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_abandoned_loaders_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPlayerFailedToConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerFailedToConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPlayerFailedToConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPlayerFailedToConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPlayerFailedToConnect)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const CMsgDOTAPlayerFailedToConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerFailedToConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failed_loaders_.MergeFrom(from.failed_loaders_);
  abandoned_loaders_.MergeFrom(from.abandoned_loaders_);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPlayerFailedToConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const CMsgDOTAPlayerFailedToConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerFailedToConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerFailedToConnect::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerFailedToConnect::InternalSwap(CMsgDOTAPlayerFailedToConnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  failed_loaders_.InternalSwap(&other->failed_loaders_);
  abandoned_loaders_.InternalSwap(&other->abandoned_loaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerFailedToConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToRelayConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToRelayConnect>()._has_bits_);
  static void set_has_source_tv_public_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_tv_private_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parent_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_unique_secret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_source_tv_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGCToRelayConnect::CMsgGCToRelayConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToRelayConnect)
}
CMsgGCToRelayConnect::CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_tv_public_addr_, &from.source_tv_public_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_tv_steamid_) -
    reinterpret_cast<char*>(&source_tv_public_addr_)) + sizeof(source_tv_steamid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToRelayConnect)
}

void CMsgGCToRelayConnect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_tv_public_addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_tv_steamid_) -
    reinterpret_cast<char*>(&source_tv_public_addr_)) + sizeof(source_tv_steamid_));
}

CMsgGCToRelayConnect::~CMsgGCToRelayConnect() {
  // @@protoc_insertion_point(destructor:CMsgGCToRelayConnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToRelayConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToRelayConnect::ArenaDtor(void* object) {
  CMsgGCToRelayConnect* _this = reinterpret_cast< CMsgGCToRelayConnect* >(object);
  (void)_this;
}
void CMsgGCToRelayConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToRelayConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToRelayConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&source_tv_public_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_tv_steamid_) -
        reinterpret_cast<char*>(&source_tv_public_addr_)) + sizeof(source_tv_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToRelayConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_tv_public_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_tv_public_addr(&has_bits);
          source_tv_public_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_tv_private_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_tv_private_addr(&has_bits);
          source_tv_private_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_tv_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_tv_port(&has_bits);
          source_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_server_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_server_steam_id(&has_bits);
          game_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parent_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_parent_count(&has_bits);
          parent_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 tv_unique_secret_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_tv_unique_secret_code(&has_bits);
          tv_unique_secret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 source_tv_steamid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_source_tv_steamid(&has_bits);
          source_tv_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToRelayConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToRelayConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_tv_public_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_tv_port(), target);
  }

  // optional uint64 game_server_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_game_server_steam_id(), target);
  }

  // optional uint32 parent_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_parent_count(), target);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_tv_unique_secret_code(), target);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_source_tv_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToRelayConnect)
  return target;
}

size_t CMsgGCToRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToRelayConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 source_tv_public_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_tv_private_addr());
    }

    // optional uint64 game_server_steam_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_server_steam_id());
    }

    // optional uint32 source_tv_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_tv_port());
    }

    // optional uint32 parent_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_count());
    }

    // optional fixed64 tv_unique_secret_code = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 source_tv_steamid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToRelayConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToRelayConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToRelayConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToRelayConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToRelayConnect)
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnect::MergeFrom(const CMsgGCToRelayConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      source_tv_public_addr_ = from.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_tv_private_addr_ = from.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_tv_port_ = from.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      parent_count_ = from.parent_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_unique_secret_code_ = from.tv_unique_secret_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_tv_steamid_ = from.source_tv_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToRelayConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnect::CopyFrom(const CMsgGCToRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCToRelayConnect::InternalSwap(CMsgGCToRelayConnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_steamid_)
      + sizeof(CMsgGCToRelayConnect::source_tv_steamid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_public_addr_)>(
          reinterpret_cast<char*>(&source_tv_public_addr_),
          reinterpret_cast<char*>(&other->source_tv_public_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToRelayConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCGCToLANServerRelayConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGCToLANServerRelayConnect>()._has_bits_);
  static void set_has_relay_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGCToLANServerRelayConnect)
}
CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(const CMsgGCGCToLANServerRelayConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relay_steamid_ = from.relay_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGCToLANServerRelayConnect)
}

void CMsgGCGCToLANServerRelayConnect::SharedCtor() {
relay_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCGCToLANServerRelayConnect::~CMsgGCGCToLANServerRelayConnect() {
  // @@protoc_insertion_point(destructor:CMsgGCGCToLANServerRelayConnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCGCToLANServerRelayConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCGCToLANServerRelayConnect::ArenaDtor(void* object) {
  CMsgGCGCToLANServerRelayConnect* _this = reinterpret_cast< CMsgGCGCToLANServerRelayConnect* >(object);
  (void)_this;
}
void CMsgGCGCToLANServerRelayConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGCToLANServerRelayConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGCToLANServerRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGCToLANServerRelayConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGCToLANServerRelayConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 relay_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_relay_steamid(&has_bits);
          relay_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCGCToLANServerRelayConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGCToLANServerRelayConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 relay_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_relay_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGCToLANServerRelayConnect)
  return target;
}

size_t CMsgGCGCToLANServerRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGCToLANServerRelayConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 relay_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCGCToLANServerRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGCToLANServerRelayConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCGCToLANServerRelayConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCGCToLANServerRelayConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCGCToLANServerRelayConnect)
    MergeFrom(*source);
  }
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const CMsgGCGCToLANServerRelayConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGCToLANServerRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relay_steamid()) {
    _internal_set_relay_steamid(from._internal_relay_steamid());
  }
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCGCToLANServerRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const CMsgGCGCToLANServerRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGCToLANServerRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGCToLANServerRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCGCToLANServerRelayConnect::InternalSwap(CMsgGCGCToLANServerRelayConnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relay_steamid_, other->relay_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGCToLANServerRelayConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToRelayConnectResponse::_Internal {
 public:
};

CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToRelayConnectResponse)
}
CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse(const CMsgGCToRelayConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToRelayConnectResponse)
}

void CMsgGCToRelayConnectResponse::SharedCtor() {
}

CMsgGCToRelayConnectResponse::~CMsgGCToRelayConnectResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToRelayConnectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToRelayConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToRelayConnectResponse::ArenaDtor(void* object) {
  CMsgGCToRelayConnectResponse* _this = reinterpret_cast< CMsgGCToRelayConnectResponse* >(object);
  (void)_this;
}
void CMsgGCToRelayConnectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToRelayConnectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToRelayConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToRelayConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToRelayConnectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToRelayConnectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToRelayConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToRelayConnectResponse)
  return target;
}

size_t CMsgGCToRelayConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToRelayConnectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToRelayConnectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToRelayConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToRelayConnectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToRelayConnectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToRelayConnectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToRelayConnectResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnectResponse::MergeFrom(const CMsgGCToRelayConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToRelayConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToRelayConnectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToRelayConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnectResponse::CopyFrom(const CMsgGCToRelayConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToRelayConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnectResponse::IsInitialized() const {
  return true;
}

void CMsgGCToRelayConnectResponse::InternalSwap(CMsgGCToRelayConnectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToRelayConnectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCBanStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCBanStatusRequest>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCBanStatusRequest)
}
CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCBanStatusRequest)
}

void CMsgGCBanStatusRequest::SharedCtor() {
account_id_ = 0u;
}

CMsgGCBanStatusRequest::~CMsgGCBanStatusRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCBanStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCBanStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCBanStatusRequest::ArenaDtor(void* object) {
  CMsgGCBanStatusRequest* _this = reinterpret_cast< CMsgGCBanStatusRequest* >(object);
  (void)_this;
}
void CMsgGCBanStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCBanStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCBanStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCBanStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCBanStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCBanStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBanStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBanStatusRequest)
  return target;
}

size_t CMsgGCBanStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCBanStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCBanStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCBanStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBanStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCBanStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCBanStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCBanStatusRequest)
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusRequest::MergeFrom(const CMsgGCBanStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCBanStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgGCBanStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCBanStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusRequest::CopyFrom(const CMsgGCBanStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCBanStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusRequest::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusRequest::InternalSwap(CMsgGCBanStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCBanStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCBanStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCBanStatusResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_chat_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_voice_chat_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCBanStatusResponse)
}
CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&voice_chat_banned_) -
    reinterpret_cast<char*>(&result_)) + sizeof(voice_chat_banned_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCBanStatusResponse)
}

void CMsgGCBanStatusResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voice_chat_banned_) -
    reinterpret_cast<char*>(&result_)) + sizeof(voice_chat_banned_));
}

CMsgGCBanStatusResponse::~CMsgGCBanStatusResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCBanStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCBanStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCBanStatusResponse::ArenaDtor(void* object) {
  CMsgGCBanStatusResponse* _this = reinterpret_cast< CMsgGCBanStatusResponse* >(object);
  (void)_this;
}
void CMsgGCBanStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCBanStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCBanStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCBanStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&voice_chat_banned_) -
        reinterpret_cast<char*>(&result_)) + sizeof(voice_chat_banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCBanStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_low_priority(&has_bits);
          low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool text_chat_banned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_text_chat_banned(&has_bits);
          text_chat_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool voice_chat_banned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_voice_chat_banned(&has_bits);
          voice_chat_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCBanStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBanStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional bool low_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_low_priority(), target);
  }

  // optional bool text_chat_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_text_chat_banned(), target);
  }

  // optional bool voice_chat_banned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_voice_chat_banned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBanStatusResponse)
  return target;
}

size_t CMsgGCBanStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCBanStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

    // optional bool low_priority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool text_chat_banned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool voice_chat_banned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCBanStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCBanStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBanStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCBanStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCBanStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCBanStatusResponse)
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusResponse::MergeFrom(const CMsgGCBanStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCBanStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_priority_ = from.low_priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      text_chat_banned_ = from.text_chat_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      voice_chat_banned_ = from.voice_chat_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCBanStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCBanStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusResponse::CopyFrom(const CMsgGCBanStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCBanStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusResponse::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusResponse::InternalSwap(CMsgGCBanStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCBanStatusResponse, voice_chat_banned_)
      + sizeof(CMsgGCBanStatusResponse::voice_chat_banned_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCBanStatusResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCBanStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTournamentItemEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTournamentItemEvent>()._has_bits_);
  static void set_has_killer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_victim_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tv_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dota_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_replay_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_loot_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_multi_kill_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_winner_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_loser_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

void CMsgTournamentItemEvent::clear_hero_statues() {
  hero_statues_.Clear();
}
CMsgTournamentItemEvent::CMsgTournamentItemEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hero_statues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTournamentItemEvent)
}
CMsgTournamentItemEvent::CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hero_statues_(from.hero_statues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loot_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_loot_list()) {
    loot_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loot_list(), 
      GetArena());
  }
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&loser_score_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(loser_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgTournamentItemEvent)
}

void CMsgTournamentItemEvent::SharedCtor() {
loot_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&killer_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&loser_score_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(loser_score_));
}

CMsgTournamentItemEvent::~CMsgTournamentItemEvent() {
  // @@protoc_insertion_point(destructor:CMsgTournamentItemEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTournamentItemEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loot_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTournamentItemEvent::ArenaDtor(void* object) {
  CMsgTournamentItemEvent* _this = reinterpret_cast< CMsgTournamentItemEvent* >(object);
  (void)_this;
}
void CMsgTournamentItemEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTournamentItemEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTournamentItemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTournamentItemEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_statues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    loot_list_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&killer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_team_) -
        reinterpret_cast<char*>(&killer_account_id_)) + sizeof(event_team_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&multi_kill_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loser_score_) -
        reinterpret_cast<char*>(&multi_kill_count_)) + sizeof(loser_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTournamentItemEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 killer_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_killer_account_id(&has_bits);
          killer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 victim_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_victim_account_id(&has_bits);
          victim_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_TournamentEvents_IsValid(val))) {
            _internal_set_event_type(static_cast<::DOTA_TournamentEvents>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 tv_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tv_delay(&has_bits);
          tv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dota_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dota_time(&has_bits);
          dota_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float replay_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_replay_time(&has_bits);
          replay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string loot_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_loot_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTournamentItemEvent.loot_list");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_event_team(&has_bits);
          event_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multi_kill_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_multi_kill_count(&has_bits);
          multi_kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winner_score = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_winner_score(&has_bits);
          winner_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 loser_score = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_loser_score(&has_bits);
          loser_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CProtoItemHeroStatue hero_statues = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_statues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTournamentItemEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTournamentItemEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 killer_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_killer_account_id(), target);
  }

  // optional fixed32 victim_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_victim_account_id(), target);
  }

  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_event_type(), target);
  }

  // optional int32 tv_delay = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tv_delay(), target);
  }

  // optional int32 dota_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dota_time(), target);
  }

  // optional float replay_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_replay_time(), target);
  }

  // optional string loot_list = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loot_list().data(), static_cast<int>(this->_internal_loot_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTournamentItemEvent.loot_list");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_loot_list(), target);
  }

  // optional uint32 event_team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_event_team(), target);
  }

  // optional uint32 multi_kill_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_multi_kill_count(), target);
  }

  // optional uint32 winner_score = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_winner_score(), target);
  }

  // optional uint32 loser_score = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_loser_score(), target);
  }

  // repeated .CProtoItemHeroStatue hero_statues = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_statues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_hero_statues(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTournamentItemEvent)
  return target;
}

size_t CMsgTournamentItemEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTournamentItemEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CProtoItemHeroStatue hero_statues = 12;
  total_size += 1UL * this->_internal_hero_statues_size();
  for (const auto& msg : this->hero_statues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string loot_list = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loot_list());
    }

    // optional fixed32 killer_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 victim_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
    }

    // optional int32 tv_delay = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tv_delay());
    }

    // optional int32 dota_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dota_time());
    }

    // optional float replay_time = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 event_team = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_team());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 multi_kill_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multi_kill_count());
    }

    // optional uint32 winner_score = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winner_score());
    }

    // optional uint32 loser_score = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_loser_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTournamentItemEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTournamentItemEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTournamentItemEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTournamentItemEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTournamentItemEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTournamentItemEvent)
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEvent::MergeFrom(const CMsgTournamentItemEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTournamentItemEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_statues_.MergeFrom(from.hero_statues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_loot_list(from._internal_loot_list());
    }
    if (cached_has_bits & 0x00000002u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      victim_account_id_ = from.victim_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      tv_delay_ = from.tv_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      dota_time_ = from.dota_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      replay_time_ = from.replay_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_team_ = from.event_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      multi_kill_count_ = from.multi_kill_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      winner_score_ = from.winner_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      loser_score_ = from.loser_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTournamentItemEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTournamentItemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEvent::CopyFrom(const CMsgTournamentItemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTournamentItemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEvent::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEvent::InternalSwap(CMsgTournamentItemEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_statues_.InternalSwap(&other->hero_statues_);
  loot_list_.Swap(&other->loot_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEvent, loser_score_)
      + sizeof(CMsgTournamentItemEvent::loser_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEvent, killer_account_id_)>(
          reinterpret_cast<char*>(&killer_account_id_),
          reinterpret_cast<char*>(&other->killer_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTournamentItemEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTournamentItemEventResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTournamentItemEventResponse>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_viewers_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTournamentItemEventResponse)
}
CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewers_granted_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(viewers_granted_));
  // @@protoc_insertion_point(copy_constructor:CMsgTournamentItemEventResponse)
}

void CMsgTournamentItemEventResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&viewers_granted_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(viewers_granted_));
}

CMsgTournamentItemEventResponse::~CMsgTournamentItemEventResponse() {
  // @@protoc_insertion_point(destructor:CMsgTournamentItemEventResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTournamentItemEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgTournamentItemEventResponse::ArenaDtor(void* object) {
  CMsgTournamentItemEventResponse* _this = reinterpret_cast< CMsgTournamentItemEventResponse* >(object);
  (void)_this;
}
void CMsgTournamentItemEventResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTournamentItemEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTournamentItemEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTournamentItemEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewers_granted_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(viewers_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTournamentItemEventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_TournamentEvents_IsValid(val))) {
            _internal_set_event_type(static_cast<::DOTA_TournamentEvents>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 viewers_granted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_viewers_granted(&has_bits);
          viewers_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTournamentItemEventResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTournamentItemEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  // optional uint32 viewers_granted = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_viewers_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTournamentItemEventResponse)
  return target;
}

size_t CMsgTournamentItemEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTournamentItemEventResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
    }

    // optional uint32 viewers_granted = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_viewers_granted());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTournamentItemEventResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTournamentItemEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTournamentItemEventResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTournamentItemEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTournamentItemEventResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTournamentItemEventResponse)
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEventResponse::MergeFrom(const CMsgTournamentItemEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTournamentItemEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      viewers_granted_ = from.viewers_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTournamentItemEventResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTournamentItemEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEventResponse::CopyFrom(const CMsgTournamentItemEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTournamentItemEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEventResponse::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEventResponse::InternalSwap(CMsgTournamentItemEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEventResponse, viewers_granted_)
      + sizeof(CMsgTournamentItemEventResponse::viewers_granted_)
      - PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEventResponse, event_type_)>(
          reinterpret_cast<char*>(&event_type_),
          reinterpret_cast<char*>(&other->event_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTournamentItemEventResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTeamFanfare::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTeamFanfare>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTeamFanfare::CMsgTeamFanfare(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTeamFanfare)
}
CMsgTeamFanfare::CMsgTeamFanfare(const CMsgTeamFanfare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTeamFanfare)
}

void CMsgTeamFanfare::SharedCtor() {
match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgTeamFanfare::~CMsgTeamFanfare() {
  // @@protoc_insertion_point(destructor:CMsgTeamFanfare)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTeamFanfare::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgTeamFanfare::ArenaDtor(void* object) {
  CMsgTeamFanfare* _this = reinterpret_cast< CMsgTeamFanfare* >(object);
  (void)_this;
}
void CMsgTeamFanfare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTeamFanfare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTeamFanfare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTeamFanfare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTeamFanfare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTeamFanfare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTeamFanfare)
  return target;
}

size_t CMsgTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTeamFanfare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 match_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTeamFanfare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTeamFanfare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTeamFanfare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTeamFanfare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTeamFanfare)
    MergeFrom(*source);
  }
}

void CMsgTeamFanfare::MergeFrom(const CMsgTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_id()) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void CMsgTeamFanfare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTeamFanfare::CopyFrom(const CMsgTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgTeamFanfare::InternalSwap(CMsgTeamFanfare* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTeamFanfare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgResponseTeamFanfare::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgResponseTeamFanfare>()._has_bits_);
  static void set_has_fanfare_goodguys(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fanfare_badguys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgResponseTeamFanfare)
}
CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fanfare_goodguys_, &from.fanfare_goodguys_,
    static_cast<size_t>(reinterpret_cast<char*>(&fanfare_badguys_) -
    reinterpret_cast<char*>(&fanfare_goodguys_)) + sizeof(fanfare_badguys_));
  // @@protoc_insertion_point(copy_constructor:CMsgResponseTeamFanfare)
}

void CMsgResponseTeamFanfare::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fanfare_goodguys_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fanfare_badguys_) -
    reinterpret_cast<char*>(&fanfare_goodguys_)) + sizeof(fanfare_badguys_));
}

CMsgResponseTeamFanfare::~CMsgResponseTeamFanfare() {
  // @@protoc_insertion_point(destructor:CMsgResponseTeamFanfare)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgResponseTeamFanfare::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgResponseTeamFanfare::ArenaDtor(void* object) {
  CMsgResponseTeamFanfare* _this = reinterpret_cast< CMsgResponseTeamFanfare* >(object);
  (void)_this;
}
void CMsgResponseTeamFanfare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgResponseTeamFanfare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgResponseTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgResponseTeamFanfare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fanfare_goodguys_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fanfare_badguys_) -
        reinterpret_cast<char*>(&fanfare_goodguys_)) + sizeof(fanfare_badguys_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgResponseTeamFanfare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fanfare_goodguys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fanfare_goodguys(&has_bits);
          fanfare_goodguys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fanfare_badguys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fanfare_badguys(&has_bits);
          fanfare_badguys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgResponseTeamFanfare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResponseTeamFanfare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fanfare_goodguys = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fanfare_goodguys(), target);
  }

  // optional uint32 fanfare_badguys = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fanfare_badguys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResponseTeamFanfare)
  return target;
}

size_t CMsgResponseTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgResponseTeamFanfare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fanfare_goodguys = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fanfare_goodguys());
    }

    // optional uint32 fanfare_badguys = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fanfare_badguys());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResponseTeamFanfare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgResponseTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResponseTeamFanfare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgResponseTeamFanfare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgResponseTeamFanfare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgResponseTeamFanfare)
    MergeFrom(*source);
  }
}

void CMsgResponseTeamFanfare::MergeFrom(const CMsgResponseTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgResponseTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fanfare_goodguys_ = from.fanfare_goodguys_;
    }
    if (cached_has_bits & 0x00000002u) {
      fanfare_badguys_ = from.fanfare_badguys_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResponseTeamFanfare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgResponseTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResponseTeamFanfare::CopyFrom(const CMsgResponseTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgResponseTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResponseTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgResponseTeamFanfare::InternalSwap(CMsgResponseTeamFanfare* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_badguys_)
      + sizeof(CMsgResponseTeamFanfare::fanfare_badguys_)
      - PROTOBUF_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_goodguys_)>(
          reinterpret_cast<char*>(&fanfare_goodguys_),
          reinterpret_cast<char*>(&other->fanfare_goodguys_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgResponseTeamFanfare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerUploadSaveGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerUploadSaveGame>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_save_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_steam_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerUploadSaveGame)
}
CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_steam_ids_(from.player_steam_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  save_game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_game_data()) {
    save_game_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_save_game_data(), 
      GetArena());
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerUploadSaveGame)
}

void CMsgGameServerUploadSaveGame::SharedCtor() {
save_game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_time_));
}

CMsgGameServerUploadSaveGame::~CMsgGameServerUploadSaveGame() {
  // @@protoc_insertion_point(destructor:CMsgGameServerUploadSaveGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerUploadSaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  save_game_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerUploadSaveGame::ArenaDtor(void* object) {
  CMsgGameServerUploadSaveGame* _this = reinterpret_cast< CMsgGameServerUploadSaveGame* >(object);
  (void)_this;
}
void CMsgGameServerUploadSaveGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerUploadSaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerUploadSaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerUploadSaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_steam_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    save_game_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_time_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerUploadSaveGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes save_game_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_save_game_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 player_steam_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_steam_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_player_steam_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerUploadSaveGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerUploadSaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time(), target);
  }

  // optional bytes save_game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_save_game_data(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  // repeated uint64 player_steam_ids = 4;
  for (int i = 0, n = this->_internal_player_steam_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_player_steam_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerUploadSaveGame)
  return target;
}

size_t CMsgGameServerUploadSaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerUploadSaveGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_steam_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->player_steam_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes save_game_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_save_game_data());
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerUploadSaveGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerUploadSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerUploadSaveGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerUploadSaveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerUploadSaveGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerUploadSaveGame)
    MergeFrom(*source);
  }
}

void CMsgGameServerUploadSaveGame::MergeFrom(const CMsgGameServerUploadSaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerUploadSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_steam_ids_.MergeFrom(from.player_steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_save_game_data(from._internal_save_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerUploadSaveGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerUploadSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerUploadSaveGame::CopyFrom(const CMsgGameServerUploadSaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerUploadSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerUploadSaveGame::IsInitialized() const {
  return true;
}

void CMsgGameServerUploadSaveGame::InternalSwap(CMsgGameServerUploadSaveGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_steam_ids_.InternalSwap(&other->player_steam_ids_);
  save_game_data_.Swap(&other->save_game_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerUploadSaveGame, game_time_)
      + sizeof(CMsgGameServerUploadSaveGame::game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerUploadSaveGame, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerUploadSaveGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerSaveGameResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerSaveGameResult>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerSaveGameResult)
}
CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerSaveGameResult)
}

void CMsgGameServerSaveGameResult::SharedCtor() {
result_ = 0;
}

CMsgGameServerSaveGameResult::~CMsgGameServerSaveGameResult() {
  // @@protoc_insertion_point(destructor:CMsgGameServerSaveGameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerSaveGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameServerSaveGameResult::ArenaDtor(void* object) {
  CMsgGameServerSaveGameResult* _this = reinterpret_cast< CMsgGameServerSaveGameResult* >(object);
  (void)_this;
}
void CMsgGameServerSaveGameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerSaveGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerSaveGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerSaveGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerSaveGameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerSaveGameResult_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGameServerSaveGameResult_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerSaveGameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerSaveGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerSaveGameResult)
  return target;
}

size_t CMsgGameServerSaveGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerSaveGameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerSaveGameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerSaveGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerSaveGameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerSaveGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerSaveGameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerSaveGameResult)
    MergeFrom(*source);
  }
}

void CMsgGameServerSaveGameResult::MergeFrom(const CMsgGameServerSaveGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerSaveGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgGameServerSaveGameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerSaveGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerSaveGameResult::CopyFrom(const CMsgGameServerSaveGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerSaveGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerSaveGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerSaveGameResult::InternalSwap(CMsgGameServerSaveGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerSaveGameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerGetLoadGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerGetLoadGame>()._has_bits_);
  static void set_has_save_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerGetLoadGame)
}
CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  save_id_ = from.save_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerGetLoadGame)
}

void CMsgGameServerGetLoadGame::SharedCtor() {
save_id_ = 0u;
}

CMsgGameServerGetLoadGame::~CMsgGameServerGetLoadGame() {
  // @@protoc_insertion_point(destructor:CMsgGameServerGetLoadGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerGetLoadGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameServerGetLoadGame::ArenaDtor(void* object) {
  CMsgGameServerGetLoadGame* _this = reinterpret_cast< CMsgGameServerGetLoadGame* >(object);
  (void)_this;
}
void CMsgGameServerGetLoadGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerGetLoadGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerGetLoadGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerGetLoadGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  save_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerGetLoadGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 save_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_save_id(&has_bits);
          save_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerGetLoadGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerGetLoadGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_save_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerGetLoadGame)
  return target;
}

size_t CMsgGameServerGetLoadGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerGetLoadGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 save_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_save_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerGetLoadGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerGetLoadGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerGetLoadGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerGetLoadGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerGetLoadGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerGetLoadGame)
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGame::MergeFrom(const CMsgGameServerGetLoadGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerGetLoadGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_save_id()) {
    _internal_set_save_id(from._internal_save_id());
  }
}

void CMsgGameServerGetLoadGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerGetLoadGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGame::CopyFrom(const CMsgGameServerGetLoadGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerGetLoadGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGame::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGame::InternalSwap(CMsgGameServerGetLoadGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(save_id_, other->save_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerGetLoadGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerGetLoadGameResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerGetLoadGameResult>()._has_bits_);
  static void set_has_save_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerGetLoadGameResult)
}
CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  save_game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_game_data()) {
    save_game_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_save_game_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerGetLoadGameResult)
}

void CMsgGameServerGetLoadGameResult::SharedCtor() {
save_game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGameServerGetLoadGameResult::~CMsgGameServerGetLoadGameResult() {
  // @@protoc_insertion_point(destructor:CMsgGameServerGetLoadGameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerGetLoadGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  save_game_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerGetLoadGameResult::ArenaDtor(void* object) {
  CMsgGameServerGetLoadGameResult* _this = reinterpret_cast< CMsgGameServerGetLoadGameResult* >(object);
  (void)_this;
}
void CMsgGameServerGetLoadGameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerGetLoadGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerGetLoadGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerGetLoadGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    save_game_data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerGetLoadGameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes save_game_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_save_game_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerGetLoadGameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerGetLoadGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes save_game_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_save_game_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerGetLoadGameResult)
  return target;
}

size_t CMsgGameServerGetLoadGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerGetLoadGameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes save_game_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_save_game_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerGetLoadGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerGetLoadGameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerGetLoadGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerGetLoadGameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerGetLoadGameResult)
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const CMsgGameServerGetLoadGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerGetLoadGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_save_game_data()) {
    _internal_set_save_game_data(from._internal_save_game_data());
  }
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerGetLoadGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const CMsgGameServerGetLoadGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerGetLoadGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGameResult::InternalSwap(CMsgGameServerGetLoadGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  save_game_data_.Swap(&other->save_game_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerGetLoadGameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAGenerateDiretidePrizeList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGenerateDiretidePrizeList>()._has_bits_);
  static void set_has_prize_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_highest_roshan_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGenerateDiretidePrizeList)
}
CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList(const CMsgDOTAGenerateDiretidePrizeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prize_list_, &from.prize_list_,
    static_cast<size_t>(reinterpret_cast<char*>(&highest_roshan_level_) -
    reinterpret_cast<char*>(&prize_list_)) + sizeof(highest_roshan_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGenerateDiretidePrizeList)
}

void CMsgDOTAGenerateDiretidePrizeList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prize_list_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&highest_roshan_level_) -
    reinterpret_cast<char*>(&prize_list_)) + sizeof(highest_roshan_level_));
}

CMsgDOTAGenerateDiretidePrizeList::~CMsgDOTAGenerateDiretidePrizeList() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGenerateDiretidePrizeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAGenerateDiretidePrizeList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAGenerateDiretidePrizeList::ArenaDtor(void* object) {
  CMsgDOTAGenerateDiretidePrizeList* _this = reinterpret_cast< CMsgDOTAGenerateDiretidePrizeList* >(object);
  (void)_this;
}
void CMsgDOTAGenerateDiretidePrizeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAGenerateDiretidePrizeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAGenerateDiretidePrizeList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGenerateDiretidePrizeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&prize_list_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highest_roshan_level_) -
        reinterpret_cast<char*>(&prize_list_)) + sizeof(highest_roshan_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGenerateDiretidePrizeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 prize_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prize_list(&has_bits);
          prize_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 highest_roshan_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_highest_roshan_level(&has_bits);
          highest_roshan_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAGenerateDiretidePrizeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGenerateDiretidePrizeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prize_list(), target);
  }

  // optional uint32 highest_roshan_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_highest_roshan_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGenerateDiretidePrizeList)
  return target;
}

size_t CMsgDOTAGenerateDiretidePrizeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGenerateDiretidePrizeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 prize_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prize_list());
    }

    // optional uint32 highest_roshan_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_highest_roshan_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAGenerateDiretidePrizeList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAGenerateDiretidePrizeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAGenerateDiretidePrizeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAGenerateDiretidePrizeList)
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGenerateDiretidePrizeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prize_list_ = from.prize_list_;
    }
    if (cached_has_bits & 0x00000002u) {
      highest_roshan_level_ = from.highest_roshan_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAGenerateDiretidePrizeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGenerateDiretidePrizeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeList::IsInitialized() const {
  return true;
}

void CMsgDOTAGenerateDiretidePrizeList::InternalSwap(CMsgDOTAGenerateDiretidePrizeList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, highest_roshan_level_)
      + sizeof(CMsgDOTAGenerateDiretidePrizeList::highest_roshan_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, prize_list_)>(
          reinterpret_cast<char*>(&prize_list_),
          reinterpret_cast<char*>(&other->prize_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGenerateDiretidePrizeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAGenerateDiretidePrizeListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGenerateDiretidePrizeListResponse>()._has_bits_);
  static void set_has_prize_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_defs_(arena),
  steam_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGenerateDiretidePrizeListResponse)
}
CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse(const CMsgDOTAGenerateDiretidePrizeListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_defs_(from.item_defs_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGenerateDiretidePrizeListResponse)
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedCtor() {
prize_list_ = 0u;
}

CMsgDOTAGenerateDiretidePrizeListResponse::~CMsgDOTAGenerateDiretidePrizeListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGenerateDiretidePrizeListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::ArenaDtor(void* object) {
  CMsgDOTAGenerateDiretidePrizeListResponse* _this = reinterpret_cast< CMsgDOTAGenerateDiretidePrizeListResponse* >(object);
  (void)_this;
}
void CMsgDOTAGenerateDiretidePrizeListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAGenerateDiretidePrizeListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_defs_.Clear();
  steam_ids_.Clear();
  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGenerateDiretidePrizeListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 item_defs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 steam_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steam_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prize_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prize_list(&has_bits);
          prize_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAGenerateDiretidePrizeListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_defs(i), target);
  }

  // repeated fixed64 steam_ids = 2;
  for (int i = 0, n = this->_internal_steam_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prize_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGenerateDiretidePrizeListResponse)
  return target;
}

size_t CMsgDOTAGenerateDiretidePrizeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // repeated fixed64 steam_ids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steam_ids_size());
    total_size += data_size;
  }

  // optional uint32 prize_list = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prize_list());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAGenerateDiretidePrizeListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAGenerateDiretidePrizeListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAGenerateDiretidePrizeListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  steam_ids_.MergeFrom(from.steam_ids_);
  if (from._internal_has_prize_list()) {
    _internal_set_prize_list(from._internal_prize_list());
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::InternalSwap(CMsgDOTAGenerateDiretidePrizeListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_defs_.InternalSwap(&other->item_defs_);
  steam_ids_.InternalSwap(&other->steam_ids_);
  swap(prize_list_, other->prize_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGenerateDiretidePrizeListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARewardDiretidePrizes::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARewardDiretidePrizes>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prize_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARewardDiretidePrizes)
}
CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes(const CMsgDOTARewardDiretidePrizes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&prize_list_) -
    reinterpret_cast<char*>(&team_)) + sizeof(prize_list_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARewardDiretidePrizes)
}

void CMsgDOTARewardDiretidePrizes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prize_list_) -
    reinterpret_cast<char*>(&team_)) + sizeof(prize_list_));
}

CMsgDOTARewardDiretidePrizes::~CMsgDOTARewardDiretidePrizes() {
  // @@protoc_insertion_point(destructor:CMsgDOTARewardDiretidePrizes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARewardDiretidePrizes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARewardDiretidePrizes::ArenaDtor(void* object) {
  CMsgDOTARewardDiretidePrizes* _this = reinterpret_cast< CMsgDOTARewardDiretidePrizes* >(object);
  (void)_this;
}
void CMsgDOTARewardDiretidePrizes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARewardDiretidePrizes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARewardDiretidePrizes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARewardDiretidePrizes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prize_list_) -
        reinterpret_cast<char*>(&team_)) + sizeof(prize_list_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARewardDiretidePrizes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prize_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prize_list(&has_bits);
          prize_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARewardDiretidePrizes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARewardDiretidePrizes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional uint32 prize_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prize_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARewardDiretidePrizes)
  return target;
}

size_t CMsgDOTARewardDiretidePrizes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARewardDiretidePrizes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 prize_list = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prize_list());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARewardDiretidePrizes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARewardDiretidePrizes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARewardDiretidePrizes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARewardDiretidePrizes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARewardDiretidePrizes)
    MergeFrom(*source);
  }
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const CMsgDOTARewardDiretidePrizes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARewardDiretidePrizes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      prize_list_ = from.prize_list_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARewardDiretidePrizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const CMsgDOTARewardDiretidePrizes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARewardDiretidePrizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARewardDiretidePrizes::IsInitialized() const {
  return true;
}

void CMsgDOTARewardDiretidePrizes::InternalSwap(CMsgDOTARewardDiretidePrizes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, prize_list_)
      + sizeof(CMsgDOTARewardDiretidePrizes::prize_list_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARewardDiretidePrizes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADiretidePrizesRewardedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADiretidePrizesRewardedResponse>()._has_bits_);
  static void set_has_prize_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADiretidePrizesRewardedResponse)
}
CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse(const CMsgDOTADiretidePrizesRewardedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADiretidePrizesRewardedResponse)
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedCtor() {
prize_list_ = 0u;
}

CMsgDOTADiretidePrizesRewardedResponse::~CMsgDOTADiretidePrizesRewardedResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTADiretidePrizesRewardedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADiretidePrizesRewardedResponse::ArenaDtor(void* object) {
  CMsgDOTADiretidePrizesRewardedResponse* _this = reinterpret_cast< CMsgDOTADiretidePrizesRewardedResponse* >(object);
  (void)_this;
}
void CMsgDOTADiretidePrizesRewardedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADiretidePrizesRewardedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADiretidePrizesRewardedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADiretidePrizesRewardedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADiretidePrizesRewardedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 prize_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prize_list(&has_bits);
          prize_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADiretidePrizesRewardedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADiretidePrizesRewardedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prize_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADiretidePrizesRewardedResponse)
  return target;
}

size_t CMsgDOTADiretidePrizesRewardedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADiretidePrizesRewardedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 prize_list = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prize_list());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADiretidePrizesRewardedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADiretidePrizesRewardedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADiretidePrizesRewardedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADiretidePrizesRewardedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADiretidePrizesRewardedResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADiretidePrizesRewardedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prize_list()) {
    _internal_set_prize_list(from._internal_prize_list());
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADiretidePrizesRewardedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADiretidePrizesRewardedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADiretidePrizesRewardedResponse::IsInitialized() const {
  return true;
}

void CMsgDOTADiretidePrizesRewardedResponse::InternalSwap(CMsgDOTADiretidePrizesRewardedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prize_list_, other->prize_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADiretidePrizesRewardedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAAwardEventPoints_AwardPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAAwardEventPoints_AwardPoints>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_premium_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trade_ban_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eligible_for_periodic_adjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_point_cap_periodic_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAAwardEventPoints.AwardPoints)
}
CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_cap_periodic_resource_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(point_cap_periodic_resource_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAwardEventPoints.AwardPoints)
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&point_cap_periodic_resource_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(point_cap_periodic_resource_id_));
}

CMsgDOTAAwardEventPoints_AwardPoints::~CMsgDOTAAwardEventPoints_AwardPoints() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAwardEventPoints.AwardPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAAwardEventPoints_AwardPoints::ArenaDtor(void* object) {
  CMsgDOTAAwardEventPoints_AwardPoints* _this = reinterpret_cast< CMsgDOTAAwardEventPoints_AwardPoints* >(object);
  (void)_this;
}
void CMsgDOTAAwardEventPoints_AwardPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAAwardEventPoints_AwardPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAAwardEventPoints_AwardPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAAwardEventPoints.AwardPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&point_cap_periodic_resource_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(point_cap_periodic_resource_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAAwardEventPoints_AwardPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 premium_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_premium_points(&has_bits);
          premium_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trade_ban_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_trade_ban_time(&has_bits);
          trade_ban_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool eligible_for_periodic_adjustment = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_eligible_for_periodic_adjustment(&has_bits);
          eligible_for_periodic_adjustment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 point_cap_periodic_resource_id = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_point_cap_periodic_resource_id(&has_bits);
          point_cap_periodic_resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAAwardEventPoints_AwardPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAwardEventPoints.AwardPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional int32 points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_points(), target);
  }

  // optional int32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_premium_points(), target);
  }

  // optional uint32 trade_ban_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_trade_ban_time(), target);
  }

  // optional bool eligible_for_periodic_adjustment = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_eligible_for_periodic_adjustment(), target);
  }

  // optional uint32 point_cap_periodic_resource_id = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_point_cap_periodic_resource_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAwardEventPoints.AwardPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints_AwardPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAAwardEventPoints.AwardPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional int32 points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_points());
    }

    // optional int32 premium_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_premium_points());
    }

    // optional uint32 trade_ban_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trade_ban_time());
    }

    // optional bool eligible_for_periodic_adjustment = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 point_cap_periodic_resource_id = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point_cap_periodic_resource_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAAwardEventPoints.AwardPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints_AwardPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAAwardEventPoints_AwardPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAAwardEventPoints.AwardPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAAwardEventPoints.AwardPoints)
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAAwardEventPoints.AwardPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000004u) {
      premium_points_ = from.premium_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      trade_ban_time_ = from.trade_ban_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      eligible_for_periodic_adjustment_ = from.eligible_for_periodic_adjustment_;
    }
    if (cached_has_bits & 0x00000020u) {
      point_cap_periodic_resource_id_ = from.point_cap_periodic_resource_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAAwardEventPoints.AwardPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAAwardEventPoints.AwardPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints_AwardPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints_AwardPoints::InternalSwap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, point_cap_periodic_resource_id_)
      + sizeof(CMsgDOTAAwardEventPoints_AwardPoints::point_cap_periodic_resource_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAAwardEventPoints_AwardPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAAwardEventPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAAwardEventPoints>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  award_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAAwardEventPoints)
}
CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      award_points_(from.award_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_action_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(audit_action_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAwardEventPoints)
}

void CMsgDOTAAwardEventPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_action_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(audit_action_));
}

CMsgDOTAAwardEventPoints::~CMsgDOTAAwardEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAwardEventPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAAwardEventPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAAwardEventPoints::ArenaDtor(void* object) {
  CMsgDOTAAwardEventPoints* _this = reinterpret_cast< CMsgDOTAAwardEventPoints* >(object);
  (void)_this;
}
void CMsgDOTAAwardEventPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAAwardEventPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAAwardEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAAwardEventPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  award_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_action_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(audit_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAAwardEventPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audit_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_audit_action(&has_bits);
          audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAAwardEventPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAwardEventPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_award_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_award_points(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_id(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  // optional uint32 audit_action = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_audit_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAwardEventPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAAwardEventPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  total_size += 1UL * this->_internal_award_points_size();
  for (const auto& msg : this->award_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 audit_action = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit_action());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAAwardEventPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAAwardEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAAwardEventPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAAwardEventPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAAwardEventPoints)
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints::MergeFrom(const CMsgDOTAAwardEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAAwardEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  award_points_.MergeFrom(from.award_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      audit_action_ = from.audit_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAwardEventPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAAwardEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints::CopyFrom(const CMsgDOTAAwardEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAAwardEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints::InternalSwap(CMsgDOTAAwardEventPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  award_points_.InternalSwap(&other->award_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints, audit_action_)
      + sizeof(CMsgDOTAAwardEventPoints::audit_action_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAAwardEventPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops>()._has_bits_);
  static void set_has_loot_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_no_trade(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_randomize_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}
CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_account_ids_(from.player_account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loot_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_loot_list()) {
    loot_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loot_list(), 
      GetArena());
  }
  ::memcpy(&no_trade_, &from.no_trade_,
    static_cast<size_t>(reinterpret_cast<char*>(&randomize_reward_) -
    reinterpret_cast<char*>(&no_trade_)) + sizeof(randomize_reward_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedCtor() {
loot_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&no_trade_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&randomize_reward_) -
    reinterpret_cast<char*>(&no_trade_)) + sizeof(randomize_reward_));
}

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loot_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::ArenaDtor(void* object) {
  CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* _this = reinterpret_cast< CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* >(object);
  (void)_this;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    loot_list_.ClearNonDefaultToEmpty();
  }
  ::memset(&no_trade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&randomize_reward_) -
      reinterpret_cast<char*>(&no_trade_)) + sizeof(randomize_reward_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string loot_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loot_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 player_account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_trade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_no_trade(&has_bits);
          no_trade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool randomize_reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_randomize_reward(&has_bits);
          randomize_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loot_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loot_list().data(), static_cast<int>(this->_internal_loot_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loot_list(), target);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0, n = this->_internal_player_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_account_ids(i), target);
  }

  // optional bool no_trade = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_no_trade(), target);
  }

  // optional bool randomize_reward = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_randomize_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return target;
}

size_t CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_account_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->player_account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string loot_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loot_list());
    }

    // optional bool no_trade = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool randomize_reward = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_ids_.MergeFrom(from.player_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_loot_list(from._internal_loot_list());
    }
    if (cached_has_bits & 0x00000002u) {
      no_trade_ = from.no_trade_;
    }
    if (cached_has_bits & 0x00000004u) {
      randomize_reward_ = from.randomize_reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::IsInitialized() const {
  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InternalSwap(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_account_ids_.InternalSwap(&other->player_account_ids_);
  loot_list_.Swap(&other->loot_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, randomize_reward_)
      + sizeof(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::randomize_reward_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, no_trade_)>(
          reinterpret_cast<char*>(&no_trade_),
          reinterpret_cast<char*>(&other->no_trade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCSignoutAwardAdditionalDrops::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCSignoutAwardAdditionalDrops>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCSignoutAwardAdditionalDrops)
}
CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drops_(from.drops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCSignoutAwardAdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedCtor() {
match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgServerToGCSignoutAwardAdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCSignoutAwardAdditionalDrops)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCSignoutAwardAdditionalDrops::ArenaDtor(void* object) {
  CMsgServerToGCSignoutAwardAdditionalDrops* _this = reinterpret_cast< CMsgServerToGCSignoutAwardAdditionalDrops* >(object);
  (void)_this;
}
void CMsgServerToGCSignoutAwardAdditionalDrops::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCSignoutAwardAdditionalDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCSignoutAwardAdditionalDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drops_.Clear();
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCSignoutAwardAdditionalDrops::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCSignoutAwardAdditionalDrops::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_drops(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCSignoutAwardAdditionalDrops)
  return target;
}

size_t CMsgServerToGCSignoutAwardAdditionalDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  total_size += 1UL * this->_internal_drops_size();
  for (const auto& msg : this->drops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 match_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCSignoutAwardAdditionalDrops>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCSignoutAwardAdditionalDrops)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCSignoutAwardAdditionalDrops)
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drops_.MergeFrom(from.drops_);
  if (from._internal_has_match_id()) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops::IsInitialized() const {
  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::InternalSwap(CMsgServerToGCSignoutAwardAdditionalDrops* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drops_.InternalSwap(&other->drops_);
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCSignoutAwardAdditionalDrops::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFrostivusTimeElapsed_User::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFrostivusTimeElapsed_User>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_elapsed_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFrostivusTimeElapsed.User)
}
CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User(const CMsgDOTAFrostivusTimeElapsed_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_elapsed_s_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_elapsed_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFrostivusTimeElapsed.User)
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_elapsed_s_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_elapsed_s_));
}

CMsgDOTAFrostivusTimeElapsed_User::~CMsgDOTAFrostivusTimeElapsed_User() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFrostivusTimeElapsed.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFrostivusTimeElapsed_User::ArenaDtor(void* object) {
  CMsgDOTAFrostivusTimeElapsed_User* _this = reinterpret_cast< CMsgDOTAFrostivusTimeElapsed_User* >(object);
  (void)_this;
}
void CMsgDOTAFrostivusTimeElapsed_User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFrostivusTimeElapsed_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFrostivusTimeElapsed_User::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFrostivusTimeElapsed.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_elapsed_s_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_elapsed_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFrostivusTimeElapsed_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_elapsed_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_elapsed_s(&has_bits);
          time_elapsed_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFrostivusTimeElapsed_User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFrostivusTimeElapsed.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 time_elapsed_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_elapsed_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFrostivusTimeElapsed.User)
  return target;
}

size_t CMsgDOTAFrostivusTimeElapsed_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFrostivusTimeElapsed.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 time_elapsed_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_elapsed_s());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFrostivusTimeElapsed.User)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed_User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFrostivusTimeElapsed_User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFrostivusTimeElapsed.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFrostivusTimeElapsed.User)
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFrostivusTimeElapsed.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_elapsed_s_ = from.time_elapsed_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFrostivusTimeElapsed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFrostivusTimeElapsed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed_User::IsInitialized() const {
  return true;
}

void CMsgDOTAFrostivusTimeElapsed_User::InternalSwap(CMsgDOTAFrostivusTimeElapsed_User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, time_elapsed_s_)
      + sizeof(CMsgDOTAFrostivusTimeElapsed_User::time_elapsed_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFrostivusTimeElapsed_User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFrostivusTimeElapsed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFrostivusTimeElapsed>()._has_bits_);
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFrostivusTimeElapsed)
}
CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed(const CMsgDOTAFrostivusTimeElapsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFrostivusTimeElapsed)
}

void CMsgDOTAFrostivusTimeElapsed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(seconds_));
}

CMsgDOTAFrostivusTimeElapsed::~CMsgDOTAFrostivusTimeElapsed() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFrostivusTimeElapsed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFrostivusTimeElapsed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFrostivusTimeElapsed::ArenaDtor(void* object) {
  CMsgDOTAFrostivusTimeElapsed* _this = reinterpret_cast< CMsgDOTAFrostivusTimeElapsed* >(object);
  (void)_this;
}
void CMsgDOTAFrostivusTimeElapsed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFrostivusTimeElapsed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFrostivusTimeElapsed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFrostivusTimeElapsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFrostivusTimeElapsed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFrostivusTimeElapsed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFrostivusTimeElapsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds(), target);
  }

  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_users(i), target, stream);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFrostivusTimeElapsed)
  return target;
}

size_t CMsgDOTAFrostivusTimeElapsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFrostivusTimeElapsed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 seconds = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFrostivusTimeElapsed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFrostivusTimeElapsed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFrostivusTimeElapsed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFrostivusTimeElapsed)
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFrostivusTimeElapsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFrostivusTimeElapsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFrostivusTimeElapsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed::IsInitialized() const {
  return true;
}

void CMsgDOTAFrostivusTimeElapsed::InternalSwap(CMsgDOTAFrostivusTimeElapsed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  users_.InternalSwap(&other->users_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, seconds_)
      + sizeof(CMsgDOTAFrostivusTimeElapsed::seconds_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFrostivusTimeElapsed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerPingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPingRequest>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPingRequest)
}
CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_time_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(request_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPingRequest)
}

void CMsgGCToServerPingRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_time_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(request_time_));
}

CMsgGCToServerPingRequest::~CMsgGCToServerPingRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerPingRequest::ArenaDtor(void* object) {
  CMsgGCToServerPingRequest* _this = reinterpret_cast< CMsgGCToServerPingRequest* >(object);
  (void)_this;
}
void CMsgGCToServerPingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerPingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(request_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 request_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_request_time(&has_bits);
          request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerPingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_request_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPingRequest)
  return target;
}

size_t CMsgGCToServerPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_request_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerPingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerPingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerPingRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingRequest::MergeFrom(const CMsgGCToServerPingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_time_ = from.request_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingRequest::CopyFrom(const CMsgGCToServerPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingRequest::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingRequest::InternalSwap(CMsgGCToServerPingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingRequest, request_time_)
      + sizeof(CMsgGCToServerPingRequest::request_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingRequest, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerPingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPingResponse>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPingResponse)
}
CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(cluster_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPingResponse)
}

void CMsgGCToServerPingResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cluster_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(cluster_));
}

CMsgGCToServerPingResponse::~CMsgGCToServerPingResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerPingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerPingResponse::ArenaDtor(void* object) {
  CMsgGCToServerPingResponse* _this = reinterpret_cast< CMsgGCToServerPingResponse* >(object);
  (void)_this;
}
void CMsgGCToServerPingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerPingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(cluster_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 request_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_request_time(&has_bits);
          request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cluster = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cluster(&has_bits);
          cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerPingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_request_time(), target);
  }

  // optional uint32 cluster = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cluster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPingResponse)
  return target;
}

size_t CMsgGCToServerPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_request_time());
    }

    // optional uint32 cluster = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cluster());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerPingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerPingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerPingResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingResponse::MergeFrom(const CMsgGCToServerPingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      cluster_ = from.cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingResponse::CopyFrom(const CMsgGCToServerPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingResponse::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingResponse::InternalSwap(CMsgGCToServerPingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingResponse, cluster_)
      + sizeof(CMsgGCToServerPingResponse::cluster_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingResponse, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerConsoleCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerConsoleCommand>()._has_bits_);
  static void set_has_console_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerConsoleCommand)
}
CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand(const CMsgGCToServerConsoleCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  console_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_console_command()) {
    console_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_console_command(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerConsoleCommand)
}

void CMsgGCToServerConsoleCommand::SharedCtor() {
console_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToServerConsoleCommand::~CMsgGCToServerConsoleCommand() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerConsoleCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerConsoleCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  console_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToServerConsoleCommand::ArenaDtor(void* object) {
  CMsgGCToServerConsoleCommand* _this = reinterpret_cast< CMsgGCToServerConsoleCommand* >(object);
  (void)_this;
}
void CMsgGCToServerConsoleCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerConsoleCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerConsoleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerConsoleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    console_command_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerConsoleCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string console_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_console_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToServerConsoleCommand.console_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerConsoleCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerConsoleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string console_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_console_command().data(), static_cast<int>(this->_internal_console_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToServerConsoleCommand.console_command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_console_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerConsoleCommand)
  return target;
}

size_t CMsgGCToServerConsoleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerConsoleCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string console_command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_console_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerConsoleCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerConsoleCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerConsoleCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerConsoleCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerConsoleCommand)
    MergeFrom(*source);
  }
}

void CMsgGCToServerConsoleCommand::MergeFrom(const CMsgGCToServerConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_command()) {
    _internal_set_console_command(from._internal_console_command());
  }
}

void CMsgGCToServerConsoleCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerConsoleCommand::CopyFrom(const CMsgGCToServerConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerConsoleCommand::IsInitialized() const {
  return true;
}

void CMsgGCToServerConsoleCommand::InternalSwap(CMsgGCToServerConsoleCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  console_command_.Swap(&other->console_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerConsoleCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerGetEventPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerGetEventPoints>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerGetEventPoints::CMsgServerGetEventPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGetEventPoints)
}
CMsgServerGetEventPoints::CMsgServerGetEventPoints(const CMsgServerGetEventPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_id_(from.account_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerGetEventPoints)
}

void CMsgServerGetEventPoints::SharedCtor() {
event_id_ = 0;
}

CMsgServerGetEventPoints::~CMsgServerGetEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgServerGetEventPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerGetEventPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerGetEventPoints::ArenaDtor(void* object) {
  CMsgServerGetEventPoints* _this = reinterpret_cast< CMsgServerGetEventPoints* >(object);
  (void)_this;
}
void CMsgServerGetEventPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerGetEventPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerGetEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGetEventPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGetEventPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerGetEventPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGetEventPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // repeated uint32 account_id = 2;
  for (int i = 0, n = this->_internal_account_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGetEventPoints)
  return target;
}

size_t CMsgServerGetEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGetEventPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_id_size());
    total_size += data_size;
  }

  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGetEventPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerGetEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerGetEventPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerGetEventPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerGetEventPoints)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPoints::MergeFrom(const CMsgServerGetEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGetEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_id_.MergeFrom(from.account_id_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgServerGetEventPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerGetEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPoints::CopyFrom(const CMsgServerGetEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGetEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPoints::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPoints::InternalSwap(CMsgServerGetEventPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_id_.InternalSwap(&other->account_id_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGetEventPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerGetEventPointsResponse_Points::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerGetEventPointsResponse_Points>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGetEventPointsResponse.Points)
}
CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points(const CMsgServerGetEventPointsResponse_Points& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(owned_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerGetEventPointsResponse.Points)
}

void CMsgServerGetEventPointsResponse_Points::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(owned_));
}

CMsgServerGetEventPointsResponse_Points::~CMsgServerGetEventPointsResponse_Points() {
  // @@protoc_insertion_point(destructor:CMsgServerGetEventPointsResponse.Points)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerGetEventPointsResponse_Points::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerGetEventPointsResponse_Points::ArenaDtor(void* object) {
  CMsgServerGetEventPointsResponse_Points* _this = reinterpret_cast< CMsgServerGetEventPointsResponse_Points* >(object);
  (void)_this;
}
void CMsgServerGetEventPointsResponse_Points::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerGetEventPointsResponse_Points::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerGetEventPointsResponse_Points::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGetEventPointsResponse.Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owned_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(owned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGetEventPointsResponse_Points::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_points_total(&has_bits);
          points_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool owned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_owned(&has_bits);
          owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerGetEventPointsResponse_Points::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGetEventPointsResponse.Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 points_total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_points_total(), target);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_owned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGetEventPointsResponse.Points)
  return target;
}

size_t CMsgServerGetEventPointsResponse_Points::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGetEventPointsResponse.Points)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 points_total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_total());
    }

    // optional bool owned = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerGetEventPointsResponse.Points)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse_Points* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerGetEventPointsResponse_Points>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerGetEventPointsResponse.Points)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerGetEventPointsResponse.Points)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const CMsgServerGetEventPointsResponse_Points& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGetEventPointsResponse.Points)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_total_ = from.points_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      owned_ = from.owned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerGetEventPointsResponse.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const CMsgServerGetEventPointsResponse_Points& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGetEventPointsResponse.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse_Points::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPointsResponse_Points::InternalSwap(CMsgServerGetEventPointsResponse_Points* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, owned_)
      + sizeof(CMsgServerGetEventPointsResponse_Points::owned_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGetEventPointsResponse_Points::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerGetEventPointsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerGetEventPointsResponse>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGetEventPointsResponse)
}
CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse(const CMsgServerGetEventPointsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerGetEventPointsResponse)
}

void CMsgServerGetEventPointsResponse::SharedCtor() {
event_id_ = 0;
}

CMsgServerGetEventPointsResponse::~CMsgServerGetEventPointsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerGetEventPointsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerGetEventPointsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerGetEventPointsResponse::ArenaDtor(void* object) {
  CMsgServerGetEventPointsResponse* _this = reinterpret_cast< CMsgServerGetEventPointsResponse* >(object);
  (void)_this;
}
void CMsgServerGetEventPointsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerGetEventPointsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerGetEventPointsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGetEventPointsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGetEventPointsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerGetEventPointsResponse.Points points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerGetEventPointsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGetEventPointsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // repeated .CMsgServerGetEventPointsResponse.Points points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGetEventPointsResponse)
  return target;
}

size_t CMsgServerGetEventPointsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGetEventPointsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerGetEventPointsResponse.Points points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGetEventPointsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerGetEventPointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerGetEventPointsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerGetEventPointsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerGetEventPointsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse::MergeFrom(const CMsgServerGetEventPointsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGetEventPointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgServerGetEventPointsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerGetEventPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse::CopyFrom(const CMsgServerGetEventPointsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGetEventPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPointsResponse::InternalSwap(CMsgServerGetEventPointsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGetEventPointsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerGrantSurveyPermission_Survey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerGrantSurveyPermission_Survey>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_question_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expire_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_survey_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extra_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_extra_data_32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGrantSurveyPermission.Survey)
}
CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey(const CMsgServerGrantSurveyPermission_Survey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerGrantSurveyPermission.Survey)
}

void CMsgServerGrantSurveyPermission_Survey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(expire_time_));
}

CMsgServerGrantSurveyPermission_Survey::~CMsgServerGrantSurveyPermission_Survey() {
  // @@protoc_insertion_point(destructor:CMsgServerGrantSurveyPermission.Survey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerGrantSurveyPermission_Survey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerGrantSurveyPermission_Survey::ArenaDtor(void* object) {
  CMsgServerGrantSurveyPermission_Survey* _this = reinterpret_cast< CMsgServerGrantSurveyPermission_Survey* >(object);
  (void)_this;
}
void CMsgServerGrantSurveyPermission_Survey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerGrantSurveyPermission_Survey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerGrantSurveyPermission_Survey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGrantSurveyPermission.Survey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expire_time_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(expire_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGrantSurveyPermission_Survey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 question_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_question_id(&has_bits);
          question_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expire_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_expire_time(&has_bits);
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 survey_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_survey_key(&has_bits);
          survey_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 extra_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_extra_data(&has_bits);
          extra_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 extra_data_32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_extra_data_32(&has_bits);
          extra_data_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerGrantSurveyPermission_Survey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGrantSurveyPermission.Survey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 question_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_question_id(), target);
  }

  // optional uint32 expire_time = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expire_time(), target);
  }

  // optional uint64 survey_key = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_survey_key(), target);
  }

  // optional uint64 extra_data = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_extra_data(), target);
  }

  // optional uint64 extra_data_32 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_extra_data_32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGrantSurveyPermission.Survey)
  return target;
}

size_t CMsgServerGrantSurveyPermission_Survey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGrantSurveyPermission.Survey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 question_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_id());
    }

    // optional uint64 survey_key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_survey_key());
    }

    // optional uint64 extra_data = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_extra_data());
    }

    // optional uint64 extra_data_32 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_extra_data_32());
    }

    // optional uint32 expire_time = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expire_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerGrantSurveyPermission.Survey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission_Survey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerGrantSurveyPermission_Survey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerGrantSurveyPermission.Survey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerGrantSurveyPermission.Survey)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGrantSurveyPermission.Survey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_id_ = from.question_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      survey_key_ = from.survey_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      extra_data_ = from.extra_data_;
    }
    if (cached_has_bits & 0x00000010u) {
      extra_data_32_ = from.extra_data_32_;
    }
    if (cached_has_bits & 0x00000020u) {
      expire_time_ = from.expire_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerGrantSurveyPermission.Survey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGrantSurveyPermission.Survey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission_Survey::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermission_Survey::InternalSwap(CMsgServerGrantSurveyPermission_Survey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, expire_time_)
      + sizeof(CMsgServerGrantSurveyPermission_Survey::expire_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGrantSurveyPermission_Survey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerGrantSurveyPermission::_Internal {
 public:
};

CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  surveys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGrantSurveyPermission)
}
CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission(const CMsgServerGrantSurveyPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      surveys_(from.surveys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGrantSurveyPermission)
}

void CMsgServerGrantSurveyPermission::SharedCtor() {
}

CMsgServerGrantSurveyPermission::~CMsgServerGrantSurveyPermission() {
  // @@protoc_insertion_point(destructor:CMsgServerGrantSurveyPermission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerGrantSurveyPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerGrantSurveyPermission::ArenaDtor(void* object) {
  CMsgServerGrantSurveyPermission* _this = reinterpret_cast< CMsgServerGrantSurveyPermission* >(object);
  (void)_this;
}
void CMsgServerGrantSurveyPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerGrantSurveyPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerGrantSurveyPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGrantSurveyPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  surveys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGrantSurveyPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgServerGrantSurveyPermission.Survey surveys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_surveys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerGrantSurveyPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGrantSurveyPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerGrantSurveyPermission.Survey surveys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_surveys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_surveys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGrantSurveyPermission)
  return target;
}

size_t CMsgServerGrantSurveyPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGrantSurveyPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerGrantSurveyPermission.Survey surveys = 1;
  total_size += 1UL * this->_internal_surveys_size();
  for (const auto& msg : this->surveys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGrantSurveyPermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerGrantSurveyPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerGrantSurveyPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerGrantSurveyPermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerGrantSurveyPermission)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission::MergeFrom(const CMsgServerGrantSurveyPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGrantSurveyPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  surveys_.MergeFrom(from.surveys_);
}

void CMsgServerGrantSurveyPermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerGrantSurveyPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission::CopyFrom(const CMsgServerGrantSurveyPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGrantSurveyPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermission::InternalSwap(CMsgServerGrantSurveyPermission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  surveys_.InternalSwap(&other->surveys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGrantSurveyPermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerGrantSurveyPermissionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerGrantSurveyPermissionResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGrantSurveyPermissionResponse)
}
CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse(const CMsgServerGrantSurveyPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerGrantSurveyPermissionResponse)
}

void CMsgServerGrantSurveyPermissionResponse::SharedCtor() {
result_ = 0u;
}

CMsgServerGrantSurveyPermissionResponse::~CMsgServerGrantSurveyPermissionResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerGrantSurveyPermissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerGrantSurveyPermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerGrantSurveyPermissionResponse::ArenaDtor(void* object) {
  CMsgServerGrantSurveyPermissionResponse* _this = reinterpret_cast< CMsgServerGrantSurveyPermissionResponse* >(object);
  (void)_this;
}
void CMsgServerGrantSurveyPermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerGrantSurveyPermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerGrantSurveyPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGrantSurveyPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGrantSurveyPermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerGrantSurveyPermissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGrantSurveyPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGrantSurveyPermissionResponse)
  return target;
}

size_t CMsgServerGrantSurveyPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGrantSurveyPermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerGrantSurveyPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerGrantSurveyPermissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerGrantSurveyPermissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerGrantSurveyPermissionResponse)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGrantSurveyPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerGrantSurveyPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGrantSurveyPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermissionResponse::InternalSwap(CMsgServerGrantSurveyPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGrantSurveyPermissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchConnectionStats_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchConnectionStats_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ping_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_full_resends(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchConnectionStats.Player)
}
CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(const CMsgServerToGCMatchConnectionStats_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&full_resends_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(full_resends_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchConnectionStats.Player)
}

void CMsgServerToGCMatchConnectionStats_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&full_resends_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(full_resends_));
}

CMsgServerToGCMatchConnectionStats_Player::~CMsgServerToGCMatchConnectionStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchConnectionStats.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchConnectionStats_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchConnectionStats_Player::ArenaDtor(void* object) {
  CMsgServerToGCMatchConnectionStats_Player* _this = reinterpret_cast< CMsgServerToGCMatchConnectionStats_Player* >(object);
  (void)_this;
}
void CMsgServerToGCMatchConnectionStats_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchConnectionStats_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchConnectionStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchConnectionStats.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&full_resends_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(full_resends_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchConnectionStats_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_ping_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_avg_ping_ms(&has_bits);
          avg_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float packet_loss = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_packet_loss(&has_bits);
          packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ping_deviation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ping_deviation(&has_bits);
          ping_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 full_resends = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_full_resends(&has_bits);
          full_resends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchConnectionStats_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchConnectionStats.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_ip(), target);
  }

  // optional uint32 avg_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_avg_ping_ms(), target);
  }

  // optional float packet_loss = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_packet_loss(), target);
  }

  // optional float ping_deviation = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ping_deviation(), target);
  }

  // optional uint32 full_resends = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_full_resends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchConnectionStats.Player)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchConnectionStats.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional fixed32 ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 avg_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_ping_ms());
    }

    // optional float packet_loss = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float ping_deviation = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 full_resends = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_full_resends());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchConnectionStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchConnectionStats_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchConnectionStats.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchConnectionStats.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchConnectionStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_ping_ms_ = from.avg_ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      packet_loss_ = from.packet_loss_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_deviation_ = from.ping_deviation_;
    }
    if (cached_has_bits & 0x00000020u) {
      full_resends_ = from.full_resends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchConnectionStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchConnectionStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats_Player::InternalSwap(CMsgServerToGCMatchConnectionStats_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, full_resends_)
      + sizeof(CMsgServerToGCMatchConnectionStats_Player::full_resends_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchConnectionStats_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchConnectionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchConnectionStats>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchConnectionStats)
}
CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(const CMsgServerToGCMatchConnectionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(cluster_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchConnectionStats)
}

void CMsgServerToGCMatchConnectionStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(cluster_id_));
}

CMsgServerToGCMatchConnectionStats::~CMsgServerToGCMatchConnectionStats() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchConnectionStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchConnectionStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchConnectionStats::ArenaDtor(void* object) {
  CMsgServerToGCMatchConnectionStats* _this = reinterpret_cast< CMsgServerToGCMatchConnectionStats* >(object);
  (void)_this;
}
void CMsgServerToGCMatchConnectionStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchConnectionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchConnectionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(cluster_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchConnectionStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_region_id(&has_bits);
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 cluster_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cluster_id(&has_bits);
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchConnectionStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchConnectionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_region_id(), target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_players(i), target, stream);
  }

  // optional uint32 cluster_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cluster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchConnectionStats)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchConnectionStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 region_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 cluster_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cluster_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchConnectionStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchConnectionStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchConnectionStats)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const CMsgServerToGCMatchConnectionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cluster_id_ = from.cluster_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const CMsgServerToGCMatchConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats::InternalSwap(CMsgServerToGCMatchConnectionStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, cluster_id_)
      + sizeof(CMsgServerToGCMatchConnectionStats::cluster_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchConnectionStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerGCUpdateSpectatorCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerGCUpdateSpectatorCount>()._has_bits_);
  static void set_has_spectator_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGCUpdateSpectatorCount)
}
CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(const CMsgServerGCUpdateSpectatorCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spectator_count_ = from.spectator_count_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerGCUpdateSpectatorCount)
}

void CMsgServerGCUpdateSpectatorCount::SharedCtor() {
spectator_count_ = 0u;
}

CMsgServerGCUpdateSpectatorCount::~CMsgServerGCUpdateSpectatorCount() {
  // @@protoc_insertion_point(destructor:CMsgServerGCUpdateSpectatorCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerGCUpdateSpectatorCount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerGCUpdateSpectatorCount::ArenaDtor(void* object) {
  CMsgServerGCUpdateSpectatorCount* _this = reinterpret_cast< CMsgServerGCUpdateSpectatorCount* >(object);
  (void)_this;
}
void CMsgServerGCUpdateSpectatorCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerGCUpdateSpectatorCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerGCUpdateSpectatorCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGCUpdateSpectatorCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectator_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGCUpdateSpectatorCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 spectator_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spectator_count(&has_bits);
          spectator_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerGCUpdateSpectatorCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGCUpdateSpectatorCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spectator_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spectator_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGCUpdateSpectatorCount)
  return target;
}

size_t CMsgServerGCUpdateSpectatorCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGCUpdateSpectatorCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 spectator_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spectator_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerGCUpdateSpectatorCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGCUpdateSpectatorCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerGCUpdateSpectatorCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerGCUpdateSpectatorCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerGCUpdateSpectatorCount)
    MergeFrom(*source);
  }
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const CMsgServerGCUpdateSpectatorCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGCUpdateSpectatorCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spectator_count()) {
    _internal_set_spectator_count(from._internal_spectator_count());
  }
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerGCUpdateSpectatorCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const CMsgServerGCUpdateSpectatorCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGCUpdateSpectatorCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGCUpdateSpectatorCount::IsInitialized() const {
  return true;
}

void CMsgServerGCUpdateSpectatorCount::InternalSwap(CMsgServerGCUpdateSpectatorCount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spectator_count_, other->spectator_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGCUpdateSpectatorCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSerializedCombatLog_Dictionary_DictString::_Internal {
 public:
  using HasBits = decltype(std::declval<CSerializedCombatLog_Dictionary_DictString>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSerializedCombatLog.Dictionary.DictString)
}
CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(const CSerializedCombatLog_Dictionary_DictString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog.Dictionary.DictString)
}

void CSerializedCombatLog_Dictionary_DictString::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CSerializedCombatLog_Dictionary_DictString::~CSerializedCombatLog_Dictionary_DictString() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog.Dictionary.DictString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSerializedCombatLog_Dictionary_DictString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSerializedCombatLog_Dictionary_DictString::ArenaDtor(void* object) {
  CSerializedCombatLog_Dictionary_DictString* _this = reinterpret_cast< CSerializedCombatLog_Dictionary_DictString* >(object);
  (void)_this;
}
void CSerializedCombatLog_Dictionary_DictString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSerializedCombatLog_Dictionary_DictString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSerializedCombatLog_Dictionary_DictString::Clear() {
// @@protoc_insertion_point(message_clear_start:CSerializedCombatLog.Dictionary.DictString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSerializedCombatLog_Dictionary_DictString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSerializedCombatLog.Dictionary.DictString.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSerializedCombatLog_Dictionary_DictString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog.Dictionary.DictString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSerializedCombatLog.Dictionary.DictString.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog.Dictionary.DictString)
  return target;
}

size_t CSerializedCombatLog_Dictionary_DictString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t CSerializedCombatLog_Dictionary_DictString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSerializedCombatLog.Dictionary.DictString)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary_DictString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSerializedCombatLog_Dictionary_DictString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSerializedCombatLog.Dictionary.DictString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSerializedCombatLog.Dictionary.DictString)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSerializedCombatLog.Dictionary.DictString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSerializedCombatLog.Dictionary.DictString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSerializedCombatLog.Dictionary.DictString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary_DictString::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CSerializedCombatLog_Dictionary_DictString::InternalSwap(CSerializedCombatLog_Dictionary_DictString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSerializedCombatLog_Dictionary_DictString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSerializedCombatLog_Dictionary::_Internal {
 public:
};

CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSerializedCombatLog.Dictionary)
}
CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(const CSerializedCombatLog_Dictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog.Dictionary)
}

void CSerializedCombatLog_Dictionary::SharedCtor() {
}

CSerializedCombatLog_Dictionary::~CSerializedCombatLog_Dictionary() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog.Dictionary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSerializedCombatLog_Dictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSerializedCombatLog_Dictionary::ArenaDtor(void* object) {
  CSerializedCombatLog_Dictionary* _this = reinterpret_cast< CSerializedCombatLog_Dictionary* >(object);
  (void)_this;
}
void CSerializedCombatLog_Dictionary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSerializedCombatLog_Dictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSerializedCombatLog_Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:CSerializedCombatLog.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSerializedCombatLog_Dictionary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSerializedCombatLog_Dictionary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_strings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog.Dictionary)
  return target;
}

size_t CSerializedCombatLog_Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSerializedCombatLog.Dictionary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  total_size += 1UL * this->_internal_strings_size();
  for (const auto& msg : this->strings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSerializedCombatLog_Dictionary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSerializedCombatLog.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSerializedCombatLog_Dictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSerializedCombatLog.Dictionary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSerializedCombatLog.Dictionary)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary::MergeFrom(const CSerializedCombatLog_Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSerializedCombatLog.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strings_.MergeFrom(from.strings_);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSerializedCombatLog.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const CSerializedCombatLog_Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSerializedCombatLog.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(strings_)) return false;
  return true;
}

void CSerializedCombatLog_Dictionary::InternalSwap(CSerializedCombatLog_Dictionary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  strings_.InternalSwap(&other->strings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSerializedCombatLog_Dictionary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSerializedCombatLog::_Internal {
 public:
  using HasBits = decltype(std::declval<CSerializedCombatLog>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSerializedCombatLog_Dictionary& dictionary(const CSerializedCombatLog* msg);
  static void set_has_dictionary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSerializedCombatLog_Dictionary&
CSerializedCombatLog::_Internal::dictionary(const CSerializedCombatLog* msg) {
  return *msg->dictionary_;
}
void CSerializedCombatLog::clear_entries() {
  entries_.Clear();
}
CSerializedCombatLog::CSerializedCombatLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSerializedCombatLog)
}
CSerializedCombatLog::CSerializedCombatLog(const CSerializedCombatLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dictionary()) {
    dictionary_ = new ::CSerializedCombatLog_Dictionary(*from.dictionary_);
  } else {
    dictionary_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog)
}

void CSerializedCombatLog::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dictionary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&dictionary_)) + sizeof(version_));
}

CSerializedCombatLog::~CSerializedCombatLog() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSerializedCombatLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dictionary_;
}

void CSerializedCombatLog::ArenaDtor(void* object) {
  CSerializedCombatLog* _this = reinterpret_cast< CSerializedCombatLog* >(object);
  (void)_this;
}
void CSerializedCombatLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSerializedCombatLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSerializedCombatLog::Clear() {
// @@protoc_insertion_point(message_clear_start:CSerializedCombatLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dictionary_ != nullptr);
    dictionary_->Clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSerializedCombatLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSerializedCombatLog.Dictionary dictionary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dictionary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTACombatLogEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSerializedCombatLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional .CSerializedCombatLog.Dictionary dictionary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dictionary(this), target, stream);
  }

  // repeated .CMsgDOTACombatLogEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog)
  return target;
}

size_t CSerializedCombatLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSerializedCombatLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTACombatLogEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSerializedCombatLog.Dictionary dictionary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dictionary_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSerializedCombatLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSerializedCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSerializedCombatLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSerializedCombatLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSerializedCombatLog)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog::MergeFrom(const CSerializedCombatLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSerializedCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dictionary()->::CSerializedCombatLog_Dictionary::MergeFrom(from._internal_dictionary());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSerializedCombatLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSerializedCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog::CopyFrom(const CSerializedCombatLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSerializedCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog::IsInitialized() const {
  if (_internal_has_dictionary()) {
    if (!dictionary_->IsInitialized()) return false;
  }
  return true;
}

void CSerializedCombatLog::InternalSwap(CSerializedCombatLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSerializedCombatLog, version_)
      + sizeof(CSerializedCombatLog::version_)
      - PROTOBUF_FIELD_OFFSET(CSerializedCombatLog, dictionary_)>(
          reinterpret_cast<char*>(&dictionary_),
          reinterpret_cast<char*>(&other->dictionary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSerializedCombatLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::clear_equips() {
  equips_.Clear();
}
CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}
CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedCtor() {
account_id_ = 0u;
}

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::~CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::ArenaDtor(void* object) {
  CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* _this = reinterpret_cast< CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* >(object);
  (void)_this;
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CAdditionalEquipSlot equips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CAdditionalEquipSlot equips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_equips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAdditionalEquipSlot equips = 2;
  total_size += 1UL * this->_internal_equips_size();
  for (const auto& msg : this->equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InternalSwap(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equips_.InternalSwap(&other->equips_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetAdditionalEquipsResponse::_Internal {
 public:
};

CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetAdditionalEquipsResponse)
}
CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse(const CMsgServerToGCGetAdditionalEquipsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetAdditionalEquipsResponse)
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedCtor() {
}

CMsgServerToGCGetAdditionalEquipsResponse::~CMsgServerToGCGetAdditionalEquipsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetAdditionalEquipsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetAdditionalEquipsResponse::ArenaDtor(void* object) {
  CMsgServerToGCGetAdditionalEquipsResponse* _this = reinterpret_cast< CMsgServerToGCGetAdditionalEquipsResponse* >(object);
  (void)_this;
}
void CMsgServerToGCGetAdditionalEquipsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetAdditionalEquipsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetAdditionalEquipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetAdditionalEquipsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetAdditionalEquipsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetAdditionalEquipsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetAdditionalEquipsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_equips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetAdditionalEquipsResponse)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetAdditionalEquipsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  total_size += 1UL * this->_internal_equips_size();
  for (const auto& msg : this->equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetAdditionalEquipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetAdditionalEquipsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetAdditionalEquipsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetAdditionalEquipsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetAdditionalEquipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetAdditionalEquipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetAdditionalEquipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse::InternalSwap(CMsgServerToGCGetAdditionalEquipsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equips_.InternalSwap(&other->equips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetAdditionalEquipsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetProfileCard::_Internal {
 public:
};

CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetProfileCard)
}
CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard(const CMsgServerToGCGetProfileCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetProfileCard)
}

void CMsgServerToGCGetProfileCard::SharedCtor() {
}

CMsgServerToGCGetProfileCard::~CMsgServerToGCGetProfileCard() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetProfileCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetProfileCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetProfileCard::ArenaDtor(void* object) {
  CMsgServerToGCGetProfileCard* _this = reinterpret_cast< CMsgServerToGCGetProfileCard* >(object);
  (void)_this;
}
void CMsgServerToGCGetProfileCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetProfileCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetProfileCard::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetProfileCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetProfileCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetProfileCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetProfileCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetProfileCard)
  return target;
}

size_t CMsgServerToGCGetProfileCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetProfileCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetProfileCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetProfileCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetProfileCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetProfileCard)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCard::MergeFrom(const CMsgServerToGCGetProfileCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgServerToGCGetProfileCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCard::CopyFrom(const CMsgServerToGCGetProfileCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCard::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetProfileCard::InternalSwap(CMsgServerToGCGetProfileCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetProfileCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetProfileCardResponse::_Internal {
 public:
};

void CMsgServerToGCGetProfileCardResponse::clear_cards() {
  cards_.Clear();
}
CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetProfileCardResponse)
}
CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse(const CMsgServerToGCGetProfileCardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetProfileCardResponse)
}

void CMsgServerToGCGetProfileCardResponse::SharedCtor() {
}

CMsgServerToGCGetProfileCardResponse::~CMsgServerToGCGetProfileCardResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetProfileCardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetProfileCardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetProfileCardResponse::ArenaDtor(void* object) {
  CMsgServerToGCGetProfileCardResponse* _this = reinterpret_cast< CMsgServerToGCGetProfileCardResponse* >(object);
  (void)_this;
}
void CMsgServerToGCGetProfileCardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetProfileCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetProfileCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetProfileCardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetProfileCardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAProfileCard cards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetProfileCardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetProfileCardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAProfileCard cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetProfileCardResponse)
  return target;
}

size_t CMsgServerToGCGetProfileCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetProfileCardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAProfileCard cards = 1;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetProfileCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetProfileCardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetProfileCardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetProfileCardResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const CMsgServerToGCGetProfileCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetProfileCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetProfileCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const CMsgServerToGCGetProfileCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetProfileCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCardResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetProfileCardResponse::InternalSwap(CMsgServerToGCGetProfileCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetProfileCardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCVictoryPredictions_Record::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCVictoryPredictions_Record>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCVictoryPredictions.Record)
}
CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(const CMsgServerToGCVictoryPredictions_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCVictoryPredictions.Record)
}

void CMsgServerToGCVictoryPredictions_Record::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
}

CMsgServerToGCVictoryPredictions_Record::~CMsgServerToGCVictoryPredictions_Record() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCVictoryPredictions.Record)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCVictoryPredictions_Record::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCVictoryPredictions_Record::ArenaDtor(void* object) {
  CMsgServerToGCVictoryPredictions_Record* _this = reinterpret_cast< CMsgServerToGCVictoryPredictions_Record* >(object);
  (void)_this;
}
void CMsgServerToGCVictoryPredictions_Record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCVictoryPredictions_Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCVictoryPredictions_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCVictoryPredictions.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCVictoryPredictions_Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCVictoryPredictions_Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCVictoryPredictions.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // repeated uint64 item_ids = 5;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCVictoryPredictions.Record)
  return target;
}

size_t CMsgServerToGCVictoryPredictions_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCVictoryPredictions.Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCVictoryPredictions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions_Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCVictoryPredictions_Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCVictoryPredictions.Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCVictoryPredictions.Record)
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCVictoryPredictions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCVictoryPredictions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCVictoryPredictions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions_Record::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions_Record::InternalSwap(CMsgServerToGCVictoryPredictions_Record* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, account_id_)
      + sizeof(CMsgServerToGCVictoryPredictions_Record::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCVictoryPredictions_Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCVictoryPredictions::_Internal {
 public:
};

CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCVictoryPredictions)
}
CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(const CMsgServerToGCVictoryPredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCVictoryPredictions)
}

void CMsgServerToGCVictoryPredictions::SharedCtor() {
}

CMsgServerToGCVictoryPredictions::~CMsgServerToGCVictoryPredictions() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCVictoryPredictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCVictoryPredictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCVictoryPredictions::ArenaDtor(void* object) {
  CMsgServerToGCVictoryPredictions* _this = reinterpret_cast< CMsgServerToGCVictoryPredictions* >(object);
  (void)_this;
}
void CMsgServerToGCVictoryPredictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCVictoryPredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCVictoryPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCVictoryPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCVictoryPredictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCVictoryPredictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCVictoryPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCVictoryPredictions)
  return target;
}

size_t CMsgServerToGCVictoryPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCVictoryPredictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCVictoryPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCVictoryPredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCVictoryPredictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCVictoryPredictions)
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const CMsgServerToGCVictoryPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCVictoryPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCVictoryPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const CMsgServerToGCVictoryPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCVictoryPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions::InternalSwap(CMsgServerToGCVictoryPredictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCVictoryPredictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRequestStatus::_Internal {
 public:
};

CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestStatus)
}
CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(const CMsgServerToGCRequestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestStatus)
}

void CMsgServerToGCRequestStatus::SharedCtor() {
}

CMsgServerToGCRequestStatus::~CMsgServerToGCRequestStatus() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRequestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCRequestStatus::ArenaDtor(void* object) {
  CMsgServerToGCRequestStatus* _this = reinterpret_cast< CMsgServerToGCRequestStatus* >(object);
  (void)_this;
}
void CMsgServerToGCRequestStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRequestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRequestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRequestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestStatus)
  return target;
}

size_t CMsgServerToGCRequestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRequestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRequestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRequestStatus)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus::MergeFrom(const CMsgServerToGCRequestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgServerToGCRequestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus::CopyFrom(const CMsgServerToGCRequestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestStatus::InternalSwap(CMsgServerToGCRequestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRequestStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRequestStatus_Response>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestStatus_Response)
}
CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(const CMsgServerToGCRequestStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestStatus_Response)
}

void CMsgServerToGCRequestStatus_Response::SharedCtor() {
response_ = 0u;
}

CMsgServerToGCRequestStatus_Response::~CMsgServerToGCRequestStatus_Response() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestStatus_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRequestStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCRequestStatus_Response::ArenaDtor(void* object) {
  CMsgServerToGCRequestStatus_Response* _this = reinterpret_cast< CMsgServerToGCRequestStatus_Response* >(object);
  (void)_this;
}
void CMsgServerToGCRequestStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRequestStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRequestStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRequestStatus_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestStatus_Response)
  return target;
}

size_t CMsgServerToGCRequestStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestStatus_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 response = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRequestStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRequestStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRequestStatus_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRequestStatus_Response)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const CMsgServerToGCRequestStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _internal_set_response(from._internal_response());
  }
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRequestStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const CMsgServerToGCRequestStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus_Response::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestStatus_Response::InternalSwap(CMsgServerToGCRequestStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestStatus_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutAssassinMiniGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutAssassinMiniGameInfo>()._has_bits_);
  static void set_has_assassin_won(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contract_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_complete_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pa_is_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  winning_players_(arena),
  losing_players_(arena),
  arcana_owners_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutAssassinMiniGameInfo)
}
CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(const CMsgSignOutAssassinMiniGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      winning_players_(from.winning_players_),
      losing_players_(from.losing_players_),
      arcana_owners_(from.arcana_owners_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_hero_id_, &from.target_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_complete_time_) -
    reinterpret_cast<char*>(&target_hero_id_)) + sizeof(contract_complete_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutAssassinMiniGameInfo)
}

void CMsgSignOutAssassinMiniGameInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contract_complete_time_) -
    reinterpret_cast<char*>(&target_hero_id_)) + sizeof(contract_complete_time_));
}

CMsgSignOutAssassinMiniGameInfo::~CMsgSignOutAssassinMiniGameInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutAssassinMiniGameInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutAssassinMiniGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutAssassinMiniGameInfo::ArenaDtor(void* object) {
  CMsgSignOutAssassinMiniGameInfo* _this = reinterpret_cast< CMsgSignOutAssassinMiniGameInfo* >(object);
  (void)_this;
}
void CMsgSignOutAssassinMiniGameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutAssassinMiniGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutAssassinMiniGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutAssassinMiniGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winning_players_.Clear();
  losing_players_.Clear();
  arcana_owners_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&target_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contract_complete_time_) -
        reinterpret_cast<char*>(&target_hero_id_)) + sizeof(contract_complete_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutAssassinMiniGameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 winning_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_winning_players(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_winning_players(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 losing_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_losing_players(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_losing_players(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 arcana_owners = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_arcana_owners(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_arcana_owners(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool assassin_won = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_assassin_won(&has_bits);
          assassin_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_target_hero_id(&has_bits);
          target_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contract_completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_contract_completed(&has_bits);
          contract_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float contract_complete_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_contract_complete_time(&has_bits);
          contract_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool pa_is_radiant = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pa_is_radiant(&has_bits);
          pa_is_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutAssassinMiniGameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutAssassinMiniGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  for (int i = 0, n = this->_internal_winning_players_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_winning_players(i), target);
  }

  // repeated fixed64 losing_players = 2;
  for (int i = 0, n = this->_internal_losing_players_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_losing_players(i), target);
  }

  // repeated fixed64 arcana_owners = 3;
  for (int i = 0, n = this->_internal_arcana_owners_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_arcana_owners(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool assassin_won = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_assassin_won(), target);
  }

  // optional uint32 target_hero_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_hero_id(), target);
  }

  // optional bool contract_completed = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_contract_completed(), target);
  }

  // optional float contract_complete_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_contract_complete_time(), target);
  }

  // optional bool pa_is_radiant = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_pa_is_radiant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutAssassinMiniGameInfo)
  return target;
}

size_t CMsgSignOutAssassinMiniGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutAssassinMiniGameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_winning_players_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_winning_players_size());
    total_size += data_size;
  }

  // repeated fixed64 losing_players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_losing_players_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_losing_players_size());
    total_size += data_size;
  }

  // repeated fixed64 arcana_owners = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arcana_owners_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arcana_owners_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 target_hero_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_hero_id());
    }

    // optional bool assassin_won = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool contract_completed = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pa_is_radiant = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float contract_complete_time = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutAssassinMiniGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutAssassinMiniGameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutAssassinMiniGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutAssassinMiniGameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutAssassinMiniGameInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutAssassinMiniGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winning_players_.MergeFrom(from.winning_players_);
  losing_players_.MergeFrom(from.losing_players_);
  arcana_owners_.MergeFrom(from.arcana_owners_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      target_hero_id_ = from.target_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      assassin_won_ = from.assassin_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      contract_completed_ = from.contract_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      pa_is_radiant_ = from.pa_is_radiant_;
    }
    if (cached_has_bits & 0x00000010u) {
      contract_complete_time_ = from.contract_complete_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutAssassinMiniGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutAssassinMiniGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutAssassinMiniGameInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutAssassinMiniGameInfo::InternalSwap(CMsgSignOutAssassinMiniGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  winning_players_.InternalSwap(&other->winning_players_);
  losing_players_.InternalSwap(&other->losing_players_);
  arcana_owners_.InternalSwap(&other->arcana_owners_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, contract_complete_time_)
      + sizeof(CMsgSignOutAssassinMiniGameInfo::contract_complete_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, target_hero_id_)>(
          reinterpret_cast<char*>(&target_hero_id_),
          reinterpret_cast<char*>(&other->target_hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutAssassinMiniGameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetIngameEventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetIngameEventData>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetIngameEventData)
}
CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData(const CMsgServerToGCGetIngameEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetIngameEventData)
}

void CMsgServerToGCGetIngameEventData::SharedCtor() {
event_ = 0;
}

CMsgServerToGCGetIngameEventData::~CMsgServerToGCGetIngameEventData() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetIngameEventData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetIngameEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetIngameEventData::ArenaDtor(void* object) {
  CMsgServerToGCGetIngameEventData* _this = reinterpret_cast< CMsgServerToGCGetIngameEventData* >(object);
  (void)_this;
}
void CMsgServerToGCGetIngameEventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetIngameEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetIngameEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetIngameEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetIngameEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetIngameEventData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetIngameEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetIngameEventData)
  return target;
}

size_t CMsgServerToGCGetIngameEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetIngameEventData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EEvent event = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetIngameEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetIngameEventData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetIngameEventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetIngameEventData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetIngameEventData)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const CMsgServerToGCGetIngameEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetIngameEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_set_event(from._internal_event());
  }
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetIngameEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const CMsgServerToGCGetIngameEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetIngameEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetIngameEventData::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetIngameEventData::InternalSwap(CMsgServerToGCGetIngameEventData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetIngameEventData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerIngameEventDataOraclePA::_Internal {
 public:
};

CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_hero_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerIngameEventDataOraclePA)
}
CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA(const CMsgGCToServerIngameEventDataOraclePA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_hero_ids_(from.target_hero_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerIngameEventDataOraclePA)
}

void CMsgGCToServerIngameEventDataOraclePA::SharedCtor() {
}

CMsgGCToServerIngameEventDataOraclePA::~CMsgGCToServerIngameEventDataOraclePA() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerIngameEventDataOraclePA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerIngameEventDataOraclePA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerIngameEventDataOraclePA::ArenaDtor(void* object) {
  CMsgGCToServerIngameEventDataOraclePA* _this = reinterpret_cast< CMsgGCToServerIngameEventDataOraclePA* >(object);
  (void)_this;
}
void CMsgGCToServerIngameEventDataOraclePA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerIngameEventDataOraclePA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerIngameEventDataOraclePA::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerIngameEventDataOraclePA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_hero_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerIngameEventDataOraclePA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 target_hero_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_target_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_target_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerIngameEventDataOraclePA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerIngameEventDataOraclePA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_hero_ids = 1;
  for (int i = 0, n = this->_internal_target_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_hero_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerIngameEventDataOraclePA)
  return target;
}

size_t CMsgGCToServerIngameEventDataOraclePA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerIngameEventDataOraclePA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 target_hero_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->target_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_target_hero_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerIngameEventDataOraclePA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerIngameEventDataOraclePA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerIngameEventDataOraclePA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerIngameEventDataOraclePA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerIngameEventDataOraclePA)
    MergeFrom(*source);
  }
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerIngameEventDataOraclePA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_hero_ids_.MergeFrom(from.target_hero_ids_);
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerIngameEventDataOraclePA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerIngameEventDataOraclePA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerIngameEventDataOraclePA::IsInitialized() const {
  return true;
}

void CMsgGCToServerIngameEventDataOraclePA::InternalSwap(CMsgGCToServerIngameEventDataOraclePA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_hero_ids_.InternalSwap(&other->target_hero_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerIngameEventDataOraclePA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCKillSummaries_KillSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCKillSummaries_KillSummary>()._has_bits_);
  static void set_has_killer_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_victim_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kill_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCKillSummaries.KillSummary)
}
CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(const CMsgServerToGCKillSummaries_KillSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&killer_hero_id_, &from.killer_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_count_) -
    reinterpret_cast<char*>(&killer_hero_id_)) + sizeof(kill_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCKillSummaries.KillSummary)
}

void CMsgServerToGCKillSummaries_KillSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&killer_hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kill_count_) -
    reinterpret_cast<char*>(&killer_hero_id_)) + sizeof(kill_count_));
}

CMsgServerToGCKillSummaries_KillSummary::~CMsgServerToGCKillSummaries_KillSummary() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCKillSummaries.KillSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCKillSummaries_KillSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCKillSummaries_KillSummary::ArenaDtor(void* object) {
  CMsgServerToGCKillSummaries_KillSummary* _this = reinterpret_cast< CMsgServerToGCKillSummaries_KillSummary* >(object);
  (void)_this;
}
void CMsgServerToGCKillSummaries_KillSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCKillSummaries_KillSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCKillSummaries_KillSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCKillSummaries.KillSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&killer_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kill_count_) -
        reinterpret_cast<char*>(&killer_hero_id_)) + sizeof(kill_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCKillSummaries_KillSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 killer_hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_killer_hero_id(&has_bits);
          killer_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 victim_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_victim_hero_id(&has_bits);
          victim_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kill_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kill_count(&has_bits);
          kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCKillSummaries_KillSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCKillSummaries.KillSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_killer_hero_id(), target);
  }

  // optional uint32 victim_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_victim_hero_id(), target);
  }

  // optional uint32 kill_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kill_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCKillSummaries.KillSummary)
  return target;
}

size_t CMsgServerToGCKillSummaries_KillSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCKillSummaries.KillSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 killer_hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killer_hero_id());
    }

    // optional uint32 victim_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim_hero_id());
    }

    // optional uint32 kill_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kill_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCKillSummaries.KillSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries_KillSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCKillSummaries_KillSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCKillSummaries.KillSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCKillSummaries.KillSummary)
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCKillSummaries.KillSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      killer_hero_id_ = from.killer_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      victim_hero_id_ = from.victim_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kill_count_ = from.kill_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCKillSummaries.KillSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCKillSummaries.KillSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries_KillSummary::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries_KillSummary::InternalSwap(CMsgServerToGCKillSummaries_KillSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, kill_count_)
      + sizeof(CMsgServerToGCKillSummaries_KillSummary::kill_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, killer_hero_id_)>(
          reinterpret_cast<char*>(&killer_hero_id_),
          reinterpret_cast<char*>(&other->killer_hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCKillSummaries_KillSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCKillSummaries::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCKillSummaries>()._has_bits_);
  static void set_has_ingameevent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  summaries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCKillSummaries)
}
CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(const CMsgServerToGCKillSummaries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      summaries_(from.summaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ingameevent_id_ = from.ingameevent_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCKillSummaries)
}

void CMsgServerToGCKillSummaries::SharedCtor() {
ingameevent_id_ = 0u;
}

CMsgServerToGCKillSummaries::~CMsgServerToGCKillSummaries() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCKillSummaries)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCKillSummaries::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCKillSummaries::ArenaDtor(void* object) {
  CMsgServerToGCKillSummaries* _this = reinterpret_cast< CMsgServerToGCKillSummaries* >(object);
  (void)_this;
}
void CMsgServerToGCKillSummaries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCKillSummaries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCKillSummaries::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCKillSummaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summaries_.Clear();
  ingameevent_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCKillSummaries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ingameevent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ingameevent_id(&has_bits);
          ingameevent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCKillSummaries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCKillSummaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ingameevent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ingameevent_id(), target);
  }

  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summaries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_summaries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCKillSummaries)
  return target;
}

size_t CMsgServerToGCKillSummaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCKillSummaries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  total_size += 1UL * this->_internal_summaries_size();
  for (const auto& msg : this->summaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 ingameevent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ingameevent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCKillSummaries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCKillSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCKillSummaries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCKillSummaries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCKillSummaries)
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries::MergeFrom(const CMsgServerToGCKillSummaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCKillSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summaries_.MergeFrom(from.summaries_);
  if (from._internal_has_ingameevent_id()) {
    _internal_set_ingameevent_id(from._internal_ingameevent_id());
  }
}

void CMsgServerToGCKillSummaries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCKillSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries::CopyFrom(const CMsgServerToGCKillSummaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCKillSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries::InternalSwap(CMsgServerToGCKillSummaries* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  summaries_.InternalSwap(&other->summaries_);
  swap(ingameevent_id_, other->ingameevent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCKillSummaries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerPredictionResult_Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPredictionResult_Prediction>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_fails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  granted_item_defs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPredictionResult.Prediction)
}
CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(const CMsgGCToServerPredictionResult_Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      granted_item_defs_(from.granted_item_defs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPredictionResult.Prediction)
}

void CMsgGCToServerPredictionResult_Prediction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_fails_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(num_fails_));
result_ = 1;
}

CMsgGCToServerPredictionResult_Prediction::~CMsgGCToServerPredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPredictionResult.Prediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerPredictionResult_Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerPredictionResult_Prediction::ArenaDtor(void* object) {
  CMsgGCToServerPredictionResult_Prediction* _this = reinterpret_cast< CMsgGCToServerPredictionResult_Prediction* >(object);
  (void)_this;
}
void CMsgGCToServerPredictionResult_Prediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerPredictionResult_Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerPredictionResult_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPredictionResult.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  granted_item_defs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fails_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(num_fails_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPredictionResult_Prediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_correct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_correct(&has_bits);
          num_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_fails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_fails(&has_bits);
          num_fails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGCToServerPredictionResult_Prediction_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 granted_item_defs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_granted_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_granted_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerPredictionResult_Prediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPredictionResult.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_fails(), target);
  }

  // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0, n = this->_internal_granted_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_granted_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPredictionResult.Prediction)
  return target;
}

size_t CMsgGCToServerPredictionResult_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPredictionResult.Prediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 granted_item_defs = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->granted_item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_granted_item_defs_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional uint32 num_correct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_correct());
    }

    // optional uint32 num_fails = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_fails());
    }

    // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerPredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult_Prediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerPredictionResult_Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerPredictionResult.Prediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerPredictionResult.Prediction)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  granted_item_defs_.MergeFrom(from.granted_item_defs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_correct_ = from.num_correct_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_fails_ = from.num_fails_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerPredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult_Prediction::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult_Prediction::InternalSwap(CMsgGCToServerPredictionResult_Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  granted_item_defs_.InternalSwap(&other->granted_item_defs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, num_fails_)
      + sizeof(CMsgGCToServerPredictionResult_Prediction::num_fails_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, item_def_)>(
          reinterpret_cast<char*>(&item_def_),
          reinterpret_cast<char*>(&other->item_def_));
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPredictionResult_Prediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerPredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPredictionResult>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predictions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPredictionResult)
}
CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(const CMsgGCToServerPredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPredictionResult)
}

void CMsgGCToServerPredictionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
}

CMsgGCToServerPredictionResult::~CMsgGCToServerPredictionResult() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPredictionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerPredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerPredictionResult::ArenaDtor(void* object) {
  CMsgGCToServerPredictionResult* _this = reinterpret_cast< CMsgGCToServerPredictionResult* >(object);
  (void)_this;
}
void CMsgGCToServerPredictionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerPredictionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerPredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPredictionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correct_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPredictionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool correct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_correct(&has_bits);
          correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerPredictionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPredictionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_correct(), target);
  }

  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_predictions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPredictionResult)
  return target;
}

size_t CMsgGCToServerPredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPredictionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  total_size += 1UL * this->_internal_predictions_size();
  for (const auto& msg : this->predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPredictionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerPredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerPredictionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerPredictionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerPredictionResult)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult::MergeFrom(const CMsgGCToServerPredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      correct_ = from.correct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPredictionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult::CopyFrom(const CMsgGCToServerPredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult::InternalSwap(CMsgGCToServerPredictionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predictions_.InternalSwap(&other->predictions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult, correct_)
      + sizeof(CMsgGCToServerPredictionResult::correct_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPredictionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCLockCharmTrading::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCLockCharmTrading>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCLockCharmTrading)
}
CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(const CMsgServerToGCLockCharmTrading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCLockCharmTrading)
}

void CMsgServerToGCLockCharmTrading::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
}

CMsgServerToGCLockCharmTrading::~CMsgServerToGCLockCharmTrading() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCLockCharmTrading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCLockCharmTrading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCLockCharmTrading::ArenaDtor(void* object) {
  CMsgServerToGCLockCharmTrading* _this = reinterpret_cast< CMsgServerToGCLockCharmTrading* >(object);
  (void)_this;
}
void CMsgServerToGCLockCharmTrading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCLockCharmTrading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCLockCharmTrading::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCLockCharmTrading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCLockCharmTrading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCLockCharmTrading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCLockCharmTrading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCLockCharmTrading)
  return target;
}

size_t CMsgServerToGCLockCharmTrading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCLockCharmTrading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCLockCharmTrading)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCLockCharmTrading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCLockCharmTrading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCLockCharmTrading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCLockCharmTrading)
    MergeFrom(*source);
  }
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const CMsgServerToGCLockCharmTrading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCLockCharmTrading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCLockCharmTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const CMsgServerToGCLockCharmTrading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCLockCharmTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCLockCharmTrading::IsInitialized() const {
  return true;
}

void CMsgServerToGCLockCharmTrading::InternalSwap(CMsgServerToGCLockCharmTrading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, account_id_)
      + sizeof(CMsgServerToGCLockCharmTrading::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCLockCharmTrading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutUpdatePlayerChallenge_Challenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutUpdatePlayerChallenge_Challenge>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
}
CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(const CMsgSignOutUpdatePlayerChallenge_Challenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_rank_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_rank_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_rank_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_rank_));
}

CMsgSignOutUpdatePlayerChallenge_Challenge::~CMsgSignOutUpdatePlayerChallenge_Challenge() {
  // @@protoc_insertion_point(destructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::ArenaDtor(void* object) {
  CMsgSignOutUpdatePlayerChallenge_Challenge* _this = reinterpret_cast< CMsgSignOutUpdatePlayerChallenge_Challenge* >(object);
  (void)_this;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_rank_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutUpdatePlayerChallenge_Challenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_id(&has_bits);
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_rank(&has_bits);
          challenge_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutUpdatePlayerChallenge_Challenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_id(), target);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_progress(), target);
  }

  // optional uint32 challenge_rank = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutUpdatePlayerChallenge.Challenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge_Challenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sequence_id());
    }

    // optional uint32 progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress());
    }

    // optional uint32 challenge_rank = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge_Challenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutUpdatePlayerChallenge_Challenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutUpdatePlayerChallenge.Challenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutUpdatePlayerChallenge.Challenge)
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_rank_ = from.challenge_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge_Challenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, challenge_rank_)
      + sizeof(CMsgSignOutUpdatePlayerChallenge_Challenge::challenge_rank_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutUpdatePlayerChallenge_Challenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutUpdatePlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutUpdatePlayerChallenge>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  completed_(arena),
  rerolled_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutUpdatePlayerChallenge)
}
CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(const CMsgSignOutUpdatePlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      completed_(from.completed_),
      rerolled_(from.rerolled_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutUpdatePlayerChallenge)
}

void CMsgSignOutUpdatePlayerChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
}

CMsgSignOutUpdatePlayerChallenge::~CMsgSignOutUpdatePlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgSignOutUpdatePlayerChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutUpdatePlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutUpdatePlayerChallenge::ArenaDtor(void* object) {
  CMsgSignOutUpdatePlayerChallenge* _this = reinterpret_cast< CMsgSignOutUpdatePlayerChallenge* >(object);
  (void)_this;
}
void CMsgSignOutUpdatePlayerChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutUpdatePlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutUpdatePlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutUpdatePlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  completed_.Clear();
  rerolled_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutUpdatePlayerChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_completed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rerolled(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutUpdatePlayerChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutUpdatePlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_completed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_completed(i), target, stream);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rerolled_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rerolled(i), target, stream);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_match_id(), target);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutUpdatePlayerChallenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutUpdatePlayerChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  total_size += 1UL * this->_internal_completed_size();
  for (const auto& msg : this->completed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  total_size += 1UL * this->_internal_rerolled_size();
  for (const auto& msg : this->rerolled_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutUpdatePlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutUpdatePlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutUpdatePlayerChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutUpdatePlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutUpdatePlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  completed_.MergeFrom(from.completed_);
  rerolled_.MergeFrom(from.rerolled_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutUpdatePlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutUpdatePlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  completed_.InternalSwap(&other->completed_);
  rerolled_.InternalSwap(&other->rerolled_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, match_id_)
      + sizeof(CMsgSignOutUpdatePlayerChallenge::match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutUpdatePlayerChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRerollPlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRerollPlayerChallenge>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgClientToGCRerollPlayerChallenge& reroll_msg(const CMsgServerToGCRerollPlayerChallenge* msg);
  static void set_has_reroll_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientToGCRerollPlayerChallenge&
CMsgServerToGCRerollPlayerChallenge::_Internal::reroll_msg(const CMsgServerToGCRerollPlayerChallenge* msg) {
  return *msg->reroll_msg_;
}
void CMsgServerToGCRerollPlayerChallenge::clear_reroll_msg() {
  if (reroll_msg_ != nullptr) reroll_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRerollPlayerChallenge)
}
CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(const CMsgServerToGCRerollPlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reroll_msg()) {
    reroll_msg_ = new ::CMsgClientToGCRerollPlayerChallenge(*from.reroll_msg_);
  } else {
    reroll_msg_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRerollPlayerChallenge)
}

void CMsgServerToGCRerollPlayerChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reroll_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&reroll_msg_)) + sizeof(account_id_));
}

CMsgServerToGCRerollPlayerChallenge::~CMsgServerToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRerollPlayerChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRerollPlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reroll_msg_;
}

void CMsgServerToGCRerollPlayerChallenge::ArenaDtor(void* object) {
  CMsgServerToGCRerollPlayerChallenge* _this = reinterpret_cast< CMsgServerToGCRerollPlayerChallenge* >(object);
  (void)_this;
}
void CMsgServerToGCRerollPlayerChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRerollPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRerollPlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reroll_msg_ != nullptr);
    reroll_msg_->Clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRerollPlayerChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reroll_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRerollPlayerChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRerollPlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reroll_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRerollPlayerChallenge)
  return target;
}

size_t CMsgServerToGCRerollPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRerollPlayerChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reroll_msg_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRerollPlayerChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRerollPlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRerollPlayerChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRerollPlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reroll_msg()->::CMsgClientToGCRerollPlayerChallenge::MergeFrom(from._internal_reroll_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRerollPlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgServerToGCRerollPlayerChallenge::InternalSwap(CMsgServerToGCRerollPlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, account_id_)
      + sizeof(CMsgServerToGCRerollPlayerChallenge::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, reroll_msg_)>(
          reinterpret_cast<char*>(&reroll_msg_),
          reinterpret_cast<char*>(&other->reroll_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRerollPlayerChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutWagerStats_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutWagerStats_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutWagerStats.Player)
}
CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player(const CMsgSignOutWagerStats_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wager_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutWagerStats.Player)
}

void CMsgSignOutWagerStats_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wager_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_));
}

CMsgSignOutWagerStats_Player::~CMsgSignOutWagerStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgSignOutWagerStats.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutWagerStats_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutWagerStats_Player::ArenaDtor(void* object) {
  CMsgSignOutWagerStats_Player* _this = reinterpret_cast< CMsgSignOutWagerStats_Player* >(object);
  (void)_this;
}
void CMsgSignOutWagerStats_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutWagerStats_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutWagerStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutWagerStats.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(wager_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutWagerStats_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winnings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_winnings(&has_bits);
          winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_wager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_wager(&has_bits);
          max_wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wager = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wager(&has_bits);
          wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutWagerStats_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutWagerStats.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_winnings(), target);
  }

  // optional uint32 max_wager = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_wager(), target);
  }

  // optional uint32 wager = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wager(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutWagerStats.Player)
  return target;
}

size_t CMsgSignOutWagerStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutWagerStats.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winnings());
    }

    // optional uint32 max_wager = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_wager());
    }

    // optional uint32 wager = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutWagerStats_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutWagerStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutWagerStats_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutWagerStats_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutWagerStats.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutWagerStats.Player)
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats_Player::MergeFrom(const CMsgSignOutWagerStats_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutWagerStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winnings_ = from.winnings_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_wager_ = from.max_wager_;
    }
    if (cached_has_bits & 0x00000008u) {
      wager_ = from.wager_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutWagerStats_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutWagerStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats_Player::CopyFrom(const CMsgSignOutWagerStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutWagerStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutWagerStats_Player::InternalSwap(CMsgSignOutWagerStats_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutWagerStats_Player, wager_)
      + sizeof(CMsgSignOutWagerStats_Player::wager_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutWagerStats_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutWagerStats_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutWagerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutWagerStats>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutWagerStats::CMsgSignOutWagerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutWagerStats)
}
CMsgSignOutWagerStats::CMsgSignOutWagerStats(const CMsgSignOutWagerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutWagerStats)
}

void CMsgSignOutWagerStats::SharedCtor() {
event_id_ = 0;
}

CMsgSignOutWagerStats::~CMsgSignOutWagerStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutWagerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutWagerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutWagerStats::ArenaDtor(void* object) {
  CMsgSignOutWagerStats* _this = reinterpret_cast< CMsgSignOutWagerStats* >(object);
  (void)_this;
}
void CMsgSignOutWagerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutWagerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutWagerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutWagerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutWagerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutWagerStats.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutWagerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutWagerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutWagerStats.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutWagerStats)
  return target;
}

size_t CMsgSignOutWagerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutWagerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutWagerStats.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutWagerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutWagerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutWagerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutWagerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutWagerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutWagerStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats::MergeFrom(const CMsgSignOutWagerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutWagerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgSignOutWagerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutWagerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats::CopyFrom(const CMsgSignOutWagerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutWagerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats::IsInitialized() const {
  return true;
}

void CMsgSignOutWagerStats::InternalSwap(CMsgSignOutWagerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutWagerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpendWager_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpendWager_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wager_token_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSpendWager_Player::CMsgSpendWager_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpendWager.Player)
}
CMsgSpendWager_Player::CMsgSpendWager_Player(const CMsgSpendWager_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wager_token_item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_token_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpendWager.Player)
}

void CMsgSpendWager_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wager_token_item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_token_item_id_));
}

CMsgSpendWager_Player::~CMsgSpendWager_Player() {
  // @@protoc_insertion_point(destructor:CMsgSpendWager.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpendWager_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSpendWager_Player::ArenaDtor(void* object) {
  CMsgSpendWager_Player* _this = reinterpret_cast< CMsgSpendWager_Player* >(object);
  (void)_this;
}
void CMsgSpendWager_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpendWager_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpendWager_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpendWager.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_token_item_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(wager_token_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpendWager_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wager = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wager(&has_bits);
          wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 wager_token_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wager_token_item_id(&has_bits);
          wager_token_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpendWager_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpendWager.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 wager = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wager(), target);
  }

  // optional uint64 wager_token_item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_wager_token_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpendWager.Player)
  return target;
}

size_t CMsgSpendWager_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpendWager.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 wager = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager());
    }

    // optional uint64 wager_token_item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_wager_token_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpendWager_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpendWager.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpendWager_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpendWager_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpendWager.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpendWager.Player)
    MergeFrom(*source);
  }
}

void CMsgSpendWager_Player::MergeFrom(const CMsgSpendWager_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpendWager.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wager_ = from.wager_;
    }
    if (cached_has_bits & 0x00000004u) {
      wager_token_item_id_ = from.wager_token_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpendWager_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpendWager.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpendWager_Player::CopyFrom(const CMsgSpendWager_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpendWager.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager_Player::IsInitialized() const {
  return true;
}

void CMsgSpendWager_Player::InternalSwap(CMsgSpendWager_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpendWager_Player, wager_token_item_id_)
      + sizeof(CMsgSpendWager_Player::wager_token_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpendWager_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpendWager_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpendWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpendWager>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSpendWager::CMsgSpendWager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpendWager)
}
CMsgSpendWager::CMsgSpendWager(const CMsgSpendWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_steam_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(server_steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpendWager)
}

void CMsgSpendWager::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_steam_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(server_steam_id_));
}

CMsgSpendWager::~CMsgSpendWager() {
  // @@protoc_insertion_point(destructor:CMsgSpendWager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpendWager::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSpendWager::ArenaDtor(void* object) {
  CMsgSpendWager* _this = reinterpret_cast< CMsgSpendWager* >(object);
  (void)_this;
}
void CMsgSpendWager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpendWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpendWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpendWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_steam_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(server_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpendWager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSpendWager.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 server_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpendWager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpendWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSpendWager.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_match_id(), target);
  }

  // optional uint64 server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_server_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpendWager)
  return target;
}

size_t CMsgSpendWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpendWager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSpendWager.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint64 server_steam_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_server_steam_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpendWager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpendWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpendWager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpendWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpendWager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpendWager)
    MergeFrom(*source);
  }
}

void CMsgSpendWager::MergeFrom(const CMsgSpendWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpendWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpendWager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpendWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpendWager::CopyFrom(const CMsgSpendWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpendWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager::IsInitialized() const {
  return true;
}

void CMsgSpendWager::InternalSwap(CMsgSpendWager* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpendWager, server_steam_id_)
      + sizeof(CMsgSpendWager::server_steam_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpendWager, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpendWager::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutXPCoins_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutXPCoins_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_gained(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coins_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wager_token_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rank_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wager_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutXPCoins.Player)
}
CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(const CMsgSignOutXPCoins_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wager_streak_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_streak_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutXPCoins.Player)
}

void CMsgSignOutXPCoins_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wager_streak_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_streak_));
}

CMsgSignOutXPCoins_Player::~CMsgSignOutXPCoins_Player() {
  // @@protoc_insertion_point(destructor:CMsgSignOutXPCoins.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutXPCoins_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutXPCoins_Player::ArenaDtor(void* object) {
  CMsgSignOutXPCoins_Player* _this = reinterpret_cast< CMsgSignOutXPCoins_Player* >(object);
  (void)_this;
}
void CMsgSignOutXPCoins_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutXPCoins_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutXPCoins_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutXPCoins.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_streak_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(wager_streak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutXPCoins_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_gained = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_xp_gained(&has_bits);
          xp_gained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coins_spent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_coins_spent(&has_bits);
          coins_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 wager_token_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wager_token_item_id(&has_bits);
          wager_token_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_wager = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rank_wager(&has_bits);
          rank_wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wager_streak = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_wager_streak(&has_bits);
          wager_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutXPCoins_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutXPCoins.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 xp_gained = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_xp_gained(), target);
  }

  // optional uint32 coins_spent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_coins_spent(), target);
  }

  // optional uint64 wager_token_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_wager_token_item_id(), target);
  }

  // optional uint32 rank_wager = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rank_wager(), target);
  }

  // optional uint32 wager_streak = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_wager_streak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutXPCoins.Player)
  return target;
}

size_t CMsgSignOutXPCoins_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutXPCoins.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 xp_gained = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_gained());
    }

    // optional uint64 wager_token_item_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_wager_token_item_id());
    }

    // optional uint32 coins_spent = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coins_spent());
    }

    // optional uint32 rank_wager = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_wager());
    }

    // optional uint32 wager_streak = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager_streak());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutXPCoins_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutXPCoins.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutXPCoins_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutXPCoins_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutXPCoins.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutXPCoins.Player)
    MergeFrom(*source);
  }
}

void CMsgSignOutXPCoins_Player::MergeFrom(const CMsgSignOutXPCoins_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutXPCoins.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_gained_ = from.xp_gained_;
    }
    if (cached_has_bits & 0x00000004u) {
      wager_token_item_id_ = from.wager_token_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      coins_spent_ = from.coins_spent_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_wager_ = from.rank_wager_;
    }
    if (cached_has_bits & 0x00000020u) {
      wager_streak_ = from.wager_streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutXPCoins_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutXPCoins.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutXPCoins_Player::CopyFrom(const CMsgSignOutXPCoins_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutXPCoins.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins_Player::InternalSwap(CMsgSignOutXPCoins_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins_Player, wager_streak_)
      + sizeof(CMsgSignOutXPCoins_Player::wager_streak_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutXPCoins_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutXPCoins::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutXPCoins>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSignOutXPCoins::CMsgSignOutXPCoins(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutXPCoins)
}
CMsgSignOutXPCoins::CMsgSignOutXPCoins(const CMsgSignOutXPCoins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutXPCoins)
}

void CMsgSignOutXPCoins::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
}

CMsgSignOutXPCoins::~CMsgSignOutXPCoins() {
  // @@protoc_insertion_point(destructor:CMsgSignOutXPCoins)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutXPCoins::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutXPCoins::ArenaDtor(void* object) {
  CMsgSignOutXPCoins* _this = reinterpret_cast< CMsgSignOutXPCoins* >(object);
  (void)_this;
}
void CMsgSignOutXPCoins::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutXPCoins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutXPCoins::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutXPCoins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutXPCoins::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutXPCoins.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutXPCoins::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutXPCoins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutXPCoins.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutXPCoins)
  return target;
}

size_t CMsgSignOutXPCoins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutXPCoins)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutXPCoins.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutXPCoins::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutXPCoins)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutXPCoins* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutXPCoins>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutXPCoins)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutXPCoins)
    MergeFrom(*source);
  }
}

void CMsgSignOutXPCoins::MergeFrom(const CMsgSignOutXPCoins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutXPCoins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutXPCoins::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutXPCoins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutXPCoins::CopyFrom(const CMsgSignOutXPCoins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutXPCoins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins::InternalSwap(CMsgSignOutXPCoins* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins, timestamp_)
      + sizeof(CMsgSignOutXPCoins::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutXPCoins::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutBounties_Bounty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutBounties_Bounty>()._has_bits_);
  static void set_has_issuer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_completer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSignOutBounties_Bounty::CMsgSignOutBounties_Bounty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutBounties.Bounty)
}
CMsgSignOutBounties_Bounty::CMsgSignOutBounties_Bounty(const CMsgSignOutBounties_Bounty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&issuer_account_id_, &from.issuer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_account_id_) -
    reinterpret_cast<char*>(&issuer_account_id_)) + sizeof(target_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBounties.Bounty)
}

void CMsgSignOutBounties_Bounty::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&issuer_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_account_id_) -
    reinterpret_cast<char*>(&issuer_account_id_)) + sizeof(target_account_id_));
}

CMsgSignOutBounties_Bounty::~CMsgSignOutBounties_Bounty() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBounties.Bounty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutBounties_Bounty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutBounties_Bounty::ArenaDtor(void* object) {
  CMsgSignOutBounties_Bounty* _this = reinterpret_cast< CMsgSignOutBounties_Bounty* >(object);
  (void)_this;
}
void CMsgSignOutBounties_Bounty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutBounties_Bounty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutBounties_Bounty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutBounties.Bounty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&issuer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_account_id_) -
        reinterpret_cast<char*>(&issuer_account_id_)) + sizeof(target_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutBounties_Bounty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 issuer_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_issuer_account_id(&has_bits);
          issuer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 completer_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_completer_account_id(&has_bits);
          completer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_account_id(&has_bits);
          target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutBounties_Bounty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBounties.Bounty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 issuer_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_issuer_account_id(), target);
  }

  // optional uint32 completer_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_completer_account_id(), target);
  }

  // optional uint32 target_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBounties.Bounty)
  return target;
}

size_t CMsgSignOutBounties_Bounty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutBounties.Bounty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 issuer_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_issuer_account_id());
    }

    // optional uint32 completer_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_completer_account_id());
    }

    // optional uint32 target_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutBounties_Bounty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutBounties.Bounty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutBounties_Bounty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutBounties_Bounty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutBounties.Bounty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutBounties.Bounty)
    MergeFrom(*source);
  }
}

void CMsgSignOutBounties_Bounty::MergeFrom(const CMsgSignOutBounties_Bounty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutBounties.Bounty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      issuer_account_id_ = from.issuer_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      completer_account_id_ = from.completer_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_account_id_ = from.target_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutBounties_Bounty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutBounties.Bounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutBounties_Bounty::CopyFrom(const CMsgSignOutBounties_Bounty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutBounties.Bounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBounties_Bounty::IsInitialized() const {
  return true;
}

void CMsgSignOutBounties_Bounty::InternalSwap(CMsgSignOutBounties_Bounty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties_Bounty, target_account_id_)
      + sizeof(CMsgSignOutBounties_Bounty::target_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties_Bounty, issuer_account_id_)>(
          reinterpret_cast<char*>(&issuer_account_id_),
          reinterpret_cast<char*>(&other->issuer_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutBounties_Bounty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutBounties::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutBounties>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSignOutBounties::CMsgSignOutBounties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bounties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutBounties)
}
CMsgSignOutBounties::CMsgSignOutBounties(const CMsgSignOutBounties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bounties_(from.bounties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBounties)
}

void CMsgSignOutBounties::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
}

CMsgSignOutBounties::~CMsgSignOutBounties() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBounties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutBounties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutBounties::ArenaDtor(void* object) {
  CMsgSignOutBounties* _this = reinterpret_cast< CMsgSignOutBounties* >(object);
  (void)_this;
}
void CMsgSignOutBounties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutBounties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutBounties::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutBounties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutBounties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutBounties.Bounty bounties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bounties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutBounties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBounties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutBounties.Bounty bounties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bounties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bounties(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBounties)
  return target;
}

size_t CMsgSignOutBounties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutBounties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutBounties.Bounty bounties = 1;
  total_size += 1UL * this->_internal_bounties_size();
  for (const auto& msg : this->bounties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutBounties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutBounties)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutBounties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutBounties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutBounties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutBounties)
    MergeFrom(*source);
  }
}

void CMsgSignOutBounties::MergeFrom(const CMsgSignOutBounties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutBounties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounties_.MergeFrom(from.bounties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutBounties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutBounties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutBounties::CopyFrom(const CMsgSignOutBounties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutBounties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBounties::IsInitialized() const {
  return true;
}

void CMsgSignOutBounties::InternalSwap(CMsgSignOutBounties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bounties_.InternalSwap(&other->bounties_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties, timestamp_)
      + sizeof(CMsgSignOutBounties::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutBounties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunityGoalProgress_EventGoalIncrement>()._has_bits_);
  static void set_has_event_goal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_increment_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}
CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_goal_id_, &from.event_goal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&increment_amount_) -
    reinterpret_cast<char*>(&event_goal_id_)) + sizeof(increment_amount_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_goal_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&increment_amount_) -
    reinterpret_cast<char*>(&event_goal_id_)) + sizeof(increment_amount_));
}

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::~CMsgSignOutCommunityGoalProgress_EventGoalIncrement() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::ArenaDtor(void* object) {
  CMsgSignOutCommunityGoalProgress_EventGoalIncrement* _this = reinterpret_cast< CMsgSignOutCommunityGoalProgress_EventGoalIncrement* >(object);
  (void)_this;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&event_goal_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&increment_amount_) -
        reinterpret_cast<char*>(&event_goal_id_)) + sizeof(increment_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_goal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_goal_id(&has_bits);
          event_goal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 increment_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_increment_amount(&has_bits);
          increment_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_goal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_goal_id(), target);
  }

  // optional uint32 increment_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_increment_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 event_goal_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_goal_id());
    }

    // optional uint32 increment_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_increment_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunityGoalProgress_EventGoalIncrement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutCommunityGoalProgress_EventGoalIncrement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_goal_id_ = from.event_goal_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      increment_amount_ = from.increment_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CopyFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InternalSwap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, increment_amount_)
      + sizeof(CMsgSignOutCommunityGoalProgress_EventGoalIncrement::increment_amount_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, event_goal_id_)>(
          reinterpret_cast<char*>(&event_goal_id_),
          reinterpret_cast<char*>(&other->event_goal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunityGoalProgress_EventGoalIncrement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutCommunityGoalProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunityGoalProgress>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  event_increments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunityGoalProgress)
}
CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(const CMsgSignOutCommunityGoalProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      event_increments_(from.event_increments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunityGoalProgress)
}

void CMsgSignOutCommunityGoalProgress::SharedCtor() {
event_id_ = 0;
}

CMsgSignOutCommunityGoalProgress::~CMsgSignOutCommunityGoalProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunityGoalProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutCommunityGoalProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutCommunityGoalProgress::ArenaDtor(void* object) {
  CMsgSignOutCommunityGoalProgress* _this = reinterpret_cast< CMsgSignOutCommunityGoalProgress* >(object);
  (void)_this;
}
void CMsgSignOutCommunityGoalProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutCommunityGoalProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutCommunityGoalProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunityGoalProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_increments_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunityGoalProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_increments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutCommunityGoalProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunityGoalProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_increments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_event_increments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunityGoalProgress)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunityGoalProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  total_size += 1UL * this->_internal_event_increments_size();
  for (const auto& msg : this->event_increments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunityGoalProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutCommunityGoalProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunityGoalProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutCommunityGoalProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutCommunityGoalProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutCommunityGoalProgress)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunityGoalProgress::MergeFrom(const CMsgSignOutCommunityGoalProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunityGoalProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_increments_.MergeFrom(from.event_increments_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgSignOutCommunityGoalProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutCommunityGoalProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunityGoalProgress::CopyFrom(const CMsgSignOutCommunityGoalProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunityGoalProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress::InternalSwap(CMsgSignOutCommunityGoalProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_increments_.InternalSwap(&other->event_increments_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunityGoalProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCPostMatchTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCPostMatchTip>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tipper_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_recipient_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tip_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgServerToGCPostMatchTip::CMsgServerToGCPostMatchTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCPostMatchTip)
}
CMsgServerToGCPostMatchTip::CMsgServerToGCPostMatchTip(const CMsgServerToGCPostMatchTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tip_amount_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(tip_amount_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCPostMatchTip)
}

void CMsgServerToGCPostMatchTip::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tip_amount_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(tip_amount_));
}

CMsgServerToGCPostMatchTip::~CMsgServerToGCPostMatchTip() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCPostMatchTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCPostMatchTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCPostMatchTip::ArenaDtor(void* object) {
  CMsgServerToGCPostMatchTip* _this = reinterpret_cast< CMsgServerToGCPostMatchTip* >(object);
  (void)_this;
}
void CMsgServerToGCPostMatchTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCPostMatchTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCPostMatchTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCPostMatchTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tip_amount_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(tip_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCPostMatchTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tipper_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tipper_account_id(&has_bits);
          tipper_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recipient_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_recipient_account_id(&has_bits);
          recipient_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tip_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tip_amount(&has_bits);
          tip_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCPostMatchTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCPostMatchTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional uint32 tipper_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tipper_account_id(), target);
  }

  // optional uint32 recipient_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_recipient_account_id(), target);
  }

  // optional uint32 tip_amount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tip_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCPostMatchTip)
  return target;
}

size_t CMsgServerToGCPostMatchTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCPostMatchTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 tipper_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tipper_account_id());
    }

    // optional uint32 recipient_account_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recipient_account_id());
    }

    // optional uint32 tip_amount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tip_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCPostMatchTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCPostMatchTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPostMatchTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCPostMatchTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCPostMatchTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCPostMatchTip)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPostMatchTip::MergeFrom(const CMsgServerToGCPostMatchTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCPostMatchTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tipper_account_id_ = from.tipper_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      tip_amount_ = from.tip_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCPostMatchTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCPostMatchTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPostMatchTip::CopyFrom(const CMsgServerToGCPostMatchTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCPostMatchTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPostMatchTip::IsInitialized() const {
  return true;
}

void CMsgServerToGCPostMatchTip::InternalSwap(CMsgServerToGCPostMatchTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCPostMatchTip, tip_amount_)
      + sizeof(CMsgServerToGCPostMatchTip::tip_amount_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCPostMatchTip, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCPostMatchTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCPostMatchTipResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCPostMatchTipResponse>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tipper_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recipient_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerToGCPostMatchTipResponse::CMsgServerToGCPostMatchTipResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCPostMatchTipResponse)
}
CMsgServerToGCPostMatchTipResponse::CMsgServerToGCPostMatchTipResponse(const CMsgServerToGCPostMatchTipResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCPostMatchTipResponse)
}

void CMsgServerToGCPostMatchTipResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(result_));
}

CMsgServerToGCPostMatchTipResponse::~CMsgServerToGCPostMatchTipResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCPostMatchTipResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCPostMatchTipResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCPostMatchTipResponse::ArenaDtor(void* object) {
  CMsgServerToGCPostMatchTipResponse* _this = reinterpret_cast< CMsgServerToGCPostMatchTipResponse* >(object);
  (void)_this;
}
void CMsgServerToGCPostMatchTipResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCPostMatchTipResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCPostMatchTipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCPostMatchTipResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCPostMatchTipResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tipper_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tipper_account_id(&has_bits);
          tipper_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recipient_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_recipient_account_id(&has_bits);
          recipient_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgServerToGCPostMatchTipResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgServerToGCPostMatchTipResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCPostMatchTipResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCPostMatchTipResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 tipper_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tipper_account_id(), target);
  }

  // optional uint32 recipient_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_recipient_account_id(), target);
  }

  // optional .CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCPostMatchTipResponse)
  return target;
}

size_t CMsgServerToGCPostMatchTipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCPostMatchTipResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 tipper_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tipper_account_id());
    }

    // optional uint32 recipient_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recipient_account_id());
    }

    // optional .CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCPostMatchTipResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCPostMatchTipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPostMatchTipResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCPostMatchTipResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCPostMatchTipResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCPostMatchTipResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPostMatchTipResponse::MergeFrom(const CMsgServerToGCPostMatchTipResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCPostMatchTipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tipper_account_id_ = from.tipper_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCPostMatchTipResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCPostMatchTipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPostMatchTipResponse::CopyFrom(const CMsgServerToGCPostMatchTipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCPostMatchTipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPostMatchTipResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCPostMatchTipResponse::InternalSwap(CMsgServerToGCPostMatchTipResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, result_)
      + sizeof(CMsgServerToGCPostMatchTipResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCPostMatchTipResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCloseCompendiumInGamePredictionVoting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCloseCompendiumInGamePredictionVoting>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hltv_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}
CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
}

CMsgServerToGCCloseCompendiumInGamePredictionVoting::~CMsgServerToGCCloseCompendiumInGamePredictionVoting() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::ArenaDtor(void* object) {
  CMsgServerToGCCloseCompendiumInGamePredictionVoting* _this = reinterpret_cast< CMsgServerToGCCloseCompendiumInGamePredictionVoting* >(object);
  (void)_this;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCloseCompendiumInGamePredictionVoting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hltv_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hltv_delay(&has_bits);
          hltv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCloseCompendiumInGamePredictionVoting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 hltv_delay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hltv_delay(), target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 hltv_delay = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hltv_delay());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCloseCompendiumInGamePredictionVoting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCloseCompendiumInGamePredictionVoting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hltv_delay_ = from.hltv_delay_;
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, league_id_)
      + sizeof(CMsgServerToGCCloseCompendiumInGamePredictionVoting::league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVoting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}
CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedCtor() {
result_ = false;
}

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::~CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::ArenaDtor(void* object) {
  CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* _this = reinterpret_cast< CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* >(object);
  (void)_this;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>()._has_bits_);
  static void set_has_prediction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prediction_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prediction_value_is_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}
CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prediction_id_, &from.prediction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prediction_value_is_mask_) -
    reinterpret_cast<char*>(&prediction_id_)) + sizeof(prediction_value_is_mask_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prediction_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prediction_value_is_mask_) -
    reinterpret_cast<char*>(&prediction_id_)) + sizeof(prediction_value_is_mask_));
}

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::~CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::ArenaDtor(void* object) {
  CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* _this = reinterpret_cast< CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* >(object);
  (void)_this;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&prediction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prediction_value_is_mask_) -
        reinterpret_cast<char*>(&prediction_id_)) + sizeof(prediction_value_is_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 prediction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prediction_id(&has_bits);
          prediction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prediction_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prediction_value(&has_bits);
          prediction_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prediction_value_is_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prediction_value_is_mask(&has_bits);
          prediction_value_is_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prediction_id(), target);
  }

  // optional uint32 prediction_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prediction_value(), target);
  }

  // optional bool prediction_value_is_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_prediction_value_is_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 prediction_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prediction_id());
    }

    // optional uint32 prediction_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prediction_value());
    }

    // optional bool prediction_value_is_mask = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      prediction_id_ = from.prediction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      prediction_value_ = from.prediction_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      prediction_value_is_mask_ = from.prediction_value_is_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_value_is_mask_)
      + sizeof(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::prediction_value_is_mask_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_id_)>(
          reinterpret_cast<char*>(&prediction_id_),
          reinterpret_cast<char*>(&other->prediction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCompendiumInGamePredictionResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumInGamePredictionResults>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumInGamePredictionResults)
}
CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(const CMsgServerToGCCompendiumInGamePredictionResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_node_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_node_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumInGamePredictionResults)
}

void CMsgServerToGCCompendiumInGamePredictionResults::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&league_node_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_node_id_));
}

CMsgServerToGCCompendiumInGamePredictionResults::~CMsgServerToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumInGamePredictionResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCompendiumInGamePredictionResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCompendiumInGamePredictionResults::ArenaDtor(void* object) {
  CMsgServerToGCCompendiumInGamePredictionResults* _this = reinterpret_cast< CMsgServerToGCCompendiumInGamePredictionResults* >(object);
  (void)_this;
}
void CMsgServerToGCCompendiumInGamePredictionResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumInGamePredictionResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_node_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_node_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumInGamePredictionResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_league_node_id(&has_bits);
          league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCompendiumInGamePredictionResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumInGamePredictionResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  // optional uint32 league_node_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_league_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 league_node_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCompendiumInGamePredictionResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCompendiumInGamePredictionResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCompendiumInGamePredictionResults)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      league_node_id_ = from.league_node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, league_node_id_)
      + sizeof(CMsgServerToGCCompendiumInGamePredictionResults::league_node_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumInGamePredictionResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumChosenInGamePredictions_Prediction>()._has_bits_);
  static void set_has_prediction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
}
CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prediction_id_ = from.prediction_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::SharedCtor() {
prediction_id_ = 0u;
}

CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::~CMsgServerToGCCompendiumChosenInGamePredictions_Prediction() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::ArenaDtor(void* object) {
  CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* _this = reinterpret_cast< CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* >(object);
  (void)_this;
}
void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prediction_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 prediction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prediction_id(&has_bits);
          prediction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prediction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  return target;
}

size_t CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 prediction_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prediction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCompendiumChosenInGamePredictions_Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::MergeFrom(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prediction_id()) {
    _internal_set_prediction_id(from._internal_prediction_id());
  }
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CopyFrom(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::InternalSwap(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prediction_id_, other->prediction_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCompendiumChosenInGamePredictions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumChosenInGamePredictions>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCCompendiumChosenInGamePredictions::CMsgServerToGCCompendiumChosenInGamePredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predictions_chosen_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumChosenInGamePredictions)
}
CMsgServerToGCCompendiumChosenInGamePredictions::CMsgServerToGCCompendiumChosenInGamePredictions(const CMsgServerToGCCompendiumChosenInGamePredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      predictions_chosen_(from.predictions_chosen_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumChosenInGamePredictions)
}

void CMsgServerToGCCompendiumChosenInGamePredictions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
}

CMsgServerToGCCompendiumChosenInGamePredictions::~CMsgServerToGCCompendiumChosenInGamePredictions() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumChosenInGamePredictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCompendiumChosenInGamePredictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCompendiumChosenInGamePredictions::ArenaDtor(void* object) {
  CMsgServerToGCCompendiumChosenInGamePredictions* _this = reinterpret_cast< CMsgServerToGCCompendiumChosenInGamePredictions* >(object);
  (void)_this;
}
void CMsgServerToGCCompendiumChosenInGamePredictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCompendiumChosenInGamePredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCompendiumChosenInGamePredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_chosen_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumChosenInGamePredictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions_chosen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCompendiumChosenInGamePredictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predictions_chosen_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_predictions_chosen(i), target, stream);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumChosenInGamePredictions)
  return target;
}

size_t CMsgServerToGCCompendiumChosenInGamePredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
  total_size += 1UL * this->_internal_predictions_chosen_size();
  for (const auto& msg : this->predictions_chosen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumChosenInGamePredictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumChosenInGamePredictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCompendiumChosenInGamePredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCompendiumChosenInGamePredictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCompendiumChosenInGamePredictions)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumChosenInGamePredictions::MergeFrom(const CMsgServerToGCCompendiumChosenInGamePredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_chosen_.MergeFrom(from.predictions_chosen_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCompendiumChosenInGamePredictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumChosenInGamePredictions::CopyFrom(const CMsgServerToGCCompendiumChosenInGamePredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumChosenInGamePredictions::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumChosenInGamePredictions::InternalSwap(CMsgServerToGCCompendiumChosenInGamePredictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predictions_chosen_.InternalSwap(&other->predictions_chosen_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumChosenInGamePredictions, league_id_)
      + sizeof(CMsgServerToGCCompendiumChosenInGamePredictions::league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumChosenInGamePredictions, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumChosenInGamePredictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCompendiumInGamePredictionResultsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumInGamePredictionResultsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCCompendiumInGamePredictionResultsResponse::CMsgServerToGCCompendiumInGamePredictionResultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}
CMsgServerToGCCompendiumInGamePredictionResultsResponse::CMsgServerToGCCompendiumInGamePredictionResultsResponse(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SharedCtor() {
result_ = false;
}

CMsgServerToGCCompendiumInGamePredictionResultsResponse::~CMsgServerToGCCompendiumInGamePredictionResultsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::ArenaDtor(void* object) {
  CMsgServerToGCCompendiumInGamePredictionResultsResponse* _this = reinterpret_cast< CMsgServerToGCCompendiumInGamePredictionResultsResponse* >(object);
  (void)_this;
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumInGamePredictionResultsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCompendiumInGamePredictionResultsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResultsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCompendiumInGamePredictionResultsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResultsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResultsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumInGamePredictionResultsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCCompendiumInGamePredictionResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCCompendiumInGamePredictionResults>()._has_bits_);
  static const ::CMsgServerToGCCompendiumInGamePredictionResults& results(const CMsgGCToGCCompendiumInGamePredictionResults* msg);
  static void set_has_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgServerToGCCompendiumInGamePredictionResults&
CMsgGCToGCCompendiumInGamePredictionResults::_Internal::results(const CMsgGCToGCCompendiumInGamePredictionResults* msg) {
  return *msg->results_;
}
CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCCompendiumInGamePredictionResults)
}
CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(const CMsgGCToGCCompendiumInGamePredictionResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_results()) {
    results_ = new ::CMsgServerToGCCompendiumInGamePredictionResults(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCCompendiumInGamePredictionResults)
}

void CMsgGCToGCCompendiumInGamePredictionResults::SharedCtor() {
results_ = nullptr;
}

CMsgGCToGCCompendiumInGamePredictionResults::~CMsgGCToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCCompendiumInGamePredictionResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCCompendiumInGamePredictionResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete results_;
}

void CMsgGCToGCCompendiumInGamePredictionResults::ArenaDtor(void* object) {
  CMsgGCToGCCompendiumInGamePredictionResults* _this = reinterpret_cast< CMsgGCToGCCompendiumInGamePredictionResults* >(object);
  (void)_this;
}
void CMsgGCToGCCompendiumInGamePredictionResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCCompendiumInGamePredictionResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(results_ != nullptr);
    results_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCCompendiumInGamePredictionResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCCompendiumInGamePredictionResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCCompendiumInGamePredictionResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgGCToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCCompendiumInGamePredictionResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCCompendiumInGamePredictionResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCCompendiumInGamePredictionResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCCompendiumInGamePredictionResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCCompendiumInGamePredictionResults)
    MergeFrom(*source);
  }
}

void CMsgGCToGCCompendiumInGamePredictionResults::MergeFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_results()) {
    _internal_mutable_results()->::CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(from._internal_results());
  }
}

void CMsgGCToGCCompendiumInGamePredictionResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgGCToGCCompendiumInGamePredictionResults::InternalSwap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(results_, other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCCompendiumInGamePredictionResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>()._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inventory_items_(arena),
  talents_skilled_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inventory_items_(from.inventory_items_),
      talents_skilled_(from.talents_skilled_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_, &from.item_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::~CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::ArenaDtor(void* object) {
  CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* _this = reinterpret_cast< CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* >(object);
  (void)_this;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inventory_items_.Clear();
  talents_skilled_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_time_) -
        reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item(&has_bits);
          item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gold(&has_bits);
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 inventory_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inventory_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inventory_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool talents_skilled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_talents_skilled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_talents_skilled(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item(), target);
  }

  // optional uint32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gold(), target);
  }

  // optional uint32 net_worth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_net_worth(), target);
  }

  // optional uint32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_time(), target);
  }

  // repeated uint32 inventory_items = 5;
  for (int i = 0, n = this->_internal_inventory_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_inventory_items(i), target);
  }

  // repeated bool talents_skilled = 7;
  for (int i = 0, n = this->_internal_talents_skilled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_talents_skilled(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 inventory_items = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inventory_items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inventory_items_size());
    total_size += data_size;
  }

  // repeated bool talents_skilled = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_talents_skilled_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_talents_skilled_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item());
    }

    // optional uint32 gold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
    }

    // optional uint32 net_worth = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inventory_items_.MergeFrom(from.inventory_items_);
  talents_skilled_.MergeFrom(from.talents_skilled_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_ = from.item_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000004u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inventory_items_.InternalSwap(&other->inventory_items_);
  talents_skilled_.InternalSwap(&other->talents_skilled_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, game_time_)
      + sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>()._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allied_hero_ids_(arena),
  enemy_hero_ids_(arena),
  item_purchases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      allied_hero_ids_(from.allied_hero_ids_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      item_purchases_(from.item_purchases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_slot_, &from.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_winner_) -
    reinterpret_cast<char*>(&player_slot_)) + sizeof(is_winner_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_winner_) -
    reinterpret_cast<char*>(&player_slot_)) + sizeof(is_winner_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::~CMsgServerToGCMatchPlayerItemPurchaseHistory_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::ArenaDtor(void* object) {
  CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* _this = reinterpret_cast< CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* >(object);
  (void)_this;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allied_hero_ids_.Clear();
  enemy_hero_ids_.Clear();
  item_purchases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_winner_) -
        reinterpret_cast<char*>(&player_slot_)) + sizeof(is_winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_purchases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_winner = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_winner(&has_bits);
          is_winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4;
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 5;
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_purchases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_item_purchases(i), target, stream);
  }

  // optional uint32 lane = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lane(), target);
  }

  // optional bool is_winner = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->allied_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  total_size += 1UL * this->_internal_item_purchases_size();
  for (const auto& msg : this->item_purchases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 lane = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

    // optional bool is_winner = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allied_hero_ids_.MergeFrom(from.allied_hero_ids_);
  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  item_purchases_.MergeFrom(from.item_purchases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_winner_ = from.is_winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allied_hero_ids_.InternalSwap(&other->allied_hero_ids_);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  item_purchases_.InternalSwap(&other->item_purchases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, is_winner_)
      + sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::is_winner_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, player_slot_)>(
          reinterpret_cast<char*>(&player_slot_),
          reinterpret_cast<char*>(&other->player_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchPlayerItemPurchaseHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerItemPurchaseHistory>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory::~CMsgServerToGCMatchPlayerItemPurchaseHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::ArenaDtor(void* object) {
  CMsgServerToGCMatchPlayerItemPurchaseHistory* _this = reinterpret_cast< CMsgServerToGCMatchPlayerItemPurchaseHistory* >(object);
  (void)_this;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmr_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerItemPurchaseHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mmr(), target);
  }

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 mmr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchPlayerItemPurchaseHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchPlayerItemPurchaseHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchPlayerItemPurchaseHistory)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      mmr_ = from.mmr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, mmr_)
      + sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory::mmr_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>()._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inventory_items_(arena),
  talents_skilled_(arena),
  available_neutral_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
}
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inventory_items_(from.inventory_items_),
      talents_skilled_(from.talents_skilled_),
      available_neutral_items_(from.available_neutral_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_, &from.item_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
}

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::ArenaDtor(void* object) {
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* _this = reinterpret_cast< CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* >(object);
  (void)_this;
}
void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inventory_items_.Clear();
  talents_skilled_.Clear();
  available_neutral_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_time_) -
        reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item(&has_bits);
          item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 inventory_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inventory_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inventory_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool talents_skilled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_talents_skilled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_talents_skilled(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 available_neutral_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_available_neutral_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_available_neutral_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item(), target);
  }

  // optional uint32 game_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_time(), target);
  }

  // repeated uint32 inventory_items = 3;
  for (int i = 0, n = this->_internal_inventory_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory_items(i), target);
  }

  // repeated bool talents_skilled = 4;
  for (int i = 0, n = this->_internal_talents_skilled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_talents_skilled(i), target);
  }

  // repeated uint32 available_neutral_items = 5;
  for (int i = 0, n = this->_internal_available_neutral_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_available_neutral_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  return target;
}

size_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 inventory_items = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inventory_items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inventory_items_size());
    total_size += data_size;
  }

  // repeated bool talents_skilled = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_talents_skilled_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_talents_skilled_size());
    total_size += data_size;
  }

  // repeated uint32 available_neutral_items = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->available_neutral_items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_available_neutral_items_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item());
    }

    // optional uint32 game_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::MergeFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inventory_items_.MergeFrom(from.inventory_items_);
  talents_skilled_.MergeFrom(from.talents_skilled_);
  available_neutral_items_.MergeFrom(from.available_neutral_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_ = from.item_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inventory_items_.InternalSwap(&other->inventory_items_);
  talents_skilled_.InternalSwap(&other->talents_skilled_);
  available_neutral_items_.InternalSwap(&other->available_neutral_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, game_time_)
      + sizeof(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allied_hero_ids_(arena),
  enemy_hero_ids_(arena),
  item_equips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
}
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      allied_hero_ids_(from.allied_hero_ids_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      item_equips_(from.item_equips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_winner_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_winner_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_winner_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_winner_));
}

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::ArenaDtor(void* object) {
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* _this = reinterpret_cast< CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* >(object);
  (void)_this;
}
void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allied_hero_ids_.Clear();
  enemy_hero_ids_.Clear();
  item_equips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_winner_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(is_winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_winner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_winner(&has_bits);
          is_winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 allied_hero_ids = 2;
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 3;
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_equips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_item_equips(i), target, stream);
  }

  // optional bool is_winner = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  return target;
}

size_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->allied_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
  total_size += 1UL * this->_internal_item_equips_size();
  for (const auto& msg : this->item_equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool is_winner = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::MergeFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allied_hero_ids_.MergeFrom(from.allied_hero_ids_);
  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  item_equips_.MergeFrom(from.item_equips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_winner_ = from.is_winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allied_hero_ids_.InternalSwap(&other->allied_hero_ids_);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  item_equips_.InternalSwap(&other->item_equips_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, is_winner_)
      + sizeof(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::is_winner_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerNeutralItemEquipHistory>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CMsgServerToGCMatchPlayerNeutralItemEquipHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
}
CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CMsgServerToGCMatchPlayerNeutralItemEquipHistory(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::SharedCtor() {
match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgServerToGCMatchPlayerNeutralItemEquipHistory::~CMsgServerToGCMatchPlayerNeutralItemEquipHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::ArenaDtor(void* object) {
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory* _this = reinterpret_cast< CMsgServerToGCMatchPlayerNeutralItemEquipHistory* >(object);
  (void)_this;
}
void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  return target;
}

size_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 match_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerNeutralItemEquipHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchPlayerNeutralItemEquipHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::MergeFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from._internal_has_match_id()) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerNeutralItemEquipHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchStateHistory_PlayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory_PlayerState>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_buyback(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_has_aegis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_rapier(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory.PlayerState)
}
CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState(const CMsgServerToGCMatchStateHistory_PlayerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory.PlayerState)
}

void CMsgServerToGCMatchStateHistory_PlayerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(distance_));
}

CMsgServerToGCMatchStateHistory_PlayerState::~CMsgServerToGCMatchStateHistory_PlayerState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory.PlayerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchStateHistory_PlayerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchStateHistory_PlayerState::ArenaDtor(void* object) {
  CMsgServerToGCMatchStateHistory_PlayerState* _this = reinterpret_cast< CMsgServerToGCMatchStateHistory_PlayerState* >(object);
  (void)_this;
}
void CMsgServerToGCMatchStateHistory_PlayerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchStateHistory_PlayerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory_PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory.PlayerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_rapier_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(has_rapier_));
  }
  distance_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory_PlayerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 respawn_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_respawn_time(&has_bits);
          respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_buyback = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_has_buyback(&has_bits);
          has_buyback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_aegis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_has_aegis(&has_bits);
          has_aegis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_rapier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_has_rapier(&has_bits);
          has_rapier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 distance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchStateHistory_PlayerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory.PlayerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 net_worth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_net_worth(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 respawn_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_respawn_time(), target);
  }

  // optional bool has_buyback = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_has_buyback(), target);
  }

  // optional bool has_aegis = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_aegis(), target);
  }

  // optional bool has_rapier = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_has_rapier(), target);
  }

  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory.PlayerState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory.PlayerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 net_worth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 respawn_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_respawn_time());
    }

    // optional bool has_buyback = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_aegis = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_rapier = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory_PlayerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchStateHistory.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory_PlayerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory_PlayerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchStateHistory.PlayerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchStateHistory.PlayerState)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory_PlayerState::MergeFrom(const CMsgServerToGCMatchStateHistory_PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_buyback_ = from.has_buyback_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_aegis_ = from.has_aegis_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_rapier_ = from.has_rapier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_distance(from._internal_distance());
  }
}

void CMsgServerToGCMatchStateHistory_PlayerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchStateHistory.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory_PlayerState::CopyFrom(const CMsgServerToGCMatchStateHistory_PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_PlayerState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_PlayerState::InternalSwap(CMsgServerToGCMatchStateHistory_PlayerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_PlayerState, distance_)
      + sizeof(CMsgServerToGCMatchStateHistory_PlayerState::distance_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_PlayerState, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory_PlayerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchStateHistory_TeamState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory_TeamState>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ancient_health_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_glyph_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creep_distance_safe(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creep_distance_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creep_distance_off(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_states_(arena),
  tower_health_pct_(arena),
  barracks_health_pct_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory.TeamState)
}
CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState(const CMsgServerToGCMatchStateHistory_TeamState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_states_(from.player_states_),
      tower_health_pct_(from.tower_health_pct_),
      barracks_health_pct_(from.barracks_health_pct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&creep_distance_off_) -
    reinterpret_cast<char*>(&team_)) + sizeof(creep_distance_off_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory.TeamState)
}

void CMsgServerToGCMatchStateHistory_TeamState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&creep_distance_off_) -
    reinterpret_cast<char*>(&team_)) + sizeof(creep_distance_off_));
}

CMsgServerToGCMatchStateHistory_TeamState::~CMsgServerToGCMatchStateHistory_TeamState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory.TeamState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchStateHistory_TeamState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchStateHistory_TeamState::ArenaDtor(void* object) {
  CMsgServerToGCMatchStateHistory_TeamState* _this = reinterpret_cast< CMsgServerToGCMatchStateHistory_TeamState* >(object);
  (void)_this;
}
void CMsgServerToGCMatchStateHistory_TeamState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchStateHistory_TeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory_TeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory.TeamState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_states_.Clear();
  tower_health_pct_.Clear();
  barracks_health_pct_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creep_distance_off_) -
        reinterpret_cast<char*>(&team_)) + sizeof(creep_distance_off_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory_TeamState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tower_health_pct(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tower_health_pct(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_barracks_health_pct(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_barracks_health_pct(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ancient_health_pct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ancient_health_pct(&has_bits);
          ancient_health_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 glyph_cooldown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_glyph_cooldown(&has_bits);
          glyph_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creep_distance_safe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_creep_distance_safe(&has_bits);
          creep_distance_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creep_distance_mid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_creep_distance_mid(&has_bits);
          creep_distance_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creep_distance_off = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_creep_distance_off(&has_bits);
          creep_distance_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchStateHistory_TeamState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory.TeamState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_player_states(i), target, stream);
  }

  // repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
  for (int i = 0, n = this->_internal_tower_health_pct_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tower_health_pct(i), target);
  }

  // repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
  for (int i = 0, n = this->_internal_barracks_health_pct_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_barracks_health_pct(i), target);
  }

  // optional uint32 ancient_health_pct = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ancient_health_pct(), target);
  }

  // optional uint32 glyph_cooldown = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_glyph_cooldown(), target);
  }

  // optional uint32 kills = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_kills(), target);
  }

  // optional uint32 creep_distance_safe = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_creep_distance_safe(), target);
  }

  // optional uint32 creep_distance_mid = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_creep_distance_mid(), target);
  }

  // optional uint32 creep_distance_off = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_creep_distance_off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory.TeamState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_TeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory.TeamState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
  total_size += 1UL * this->_internal_player_states_size();
  for (const auto& msg : this->player_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tower_health_pct_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tower_health_pct_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->barracks_health_pct_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_barracks_health_pct_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 ancient_health_pct = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ancient_health_pct());
    }

    // optional uint32 glyph_cooldown = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_glyph_cooldown());
    }

    // optional uint32 kills = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 creep_distance_safe = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep_distance_safe());
    }

    // optional uint32 creep_distance_mid = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep_distance_mid());
    }

    // optional uint32 creep_distance_off = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep_distance_off());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchStateHistory.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory_TeamState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory_TeamState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchStateHistory.TeamState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchStateHistory.TeamState)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(const CMsgServerToGCMatchStateHistory_TeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_states_.MergeFrom(from.player_states_);
  tower_health_pct_.MergeFrom(from.tower_health_pct_);
  barracks_health_pct_.MergeFrom(from.barracks_health_pct_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      ancient_health_pct_ = from.ancient_health_pct_;
    }
    if (cached_has_bits & 0x00000004u) {
      glyph_cooldown_ = from.glyph_cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      creep_distance_safe_ = from.creep_distance_safe_;
    }
    if (cached_has_bits & 0x00000020u) {
      creep_distance_mid_ = from.creep_distance_mid_;
    }
    if (cached_has_bits & 0x00000040u) {
      creep_distance_off_ = from.creep_distance_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchStateHistory_TeamState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchStateHistory.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory_TeamState::CopyFrom(const CMsgServerToGCMatchStateHistory_TeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_TeamState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_TeamState::InternalSwap(CMsgServerToGCMatchStateHistory_TeamState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_states_.InternalSwap(&other->player_states_);
  tower_health_pct_.InternalSwap(&other->tower_health_pct_);
  barracks_health_pct_.InternalSwap(&other->barracks_health_pct_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_TeamState, creep_distance_off_)
      + sizeof(CMsgServerToGCMatchStateHistory_TeamState::creep_distance_off_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_TeamState, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory_TeamState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchStateHistory_MatchState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory_MatchState>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgServerToGCMatchStateHistory_TeamState& radiant_state(const CMsgServerToGCMatchStateHistory_MatchState* msg);
  static void set_has_radiant_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgServerToGCMatchStateHistory_TeamState& dire_state(const CMsgServerToGCMatchStateHistory_MatchState* msg);
  static void set_has_dire_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgServerToGCMatchStateHistory_TeamState&
CMsgServerToGCMatchStateHistory_MatchState::_Internal::radiant_state(const CMsgServerToGCMatchStateHistory_MatchState* msg) {
  return *msg->radiant_state_;
}
const ::CMsgServerToGCMatchStateHistory_TeamState&
CMsgServerToGCMatchStateHistory_MatchState::_Internal::dire_state(const CMsgServerToGCMatchStateHistory_MatchState* msg) {
  return *msg->dire_state_;
}
CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory.MatchState)
}
CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState(const CMsgServerToGCMatchStateHistory_MatchState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_radiant_state()) {
    radiant_state_ = new ::CMsgServerToGCMatchStateHistory_TeamState(*from.radiant_state_);
  } else {
    radiant_state_ = nullptr;
  }
  if (from._internal_has_dire_state()) {
    dire_state_ = new ::CMsgServerToGCMatchStateHistory_TeamState(*from.dire_state_);
  } else {
    dire_state_ = nullptr;
  }
  game_time_ = from.game_time_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory.MatchState)
}

void CMsgServerToGCMatchStateHistory_MatchState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radiant_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&radiant_state_)) + sizeof(game_time_));
}

CMsgServerToGCMatchStateHistory_MatchState::~CMsgServerToGCMatchStateHistory_MatchState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory.MatchState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchStateHistory_MatchState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete radiant_state_;
  if (this != internal_default_instance()) delete dire_state_;
}

void CMsgServerToGCMatchStateHistory_MatchState::ArenaDtor(void* object) {
  CMsgServerToGCMatchStateHistory_MatchState* _this = reinterpret_cast< CMsgServerToGCMatchStateHistory_MatchState* >(object);
  (void)_this;
}
void CMsgServerToGCMatchStateHistory_MatchState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchStateHistory_MatchState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory_MatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory.MatchState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(radiant_state_ != nullptr);
      radiant_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dire_state_ != nullptr);
      dire_state_->Clear();
    }
  }
  game_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory_MatchState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiant_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dire_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchStateHistory_MatchState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory.MatchState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time(), target);
  }

  // optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::radiant_state(this), target, stream);
  }

  // optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dire_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory.MatchState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_MatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory.MatchState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radiant_state_);
    }

    // optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dire_state_);
    }

    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory_MatchState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchStateHistory.MatchState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory_MatchState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory_MatchState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchStateHistory.MatchState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchStateHistory.MatchState)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory_MatchState::MergeFrom(const CMsgServerToGCMatchStateHistory_MatchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory.MatchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_radiant_state()->::CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(from._internal_radiant_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dire_state()->::CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(from._internal_dire_state());
    }
    if (cached_has_bits & 0x00000004u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchStateHistory_MatchState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchStateHistory.MatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory_MatchState::CopyFrom(const CMsgServerToGCMatchStateHistory_MatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory.MatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_MatchState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_MatchState::InternalSwap(CMsgServerToGCMatchStateHistory_MatchState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_MatchState, game_time_)
      + sizeof(CMsgServerToGCMatchStateHistory_MatchState::game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_MatchState, radiant_state_)>(
          reinterpret_cast<char*>(&radiant_state_),
          reinterpret_cast<char*>(&other->radiant_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory_MatchState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCMatchStateHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radiant_won(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory)
}
CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory(const CMsgServerToGCMatchStateHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      match_states_(from.match_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory)
}

void CMsgServerToGCMatchStateHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
}

CMsgServerToGCMatchStateHistory::~CMsgServerToGCMatchStateHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCMatchStateHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCMatchStateHistory::ArenaDtor(void* object) {
  CMsgServerToGCMatchStateHistory* _this = reinterpret_cast< CMsgServerToGCMatchStateHistory* >(object);
  (void)_this;
}
void CMsgServerToGCMatchStateHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCMatchStateHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmr_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool radiant_won = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radiant_won(&has_bits);
          radiant_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mmr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCMatchStateHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional bool radiant_won = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_radiant_won(), target);
  }

  // optional uint32 mmr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mmr(), target);
  }

  // repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_match_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory)
  return target;
}

size_t CMsgServerToGCMatchStateHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  total_size += 1UL * this->_internal_match_states_size();
  for (const auto& msg : this->match_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional bool radiant_won = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 mmr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCMatchStateHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCMatchStateHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCMatchStateHistory)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory::MergeFrom(const CMsgServerToGCMatchStateHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_states_.MergeFrom(from.match_states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      radiant_won_ = from.radiant_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      mmr_ = from.mmr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchStateHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCMatchStateHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory::CopyFrom(const CMsgServerToGCMatchStateHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory::InternalSwap(CMsgServerToGCMatchStateHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_states_.InternalSwap(&other->match_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory, mmr_)
      + sizeof(CMsgServerToGCMatchStateHistory::mmr_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchStateSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchStateSteamMLEntry>()._has_bits_);
  static const ::CMsgServerToGCMatchStateHistory_MatchState& match_state(const CMsgMatchStateSteamMLEntry* msg);
  static void set_has_match_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radiant_won(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgServerToGCMatchStateHistory_MatchState&
CMsgMatchStateSteamMLEntry::_Internal::match_state(const CMsgMatchStateSteamMLEntry* msg) {
  return *msg->match_state_;
}
CMsgMatchStateSteamMLEntry::CMsgMatchStateSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchStateSteamMLEntry)
}
CMsgMatchStateSteamMLEntry::CMsgMatchStateSteamMLEntry(const CMsgMatchStateSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_state()) {
    match_state_ = new ::CMsgServerToGCMatchStateHistory_MatchState(*from.match_state_);
  } else {
    match_state_ = nullptr;
  }
  ::memcpy(&mmr_, &from.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&radiant_won_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(radiant_won_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchStateSteamMLEntry)
}

void CMsgMatchStateSteamMLEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radiant_won_) -
    reinterpret_cast<char*>(&match_state_)) + sizeof(radiant_won_));
}

CMsgMatchStateSteamMLEntry::~CMsgMatchStateSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgMatchStateSteamMLEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchStateSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_state_;
}

void CMsgMatchStateSteamMLEntry::ArenaDtor(void* object) {
  CMsgMatchStateSteamMLEntry* _this = reinterpret_cast< CMsgMatchStateSteamMLEntry* >(object);
  (void)_this;
}
void CMsgMatchStateSteamMLEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchStateSteamMLEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchStateSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchStateSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(match_state_ != nullptr);
    match_state_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radiant_won_) -
        reinterpret_cast<char*>(&mmr_)) + sizeof(radiant_won_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchStateSteamMLEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool radiant_won = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_radiant_won(&has_bits);
          radiant_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchStateSteamMLEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchStateSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match_state(this), target, stream);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mmr(), target);
  }

  // optional bool radiant_won = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_radiant_won(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchStateSteamMLEntry)
  return target;
}

size_t CMsgMatchStateSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchStateSteamMLEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_state_);
    }

    // optional uint32 mmr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr());
    }

    // optional bool radiant_won = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchStateSteamMLEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchStateSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchStateSteamMLEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchStateSteamMLEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchStateSteamMLEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchStateSteamMLEntry)
    MergeFrom(*source);
  }
}

void CMsgMatchStateSteamMLEntry::MergeFrom(const CMsgMatchStateSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchStateSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match_state()->::CMsgServerToGCMatchStateHistory_MatchState::MergeFrom(from._internal_match_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mmr_ = from.mmr_;
    }
    if (cached_has_bits & 0x00000004u) {
      radiant_won_ = from.radiant_won_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchStateSteamMLEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchStateSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchStateSteamMLEntry::CopyFrom(const CMsgMatchStateSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchStateSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchStateSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgMatchStateSteamMLEntry::InternalSwap(CMsgMatchStateSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchStateSteamMLEntry, radiant_won_)
      + sizeof(CMsgMatchStateSteamMLEntry::radiant_won_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchStateSteamMLEntry, match_state_)>(
          reinterpret_cast<char*>(&match_state_),
          reinterpret_cast<char*>(&other->match_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchStateSteamMLEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLaneSelectionSteamMLEntry::_Internal {
 public:
};

CMsgLaneSelectionSteamMLEntry::CMsgLaneSelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hero_ids_(arena),
  lanes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLaneSelectionSteamMLEntry)
}
CMsgLaneSelectionSteamMLEntry::CMsgLaneSelectionSteamMLEntry(const CMsgLaneSelectionSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hero_ids_(from.hero_ids_),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLaneSelectionSteamMLEntry)
}

void CMsgLaneSelectionSteamMLEntry::SharedCtor() {
}

CMsgLaneSelectionSteamMLEntry::~CMsgLaneSelectionSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgLaneSelectionSteamMLEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLaneSelectionSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLaneSelectionSteamMLEntry::ArenaDtor(void* object) {
  CMsgLaneSelectionSteamMLEntry* _this = reinterpret_cast< CMsgLaneSelectionSteamMLEntry* >(object);
  (void)_this;
}
void CMsgLaneSelectionSteamMLEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLaneSelectionSteamMLEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLaneSelectionSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLaneSelectionSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_ids_.Clear();
  lanes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLaneSelectionSteamMLEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_lanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lanes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLaneSelectionSteamMLEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLaneSelectionSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
  for (int i = 0, n = this->_internal_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_ids(i), target);
  }

  // repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
  for (int i = 0, n = this->_internal_lanes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lanes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLaneSelectionSteamMLEntry)
  return target;
}

size_t CMsgLaneSelectionSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLaneSelectionSteamMLEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->lanes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lanes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLaneSelectionSteamMLEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLaneSelectionSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLaneSelectionSteamMLEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLaneSelectionSteamMLEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLaneSelectionSteamMLEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLaneSelectionSteamMLEntry)
    MergeFrom(*source);
  }
}

void CMsgLaneSelectionSteamMLEntry::MergeFrom(const CMsgLaneSelectionSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLaneSelectionSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_ids_.MergeFrom(from.hero_ids_);
  lanes_.MergeFrom(from.lanes_);
}

void CMsgLaneSelectionSteamMLEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLaneSelectionSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLaneSelectionSteamMLEntry::CopyFrom(const CMsgLaneSelectionSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLaneSelectionSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLaneSelectionSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgLaneSelectionSteamMLEntry::InternalSwap(CMsgLaneSelectionSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hero_ids_.InternalSwap(&other->hero_ids_);
  lanes_.InternalSwap(&other->lanes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLaneSelectionSteamMLEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAbilitySelectionSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAbilitySelectionSteamMLEntry>()._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selected_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAbilitySelectionSteamMLEntry::CMsgAbilitySelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  enemy_hero_ids_(arena),
  abilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAbilitySelectionSteamMLEntry)
}
CMsgAbilitySelectionSteamMLEntry::CMsgAbilitySelectionSteamMLEntry(const CMsgAbilitySelectionSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mmr_, &from.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&selected_ability_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(selected_ability_));
  // @@protoc_insertion_point(copy_constructor:CMsgAbilitySelectionSteamMLEntry)
}

void CMsgAbilitySelectionSteamMLEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mmr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selected_ability_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(selected_ability_));
}

CMsgAbilitySelectionSteamMLEntry::~CMsgAbilitySelectionSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgAbilitySelectionSteamMLEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAbilitySelectionSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAbilitySelectionSteamMLEntry::ArenaDtor(void* object) {
  CMsgAbilitySelectionSteamMLEntry* _this = reinterpret_cast< CMsgAbilitySelectionSteamMLEntry* >(object);
  (void)_this;
}
void CMsgAbilitySelectionSteamMLEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAbilitySelectionSteamMLEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAbilitySelectionSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAbilitySelectionSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enemy_hero_ids_.Clear();
  abilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_ability_) -
        reinterpret_cast<char*>(&mmr_)) + sizeof(selected_ability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAbilitySelectionSteamMLEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 abilities = 5 [(.steamml_max_entries) = 25];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_abilities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_abilities(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selected_ability = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_selected_ability(&has_bits);
          selected_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAbilitySelectionSteamMLEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAbilitySelectionSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enemy_hero_ids(i), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lane(), target);
  }

  // repeated uint32 abilities = 5 [(.steamml_max_entries) = 25];
  for (int i = 0, n = this->_internal_abilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_abilities(i), target);
  }

  // optional uint32 selected_ability = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_selected_ability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAbilitySelectionSteamMLEntry)
  return target;
}

size_t CMsgAbilitySelectionSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAbilitySelectionSteamMLEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 abilities = 5 [(.steamml_max_entries) = 25];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->abilities_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_abilities_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 lane = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

    // optional uint32 selected_ability = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selected_ability());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAbilitySelectionSteamMLEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAbilitySelectionSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAbilitySelectionSteamMLEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAbilitySelectionSteamMLEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAbilitySelectionSteamMLEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAbilitySelectionSteamMLEntry)
    MergeFrom(*source);
  }
}

void CMsgAbilitySelectionSteamMLEntry::MergeFrom(const CMsgAbilitySelectionSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAbilitySelectionSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mmr_ = from.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      selected_ability_ = from.selected_ability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAbilitySelectionSteamMLEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAbilitySelectionSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAbilitySelectionSteamMLEntry::CopyFrom(const CMsgAbilitySelectionSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAbilitySelectionSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAbilitySelectionSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgAbilitySelectionSteamMLEntry::InternalSwap(CMsgAbilitySelectionSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  abilities_.InternalSwap(&other->abilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAbilitySelectionSteamMLEntry, selected_ability_)
      + sizeof(CMsgAbilitySelectionSteamMLEntry::selected_ability_)
      - PROTOBUF_FIELD_OFFSET(CMsgAbilitySelectionSteamMLEntry, mmr_)>(
          reinterpret_cast<char*>(&mmr_),
          reinterpret_cast<char*>(&other->mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAbilitySelectionSteamMLEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgItemPurchasePregameSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemPurchasePregameSteamMLEntry>()._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgItemPurchasePregameSteamMLEntry::CMsgItemPurchasePregameSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allied_hero_ids_(arena),
  enemy_hero_ids_(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgItemPurchasePregameSteamMLEntry)
}
CMsgItemPurchasePregameSteamMLEntry::CMsgItemPurchasePregameSteamMLEntry(const CMsgItemPurchasePregameSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      allied_hero_ids_(from.allied_hero_ids_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mmr_, &from.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemPurchasePregameSteamMLEntry)
}

void CMsgItemPurchasePregameSteamMLEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mmr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(hero_id_));
}

CMsgItemPurchasePregameSteamMLEntry::~CMsgItemPurchasePregameSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgItemPurchasePregameSteamMLEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgItemPurchasePregameSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgItemPurchasePregameSteamMLEntry::ArenaDtor(void* object) {
  CMsgItemPurchasePregameSteamMLEntry* _this = reinterpret_cast< CMsgItemPurchasePregameSteamMLEntry* >(object);
  (void)_this;
}
void CMsgItemPurchasePregameSteamMLEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemPurchasePregameSteamMLEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgItemPurchasePregameSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemPurchasePregameSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allied_hero_ids_.Clear();
  enemy_hero_ids_.Clear();
  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&mmr_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemPurchasePregameSteamMLEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items = 7 [(.steamml_max_entries) = 9];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemPurchasePregameSteamMLEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemPurchasePregameSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane(), target);
  }

  // optional float balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_balance(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated uint32 items = 7 [(.steamml_max_entries) = 9];
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemPurchasePregameSteamMLEntry)
  return target;
}

size_t CMsgItemPurchasePregameSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemPurchasePregameSteamMLEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->allied_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 items = 7 [(.steamml_max_entries) = 9];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr());
    }

    // optional uint32 lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

    // optional float balance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemPurchasePregameSteamMLEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemPurchasePregameSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemPurchasePregameSteamMLEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgItemPurchasePregameSteamMLEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemPurchasePregameSteamMLEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemPurchasePregameSteamMLEntry)
    MergeFrom(*source);
  }
}

void CMsgItemPurchasePregameSteamMLEntry::MergeFrom(const CMsgItemPurchasePregameSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemPurchasePregameSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allied_hero_ids_.MergeFrom(from.allied_hero_ids_);
  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mmr_ = from.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgItemPurchasePregameSteamMLEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemPurchasePregameSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemPurchasePregameSteamMLEntry::CopyFrom(const CMsgItemPurchasePregameSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemPurchasePregameSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemPurchasePregameSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgItemPurchasePregameSteamMLEntry::InternalSwap(CMsgItemPurchasePregameSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allied_hero_ids_.InternalSwap(&other->allied_hero_ids_);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemPurchasePregameSteamMLEntry, hero_id_)
      + sizeof(CMsgItemPurchasePregameSteamMLEntry::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemPurchasePregameSteamMLEntry, mmr_)>(
          reinterpret_cast<char*>(&mmr_),
          reinterpret_cast<char*>(&other->mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemPurchasePregameSteamMLEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgItemPurchaseSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemPurchaseSteamMLEntry>()._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgItemPurchaseSteamMLEntry::CMsgItemPurchaseSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allied_hero_ids_(arena),
  enemy_hero_ids_(arena),
  items_(arena),
  items_to_be_purchased_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgItemPurchaseSteamMLEntry)
}
CMsgItemPurchaseSteamMLEntry::CMsgItemPurchaseSteamMLEntry(const CMsgItemPurchaseSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      allied_hero_ids_(from.allied_hero_ids_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      items_(from.items_),
      items_to_be_purchased_(from.items_to_be_purchased_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mmr_, &from.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemPurchaseSteamMLEntry)
}

void CMsgItemPurchaseSteamMLEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mmr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(hero_id_));
}

CMsgItemPurchaseSteamMLEntry::~CMsgItemPurchaseSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgItemPurchaseSteamMLEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgItemPurchaseSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgItemPurchaseSteamMLEntry::ArenaDtor(void* object) {
  CMsgItemPurchaseSteamMLEntry* _this = reinterpret_cast< CMsgItemPurchaseSteamMLEntry* >(object);
  (void)_this;
}
void CMsgItemPurchaseSteamMLEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemPurchaseSteamMLEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgItemPurchaseSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemPurchaseSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allied_hero_ids_.Clear();
  enemy_hero_ids_.Clear();
  items_.Clear();
  items_to_be_purchased_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&mmr_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemPurchaseSteamMLEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items = 6 [(.steamml_max_entries) = 20];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items_to_be_purchased(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items_to_be_purchased(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemPurchaseSteamMLEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemPurchaseSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated uint32 items = 6 [(.steamml_max_entries) = 20];
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_items(i), target);
  }

  // repeated uint32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
  for (int i = 0, n = this->_internal_items_to_be_purchased_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_items_to_be_purchased(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemPurchaseSteamMLEntry)
  return target;
}

size_t CMsgItemPurchaseSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemPurchaseSteamMLEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->allied_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 items = 6 [(.steamml_max_entries) = 20];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  // repeated uint32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_to_be_purchased_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_to_be_purchased_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr());
    }

    // optional uint32 lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemPurchaseSteamMLEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemPurchaseSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemPurchaseSteamMLEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgItemPurchaseSteamMLEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemPurchaseSteamMLEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemPurchaseSteamMLEntry)
    MergeFrom(*source);
  }
}

void CMsgItemPurchaseSteamMLEntry::MergeFrom(const CMsgItemPurchaseSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemPurchaseSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allied_hero_ids_.MergeFrom(from.allied_hero_ids_);
  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  items_.MergeFrom(from.items_);
  items_to_be_purchased_.MergeFrom(from.items_to_be_purchased_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mmr_ = from.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgItemPurchaseSteamMLEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemPurchaseSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemPurchaseSteamMLEntry::CopyFrom(const CMsgItemPurchaseSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemPurchaseSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemPurchaseSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgItemPurchaseSteamMLEntry::InternalSwap(CMsgItemPurchaseSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allied_hero_ids_.InternalSwap(&other->allied_hero_ids_);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  items_.InternalSwap(&other->items_);
  items_to_be_purchased_.InternalSwap(&other->items_to_be_purchased_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSteamMLEntry, hero_id_)
      + sizeof(CMsgItemPurchaseSteamMLEntry::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSteamMLEntry, mmr_)>(
          reinterpret_cast<char*>(&mmr_),
          reinterpret_cast<char*>(&other->mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemPurchaseSteamMLEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgItemPurchaseSequenceSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemPurchaseSequenceSteamMLEntry>()._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_to_be_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgItemPurchaseSequenceSteamMLEntry::CMsgItemPurchaseSequenceSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allied_hero_ids_(arena),
  enemy_hero_ids_(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgItemPurchaseSequenceSteamMLEntry)
}
CMsgItemPurchaseSequenceSteamMLEntry::CMsgItemPurchaseSequenceSteamMLEntry(const CMsgItemPurchaseSequenceSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      allied_hero_ids_(from.allied_hero_ids_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mmr_, &from.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_to_be_purchased_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(item_to_be_purchased_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemPurchaseSequenceSteamMLEntry)
}

void CMsgItemPurchaseSequenceSteamMLEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mmr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_to_be_purchased_) -
    reinterpret_cast<char*>(&mmr_)) + sizeof(item_to_be_purchased_));
}

CMsgItemPurchaseSequenceSteamMLEntry::~CMsgItemPurchaseSequenceSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgItemPurchaseSequenceSteamMLEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgItemPurchaseSequenceSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgItemPurchaseSequenceSteamMLEntry::ArenaDtor(void* object) {
  CMsgItemPurchaseSequenceSteamMLEntry* _this = reinterpret_cast< CMsgItemPurchaseSequenceSteamMLEntry* >(object);
  (void)_this;
}
void CMsgItemPurchaseSequenceSteamMLEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemPurchaseSequenceSteamMLEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgItemPurchaseSequenceSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemPurchaseSequenceSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allied_hero_ids_.Clear();
  enemy_hero_ids_.Clear();
  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_to_be_purchased_) -
        reinterpret_cast<char*>(&mmr_)) + sizeof(item_to_be_purchased_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemPurchaseSequenceSteamMLEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items = 6 [(.steamml_max_entries) = 20];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_to_be_purchased = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_item_to_be_purchased(&has_bits);
          item_to_be_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemPurchaseSequenceSteamMLEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemPurchaseSequenceSteamMLEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated uint32 items = 6 [(.steamml_max_entries) = 20];
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_items(i), target);
  }

  // optional uint32 item_to_be_purchased = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_item_to_be_purchased(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemPurchaseSequenceSteamMLEntry)
  return target;
}

size_t CMsgItemPurchaseSequenceSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemPurchaseSequenceSteamMLEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->allied_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 items = 6 [(.steamml_max_entries) = 20];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr());
    }

    // optional uint32 lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 item_to_be_purchased = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_to_be_purchased());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemPurchaseSequenceSteamMLEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemPurchaseSequenceSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemPurchaseSequenceSteamMLEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgItemPurchaseSequenceSteamMLEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemPurchaseSequenceSteamMLEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemPurchaseSequenceSteamMLEntry)
    MergeFrom(*source);
  }
}

void CMsgItemPurchaseSequenceSteamMLEntry::MergeFrom(const CMsgItemPurchaseSequenceSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemPurchaseSequenceSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allied_hero_ids_.MergeFrom(from.allied_hero_ids_);
  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mmr_ = from.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_to_be_purchased_ = from.item_to_be_purchased_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgItemPurchaseSequenceSteamMLEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemPurchaseSequenceSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemPurchaseSequenceSteamMLEntry::CopyFrom(const CMsgItemPurchaseSequenceSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemPurchaseSequenceSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemPurchaseSequenceSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgItemPurchaseSequenceSteamMLEntry::InternalSwap(CMsgItemPurchaseSequenceSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allied_hero_ids_.InternalSwap(&other->allied_hero_ids_);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSequenceSteamMLEntry, item_to_be_purchased_)
      + sizeof(CMsgItemPurchaseSequenceSteamMLEntry::item_to_be_purchased_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSequenceSteamMLEntry, mmr_)>(
          reinterpret_cast<char*>(&mmr_),
          reinterpret_cast<char*>(&other->mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemPurchaseSequenceSteamMLEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCavernCrawlIsHeroActive::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCavernCrawlIsHeroActive>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_turbo_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCavernCrawlIsHeroActive)
}
CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive(const CMsgServerToGCCavernCrawlIsHeroActive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&turbo_mode_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(turbo_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCavernCrawlIsHeroActive)
}

void CMsgServerToGCCavernCrawlIsHeroActive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&turbo_mode_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(turbo_mode_));
}

CMsgServerToGCCavernCrawlIsHeroActive::~CMsgServerToGCCavernCrawlIsHeroActive() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCavernCrawlIsHeroActive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCavernCrawlIsHeroActive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCavernCrawlIsHeroActive::ArenaDtor(void* object) {
  CMsgServerToGCCavernCrawlIsHeroActive* _this = reinterpret_cast< CMsgServerToGCCavernCrawlIsHeroActive* >(object);
  (void)_this;
}
void CMsgServerToGCCavernCrawlIsHeroActive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCavernCrawlIsHeroActive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCavernCrawlIsHeroActive::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCavernCrawlIsHeroActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&turbo_mode_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(turbo_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCavernCrawlIsHeroActive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map_variant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_map_variant(&has_bits);
          map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool turbo_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_turbo_mode(&has_bits);
          turbo_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCavernCrawlIsHeroActive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCavernCrawlIsHeroActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 map_variant = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_variant(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional bool turbo_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_turbo_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCavernCrawlIsHeroActive)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCavernCrawlIsHeroActive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 map_variant = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_map_variant());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional bool turbo_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCavernCrawlIsHeroActive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActive)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCavernCrawlIsHeroActive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCavernCrawlIsHeroActive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCavernCrawlIsHeroActive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCavernCrawlIsHeroActive)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCavernCrawlIsHeroActive::MergeFrom(const CMsgServerToGCCavernCrawlIsHeroActive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      map_variant_ = from.map_variant_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      turbo_mode_ = from.turbo_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCavernCrawlIsHeroActive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCavernCrawlIsHeroActive::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActive::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActive::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActive, turbo_mode_)
      + sizeof(CMsgServerToGCCavernCrawlIsHeroActive::turbo_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActive, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCavernCrawlIsHeroActive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_id1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_id2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_progress_value_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_progress_value_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_won(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
}
CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
}

CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::~CMsgServerToGCPlayerChallengeHistory_PlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::ArenaDtor(void* object) {
  CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* _this = reinterpret_cast< CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* >(object);
  (void)_this;
}
void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_won_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(team_won_));
  }
  hero_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPlayerChallengeHistoryType_IsValid(val))) {
            _internal_set_challenge_type(static_cast<::EPlayerChallengeHistoryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_id1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_id1(&has_bits);
          challenge_id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_id2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_id2(&has_bits);
          challenge_id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress_value_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_progress_value_start(&has_bits);
          progress_value_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress_value_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_progress_value_end(&has_bits);
          progress_value_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool team_won = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_won(&has_bits);
          team_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 audit_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_audit_data(&has_bits);
          audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_challenge_type(), target);
  }

  // optional uint32 challenge_id1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_id1(), target);
  }

  // optional uint32 challenge_id2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_id2(), target);
  }

  // optional uint32 progress_value_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_progress_value_start(), target);
  }

  // optional uint32 progress_value_end = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress_value_end(), target);
  }

  // optional bool team_won = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_team_won(), target);
  }

  // optional uint64 audit_data = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_audit_data(), target);
  }

  // optional uint32 hero_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  return target;
}

size_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_challenge_type());
    }

    // optional uint32 challenge_id1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_id1());
    }

    // optional uint32 challenge_id2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_id2());
    }

    // optional uint32 progress_value_start = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress_value_start());
    }

    // optional uint32 progress_value_end = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress_value_end());
    }

    // optional uint64 audit_data = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_audit_data());
    }

    // optional bool team_won = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 hero_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hero_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::MergeFrom(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_type_ = from.challenge_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_id1_ = from.challenge_id1_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_id2_ = from.challenge_id2_;
    }
    if (cached_has_bits & 0x00000010u) {
      progress_value_start_ = from.progress_value_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      progress_value_end_ = from.progress_value_end_;
    }
    if (cached_has_bits & 0x00000040u) {
      audit_data_ = from.audit_data_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_won_ = from.team_won_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_hero_id(from._internal_hero_id());
  }
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CopyFrom(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::InternalSwap(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, hero_id_)
      + sizeof(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCPlayerChallengeHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCPlayerChallengeHistory>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_average_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCPlayerChallengeHistory::CMsgServerToGCPlayerChallengeHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  challenge_records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCPlayerChallengeHistory)
}
CMsgServerToGCPlayerChallengeHistory::CMsgServerToGCPlayerChallengeHistory(const CMsgServerToGCPlayerChallengeHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      challenge_records_(from.challenge_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_rank_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(average_rank_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCPlayerChallengeHistory)
}

void CMsgServerToGCPlayerChallengeHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&average_rank_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(average_rank_));
}

CMsgServerToGCPlayerChallengeHistory::~CMsgServerToGCPlayerChallengeHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCPlayerChallengeHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCPlayerChallengeHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCPlayerChallengeHistory::ArenaDtor(void* object) {
  CMsgServerToGCPlayerChallengeHistory* _this = reinterpret_cast< CMsgServerToGCPlayerChallengeHistory* >(object);
  (void)_this;
}
void CMsgServerToGCPlayerChallengeHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCPlayerChallengeHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCPlayerChallengeHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCPlayerChallengeHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&average_rank_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(average_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCPlayerChallengeHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 average_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_average_rank(&has_bits);
          average_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_challenge_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCPlayerChallengeHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCPlayerChallengeHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 average_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_average_rank(), target);
  }

  // repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_challenge_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_challenge_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCPlayerChallengeHistory)
  return target;
}

size_t CMsgServerToGCPlayerChallengeHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCPlayerChallengeHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
  total_size += 1UL * this->_internal_challenge_records_size();
  for (const auto& msg : this->challenge_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 average_rank = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_average_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCPlayerChallengeHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCPlayerChallengeHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPlayerChallengeHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCPlayerChallengeHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCPlayerChallengeHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCPlayerChallengeHistory)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPlayerChallengeHistory::MergeFrom(const CMsgServerToGCPlayerChallengeHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCPlayerChallengeHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  challenge_records_.MergeFrom(from.challenge_records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      average_rank_ = from.average_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCPlayerChallengeHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCPlayerChallengeHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPlayerChallengeHistory::CopyFrom(const CMsgServerToGCPlayerChallengeHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCPlayerChallengeHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPlayerChallengeHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCPlayerChallengeHistory::InternalSwap(CMsgServerToGCPlayerChallengeHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  challenge_records_.InternalSwap(&other->challenge_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory, average_rank_)
      + sizeof(CMsgServerToGCPlayerChallengeHistory::average_rank_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCPlayerChallengeHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>()._has_bits_);
  static void set_has_path_id_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_room_id_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
}
CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&path_id_completed_, &from.path_id_completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_id_claimed_) -
    reinterpret_cast<char*>(&path_id_completed_)) + sizeof(room_id_claimed_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_id_completed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&room_id_claimed_) -
    reinterpret_cast<char*>(&path_id_completed_)) + sizeof(room_id_claimed_));
}

CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::~CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::ArenaDtor(void* object) {
  CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* _this = reinterpret_cast< CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* >(object);
  (void)_this;
}
void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&path_id_completed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&room_id_claimed_) -
        reinterpret_cast<char*>(&path_id_completed_)) + sizeof(room_id_claimed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 path_id_completed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_path_id_completed(&has_bits);
          path_id_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 room_id_claimed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id_claimed(&has_bits);
          room_id_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 path_id_completed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_path_id_completed(), target);
  }

  // optional uint32 room_id_claimed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_room_id_claimed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 path_id_completed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_path_id_completed());
    }

    // optional uint32 room_id_claimed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_room_id_claimed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::MergeFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_id_completed_ = from.path_id_completed_;
    }
    if (cached_has_bits & 0x00000002u) {
      room_id_claimed_ = from.room_id_claimed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, room_id_claimed_)
      + sizeof(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::room_id_claimed_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, path_id_completed_)>(
          reinterpret_cast<char*>(&path_id_completed_),
          reinterpret_cast<char*>(&other->path_id_completed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCCavernCrawlIsHeroActiveResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCavernCrawlIsHeroActiveResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_potential_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_potential_plus_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
}
CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      map_results_(from.map_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&potential_plus_shard_winnings_) -
    reinterpret_cast<char*>(&result_)) + sizeof(potential_plus_shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&potential_plus_shard_winnings_) -
    reinterpret_cast<char*>(&result_)) + sizeof(potential_plus_shard_winnings_));
}

CMsgServerToGCCavernCrawlIsHeroActiveResponse::~CMsgServerToGCCavernCrawlIsHeroActiveResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::ArenaDtor(void* object) {
  CMsgServerToGCCavernCrawlIsHeroActiveResponse* _this = reinterpret_cast< CMsgServerToGCCavernCrawlIsHeroActiveResponse* >(object);
  (void)_this;
}
void CMsgServerToGCCavernCrawlIsHeroActiveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&potential_plus_shard_winnings_) -
        reinterpret_cast<char*>(&result_)) + sizeof(potential_plus_shard_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCavernCrawlIsHeroActiveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 potential_winnings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_potential_winnings(&has_bits);
          potential_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 potential_plus_shard_winnings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_potential_plus_shard_winnings(&has_bits);
          potential_plus_shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCCavernCrawlIsHeroActiveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // optional uint32 potential_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_potential_winnings(), target);
  }

  // repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_map_results(i), target, stream);
  }

  // optional uint32 potential_plus_shard_winnings = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_potential_plus_shard_winnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
  total_size += 1UL * this->_internal_map_results_size();
  for (const auto& msg : this->map_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 potential_winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_potential_winnings());
    }

    // optional uint32 potential_plus_shard_winnings = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_potential_plus_shard_winnings());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCavernCrawlIsHeroActiveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCCavernCrawlIsHeroActiveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergeFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_results_.MergeFrom(from.map_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      potential_winnings_ = from.potential_winnings_;
    }
    if (cached_has_bits & 0x00000004u) {
      potential_plus_shard_winnings_ = from.potential_plus_shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_results_.InternalSwap(&other->map_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActiveResponse, potential_plus_shard_winnings_)
      + sizeof(CMsgServerToGCCavernCrawlIsHeroActiveResponse::potential_plus_shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActiveResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCavernCrawlIsHeroActiveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCtoServerTensorflowInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCtoServerTensorflowInstance>()._has_bits_);
  static void set_has_server_instance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCtoServerTensorflowInstance)
}
CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance(const CMsgGCtoServerTensorflowInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_instance_ = from.server_instance_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCtoServerTensorflowInstance)
}

void CMsgGCtoServerTensorflowInstance::SharedCtor() {
server_instance_ = 0u;
}

CMsgGCtoServerTensorflowInstance::~CMsgGCtoServerTensorflowInstance() {
  // @@protoc_insertion_point(destructor:CMsgGCtoServerTensorflowInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCtoServerTensorflowInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCtoServerTensorflowInstance::ArenaDtor(void* object) {
  CMsgGCtoServerTensorflowInstance* _this = reinterpret_cast< CMsgGCtoServerTensorflowInstance* >(object);
  (void)_this;
}
void CMsgGCtoServerTensorflowInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCtoServerTensorflowInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCtoServerTensorflowInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCtoServerTensorflowInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_instance_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCtoServerTensorflowInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_instance(&has_bits);
          server_instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCtoServerTensorflowInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCtoServerTensorflowInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_instance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCtoServerTensorflowInstance)
  return target;
}

size_t CMsgGCtoServerTensorflowInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCtoServerTensorflowInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_instance = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_instance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCtoServerTensorflowInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCtoServerTensorflowInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCtoServerTensorflowInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCtoServerTensorflowInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCtoServerTensorflowInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCtoServerTensorflowInstance)
    MergeFrom(*source);
  }
}

void CMsgGCtoServerTensorflowInstance::MergeFrom(const CMsgGCtoServerTensorflowInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCtoServerTensorflowInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_instance()) {
    _internal_set_server_instance(from._internal_server_instance());
  }
}

void CMsgGCtoServerTensorflowInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCtoServerTensorflowInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCtoServerTensorflowInstance::CopyFrom(const CMsgGCtoServerTensorflowInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCtoServerTensorflowInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCtoServerTensorflowInstance::IsInitialized() const {
  return true;
}

void CMsgGCtoServerTensorflowInstance::InternalSwap(CMsgGCtoServerTensorflowInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_instance_, other->server_instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCtoServerTensorflowInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDetailedGameStats_PlayerStatEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_PlayerStatEntry>()._has_bits_);
  static void set_has_total_earned_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_networth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_dps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_average_dps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_damage_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_health(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_health(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_mana(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_base_physical_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_physical_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_ability_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_total_ability_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ability_damage_block(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_physical_damage_block(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mana_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_health_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_physical_magic_dmg_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gold_from_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gold_from_creeps(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_gold_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_xp_from_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_xp_from_creeps(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_total_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ability_casts(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_item_casts(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_total_time_stunned(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

CMsgDetailedGameStats_PlayerStatEntry::CMsgDetailedGameStats_PlayerStatEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.PlayerStatEntry)
}
CMsgDetailedGameStats_PlayerStatEntry::CMsgDetailedGameStats_PlayerStatEntry(const CMsgDetailedGameStats_PlayerStatEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_earned_gold_, &from.total_earned_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_count_) -
    reinterpret_cast<char*>(&total_earned_gold_)) + sizeof(item_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.PlayerStatEntry)
}

void CMsgDetailedGameStats_PlayerStatEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_earned_gold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_count_) -
    reinterpret_cast<char*>(&total_earned_gold_)) + sizeof(item_count_));
}

CMsgDetailedGameStats_PlayerStatEntry::~CMsgDetailedGameStats_PlayerStatEntry() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.PlayerStatEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDetailedGameStats_PlayerStatEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDetailedGameStats_PlayerStatEntry::ArenaDtor(void* object) {
  CMsgDetailedGameStats_PlayerStatEntry* _this = reinterpret_cast< CMsgDetailedGameStats_PlayerStatEntry* >(object);
  (void)_this;
}
void CMsgDetailedGameStats_PlayerStatEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDetailedGameStats_PlayerStatEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDetailedGameStats_PlayerStatEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.PlayerStatEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&total_earned_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_health_) -
        reinterpret_cast<char*>(&total_earned_gold_)) + sizeof(total_health_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&total_mana_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mana_regen_) -
        reinterpret_cast<char*>(&total_mana_)) + sizeof(mana_regen_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&health_regen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gold_shared_) -
        reinterpret_cast<char*>(&health_regen_)) + sizeof(gold_shared_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&xp_from_kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_count_) -
        reinterpret_cast<char*>(&xp_from_kills_)) + sizeof(item_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_PlayerStatEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 total_earned_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total_earned_gold(&has_bits);
          total_earned_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_networth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_networth(&has_bits);
          total_networth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_dps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_dps(&has_bits);
          total_dps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 average_dps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_average_dps(&has_bits);
          average_dps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_damage_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ability_damage_output(&has_bits);
          ability_damage_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_health = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_base_health(&has_bits);
          base_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_health = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_total_health(&has_bits);
          total_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_mana = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_total_mana(&has_bits);
          total_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float base_physical_damage_reduction_pct = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_base_physical_damage_reduction_pct(&has_bits);
          base_physical_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float total_physical_damage_reduction_pct = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_total_physical_damage_reduction_pct(&has_bits);
          total_physical_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float base_ability_damage_reduction_pct = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_base_ability_damage_reduction_pct(&has_bits);
          base_ability_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float total_ability_damage_reduction_pct = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_total_ability_damage_reduction_pct(&has_bits);
          total_ability_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ability_damage_block = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ability_damage_block(&has_bits);
          ability_damage_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float physical_damage_block = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_physical_damage_block(&has_bits);
          physical_damage_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 mana_regen = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_mana_regen(&has_bits);
          mana_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 health_regen = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_health_regen(&has_bits);
          health_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float physical_magic_dmg_pct = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_physical_magic_dmg_pct(&has_bits);
          physical_magic_dmg_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_from_kills = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_gold_from_kills(&has_bits);
          gold_from_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_from_creeps = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_gold_from_creeps(&has_bits);
          gold_from_creeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_shared = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_gold_shared(&has_bits);
          gold_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_from_kills = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_xp_from_kills(&has_bits);
          xp_from_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_from_creeps = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_xp_from_creeps(&has_bits);
          xp_from_creeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_xp = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_total_xp(&has_bits);
          total_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_casts = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_ability_casts(&has_bits);
          ability_casts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_casts = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_item_casts(&has_bits);
          item_casts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float total_time_stunned = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_total_time_stunned(&has_bits);
          total_time_stunned_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_count = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDetailedGameStats_PlayerStatEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.PlayerStatEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_earned_gold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_earned_gold(), target);
  }

  // optional uint32 total_networth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_networth(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 total_dps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_dps(), target);
  }

  // optional uint32 average_dps = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_average_dps(), target);
  }

  // optional uint32 ability_damage_output = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ability_damage_output(), target);
  }

  // optional uint32 base_health = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_base_health(), target);
  }

  // optional uint32 total_health = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_total_health(), target);
  }

  // optional uint32 total_mana = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_total_mana(), target);
  }

  // optional float base_physical_damage_reduction_pct = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_base_physical_damage_reduction_pct(), target);
  }

  // optional float total_physical_damage_reduction_pct = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_total_physical_damage_reduction_pct(), target);
  }

  // optional float base_ability_damage_reduction_pct = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_base_ability_damage_reduction_pct(), target);
  }

  // optional float total_ability_damage_reduction_pct = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_total_ability_damage_reduction_pct(), target);
  }

  // optional float ability_damage_block = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_ability_damage_block(), target);
  }

  // optional float physical_damage_block = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_physical_damage_block(), target);
  }

  // optional uint32 mana_regen = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_mana_regen(), target);
  }

  // optional uint32 health_regen = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_health_regen(), target);
  }

  // optional float physical_magic_dmg_pct = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_physical_magic_dmg_pct(), target);
  }

  // optional uint32 kills = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_assists(), target);
  }

  // optional uint32 gold_from_kills = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_gold_from_kills(), target);
  }

  // optional uint32 gold_from_creeps = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_gold_from_creeps(), target);
  }

  // optional uint32 gold_shared = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_gold_shared(), target);
  }

  // optional uint32 xp_from_kills = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_xp_from_kills(), target);
  }

  // optional uint32 xp_from_creeps = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_xp_from_creeps(), target);
  }

  // optional uint32 total_xp = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_total_xp(), target);
  }

  // optional uint32 ability_casts = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_ability_casts(), target);
  }

  // optional uint32 item_casts = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_item_casts(), target);
  }

  // optional float total_time_stunned = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_total_time_stunned(), target);
  }

  // optional uint32 item_count = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.PlayerStatEntry)
  return target;
}

size_t CMsgDetailedGameStats_PlayerStatEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.PlayerStatEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 total_earned_gold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_earned_gold());
    }

    // optional uint32 total_networth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_networth());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 total_dps = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_dps());
    }

    // optional uint32 average_dps = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_average_dps());
    }

    // optional uint32 ability_damage_output = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_damage_output());
    }

    // optional uint32 base_health = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_health());
    }

    // optional uint32 total_health = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_health());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 total_mana = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_mana());
    }

    // optional float base_physical_damage_reduction_pct = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float total_physical_damage_reduction_pct = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float base_ability_damage_reduction_pct = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float total_ability_damage_reduction_pct = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float ability_damage_block = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float physical_damage_block = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 mana_regen = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mana_regen());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 health_regen = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_health_regen());
    }

    // optional float physical_magic_dmg_pct = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional uint32 kills = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 gold_from_kills = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_from_kills());
    }

    // optional uint32 gold_from_creeps = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_from_creeps());
    }

    // optional uint32 gold_shared = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_shared());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional uint32 xp_from_kills = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_from_kills());
    }

    // optional uint32 xp_from_creeps = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_from_creeps());
    }

    // optional uint32 total_xp = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_xp());
    }

    // optional uint32 ability_casts = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_casts());
    }

    // optional uint32 item_casts = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_casts());
    }

    // optional float total_time_stunned = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 item_count = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDetailedGameStats_PlayerStatEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDetailedGameStats.PlayerStatEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDetailedGameStats_PlayerStatEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDetailedGameStats_PlayerStatEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDetailedGameStats.PlayerStatEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDetailedGameStats.PlayerStatEntry)
    MergeFrom(*source);
  }
}

void CMsgDetailedGameStats_PlayerStatEntry::MergeFrom(const CMsgDetailedGameStats_PlayerStatEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.PlayerStatEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      total_earned_gold_ = from.total_earned_gold_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_networth_ = from.total_networth_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_dps_ = from.total_dps_;
    }
    if (cached_has_bits & 0x00000010u) {
      average_dps_ = from.average_dps_;
    }
    if (cached_has_bits & 0x00000020u) {
      ability_damage_output_ = from.ability_damage_output_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_health_ = from.base_health_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_health_ = from.total_health_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      total_mana_ = from.total_mana_;
    }
    if (cached_has_bits & 0x00000200u) {
      base_physical_damage_reduction_pct_ = from.base_physical_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_physical_damage_reduction_pct_ = from.total_physical_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_ability_damage_reduction_pct_ = from.base_ability_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_ability_damage_reduction_pct_ = from.total_ability_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00002000u) {
      ability_damage_block_ = from.ability_damage_block_;
    }
    if (cached_has_bits & 0x00004000u) {
      physical_damage_block_ = from.physical_damage_block_;
    }
    if (cached_has_bits & 0x00008000u) {
      mana_regen_ = from.mana_regen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      health_regen_ = from.health_regen_;
    }
    if (cached_has_bits & 0x00020000u) {
      physical_magic_dmg_pct_ = from.physical_magic_dmg_pct_;
    }
    if (cached_has_bits & 0x00040000u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00080000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00100000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00200000u) {
      gold_from_kills_ = from.gold_from_kills_;
    }
    if (cached_has_bits & 0x00400000u) {
      gold_from_creeps_ = from.gold_from_creeps_;
    }
    if (cached_has_bits & 0x00800000u) {
      gold_shared_ = from.gold_shared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      xp_from_kills_ = from.xp_from_kills_;
    }
    if (cached_has_bits & 0x02000000u) {
      xp_from_creeps_ = from.xp_from_creeps_;
    }
    if (cached_has_bits & 0x04000000u) {
      total_xp_ = from.total_xp_;
    }
    if (cached_has_bits & 0x08000000u) {
      ability_casts_ = from.ability_casts_;
    }
    if (cached_has_bits & 0x10000000u) {
      item_casts_ = from.item_casts_;
    }
    if (cached_has_bits & 0x20000000u) {
      total_time_stunned_ = from.total_time_stunned_;
    }
    if (cached_has_bits & 0x40000000u) {
      item_count_ = from.item_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDetailedGameStats_PlayerStatEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDetailedGameStats.PlayerStatEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDetailedGameStats_PlayerStatEntry::CopyFrom(const CMsgDetailedGameStats_PlayerStatEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.PlayerStatEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_PlayerStatEntry::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_PlayerStatEntry::InternalSwap(CMsgDetailedGameStats_PlayerStatEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerStatEntry, item_count_)
      + sizeof(CMsgDetailedGameStats_PlayerStatEntry::item_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerStatEntry, total_earned_gold_)>(
          reinterpret_cast<char*>(&total_earned_gold_),
          reinterpret_cast<char*>(&other->total_earned_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_PlayerStatEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDetailedGameStats_GameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_GameStats>()._has_bits_);
  static void set_has_tower_death_time_t1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tower_death_time_t2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tower_death_time_t3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDetailedGameStats_GameStats::CMsgDetailedGameStats_GameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.GameStats)
}
CMsgDetailedGameStats_GameStats::CMsgDetailedGameStats_GameStats(const CMsgDetailedGameStats_GameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tower_death_time_t1_, &from.tower_death_time_t1_,
    static_cast<size_t>(reinterpret_cast<char*>(&tower_death_time_t3_) -
    reinterpret_cast<char*>(&tower_death_time_t1_)) + sizeof(tower_death_time_t3_));
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.GameStats)
}

void CMsgDetailedGameStats_GameStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tower_death_time_t1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tower_death_time_t3_) -
    reinterpret_cast<char*>(&tower_death_time_t1_)) + sizeof(tower_death_time_t3_));
}

CMsgDetailedGameStats_GameStats::~CMsgDetailedGameStats_GameStats() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.GameStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDetailedGameStats_GameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDetailedGameStats_GameStats::ArenaDtor(void* object) {
  CMsgDetailedGameStats_GameStats* _this = reinterpret_cast< CMsgDetailedGameStats_GameStats* >(object);
  (void)_this;
}
void CMsgDetailedGameStats_GameStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDetailedGameStats_GameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDetailedGameStats_GameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.GameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&tower_death_time_t1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tower_death_time_t3_) -
        reinterpret_cast<char*>(&tower_death_time_t1_)) + sizeof(tower_death_time_t3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_GameStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tower_death_time_t1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tower_death_time_t1(&has_bits);
          tower_death_time_t1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_death_time_t2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tower_death_time_t2(&has_bits);
          tower_death_time_t2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_death_time_t3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tower_death_time_t3(&has_bits);
          tower_death_time_t3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDetailedGameStats_GameStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.GameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tower_death_time_t1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tower_death_time_t1(), target);
  }

  // optional uint32 tower_death_time_t2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tower_death_time_t2(), target);
  }

  // optional uint32 tower_death_time_t3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tower_death_time_t3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.GameStats)
  return target;
}

size_t CMsgDetailedGameStats_GameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.GameStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 tower_death_time_t1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_death_time_t1());
    }

    // optional uint32 tower_death_time_t2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_death_time_t2());
    }

    // optional uint32 tower_death_time_t3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_death_time_t3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDetailedGameStats_GameStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDetailedGameStats.GameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDetailedGameStats_GameStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDetailedGameStats_GameStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDetailedGameStats.GameStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDetailedGameStats.GameStats)
    MergeFrom(*source);
  }
}

void CMsgDetailedGameStats_GameStats::MergeFrom(const CMsgDetailedGameStats_GameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.GameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tower_death_time_t1_ = from.tower_death_time_t1_;
    }
    if (cached_has_bits & 0x00000002u) {
      tower_death_time_t2_ = from.tower_death_time_t2_;
    }
    if (cached_has_bits & 0x00000004u) {
      tower_death_time_t3_ = from.tower_death_time_t3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDetailedGameStats_GameStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDetailedGameStats.GameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDetailedGameStats_GameStats::CopyFrom(const CMsgDetailedGameStats_GameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.GameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_GameStats::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_GameStats::InternalSwap(CMsgDetailedGameStats_GameStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_GameStats, tower_death_time_t3_)
      + sizeof(CMsgDetailedGameStats_GameStats::tower_death_time_t3_)
      - PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_GameStats, tower_death_time_t1_)>(
          reinterpret_cast<char*>(&tower_death_time_t1_),
          reinterpret_cast<char*>(&other->tower_death_time_t1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_GameStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDetailedGameStats_MinuteEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_MinuteEntry>()._has_bits_);
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDetailedGameStats_MinuteEntry::CMsgDetailedGameStats_MinuteEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.MinuteEntry)
}
CMsgDetailedGameStats_MinuteEntry::CMsgDetailedGameStats_MinuteEntry(const CMsgDetailedGameStats_MinuteEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  minute_ = from.minute_;
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.MinuteEntry)
}

void CMsgDetailedGameStats_MinuteEntry::SharedCtor() {
minute_ = 0u;
}

CMsgDetailedGameStats_MinuteEntry::~CMsgDetailedGameStats_MinuteEntry() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.MinuteEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDetailedGameStats_MinuteEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDetailedGameStats_MinuteEntry::ArenaDtor(void* object) {
  CMsgDetailedGameStats_MinuteEntry* _this = reinterpret_cast< CMsgDetailedGameStats_MinuteEntry* >(object);
  (void)_this;
}
void CMsgDetailedGameStats_MinuteEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDetailedGameStats_MinuteEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDetailedGameStats_MinuteEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.MinuteEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  minute_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_MinuteEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 minute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_minute(&has_bits);
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDetailedGameStats_MinuteEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.MinuteEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 minute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_minute(), target);
  }

  // repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.MinuteEntry)
  return target;
}

size_t CMsgDetailedGameStats_MinuteEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.MinuteEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 minute = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minute());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDetailedGameStats_MinuteEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDetailedGameStats.MinuteEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDetailedGameStats_MinuteEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDetailedGameStats_MinuteEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDetailedGameStats.MinuteEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDetailedGameStats.MinuteEntry)
    MergeFrom(*source);
  }
}

void CMsgDetailedGameStats_MinuteEntry::MergeFrom(const CMsgDetailedGameStats_MinuteEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.MinuteEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from._internal_has_minute()) {
    _internal_set_minute(from._internal_minute());
  }
}

void CMsgDetailedGameStats_MinuteEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDetailedGameStats.MinuteEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDetailedGameStats_MinuteEntry::CopyFrom(const CMsgDetailedGameStats_MinuteEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.MinuteEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_MinuteEntry::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_MinuteEntry::InternalSwap(CMsgDetailedGameStats_MinuteEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  swap(minute_, other->minute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_MinuteEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDetailedGameStats_PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_PlayerInfo>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDetailedGameStats_PlayerInfo::CMsgDetailedGameStats_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.PlayerInfo)
}
CMsgDetailedGameStats_PlayerInfo::CMsgDetailedGameStats_PlayerInfo(const CMsgDetailedGameStats_PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.PlayerInfo)
}

void CMsgDetailedGameStats_PlayerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
}

CMsgDetailedGameStats_PlayerInfo::~CMsgDetailedGameStats_PlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.PlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDetailedGameStats_PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDetailedGameStats_PlayerInfo::ArenaDtor(void* object) {
  CMsgDetailedGameStats_PlayerInfo* _this = reinterpret_cast< CMsgDetailedGameStats_PlayerInfo* >(object);
  (void)_this;
}
void CMsgDetailedGameStats_PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDetailedGameStats_PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDetailedGameStats_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_slot_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDetailedGameStats_PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.PlayerInfo)
  return target;
}

size_t CMsgDetailedGameStats_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDetailedGameStats_PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDetailedGameStats.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDetailedGameStats_PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDetailedGameStats_PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDetailedGameStats.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDetailedGameStats.PlayerInfo)
    MergeFrom(*source);
  }
}

void CMsgDetailedGameStats_PlayerInfo::MergeFrom(const CMsgDetailedGameStats_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_slot_ = from.player_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDetailedGameStats_PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDetailedGameStats.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDetailedGameStats_PlayerInfo::CopyFrom(const CMsgDetailedGameStats_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_PlayerInfo::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_PlayerInfo::InternalSwap(CMsgDetailedGameStats_PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerInfo, player_slot_)
      + sizeof(CMsgDetailedGameStats_PlayerInfo::player_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerInfo, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDetailedGameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats>()._has_bits_);
  static const ::CMsgDetailedGameStats_GameStats& game_stats(const CMsgDetailedGameStats* msg);
  static void set_has_game_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDetailedGameStats_GameStats&
CMsgDetailedGameStats::_Internal::game_stats(const CMsgDetailedGameStats* msg) {
  return *msg->game_stats_;
}
CMsgDetailedGameStats::CMsgDetailedGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  minutes_(arena),
  player_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats)
}
CMsgDetailedGameStats::CMsgDetailedGameStats(const CMsgDetailedGameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      minutes_(from.minutes_),
      player_info_(from.player_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_stats()) {
    game_stats_ = new ::CMsgDetailedGameStats_GameStats(*from.game_stats_);
  } else {
    game_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats)
}

void CMsgDetailedGameStats::SharedCtor() {
game_stats_ = nullptr;
}

CMsgDetailedGameStats::~CMsgDetailedGameStats() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDetailedGameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_stats_;
}

void CMsgDetailedGameStats::ArenaDtor(void* object) {
  CMsgDetailedGameStats* _this = reinterpret_cast< CMsgDetailedGameStats* >(object);
  (void)_this;
}
void CMsgDetailedGameStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDetailedGameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDetailedGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minutes_.Clear();
  player_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_stats_ != nullptr);
    game_stats_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minutes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDetailedGameStats.GameStats game_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDetailedGameStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_minutes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_minutes(i), target, stream);
  }

  // repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_player_info(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDetailedGameStats.GameStats game_stats = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::game_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats)
  return target;
}

size_t CMsgDetailedGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
  total_size += 1UL * this->_internal_minutes_size();
  for (const auto& msg : this->minutes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
  total_size += 1UL * this->_internal_player_info_size();
  for (const auto& msg : this->player_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgDetailedGameStats.GameStats game_stats = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_stats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDetailedGameStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDetailedGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDetailedGameStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDetailedGameStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDetailedGameStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDetailedGameStats)
    MergeFrom(*source);
  }
}

void CMsgDetailedGameStats::MergeFrom(const CMsgDetailedGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  minutes_.MergeFrom(from.minutes_);
  player_info_.MergeFrom(from.player_info_);
  if (from._internal_has_game_stats()) {
    _internal_mutable_game_stats()->::CMsgDetailedGameStats_GameStats::MergeFrom(from._internal_game_stats());
  }
}

void CMsgDetailedGameStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDetailedGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDetailedGameStats::CopyFrom(const CMsgDetailedGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats::InternalSwap(CMsgDetailedGameStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  minutes_.InternalSwap(&other->minutes_);
  player_info_.InternalSwap(&other->player_info_);
  swap(game_stats_, other->game_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAllStarStats_PlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAllStarStats_PlayerStats>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_killstreak_ended(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roshan_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_bloods(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_courier_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_first_taunt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_first_high_five(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_first_ceb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_first_tip(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_first_rapier(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_first_aegis_deny(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_last_to_die(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_first_to_wipe(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CMsgAllStarStats_PlayerStats::CMsgAllStarStats_PlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  killstreak_(arena),
  num_multi_kills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAllStarStats.PlayerStats)
}
CMsgAllStarStats_PlayerStats::CMsgAllStarStats_PlayerStats(const CMsgAllStarStats_PlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      killstreak_(from.killstreak_),
      num_multi_kills_(from.num_multi_kills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgAllStarStats.PlayerStats)
}

void CMsgAllStarStats_PlayerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(assists_));
}

CMsgAllStarStats_PlayerStats::~CMsgAllStarStats_PlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgAllStarStats.PlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAllStarStats_PlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAllStarStats_PlayerStats::ArenaDtor(void* object) {
  CMsgAllStarStats_PlayerStats* _this = reinterpret_cast< CMsgAllStarStats_PlayerStats* >(object);
  (void)_this;
}
void CMsgAllStarStats_PlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAllStarStats_PlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAllStarStats_PlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAllStarStats.PlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  killstreak_.Clear();
  num_multi_kills_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_taunt_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(first_taunt_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&first_high_five_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kills_) -
        reinterpret_cast<char*>(&first_high_five_)) + sizeof(kills_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&deaths_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&deaths_)) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAllStarStats_PlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 killstreak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_killstreak(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_killstreak(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num_multi_kills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_num_multi_kills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_num_multi_kills(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killstreak_ended = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_killstreak_ended(&has_bits);
          killstreak_ended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roshan_kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_roshan_kills(&has_bits);
          roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_bloods = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_first_bloods(&has_bits);
          first_bloods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 courier_kills = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_courier_kills(&has_bits);
          courier_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_kills = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tower_kills(&has_bits);
          tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_taunt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_first_taunt(&has_bits);
          first_taunt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_high_five = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_first_high_five(&has_bits);
          first_high_five_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_ceb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_first_ceb(&has_bits);
          first_ceb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_tip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_first_tip(&has_bits);
          first_tip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_rapier = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_first_rapier(&has_bits);
          first_rapier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_aegis_deny = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_first_aegis_deny(&has_bits);
          first_aegis_deny_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool last_to_die = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_last_to_die(&has_bits);
          last_to_die_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_to_wipe = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_first_to_wipe(&has_bits);
          first_to_wipe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAllStarStats_PlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAllStarStats.PlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // repeated uint32 killstreak = 3;
  for (int i = 0, n = this->_internal_killstreak_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_killstreak(i), target);
  }

  // repeated uint32 num_multi_kills = 4;
  for (int i = 0, n = this->_internal_num_multi_kills_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_multi_kills(i), target);
  }

  // optional uint32 killstreak_ended = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_killstreak_ended(), target);
  }

  // optional uint32 roshan_kills = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_roshan_kills(), target);
  }

  // optional uint32 first_bloods = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_first_bloods(), target);
  }

  // optional uint32 courier_kills = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_courier_kills(), target);
  }

  // optional uint32 tower_kills = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tower_kills(), target);
  }

  // optional bool first_taunt = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_first_taunt(), target);
  }

  // optional bool first_high_five = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_first_high_five(), target);
  }

  // optional bool first_ceb = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_first_ceb(), target);
  }

  // optional bool first_tip = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_first_tip(), target);
  }

  // optional bool first_rapier = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_first_rapier(), target);
  }

  // optional bool first_aegis_deny = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_first_aegis_deny(), target);
  }

  // optional bool last_to_die = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_last_to_die(), target);
  }

  // optional bool first_to_wipe = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_first_to_wipe(), target);
  }

  // optional uint32 kills = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAllStarStats.PlayerStats)
  return target;
}

size_t CMsgAllStarStats_PlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAllStarStats.PlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 killstreak = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->killstreak_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_killstreak_size());
    total_size += data_size;
  }

  // repeated uint32 num_multi_kills = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_multi_kills_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_multi_kills_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 killstreak_ended = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killstreak_ended());
    }

    // optional uint32 roshan_kills = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roshan_kills());
    }

    // optional uint32 first_bloods = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_bloods());
    }

    // optional uint32 courier_kills = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_courier_kills());
    }

    // optional uint32 tower_kills = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_kills());
    }

    // optional bool first_taunt = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool first_high_five = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool first_ceb = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool first_tip = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool first_rapier = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool first_aegis_deny = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool last_to_die = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool first_to_wipe = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional uint32 kills = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint32 deaths = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAllStarStats_PlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAllStarStats.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAllStarStats_PlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAllStarStats_PlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAllStarStats.PlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAllStarStats.PlayerStats)
    MergeFrom(*source);
  }
}

void CMsgAllStarStats_PlayerStats::MergeFrom(const CMsgAllStarStats_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAllStarStats.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  killstreak_.MergeFrom(from.killstreak_);
  num_multi_kills_.MergeFrom(from.num_multi_kills_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      killstreak_ended_ = from.killstreak_ended_;
    }
    if (cached_has_bits & 0x00000008u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_bloods_ = from.first_bloods_;
    }
    if (cached_has_bits & 0x00000020u) {
      courier_kills_ = from.courier_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_taunt_ = from.first_taunt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      first_high_five_ = from.first_high_five_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_ceb_ = from.first_ceb_;
    }
    if (cached_has_bits & 0x00000400u) {
      first_tip_ = from.first_tip_;
    }
    if (cached_has_bits & 0x00000800u) {
      first_rapier_ = from.first_rapier_;
    }
    if (cached_has_bits & 0x00001000u) {
      first_aegis_deny_ = from.first_aegis_deny_;
    }
    if (cached_has_bits & 0x00002000u) {
      last_to_die_ = from.last_to_die_;
    }
    if (cached_has_bits & 0x00004000u) {
      first_to_wipe_ = from.first_to_wipe_;
    }
    if (cached_has_bits & 0x00008000u) {
      kills_ = from.kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00020000u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAllStarStats_PlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAllStarStats.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAllStarStats_PlayerStats::CopyFrom(const CMsgAllStarStats_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAllStarStats.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAllStarStats_PlayerStats::IsInitialized() const {
  return true;
}

void CMsgAllStarStats_PlayerStats::InternalSwap(CMsgAllStarStats_PlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  killstreak_.InternalSwap(&other->killstreak_);
  num_multi_kills_.InternalSwap(&other->num_multi_kills_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAllStarStats_PlayerStats, assists_)
      + sizeof(CMsgAllStarStats_PlayerStats::assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgAllStarStats_PlayerStats, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAllStarStats_PlayerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAllStarStats::_Internal {
 public:
};

CMsgAllStarStats::CMsgAllStarStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAllStarStats)
}
CMsgAllStarStats::CMsgAllStarStats(const CMsgAllStarStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_stats_(from.player_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAllStarStats)
}

void CMsgAllStarStats::SharedCtor() {
}

CMsgAllStarStats::~CMsgAllStarStats() {
  // @@protoc_insertion_point(destructor:CMsgAllStarStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAllStarStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAllStarStats::ArenaDtor(void* object) {
  CMsgAllStarStats* _this = reinterpret_cast< CMsgAllStarStats* >(object);
  (void)_this;
}
void CMsgAllStarStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAllStarStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAllStarStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAllStarStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAllStarStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgAllStarStats.PlayerStats player_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAllStarStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAllStarStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgAllStarStats.PlayerStats player_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAllStarStats)
  return target;
}

size_t CMsgAllStarStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAllStarStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAllStarStats.PlayerStats player_stats = 1;
  total_size += 1UL * this->_internal_player_stats_size();
  for (const auto& msg : this->player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAllStarStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAllStarStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAllStarStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAllStarStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAllStarStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAllStarStats)
    MergeFrom(*source);
  }
}

void CMsgAllStarStats::MergeFrom(const CMsgAllStarStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAllStarStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_stats_.MergeFrom(from.player_stats_);
}

void CMsgAllStarStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAllStarStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAllStarStats::CopyFrom(const CMsgAllStarStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAllStarStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAllStarStats::IsInitialized() const {
  return true;
}

void CMsgAllStarStats::InternalSwap(CMsgAllStarStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_stats_.InternalSwap(&other->player_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAllStarStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgNeutralItemStats_NeutralItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNeutralItemStats_NeutralItem>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_last_equipped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_last_unequipped(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration_equipped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgNeutralItemStats_NeutralItem::CMsgNeutralItemStats_NeutralItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNeutralItemStats.NeutralItem)
}
CMsgNeutralItemStats_NeutralItem::CMsgNeutralItemStats_NeutralItem(const CMsgNeutralItemStats_NeutralItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_equipped_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(duration_equipped_));
  // @@protoc_insertion_point(copy_constructor:CMsgNeutralItemStats.NeutralItem)
}

void CMsgNeutralItemStats_NeutralItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_equipped_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(duration_equipped_));
}

CMsgNeutralItemStats_NeutralItem::~CMsgNeutralItemStats_NeutralItem() {
  // @@protoc_insertion_point(destructor:CMsgNeutralItemStats.NeutralItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNeutralItemStats_NeutralItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgNeutralItemStats_NeutralItem::ArenaDtor(void* object) {
  CMsgNeutralItemStats_NeutralItem* _this = reinterpret_cast< CMsgNeutralItemStats_NeutralItem* >(object);
  (void)_this;
}
void CMsgNeutralItemStats_NeutralItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNeutralItemStats_NeutralItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNeutralItemStats_NeutralItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNeutralItemStats.NeutralItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_equipped_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(duration_equipped_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNeutralItemStats_NeutralItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_dropped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_dropped(&has_bits);
          time_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_last_equipped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_last_equipped(&has_bits);
          time_last_equipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_last_unequipped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_last_unequipped(&has_bits);
          time_last_unequipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_equipped = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_duration_equipped(&has_bits);
          duration_equipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNeutralItemStats_NeutralItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNeutralItemStats.NeutralItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 time_dropped = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_dropped(), target);
  }

  // optional uint32 team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team(), target);
  }

  // optional uint32 time_last_equipped = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_last_equipped(), target);
  }

  // optional uint32 time_last_unequipped = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_last_unequipped(), target);
  }

  // optional uint32 duration_equipped = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_duration_equipped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNeutralItemStats.NeutralItem)
  return target;
}

size_t CMsgNeutralItemStats_NeutralItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNeutralItemStats.NeutralItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_id());
    }

    // optional uint32 time_dropped = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_dropped());
    }

    // optional uint32 team = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 time_last_equipped = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_last_equipped());
    }

    // optional uint32 time_last_unequipped = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_last_unequipped());
    }

    // optional uint32 duration_equipped = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_equipped());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNeutralItemStats_NeutralItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNeutralItemStats.NeutralItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNeutralItemStats_NeutralItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNeutralItemStats_NeutralItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNeutralItemStats.NeutralItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNeutralItemStats.NeutralItem)
    MergeFrom(*source);
  }
}

void CMsgNeutralItemStats_NeutralItem::MergeFrom(const CMsgNeutralItemStats_NeutralItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNeutralItemStats.NeutralItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_dropped_ = from.time_dropped_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_last_equipped_ = from.time_last_equipped_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_last_unequipped_ = from.time_last_unequipped_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_equipped_ = from.duration_equipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNeutralItemStats_NeutralItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNeutralItemStats.NeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeutralItemStats_NeutralItem::CopyFrom(const CMsgNeutralItemStats_NeutralItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNeutralItemStats.NeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeutralItemStats_NeutralItem::IsInitialized() const {
  return true;
}

void CMsgNeutralItemStats_NeutralItem::InternalSwap(CMsgNeutralItemStats_NeutralItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNeutralItemStats_NeutralItem, duration_equipped_)
      + sizeof(CMsgNeutralItemStats_NeutralItem::duration_equipped_)
      - PROTOBUF_FIELD_OFFSET(CMsgNeutralItemStats_NeutralItem, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNeutralItemStats_NeutralItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgNeutralItemStats::_Internal {
 public:
};

CMsgNeutralItemStats::CMsgNeutralItemStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  neutral_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNeutralItemStats)
}
CMsgNeutralItemStats::CMsgNeutralItemStats(const CMsgNeutralItemStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neutral_items_(from.neutral_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgNeutralItemStats)
}

void CMsgNeutralItemStats::SharedCtor() {
}

CMsgNeutralItemStats::~CMsgNeutralItemStats() {
  // @@protoc_insertion_point(destructor:CMsgNeutralItemStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNeutralItemStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgNeutralItemStats::ArenaDtor(void* object) {
  CMsgNeutralItemStats* _this = reinterpret_cast< CMsgNeutralItemStats* >(object);
  (void)_this;
}
void CMsgNeutralItemStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNeutralItemStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNeutralItemStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNeutralItemStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neutral_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNeutralItemStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neutral_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNeutralItemStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNeutralItemStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neutral_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_neutral_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNeutralItemStats)
  return target;
}

size_t CMsgNeutralItemStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNeutralItemStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
  total_size += 1UL * this->_internal_neutral_items_size();
  for (const auto& msg : this->neutral_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNeutralItemStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNeutralItemStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNeutralItemStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNeutralItemStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNeutralItemStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNeutralItemStats)
    MergeFrom(*source);
  }
}

void CMsgNeutralItemStats::MergeFrom(const CMsgNeutralItemStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNeutralItemStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neutral_items_.MergeFrom(from.neutral_items_);
}

void CMsgNeutralItemStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNeutralItemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeutralItemStats::CopyFrom(const CMsgNeutralItemStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNeutralItemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeutralItemStats::IsInitialized() const {
  return true;
}

void CMsgNeutralItemStats::InternalSwap(CMsgNeutralItemStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  neutral_items_.InternalSwap(&other->neutral_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNeutralItemStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ban_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pick_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
}
CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pick_count_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(pick_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pick_count_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(pick_count_));
}

CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::~CMsgGCToServerLobbyHeroBanRates_HeroBanEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::ArenaDtor(void* object) {
  CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* _this = reinterpret_cast< CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* >(object);
  (void)_this;
}
void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pick_count_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(pick_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ban_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ban_count(&has_bits);
          ban_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pick_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pick_count(&has_bits);
          pick_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 ban_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_count(), target);
  }

  // optional uint32 pick_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pick_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  return target;
}

size_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 ban_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ban_count());
    }

    // optional uint32 pick_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pick_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
    MergeFrom(*source);
  }
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::MergeFrom(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ban_count_ = from.ban_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      pick_count_ = from.pick_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CopyFrom(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::IsInitialized() const {
  return true;
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::InternalSwap(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, pick_count_)
      + sizeof(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::pick_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerLobbyHeroBanRates::_Internal {
 public:
};

CMsgGCToServerLobbyHeroBanRates::CMsgGCToServerLobbyHeroBanRates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ban_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerLobbyHeroBanRates)
}
CMsgGCToServerLobbyHeroBanRates::CMsgGCToServerLobbyHeroBanRates(const CMsgGCToServerLobbyHeroBanRates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ban_data_(from.ban_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerLobbyHeroBanRates)
}

void CMsgGCToServerLobbyHeroBanRates::SharedCtor() {
}

CMsgGCToServerLobbyHeroBanRates::~CMsgGCToServerLobbyHeroBanRates() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerLobbyHeroBanRates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerLobbyHeroBanRates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerLobbyHeroBanRates::ArenaDtor(void* object) {
  CMsgGCToServerLobbyHeroBanRates* _this = reinterpret_cast< CMsgGCToServerLobbyHeroBanRates* >(object);
  (void)_this;
}
void CMsgGCToServerLobbyHeroBanRates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerLobbyHeroBanRates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerLobbyHeroBanRates::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerLobbyHeroBanRates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ban_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerLobbyHeroBanRates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ban_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerLobbyHeroBanRates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerLobbyHeroBanRates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ban_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ban_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerLobbyHeroBanRates)
  return target;
}

size_t CMsgGCToServerLobbyHeroBanRates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerLobbyHeroBanRates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
  total_size += 1UL * this->_internal_ban_data_size();
  for (const auto& msg : this->ban_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerLobbyHeroBanRates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerLobbyHeroBanRates)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerLobbyHeroBanRates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerLobbyHeroBanRates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerLobbyHeroBanRates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerLobbyHeroBanRates)
    MergeFrom(*source);
  }
}

void CMsgGCToServerLobbyHeroBanRates::MergeFrom(const CMsgGCToServerLobbyHeroBanRates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerLobbyHeroBanRates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ban_data_.MergeFrom(from.ban_data_);
}

void CMsgGCToServerLobbyHeroBanRates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerLobbyHeroBanRates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerLobbyHeroBanRates::CopyFrom(const CMsgGCToServerLobbyHeroBanRates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerLobbyHeroBanRates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerLobbyHeroBanRates::IsInitialized() const {
  return true;
}

void CMsgGCToServerLobbyHeroBanRates::InternalSwap(CMsgGCToServerLobbyHeroBanRates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ban_data_.InternalSwap(&other->ban_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerLobbyHeroBanRates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
}
CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contracts_(from.contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
}

CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::~CMsgSignOutGuildContractProgress_CompletedGuildEventContracts() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::ArenaDtor(void* object) {
  CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* _this = reinterpret_cast< CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* >(object);
  (void)_this;
}
void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contracts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 contracts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_contracts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_contracts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // repeated uint64 contracts = 3;
  for (int i = 0, n = this->_internal_contracts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_contracts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  return target;
}

size_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 contracts = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->contracts_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
    MergeFrom(*source);
  }
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::MergeFrom(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contracts_.MergeFrom(from.contracts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CopyFrom(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::InternalSwap(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contracts_.InternalSwap(&other->contracts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, event_id_)
      + sizeof(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGuildContractProgress_PlayerContract::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGuildContractProgress_PlayerContract>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutGuildContractProgress_PlayerContract::CMsgSignOutGuildContractProgress_PlayerContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  completed_contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildContractProgress.PlayerContract)
}
CMsgSignOutGuildContractProgress_PlayerContract::CMsgSignOutGuildContractProgress_PlayerContract(const CMsgSignOutGuildContractProgress_PlayerContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      completed_contracts_(from.completed_contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildContractProgress.PlayerContract)
}

void CMsgSignOutGuildContractProgress_PlayerContract::SharedCtor() {
account_id_ = 0u;
}

CMsgSignOutGuildContractProgress_PlayerContract::~CMsgSignOutGuildContractProgress_PlayerContract() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildContractProgress.PlayerContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGuildContractProgress_PlayerContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGuildContractProgress_PlayerContract::ArenaDtor(void* object) {
  CMsgSignOutGuildContractProgress_PlayerContract* _this = reinterpret_cast< CMsgSignOutGuildContractProgress_PlayerContract* >(object);
  (void)_this;
}
void CMsgSignOutGuildContractProgress_PlayerContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGuildContractProgress_PlayerContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGuildContractProgress_PlayerContract::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildContractProgress.PlayerContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  completed_contracts_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildContractProgress_PlayerContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_completed_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGuildContractProgress_PlayerContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildContractProgress.PlayerContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_completed_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_completed_contracts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildContractProgress.PlayerContract)
  return target;
}

size_t CMsgSignOutGuildContractProgress_PlayerContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildContractProgress.PlayerContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
  total_size += 1UL * this->_internal_completed_contracts_size();
  for (const auto& msg : this->completed_contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGuildContractProgress_PlayerContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGuildContractProgress.PlayerContract)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGuildContractProgress_PlayerContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGuildContractProgress_PlayerContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGuildContractProgress.PlayerContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGuildContractProgress.PlayerContract)
    MergeFrom(*source);
  }
}

void CMsgSignOutGuildContractProgress_PlayerContract::MergeFrom(const CMsgSignOutGuildContractProgress_PlayerContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildContractProgress.PlayerContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  completed_contracts_.MergeFrom(from.completed_contracts_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgSignOutGuildContractProgress_PlayerContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGuildContractProgress.PlayerContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGuildContractProgress_PlayerContract::CopyFrom(const CMsgSignOutGuildContractProgress_PlayerContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildContractProgress.PlayerContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildContractProgress_PlayerContract::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildContractProgress_PlayerContract::InternalSwap(CMsgSignOutGuildContractProgress_PlayerContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  completed_contracts_.InternalSwap(&other->completed_contracts_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildContractProgress_PlayerContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGuildContractProgress::_Internal {
 public:
};

CMsgSignOutGuildContractProgress::CMsgSignOutGuildContractProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildContractProgress)
}
CMsgSignOutGuildContractProgress::CMsgSignOutGuildContractProgress(const CMsgSignOutGuildContractProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_contracts_(from.player_contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildContractProgress)
}

void CMsgSignOutGuildContractProgress::SharedCtor() {
}

CMsgSignOutGuildContractProgress::~CMsgSignOutGuildContractProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildContractProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGuildContractProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGuildContractProgress::ArenaDtor(void* object) {
  CMsgSignOutGuildContractProgress* _this = reinterpret_cast< CMsgSignOutGuildContractProgress* >(object);
  (void)_this;
}
void CMsgSignOutGuildContractProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGuildContractProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGuildContractProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildContractProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_contracts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildContractProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGuildContractProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildContractProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_contracts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildContractProgress)
  return target;
}

size_t CMsgSignOutGuildContractProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildContractProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
  total_size += 1UL * this->_internal_player_contracts_size();
  for (const auto& msg : this->player_contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGuildContractProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGuildContractProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGuildContractProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGuildContractProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGuildContractProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGuildContractProgress)
    MergeFrom(*source);
  }
}

void CMsgSignOutGuildContractProgress::MergeFrom(const CMsgSignOutGuildContractProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildContractProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_contracts_.MergeFrom(from.player_contracts_);
}

void CMsgSignOutGuildContractProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGuildContractProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGuildContractProgress::CopyFrom(const CMsgSignOutGuildContractProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildContractProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildContractProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildContractProgress::InternalSwap(CMsgSignOutGuildContractProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_contracts_.InternalSwap(&other->player_contracts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildContractProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGuildChallengeProgress_ChallengeProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGuildChallengeProgress_ChallengeProgress>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_instance_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_period_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSignOutGuildChallengeProgress_ChallengeProgress::CMsgSignOutGuildChallengeProgress_ChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
}
CMsgSignOutGuildChallengeProgress_ChallengeProgress::CMsgSignOutGuildChallengeProgress_ChallengeProgress(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_parameter_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_parameter_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_parameter_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_parameter_));
}

CMsgSignOutGuildChallengeProgress_ChallengeProgress::~CMsgSignOutGuildChallengeProgress_ChallengeProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::ArenaDtor(void* object) {
  CMsgSignOutGuildChallengeProgress_ChallengeProgress* _this = reinterpret_cast< CMsgSignOutGuildChallengeProgress_ChallengeProgress* >(object);
  (void)_this;
}
void CMsgSignOutGuildChallengeProgress_ChallengeProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGuildChallengeProgress_ChallengeProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_parameter_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_parameter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildChallengeProgress_ChallengeProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_instance_timestamp(&has_bits);
          challenge_instance_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_period_serial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_period_serial(&has_bits);
          challenge_period_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGuildChallengeProgress_ChallengeProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_instance_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_instance_timestamp(), target);
  }

  // optional uint32 challenge_period_serial = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_period_serial(), target);
  }

  // optional uint32 progress = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress(), target);
  }

  // optional uint32 challenge_parameter = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  return target;
}

size_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_instance_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_timestamp());
    }

    // optional uint32 challenge_period_serial = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_period_serial());
    }

    // optional uint32 progress = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress());
    }

    // optional uint32 challenge_parameter = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGuildChallengeProgress_ChallengeProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGuildChallengeProgress_ChallengeProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
    MergeFrom(*source);
  }
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::MergeFrom(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_instance_timestamp_ = from.challenge_instance_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_period_serial_ = from.challenge_period_serial_;
    }
    if (cached_has_bits & 0x00000020u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::CopyFrom(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::InternalSwap(CMsgSignOutGuildChallengeProgress_ChallengeProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildChallengeProgress_ChallengeProgress, challenge_parameter_)
      + sizeof(CMsgSignOutGuildChallengeProgress_ChallengeProgress::challenge_parameter_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildChallengeProgress_ChallengeProgress, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildChallengeProgress_ChallengeProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutGuildChallengeProgress::_Internal {
 public:
};

CMsgSignOutGuildChallengeProgress::CMsgSignOutGuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  guild_challenges_progresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildChallengeProgress)
}
CMsgSignOutGuildChallengeProgress::CMsgSignOutGuildChallengeProgress(const CMsgSignOutGuildChallengeProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      guild_challenges_progresses_(from.guild_challenges_progresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildChallengeProgress)
}

void CMsgSignOutGuildChallengeProgress::SharedCtor() {
}

CMsgSignOutGuildChallengeProgress::~CMsgSignOutGuildChallengeProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildChallengeProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutGuildChallengeProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutGuildChallengeProgress::ArenaDtor(void* object) {
  CMsgSignOutGuildChallengeProgress* _this = reinterpret_cast< CMsgSignOutGuildChallengeProgress* >(object);
  (void)_this;
}
void CMsgSignOutGuildChallengeProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutGuildChallengeProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutGuildChallengeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildChallengeProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_challenges_progresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildChallengeProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guild_challenges_progresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutGuildChallengeProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildChallengeProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guild_challenges_progresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_guild_challenges_progresses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildChallengeProgress)
  return target;
}

size_t CMsgSignOutGuildChallengeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildChallengeProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
  total_size += 1UL * this->_internal_guild_challenges_progresses_size();
  for (const auto& msg : this->guild_challenges_progresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutGuildChallengeProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutGuildChallengeProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutGuildChallengeProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutGuildChallengeProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutGuildChallengeProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutGuildChallengeProgress)
    MergeFrom(*source);
  }
}

void CMsgSignOutGuildChallengeProgress::MergeFrom(const CMsgSignOutGuildChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildChallengeProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guild_challenges_progresses_.MergeFrom(from.guild_challenges_progresses_);
}

void CMsgSignOutGuildChallengeProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutGuildChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutGuildChallengeProgress::CopyFrom(const CMsgSignOutGuildChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildChallengeProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildChallengeProgress::InternalSwap(CMsgSignOutGuildChallengeProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  guild_challenges_progresses_.InternalSwap(&other->guild_challenges_progresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildChallengeProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutMVPStats_Player_KillEaterEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMVPStats_Player_KillEaterEvent>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgSignOutMVPStats_Player_KillEaterEvent::CMsgSignOutMVPStats_Player_KillEaterEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMVPStats.Player.KillEaterEvent)
}
CMsgSignOutMVPStats_Player_KillEaterEvent::CMsgSignOutMVPStats_Player_KillEaterEvent(const CMsgSignOutMVPStats_Player_KillEaterEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMVPStats.Player.KillEaterEvent)
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(amount_));
}

CMsgSignOutMVPStats_Player_KillEaterEvent::~CMsgSignOutMVPStats_Player_KillEaterEvent() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMVPStats.Player.KillEaterEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::ArenaDtor(void* object) {
  CMsgSignOutMVPStats_Player_KillEaterEvent* _this = reinterpret_cast< CMsgSignOutMVPStats_Player_KillEaterEvent* >(object);
  (void)_this;
}
void CMsgSignOutMVPStats_Player_KillEaterEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutMVPStats_Player_KillEaterEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMVPStats_Player_KillEaterEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutMVPStats_Player_KillEaterEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_type(), target);
  }

  // required uint32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMVPStats.Player.KillEaterEvent)
  return target;
}

size_t CMsgSignOutMVPStats_Player_KillEaterEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  size_t total_size = 0;

  if (_internal_has_event_type()) {
    // required uint32 event_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_type());
  }

  if (_internal_has_amount()) {
    // required uint32 amount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_amount());
  }

  return total_size;
}
size_t CMsgSignOutMVPStats_Player_KillEaterEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 event_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_type());

    // required uint32 amount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutMVPStats_Player_KillEaterEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutMVPStats_Player_KillEaterEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutMVPStats.Player.KillEaterEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutMVPStats.Player.KillEaterEvent)
    MergeFrom(*source);
  }
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::MergeFrom(const CMsgSignOutMVPStats_Player_KillEaterEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::CopyFrom(const CMsgSignOutMVPStats_Player_KillEaterEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMVPStats_Player_KillEaterEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::InternalSwap(CMsgSignOutMVPStats_Player_KillEaterEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player_KillEaterEvent, amount_)
      + sizeof(CMsgSignOutMVPStats_Player_KillEaterEvent::amount_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player_KillEaterEvent, event_type_)>(
          reinterpret_cast<char*>(&event_type_),
          reinterpret_cast<char*>(&other->event_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMVPStats_Player_KillEaterEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutMVPStats_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMVPStats_Player>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_networth_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_support_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wards_spotted_for_dewarding(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_building_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_other_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_first_blood(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_highest_killstreak(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

CMsgSignOutMVPStats_Player::CMsgSignOutMVPStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kill_eater_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMVPStats.Player)
}
CMsgSignOutMVPStats_Player::CMsgSignOutMVPStats_Player(const CMsgSignOutMVPStats_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      kill_eater_events_(from.kill_eater_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&highest_killstreak_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(highest_killstreak_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMVPStats.Player)
}

void CMsgSignOutMVPStats_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&highest_killstreak_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(highest_killstreak_));
}

CMsgSignOutMVPStats_Player::~CMsgSignOutMVPStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMVPStats.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutMVPStats_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutMVPStats_Player::ArenaDtor(void* object) {
  CMsgSignOutMVPStats_Player* _this = reinterpret_cast< CMsgSignOutMVPStats_Player* >(object);
  (void)_this;
}
void CMsgSignOutMVPStats_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutMVPStats_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutMVPStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMVPStats.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kill_eater_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(assists_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&xp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&denies_) -
        reinterpret_cast<char*>(&xp_)) + sizeof(denies_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&building_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highest_killstreak_) -
        reinterpret_cast<char*>(&building_damage_)) + sizeof(highest_killstreak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMVPStats_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_networth_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_networth_rank(&has_bits);
          team_networth_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 xp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_xp(&has_bits);
          xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 net_worth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 support_gold_spent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_support_gold_spent(&has_bits);
          support_gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wards_placed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_wards_placed(&has_bits);
          wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wards_spotted_for_dewarding = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_wards_spotted_for_dewarding(&has_bits);
          wards_spotted_for_dewarding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 camps_stacked = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_camps_stacked(&has_bits);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_hits = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_last_hits(&has_bits);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 denies = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_denies(&has_bits);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 building_damage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_building_damage(&has_bits);
          building_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 other_damage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_other_damage(&has_bits);
          other_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 triple_kills = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_triple_kills(&has_bits);
          triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rampages = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_rampages(&has_bits);
          rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_blood = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_first_blood(&has_bits);
          first_blood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_kill_eater_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 highest_killstreak = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_highest_killstreak(&has_bits);
          highest_killstreak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutMVPStats_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMVPStats.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 team_networth_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_networth_rank(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional uint32 role = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_role(), target);
  }

  // optional int32 kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional int32 deaths = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_deaths(), target);
  }

  // optional int32 assists = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_assists(), target);
  }

  // optional int32 xp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_xp(), target);
  }

  // optional int32 net_worth = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_net_worth(), target);
  }

  // optional int32 support_gold_spent = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_support_gold_spent(), target);
  }

  // optional int32 wards_placed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_wards_placed(), target);
  }

  // optional int32 wards_spotted_for_dewarding = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_wards_spotted_for_dewarding(), target);
  }

  // optional int32 camps_stacked = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_camps_stacked(), target);
  }

  // optional int32 last_hits = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_last_hits(), target);
  }

  // optional int32 denies = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_denies(), target);
  }

  // optional int32 building_damage = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_building_damage(), target);
  }

  // optional int32 other_damage = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_other_damage(), target);
  }

  // optional int32 triple_kills = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_triple_kills(), target);
  }

  // optional int32 rampages = 28;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_rampages(), target);
  }

  // optional int32 first_blood = 31;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_first_blood(), target);
  }

  // optional uint32 slot = 32;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_slot(), target);
  }

  // optional uint32 rank = 33;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_rank(), target);
  }

  // repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kill_eater_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_kill_eater_events(i), target, stream);
  }

  // optional uint32 highest_killstreak = 35;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_highest_killstreak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMVPStats.Player)
  return target;
}

size_t CMsgSignOutMVPStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMVPStats.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
  total_size += 2UL * this->_internal_kill_eater_events_size();
  for (const auto& msg : this->kill_eater_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 team_networth_rank = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_networth_rank());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 role = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role());
    }

    // optional int32 kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kills());
    }

    // optional int32 deaths = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deaths());
    }

    // optional int32 assists = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_assists());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 xp = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_xp());
    }

    // optional int32 net_worth = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_net_worth());
    }

    // optional int32 support_gold_spent = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_support_gold_spent());
    }

    // optional int32 wards_placed = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wards_placed());
    }

    // optional int32 wards_spotted_for_dewarding = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wards_spotted_for_dewarding());
    }

    // optional int32 camps_stacked = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_camps_stacked());
    }

    // optional int32 last_hits = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_hits());
    }

    // optional int32 denies = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_denies());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 building_damage = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_building_damage());
    }

    // optional int32 other_damage = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_other_damage());
    }

    // optional int32 triple_kills = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_triple_kills());
    }

    // optional int32 rampages = 28;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rampages());
    }

    // optional int32 first_blood = 31;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_first_blood());
    }

    // optional uint32 slot = 32;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

    // optional uint32 rank = 33;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 highest_killstreak = 35;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_highest_killstreak());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutMVPStats_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutMVPStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutMVPStats_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutMVPStats_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutMVPStats.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutMVPStats.Player)
    MergeFrom(*source);
  }
}

void CMsgSignOutMVPStats_Player::MergeFrom(const CMsgSignOutMVPStats_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMVPStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kill_eater_events_.MergeFrom(from.kill_eater_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_networth_rank_ = from.team_networth_rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000020u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      xp_ = from.xp_;
    }
    if (cached_has_bits & 0x00000200u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000400u) {
      support_gold_spent_ = from.support_gold_spent_;
    }
    if (cached_has_bits & 0x00000800u) {
      wards_placed_ = from.wards_placed_;
    }
    if (cached_has_bits & 0x00001000u) {
      wards_spotted_for_dewarding_ = from.wards_spotted_for_dewarding_;
    }
    if (cached_has_bits & 0x00002000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00004000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00008000u) {
      denies_ = from.denies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      building_damage_ = from.building_damage_;
    }
    if (cached_has_bits & 0x00020000u) {
      other_damage_ = from.other_damage_;
    }
    if (cached_has_bits & 0x00040000u) {
      triple_kills_ = from.triple_kills_;
    }
    if (cached_has_bits & 0x00080000u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00100000u) {
      first_blood_ = from.first_blood_;
    }
    if (cached_has_bits & 0x00200000u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00400000u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00800000u) {
      highest_killstreak_ = from.highest_killstreak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutMVPStats_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutMVPStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutMVPStats_Player::CopyFrom(const CMsgSignOutMVPStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMVPStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMVPStats_Player::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(kill_eater_events_)) return false;
  return true;
}

void CMsgSignOutMVPStats_Player::InternalSwap(CMsgSignOutMVPStats_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kill_eater_events_.InternalSwap(&other->kill_eater_events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player, highest_killstreak_)
      + sizeof(CMsgSignOutMVPStats_Player::highest_killstreak_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMVPStats_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSignOutMVPStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMVPStats>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSignOutMVPStats::CMsgSignOutMVPStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMVPStats)
}
CMsgSignOutMVPStats::CMsgSignOutMVPStats(const CMsgSignOutMVPStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMVPStats)
}

void CMsgSignOutMVPStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(game_time_));
}

CMsgSignOutMVPStats::~CMsgSignOutMVPStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMVPStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSignOutMVPStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSignOutMVPStats::ArenaDtor(void* object) {
  CMsgSignOutMVPStats* _this = reinterpret_cast< CMsgSignOutMVPStats* >(object);
  (void)_this;
}
void CMsgSignOutMVPStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSignOutMVPStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSignOutMVPStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMVPStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_time_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMVPStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_winning_team(&has_bits);
          winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSignOutMVPStats.Player players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSignOutMVPStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMVPStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 game_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_mode(), target);
  }

  // optional uint32 winning_team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_winning_team(), target);
  }

  // optional float game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_game_time(), target);
  }

  // repeated .CMsgSignOutMVPStats.Player players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMVPStats)
  return target;
}

size_t CMsgSignOutMVPStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMVPStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutMVPStats.Player players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 game_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional uint32 winning_team = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_team());
    }

    // optional float game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutMVPStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSignOutMVPStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutMVPStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSignOutMVPStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSignOutMVPStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSignOutMVPStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutMVPStats::MergeFrom(const CMsgSignOutMVPStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMVPStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      winning_team_ = from.winning_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutMVPStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSignOutMVPStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutMVPStats::CopyFrom(const CMsgSignOutMVPStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMVPStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMVPStats::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(players_)) return false;
  return true;
}

void CMsgSignOutMVPStats::InternalSwap(CMsgSignOutMVPStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats, game_time_)
      + sizeof(CMsgSignOutMVPStats::game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMVPStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerRecordTrainingData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerRecordTrainingData>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerRecordTrainingData::CMsgGCToServerRecordTrainingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerRecordTrainingData)
}
CMsgGCToServerRecordTrainingData::CMsgGCToServerRecordTrainingData(const CMsgGCToServerRecordTrainingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerRecordTrainingData)
}

void CMsgGCToServerRecordTrainingData::SharedCtor() {
enable_ = false;
}

CMsgGCToServerRecordTrainingData::~CMsgGCToServerRecordTrainingData() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerRecordTrainingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerRecordTrainingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerRecordTrainingData::ArenaDtor(void* object) {
  CMsgGCToServerRecordTrainingData* _this = reinterpret_cast< CMsgGCToServerRecordTrainingData* >(object);
  (void)_this;
}
void CMsgGCToServerRecordTrainingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerRecordTrainingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerRecordTrainingData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerRecordTrainingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerRecordTrainingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerRecordTrainingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerRecordTrainingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerRecordTrainingData)
  return target;
}

size_t CMsgGCToServerRecordTrainingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerRecordTrainingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerRecordTrainingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerRecordTrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerRecordTrainingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerRecordTrainingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerRecordTrainingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerRecordTrainingData)
    MergeFrom(*source);
  }
}

void CMsgGCToServerRecordTrainingData::MergeFrom(const CMsgGCToServerRecordTrainingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerRecordTrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_set_enable(from._internal_enable());
  }
}

void CMsgGCToServerRecordTrainingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerRecordTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerRecordTrainingData::CopyFrom(const CMsgGCToServerRecordTrainingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerRecordTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerRecordTrainingData::IsInitialized() const {
  return true;
}

void CMsgGCToServerRecordTrainingData::InternalSwap(CMsgGCToServerRecordTrainingData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerRecordTrainingData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetGuildContracts::_Internal {
 public:
};

CMsgServerToGCGetGuildContracts::CMsgServerToGCGetGuildContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContracts)
}
CMsgServerToGCGetGuildContracts::CMsgServerToGCGetGuildContracts(const CMsgServerToGCGetGuildContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContracts)
}

void CMsgServerToGCGetGuildContracts::SharedCtor() {
}

CMsgServerToGCGetGuildContracts::~CMsgServerToGCGetGuildContracts() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContracts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetGuildContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetGuildContracts::ArenaDtor(void* object) {
  CMsgServerToGCGetGuildContracts* _this = reinterpret_cast< CMsgServerToGCGetGuildContracts* >(object);
  (void)_this;
}
void CMsgServerToGCGetGuildContracts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetGuildContracts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContracts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetGuildContracts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContracts)
  return target;
}

size_t CMsgServerToGCGetGuildContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContracts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetGuildContracts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetGuildContracts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetGuildContracts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetGuildContracts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetGuildContracts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetGuildContracts)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetGuildContracts::MergeFrom(const CMsgServerToGCGetGuildContracts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContracts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgServerToGCGetGuildContracts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetGuildContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetGuildContracts::CopyFrom(const CMsgServerToGCGetGuildContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContracts::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContracts::InternalSwap(CMsgServerToGCGetGuildContracts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContracts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetGuildContractsResponse_ContractDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetGuildContractsResponse_ContractDetails>()._has_bits_);
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_stars(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgServerToGCGetGuildContractsResponse_ContractDetails::CMsgServerToGCGetGuildContractsResponse_ContractDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
}
CMsgServerToGCGetGuildContractsResponse_ContractDetails::CMsgServerToGCGetGuildContractsResponse_ContractDetails(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&contract_id_, &from.contract_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_slot_) -
    reinterpret_cast<char*>(&contract_id_)) + sizeof(contract_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contract_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contract_slot_) -
    reinterpret_cast<char*>(&contract_id_)) + sizeof(contract_slot_));
}

CMsgServerToGCGetGuildContractsResponse_ContractDetails::~CMsgServerToGCGetGuildContractsResponse_ContractDetails() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::ArenaDtor(void* object) {
  CMsgServerToGCGetGuildContractsResponse_ContractDetails* _this = reinterpret_cast< CMsgServerToGCGetGuildContractsResponse_ContractDetails* >(object);
  (void)_this;
}
void CMsgServerToGCGetGuildContractsResponse_ContractDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetGuildContractsResponse_ContractDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&contract_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contract_slot_) -
        reinterpret_cast<char*>(&contract_id_)) + sizeof(contract_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContractsResponse_ContractDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_contract_id(&has_bits);
          contract_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contract_stars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_contract_stars(&has_bits);
          contract_stars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contract_slot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_contract_slot(&has_bits);
          contract_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetGuildContractsResponse_ContractDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 contract_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_contract_id(), target);
  }

  // optional uint32 challenge_instance_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 contract_stars = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_contract_stars(), target);
  }

  // optional uint32 contract_slot = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_contract_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  return target;
}

size_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 contract_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_contract_id());
    }

    // optional uint32 challenge_instance_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

    // optional uint32 contract_stars = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contract_stars());
    }

    // optional uint32 contract_slot = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contract_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetGuildContractsResponse_ContractDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetGuildContractsResponse_ContractDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::MergeFrom(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_id_ = from.contract_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000008u) {
      contract_stars_ = from.contract_stars_;
    }
    if (cached_has_bits & 0x00000010u) {
      contract_slot_ = from.contract_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::CopyFrom(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::InternalSwap(CMsgServerToGCGetGuildContractsResponse_ContractDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_ContractDetails, contract_slot_)
      + sizeof(CMsgServerToGCGetGuildContractsResponse_ContractDetails::contract_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_ContractDetails, contract_id_)>(
          reinterpret_cast<char*>(&contract_id_),
          reinterpret_cast<char*>(&other->contract_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContractsResponse_ContractDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetGuildContractsResponse_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetGuildContractsResponse_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCGetGuildContractsResponse_Player::CMsgServerToGCGetGuildContractsResponse_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContractsResponse.Player)
}
CMsgServerToGCGetGuildContractsResponse_Player::CMsgServerToGCGetGuildContractsResponse_Player(const CMsgServerToGCGetGuildContractsResponse_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contracts_(from.contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContractsResponse.Player)
}

void CMsgServerToGCGetGuildContractsResponse_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(event_id_));
}

CMsgServerToGCGetGuildContractsResponse_Player::~CMsgServerToGCGetGuildContractsResponse_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContractsResponse.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetGuildContractsResponse_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetGuildContractsResponse_Player::ArenaDtor(void* object) {
  CMsgServerToGCGetGuildContractsResponse_Player* _this = reinterpret_cast< CMsgServerToGCGetGuildContractsResponse_Player* >(object);
  (void)_this;
}
void CMsgServerToGCGetGuildContractsResponse_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetGuildContractsResponse_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContractsResponse_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContractsResponse.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contracts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContractsResponse_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetGuildContractsResponse_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContractsResponse.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_event_id(), target);
  }

  // repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contracts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContractsResponse.Player)
  return target;
}

size_t CMsgServerToGCGetGuildContractsResponse_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContractsResponse.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 guild_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetGuildContractsResponse_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetGuildContractsResponse.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetGuildContractsResponse_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetGuildContractsResponse_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetGuildContractsResponse.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetGuildContractsResponse.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetGuildContractsResponse_Player::MergeFrom(const CMsgServerToGCGetGuildContractsResponse_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContractsResponse.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contracts_.MergeFrom(from.contracts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCGetGuildContractsResponse_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetGuildContractsResponse.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetGuildContractsResponse_Player::CopyFrom(const CMsgServerToGCGetGuildContractsResponse_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContractsResponse.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContractsResponse_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContractsResponse_Player::InternalSwap(CMsgServerToGCGetGuildContractsResponse_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contracts_.InternalSwap(&other->contracts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_Player, event_id_)
      + sizeof(CMsgServerToGCGetGuildContractsResponse_Player::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContractsResponse_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetGuildContractsResponse::_Internal {
 public:
};

CMsgServerToGCGetGuildContractsResponse::CMsgServerToGCGetGuildContractsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContractsResponse)
}
CMsgServerToGCGetGuildContractsResponse::CMsgServerToGCGetGuildContractsResponse(const CMsgServerToGCGetGuildContractsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_contracts_(from.player_contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContractsResponse)
}

void CMsgServerToGCGetGuildContractsResponse::SharedCtor() {
}

CMsgServerToGCGetGuildContractsResponse::~CMsgServerToGCGetGuildContractsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContractsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetGuildContractsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetGuildContractsResponse::ArenaDtor(void* object) {
  CMsgServerToGCGetGuildContractsResponse* _this = reinterpret_cast< CMsgServerToGCGetGuildContractsResponse* >(object);
  (void)_this;
}
void CMsgServerToGCGetGuildContractsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetGuildContractsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContractsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContractsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_contracts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContractsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetGuildContractsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContractsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_contracts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContractsResponse)
  return target;
}

size_t CMsgServerToGCGetGuildContractsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContractsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
  total_size += 1UL * this->_internal_player_contracts_size();
  for (const auto& msg : this->player_contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetGuildContractsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetGuildContractsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetGuildContractsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetGuildContractsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetGuildContractsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetGuildContractsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetGuildContractsResponse::MergeFrom(const CMsgServerToGCGetGuildContractsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContractsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_contracts_.MergeFrom(from.player_contracts_);
}

void CMsgServerToGCGetGuildContractsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetGuildContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetGuildContractsResponse::CopyFrom(const CMsgServerToGCGetGuildContractsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContractsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContractsResponse::InternalSwap(CMsgServerToGCGetGuildContractsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_contracts_.InternalSwap(&other->player_contracts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContractsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchDiretideCandy_CandyDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchDiretideCandy_CandyDetails>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMatchDiretideCandy_CandyDetails::CMsgMatchDiretideCandy_CandyDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchDiretideCandy.CandyDetails)
}
CMsgMatchDiretideCandy_CandyDetails::CMsgMatchDiretideCandy_CandyDetails(const CMsgMatchDiretideCandy_CandyDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(audit_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchDiretideCandy.CandyDetails)
}

void CMsgMatchDiretideCandy_CandyDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(audit_));
}

CMsgMatchDiretideCandy_CandyDetails::~CMsgMatchDiretideCandy_CandyDetails() {
  // @@protoc_insertion_point(destructor:CMsgMatchDiretideCandy.CandyDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchDiretideCandy_CandyDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchDiretideCandy_CandyDetails::ArenaDtor(void* object) {
  CMsgMatchDiretideCandy_CandyDetails* _this = reinterpret_cast< CMsgMatchDiretideCandy_CandyDetails* >(object);
  (void)_this;
}
void CMsgMatchDiretideCandy_CandyDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchDiretideCandy_CandyDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchDiretideCandy_CandyDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchDiretideCandy.CandyDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(audit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchDiretideCandy_CandyDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_audit(&has_bits);
          audit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchDiretideCandy_CandyDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchDiretideCandy.CandyDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_amount(), target);
  }

  // optional uint32 audit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_audit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchDiretideCandy.CandyDetails)
  return target;
}

size_t CMsgMatchDiretideCandy_CandyDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchDiretideCandy.CandyDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 amount = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_amount());
    }

    // optional uint32 audit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchDiretideCandy_CandyDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchDiretideCandy.CandyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchDiretideCandy_CandyDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchDiretideCandy_CandyDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchDiretideCandy.CandyDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchDiretideCandy.CandyDetails)
    MergeFrom(*source);
  }
}

void CMsgMatchDiretideCandy_CandyDetails::MergeFrom(const CMsgMatchDiretideCandy_CandyDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchDiretideCandy.CandyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      audit_ = from.audit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchDiretideCandy_CandyDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchDiretideCandy.CandyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchDiretideCandy_CandyDetails::CopyFrom(const CMsgMatchDiretideCandy_CandyDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchDiretideCandy.CandyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchDiretideCandy_CandyDetails::IsInitialized() const {
  return true;
}

void CMsgMatchDiretideCandy_CandyDetails::InternalSwap(CMsgMatchDiretideCandy_CandyDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_CandyDetails, audit_)
      + sizeof(CMsgMatchDiretideCandy_CandyDetails::audit_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_CandyDetails, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchDiretideCandy_CandyDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchDiretideCandy_PlayerCandy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchDiretideCandy_PlayerCandy>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_candy_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_consumes_periodic_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchDiretideCandy_PlayerCandy::CMsgMatchDiretideCandy_PlayerCandy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  candy_breakdown_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchDiretideCandy.PlayerCandy)
}
CMsgMatchDiretideCandy_PlayerCandy::CMsgMatchDiretideCandy_PlayerCandy(const CMsgMatchDiretideCandy_PlayerCandy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candy_breakdown_(from.candy_breakdown_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&consumes_periodic_resource_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(consumes_periodic_resource_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchDiretideCandy.PlayerCandy)
}

void CMsgMatchDiretideCandy_PlayerCandy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&consumes_periodic_resource_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(consumes_periodic_resource_));
}

CMsgMatchDiretideCandy_PlayerCandy::~CMsgMatchDiretideCandy_PlayerCandy() {
  // @@protoc_insertion_point(destructor:CMsgMatchDiretideCandy.PlayerCandy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchDiretideCandy_PlayerCandy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchDiretideCandy_PlayerCandy::ArenaDtor(void* object) {
  CMsgMatchDiretideCandy_PlayerCandy* _this = reinterpret_cast< CMsgMatchDiretideCandy_PlayerCandy* >(object);
  (void)_this;
}
void CMsgMatchDiretideCandy_PlayerCandy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchDiretideCandy_PlayerCandy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchDiretideCandy_PlayerCandy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchDiretideCandy.PlayerCandy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candy_breakdown_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&consumes_periodic_resource_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(consumes_periodic_resource_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchDiretideCandy_PlayerCandy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 candy_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_candy_amount(&has_bits);
          candy_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool consumes_periodic_resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_consumes_periodic_resource(&has_bits);
          consumes_periodic_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candy_breakdown(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchDiretideCandy_PlayerCandy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchDiretideCandy.PlayerCandy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 candy_amount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_candy_amount(), target);
  }

  // optional bool consumes_periodic_resource = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_consumes_periodic_resource(), target);
  }

  // repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candy_breakdown_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_candy_breakdown(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchDiretideCandy.PlayerCandy)
  return target;
}

size_t CMsgMatchDiretideCandy_PlayerCandy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchDiretideCandy.PlayerCandy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
  total_size += 1UL * this->_internal_candy_breakdown_size();
  for (const auto& msg : this->candy_breakdown_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 candy_amount = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_candy_amount());
    }

    // optional bool consumes_periodic_resource = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchDiretideCandy_PlayerCandy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchDiretideCandy.PlayerCandy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchDiretideCandy_PlayerCandy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchDiretideCandy_PlayerCandy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchDiretideCandy.PlayerCandy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchDiretideCandy.PlayerCandy)
    MergeFrom(*source);
  }
}

void CMsgMatchDiretideCandy_PlayerCandy::MergeFrom(const CMsgMatchDiretideCandy_PlayerCandy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchDiretideCandy.PlayerCandy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candy_breakdown_.MergeFrom(from.candy_breakdown_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      candy_amount_ = from.candy_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      consumes_periodic_resource_ = from.consumes_periodic_resource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchDiretideCandy_PlayerCandy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchDiretideCandy.PlayerCandy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchDiretideCandy_PlayerCandy::CopyFrom(const CMsgMatchDiretideCandy_PlayerCandy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchDiretideCandy.PlayerCandy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchDiretideCandy_PlayerCandy::IsInitialized() const {
  return true;
}

void CMsgMatchDiretideCandy_PlayerCandy::InternalSwap(CMsgMatchDiretideCandy_PlayerCandy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candy_breakdown_.InternalSwap(&other->candy_breakdown_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_PlayerCandy, consumes_periodic_resource_)
      + sizeof(CMsgMatchDiretideCandy_PlayerCandy::consumes_periodic_resource_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_PlayerCandy, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchDiretideCandy_PlayerCandy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchDiretideCandy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchDiretideCandy>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMatchDiretideCandy::CMsgMatchDiretideCandy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_candy_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchDiretideCandy)
}
CMsgMatchDiretideCandy::CMsgMatchDiretideCandy(const CMsgMatchDiretideCandy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_candy_data_(from.player_candy_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchDiretideCandy)
}

void CMsgMatchDiretideCandy::SharedCtor() {
event_id_ = 0;
}

CMsgMatchDiretideCandy::~CMsgMatchDiretideCandy() {
  // @@protoc_insertion_point(destructor:CMsgMatchDiretideCandy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchDiretideCandy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchDiretideCandy::ArenaDtor(void* object) {
  CMsgMatchDiretideCandy* _this = reinterpret_cast< CMsgMatchDiretideCandy* >(object);
  (void)_this;
}
void CMsgMatchDiretideCandy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchDiretideCandy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchDiretideCandy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchDiretideCandy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_candy_data_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchDiretideCandy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_candy_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchDiretideCandy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchDiretideCandy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_candy_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_candy_data(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchDiretideCandy)
  return target;
}

size_t CMsgMatchDiretideCandy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchDiretideCandy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
  total_size += 1UL * this->_internal_player_candy_data_size();
  for (const auto& msg : this->player_candy_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchDiretideCandy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchDiretideCandy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchDiretideCandy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchDiretideCandy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchDiretideCandy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchDiretideCandy)
    MergeFrom(*source);
  }
}

void CMsgMatchDiretideCandy::MergeFrom(const CMsgMatchDiretideCandy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchDiretideCandy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_candy_data_.MergeFrom(from.player_candy_data_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgMatchDiretideCandy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchDiretideCandy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchDiretideCandy::CopyFrom(const CMsgMatchDiretideCandy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchDiretideCandy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchDiretideCandy::IsInitialized() const {
  return true;
}

void CMsgMatchDiretideCandy::InternalSwap(CMsgMatchDiretideCandy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_candy_data_.InternalSwap(&other->player_candy_data_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchDiretideCandy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerCheerData_CheerTypeCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerCheerData_CheerTypeCount>()._has_bits_);
  static void set_has_cheer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cheer_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToServerCheerData_CheerTypeCount::CMsgGCToServerCheerData_CheerTypeCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerData.CheerTypeCount)
}
CMsgGCToServerCheerData_CheerTypeCount::CMsgGCToServerCheerData_CheerTypeCount(const CMsgGCToServerCheerData_CheerTypeCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cheer_type_, &from.cheer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cheer_count_) -
    reinterpret_cast<char*>(&cheer_type_)) + sizeof(cheer_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerData.CheerTypeCount)
}

void CMsgGCToServerCheerData_CheerTypeCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cheer_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cheer_count_) -
    reinterpret_cast<char*>(&cheer_type_)) + sizeof(cheer_count_));
}

CMsgGCToServerCheerData_CheerTypeCount::~CMsgGCToServerCheerData_CheerTypeCount() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerData.CheerTypeCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerCheerData_CheerTypeCount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerCheerData_CheerTypeCount::ArenaDtor(void* object) {
  CMsgGCToServerCheerData_CheerTypeCount* _this = reinterpret_cast< CMsgGCToServerCheerData_CheerTypeCount* >(object);
  (void)_this;
}
void CMsgGCToServerCheerData_CheerTypeCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerCheerData_CheerTypeCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerCheerData_CheerTypeCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerData.CheerTypeCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cheer_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cheer_count_) -
        reinterpret_cast<char*>(&cheer_type_)) + sizeof(cheer_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerData_CheerTypeCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cheer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cheer_type(&has_bits);
          cheer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheer_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cheer_count(&has_bits);
          cheer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerCheerData_CheerTypeCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerData.CheerTypeCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cheer_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cheer_type(), target);
  }

  // optional uint32 cheer_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cheer_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerData.CheerTypeCount)
  return target;
}

size_t CMsgGCToServerCheerData_CheerTypeCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerData.CheerTypeCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cheer_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheer_type());
    }

    // optional uint32 cheer_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheer_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerCheerData_CheerTypeCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerCheerData.CheerTypeCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerCheerData_CheerTypeCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerCheerData_CheerTypeCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerCheerData.CheerTypeCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerCheerData.CheerTypeCount)
    MergeFrom(*source);
  }
}

void CMsgGCToServerCheerData_CheerTypeCount::MergeFrom(const CMsgGCToServerCheerData_CheerTypeCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerData.CheerTypeCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cheer_type_ = from.cheer_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      cheer_count_ = from.cheer_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerCheerData_CheerTypeCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerCheerData.CheerTypeCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerCheerData_CheerTypeCount::CopyFrom(const CMsgGCToServerCheerData_CheerTypeCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerData.CheerTypeCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerData_CheerTypeCount::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerData_CheerTypeCount::InternalSwap(CMsgGCToServerCheerData_CheerTypeCount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerCheerData_CheerTypeCount, cheer_count_)
      + sizeof(CMsgGCToServerCheerData_CheerTypeCount::cheer_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerCheerData_CheerTypeCount, cheer_type_)>(
          reinterpret_cast<char*>(&cheer_type_),
          reinterpret_cast<char*>(&other->cheer_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerData_CheerTypeCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerCheerData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerCheerData>()._has_bits_);
  static void set_has_radiant_cheers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dire_cheers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radiant_premium_cheers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dire_premium_cheers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCToServerCheerData::CMsgGCToServerCheerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cheer_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerData)
}
CMsgGCToServerCheerData::CMsgGCToServerCheerData(const CMsgGCToServerCheerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cheer_types_(from.cheer_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radiant_cheers_, &from.radiant_cheers_,
    static_cast<size_t>(reinterpret_cast<char*>(&dire_premium_cheers_) -
    reinterpret_cast<char*>(&radiant_cheers_)) + sizeof(dire_premium_cheers_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerData)
}

void CMsgGCToServerCheerData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radiant_cheers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dire_premium_cheers_) -
    reinterpret_cast<char*>(&radiant_cheers_)) + sizeof(dire_premium_cheers_));
}

CMsgGCToServerCheerData::~CMsgGCToServerCheerData() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerCheerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerCheerData::ArenaDtor(void* object) {
  CMsgGCToServerCheerData* _this = reinterpret_cast< CMsgGCToServerCheerData* >(object);
  (void)_this;
}
void CMsgGCToServerCheerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerCheerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerCheerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cheer_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&radiant_cheers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_premium_cheers_) -
        reinterpret_cast<char*>(&radiant_cheers_)) + sizeof(dire_premium_cheers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheer_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_cheers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radiant_cheers(&has_bits);
          radiant_cheers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_cheers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dire_cheers(&has_bits);
          dire_cheers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_premium_cheers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_radiant_premium_cheers(&has_bits);
          radiant_premium_cheers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_premium_cheers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dire_premium_cheers(&has_bits);
          dire_premium_cheers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerCheerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cheer_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cheer_types(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 radiant_cheers = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radiant_cheers(), target);
  }

  // optional uint32 dire_cheers = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dire_cheers(), target);
  }

  // optional uint32 radiant_premium_cheers = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_radiant_premium_cheers(), target);
  }

  // optional uint32 dire_premium_cheers = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dire_premium_cheers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerData)
  return target;
}

size_t CMsgGCToServerCheerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
  total_size += 1UL * this->_internal_cheer_types_size();
  for (const auto& msg : this->cheer_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 radiant_cheers = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_cheers());
    }

    // optional uint32 dire_cheers = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_cheers());
    }

    // optional uint32 radiant_premium_cheers = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_premium_cheers());
    }

    // optional uint32 dire_premium_cheers = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_premium_cheers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerCheerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerCheerData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerCheerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerCheerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerCheerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerCheerData)
    MergeFrom(*source);
  }
}

void CMsgGCToServerCheerData::MergeFrom(const CMsgGCToServerCheerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cheer_types_.MergeFrom(from.cheer_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      radiant_cheers_ = from.radiant_cheers_;
    }
    if (cached_has_bits & 0x00000002u) {
      dire_cheers_ = from.dire_cheers_;
    }
    if (cached_has_bits & 0x00000004u) {
      radiant_premium_cheers_ = from.radiant_premium_cheers_;
    }
    if (cached_has_bits & 0x00000008u) {
      dire_premium_cheers_ = from.dire_premium_cheers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerCheerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerCheerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerCheerData::CopyFrom(const CMsgGCToServerCheerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerData::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerData::InternalSwap(CMsgGCToServerCheerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cheer_types_.InternalSwap(&other->cheer_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerCheerData, dire_premium_cheers_)
      + sizeof(CMsgGCToServerCheerData::dire_premium_cheers_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerCheerData, radiant_cheers_)>(
          reinterpret_cast<char*>(&radiant_cheers_),
          reinterpret_cast<char*>(&other->radiant_cheers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCheerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCheerConfig>()._has_bits_);
  static void set_has_cheers_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_valid_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_window_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_window_bucket_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crowd_level_push_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crowd_level_low(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crowd_level_medium(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_crowd_level_high(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cheer_scale_start(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cheer_scale_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cheer_scale_push_mark(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cheer_scale_pull_mark(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cheer_scale_pct_of_max_cps_clamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cheer_scale_dampener_value(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cheer_scale_dampener_lerp_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cheer_factor_bronze(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_cheer_factor_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cheer_factor_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CMsgCheerConfig::CMsgCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCheerConfig)
}
CMsgCheerConfig::CMsgCheerConfig(const CMsgCheerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cheers_enabled_, &from.cheers_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&cheer_scale_dampener_value_) -
    reinterpret_cast<char*>(&cheers_enabled_)) + sizeof(cheer_scale_dampener_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgCheerConfig)
}

void CMsgCheerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cheers_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cheer_scale_dampener_value_) -
    reinterpret_cast<char*>(&cheers_enabled_)) + sizeof(cheer_scale_dampener_value_));
}

CMsgCheerConfig::~CMsgCheerConfig() {
  // @@protoc_insertion_point(destructor:CMsgCheerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCheerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCheerConfig::ArenaDtor(void* object) {
  CMsgCheerConfig* _this = reinterpret_cast< CMsgCheerConfig* >(object);
  (void)_this;
}
void CMsgCheerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCheerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCheerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCheerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cheers_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crowd_level_high_) -
        reinterpret_cast<char*>(&cheers_enabled_)) + sizeof(crowd_level_high_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cheer_scale_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cheer_scale_dampener_lerp_time_) -
        reinterpret_cast<char*>(&cheer_scale_start_)) + sizeof(cheer_scale_dampener_lerp_time_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&cheer_factor_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cheer_scale_dampener_value_) -
        reinterpret_cast<char*>(&cheer_factor_gold_)) + sizeof(cheer_scale_dampener_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCheerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool cheers_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cheers_enabled(&has_bits);
          cheers_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_valid_league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_valid_league_id(&has_bits);
          is_valid_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float window_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_window_duration(&has_bits);
          window_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 window_bucket_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_window_bucket_count(&has_bits);
          window_bucket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float crowd_level_push_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_crowd_level_push_time(&has_bits);
          crowd_level_push_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 crowd_level_low = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_crowd_level_low(&has_bits);
          crowd_level_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crowd_level_medium = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_crowd_level_medium(&has_bits);
          crowd_level_medium_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crowd_level_high = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_crowd_level_high(&has_bits);
          crowd_level_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cheer_scale_start = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_cheer_scale_start(&has_bits);
          cheer_scale_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cheer_scale_speed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_cheer_scale_speed(&has_bits);
          cheer_scale_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheer_scale_push_mark = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_cheer_scale_push_mark(&has_bits);
          cheer_scale_push_mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheer_scale_pull_mark = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_cheer_scale_pull_mark(&has_bits);
          cheer_scale_pull_mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cheer_scale_pct_of_max_cps_clamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_cheer_scale_pct_of_max_cps_clamp(&has_bits);
          cheer_scale_pct_of_max_cps_clamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cheer_factor_bronze = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_cheer_factor_bronze(&has_bits);
          cheer_factor_bronze_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cheer_factor_silver = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_cheer_factor_silver(&has_bits);
          cheer_factor_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cheer_factor_gold = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_cheer_factor_gold(&has_bits);
          cheer_factor_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cheer_scale_dampener_value = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_cheer_scale_dampener_value(&has_bits);
          cheer_scale_dampener_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheer_scale_dampener_lerp_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_cheer_scale_dampener_lerp_time(&has_bits);
          cheer_scale_dampener_lerp_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCheerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCheerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cheers_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_cheers_enabled(), target);
  }

  // optional bool is_valid_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid_league_id(), target);
  }

  // optional float window_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_window_duration(), target);
  }

  // optional uint32 window_bucket_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_window_bucket_count(), target);
  }

  // optional float crowd_level_push_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_crowd_level_push_time(), target);
  }

  // optional uint32 crowd_level_low = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_crowd_level_low(), target);
  }

  // optional uint32 crowd_level_medium = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_crowd_level_medium(), target);
  }

  // optional uint32 crowd_level_high = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_crowd_level_high(), target);
  }

  // optional float cheer_scale_start = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_cheer_scale_start(), target);
  }

  // optional float cheer_scale_speed = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_cheer_scale_speed(), target);
  }

  // optional uint32 cheer_scale_push_mark = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_cheer_scale_push_mark(), target);
  }

  // optional uint32 cheer_scale_pull_mark = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_cheer_scale_pull_mark(), target);
  }

  // optional float cheer_scale_pct_of_max_cps_clamp = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_cheer_scale_pct_of_max_cps_clamp(), target);
  }

  // optional float cheer_factor_bronze = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_cheer_factor_bronze(), target);
  }

  // optional float cheer_factor_silver = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_cheer_factor_silver(), target);
  }

  // optional float cheer_factor_gold = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_cheer_factor_gold(), target);
  }

  // optional float cheer_scale_dampener_value = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_cheer_scale_dampener_value(), target);
  }

  // optional uint32 cheer_scale_dampener_lerp_time = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_cheer_scale_dampener_lerp_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCheerConfig)
  return target;
}

size_t CMsgCheerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCheerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool cheers_enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_valid_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float window_duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 window_bucket_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_window_bucket_count());
    }

    // optional float crowd_level_push_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 crowd_level_low = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crowd_level_low());
    }

    // optional uint32 crowd_level_medium = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crowd_level_medium());
    }

    // optional uint32 crowd_level_high = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crowd_level_high());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float cheer_scale_start = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float cheer_scale_speed = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 cheer_scale_push_mark = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheer_scale_push_mark());
    }

    // optional uint32 cheer_scale_pull_mark = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheer_scale_pull_mark());
    }

    // optional float cheer_scale_pct_of_max_cps_clamp = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float cheer_factor_bronze = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float cheer_factor_silver = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional uint32 cheer_scale_dampener_lerp_time = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheer_scale_dampener_lerp_time());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional float cheer_factor_gold = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float cheer_scale_dampener_value = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCheerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCheerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCheerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCheerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCheerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCheerConfig)
    MergeFrom(*source);
  }
}

void CMsgCheerConfig::MergeFrom(const CMsgCheerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCheerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cheers_enabled_ = from.cheers_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_valid_league_id_ = from.is_valid_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      window_duration_ = from.window_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      window_bucket_count_ = from.window_bucket_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      crowd_level_push_time_ = from.crowd_level_push_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      crowd_level_low_ = from.crowd_level_low_;
    }
    if (cached_has_bits & 0x00000040u) {
      crowd_level_medium_ = from.crowd_level_medium_;
    }
    if (cached_has_bits & 0x00000080u) {
      crowd_level_high_ = from.crowd_level_high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cheer_scale_start_ = from.cheer_scale_start_;
    }
    if (cached_has_bits & 0x00000200u) {
      cheer_scale_speed_ = from.cheer_scale_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      cheer_scale_push_mark_ = from.cheer_scale_push_mark_;
    }
    if (cached_has_bits & 0x00000800u) {
      cheer_scale_pull_mark_ = from.cheer_scale_pull_mark_;
    }
    if (cached_has_bits & 0x00001000u) {
      cheer_scale_pct_of_max_cps_clamp_ = from.cheer_scale_pct_of_max_cps_clamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      cheer_factor_bronze_ = from.cheer_factor_bronze_;
    }
    if (cached_has_bits & 0x00004000u) {
      cheer_factor_silver_ = from.cheer_factor_silver_;
    }
    if (cached_has_bits & 0x00008000u) {
      cheer_scale_dampener_lerp_time_ = from.cheer_scale_dampener_lerp_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      cheer_factor_gold_ = from.cheer_factor_gold_;
    }
    if (cached_has_bits & 0x00020000u) {
      cheer_scale_dampener_value_ = from.cheer_scale_dampener_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCheerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCheerConfig::CopyFrom(const CMsgCheerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCheerConfig::IsInitialized() const {
  return true;
}

void CMsgCheerConfig::InternalSwap(CMsgCheerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCheerConfig, cheer_scale_dampener_value_)
      + sizeof(CMsgCheerConfig::cheer_scale_dampener_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgCheerConfig, cheers_enabled_)>(
          reinterpret_cast<char*>(&cheers_enabled_),
          reinterpret_cast<char*>(&other->cheers_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCheerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerCheerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerCheerConfig>()._has_bits_);
  static const ::CMsgCheerConfig& cheer_config(const CMsgGCToServerCheerConfig* msg);
  static void set_has_cheer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgCheerConfig&
CMsgGCToServerCheerConfig::_Internal::cheer_config(const CMsgGCToServerCheerConfig* msg) {
  return *msg->cheer_config_;
}
CMsgGCToServerCheerConfig::CMsgGCToServerCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerConfig)
}
CMsgGCToServerCheerConfig::CMsgGCToServerCheerConfig(const CMsgGCToServerCheerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cheer_config()) {
    cheer_config_ = new ::CMsgCheerConfig(*from.cheer_config_);
  } else {
    cheer_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerConfig)
}

void CMsgGCToServerCheerConfig::SharedCtor() {
cheer_config_ = nullptr;
}

CMsgGCToServerCheerConfig::~CMsgGCToServerCheerConfig() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerCheerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cheer_config_;
}

void CMsgGCToServerCheerConfig::ArenaDtor(void* object) {
  CMsgGCToServerCheerConfig* _this = reinterpret_cast< CMsgGCToServerCheerConfig* >(object);
  (void)_this;
}
void CMsgGCToServerCheerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerCheerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerCheerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cheer_config_ != nullptr);
    cheer_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgCheerConfig cheer_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerCheerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgCheerConfig cheer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cheer_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerConfig)
  return target;
}

size_t CMsgGCToServerCheerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgCheerConfig cheer_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cheer_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerCheerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerCheerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerCheerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerCheerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerCheerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerCheerConfig)
    MergeFrom(*source);
  }
}

void CMsgGCToServerCheerConfig::MergeFrom(const CMsgGCToServerCheerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cheer_config()) {
    _internal_mutable_cheer_config()->::CMsgCheerConfig::MergeFrom(from._internal_cheer_config());
  }
}

void CMsgGCToServerCheerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerCheerConfig::CopyFrom(const CMsgGCToServerCheerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerConfig::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerConfig::InternalSwap(CMsgGCToServerCheerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cheer_config_, other->cheer_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetCheerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetCheerConfig>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCGetCheerConfig::CMsgServerToGCGetCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetCheerConfig)
}
CMsgServerToGCGetCheerConfig::CMsgServerToGCGetCheerConfig(const CMsgServerToGCGetCheerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetCheerConfig)
}

void CMsgServerToGCGetCheerConfig::SharedCtor() {
league_id_ = 0u;
}

CMsgServerToGCGetCheerConfig::~CMsgServerToGCGetCheerConfig() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetCheerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetCheerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCGetCheerConfig::ArenaDtor(void* object) {
  CMsgServerToGCGetCheerConfig* _this = reinterpret_cast< CMsgServerToGCGetCheerConfig* >(object);
  (void)_this;
}
void CMsgServerToGCGetCheerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetCheerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetCheerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetCheerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetCheerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetCheerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetCheerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetCheerConfig)
  return target;
}

size_t CMsgServerToGCGetCheerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetCheerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetCheerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetCheerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetCheerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetCheerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetCheerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetCheerConfig)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetCheerConfig::MergeFrom(const CMsgServerToGCGetCheerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetCheerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_league_id()) {
    _internal_set_league_id(from._internal_league_id());
  }
}

void CMsgServerToGCGetCheerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetCheerConfig::CopyFrom(const CMsgServerToGCGetCheerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetCheerConfig::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetCheerConfig::InternalSwap(CMsgServerToGCGetCheerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetCheerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCGetCheerConfigResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetCheerConfigResponse>()._has_bits_);
  static const ::CMsgCheerConfig& cheer_config(const CMsgServerToGCGetCheerConfigResponse* msg);
  static void set_has_cheer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgCheerConfig&
CMsgServerToGCGetCheerConfigResponse::_Internal::cheer_config(const CMsgServerToGCGetCheerConfigResponse* msg) {
  return *msg->cheer_config_;
}
CMsgServerToGCGetCheerConfigResponse::CMsgServerToGCGetCheerConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetCheerConfigResponse)
}
CMsgServerToGCGetCheerConfigResponse::CMsgServerToGCGetCheerConfigResponse(const CMsgServerToGCGetCheerConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cheer_config()) {
    cheer_config_ = new ::CMsgCheerConfig(*from.cheer_config_);
  } else {
    cheer_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetCheerConfigResponse)
}

void CMsgServerToGCGetCheerConfigResponse::SharedCtor() {
cheer_config_ = nullptr;
}

CMsgServerToGCGetCheerConfigResponse::~CMsgServerToGCGetCheerConfigResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetCheerConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCGetCheerConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cheer_config_;
}

void CMsgServerToGCGetCheerConfigResponse::ArenaDtor(void* object) {
  CMsgServerToGCGetCheerConfigResponse* _this = reinterpret_cast< CMsgServerToGCGetCheerConfigResponse* >(object);
  (void)_this;
}
void CMsgServerToGCGetCheerConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCGetCheerConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCGetCheerConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetCheerConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cheer_config_ != nullptr);
    cheer_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetCheerConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgCheerConfig cheer_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCGetCheerConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetCheerConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgCheerConfig cheer_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cheer_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetCheerConfigResponse)
  return target;
}

size_t CMsgServerToGCGetCheerConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetCheerConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgCheerConfig cheer_config = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cheer_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetCheerConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCGetCheerConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetCheerConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCGetCheerConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCGetCheerConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCGetCheerConfigResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetCheerConfigResponse::MergeFrom(const CMsgServerToGCGetCheerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetCheerConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cheer_config()) {
    _internal_mutable_cheer_config()->::CMsgCheerConfig::MergeFrom(from._internal_cheer_config());
  }
}

void CMsgServerToGCGetCheerConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCGetCheerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetCheerConfigResponse::CopyFrom(const CMsgServerToGCGetCheerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetCheerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetCheerConfigResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetCheerConfigResponse::InternalSwap(CMsgServerToGCGetCheerConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cheer_config_, other->cheer_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetCheerConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerCheerScalesOverride::_Internal {
 public:
};

CMsgGCToServerCheerScalesOverride::CMsgGCToServerCheerScalesOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scales_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerScalesOverride)
}
CMsgGCToServerCheerScalesOverride::CMsgGCToServerCheerScalesOverride(const CMsgGCToServerCheerScalesOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scales_(from.scales_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerScalesOverride)
}

void CMsgGCToServerCheerScalesOverride::SharedCtor() {
}

CMsgGCToServerCheerScalesOverride::~CMsgGCToServerCheerScalesOverride() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerScalesOverride)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerCheerScalesOverride::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerCheerScalesOverride::ArenaDtor(void* object) {
  CMsgGCToServerCheerScalesOverride* _this = reinterpret_cast< CMsgGCToServerCheerScalesOverride* >(object);
  (void)_this;
}
void CMsgGCToServerCheerScalesOverride::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerCheerScalesOverride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerCheerScalesOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerScalesOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scales_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerScalesOverride::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float scales = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_scales(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scales(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerCheerScalesOverride::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerScalesOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float scales = 1;
  for (int i = 0, n = this->_internal_scales_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scales(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerScalesOverride)
  return target;
}

size_t CMsgGCToServerCheerScalesOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerScalesOverride)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float scales = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scales_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scales_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerCheerScalesOverride::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerCheerScalesOverride)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerCheerScalesOverride* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerCheerScalesOverride>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerCheerScalesOverride)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerCheerScalesOverride)
    MergeFrom(*source);
  }
}

void CMsgGCToServerCheerScalesOverride::MergeFrom(const CMsgGCToServerCheerScalesOverride& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerScalesOverride)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scales_.MergeFrom(from.scales_);
}

void CMsgGCToServerCheerScalesOverride::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerCheerScalesOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerCheerScalesOverride::CopyFrom(const CMsgGCToServerCheerScalesOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerScalesOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerScalesOverride::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerScalesOverride::InternalSwap(CMsgGCToServerCheerScalesOverride* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scales_.InternalSwap(&other->scales_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerScalesOverride::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerGetCheerState::_Internal {
 public:
};

CMsgGCToServerGetCheerState::CMsgGCToServerGetCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerGetCheerState)
}
CMsgGCToServerGetCheerState::CMsgGCToServerGetCheerState(const CMsgGCToServerGetCheerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerGetCheerState)
}

void CMsgGCToServerGetCheerState::SharedCtor() {
}

CMsgGCToServerGetCheerState::~CMsgGCToServerGetCheerState() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerGetCheerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerGetCheerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToServerGetCheerState::ArenaDtor(void* object) {
  CMsgGCToServerGetCheerState* _this = reinterpret_cast< CMsgGCToServerGetCheerState* >(object);
  (void)_this;
}
void CMsgGCToServerGetCheerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerGetCheerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerGetCheerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerGetCheerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerGetCheerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerGetCheerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerGetCheerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerGetCheerState)
  return target;
}

size_t CMsgGCToServerGetCheerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerGetCheerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerGetCheerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerGetCheerState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerGetCheerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerGetCheerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerGetCheerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerGetCheerState)
    MergeFrom(*source);
  }
}

void CMsgGCToServerGetCheerState::MergeFrom(const CMsgGCToServerGetCheerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerGetCheerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToServerGetCheerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerGetCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerGetCheerState::CopyFrom(const CMsgGCToServerGetCheerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerGetCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerGetCheerState::IsInitialized() const {
  return true;
}

void CMsgGCToServerGetCheerState::InternalSwap(CMsgGCToServerGetCheerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerGetCheerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCheerTypeState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCheerTypeState>()._has_bits_);
  static void set_has_max_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cheer_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgCheerTypeState::CMsgCheerTypeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cheer_counts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCheerTypeState)
}
CMsgCheerTypeState::CMsgCheerTypeState(const CMsgCheerTypeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cheer_counts_(from.cheer_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_per_second_, &from.max_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&override_scale_) -
    reinterpret_cast<char*>(&max_per_second_)) + sizeof(override_scale_));
  // @@protoc_insertion_point(copy_constructor:CMsgCheerTypeState)
}

void CMsgCheerTypeState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_per_second_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_scale_) -
    reinterpret_cast<char*>(&max_per_second_)) + sizeof(override_scale_));
}

CMsgCheerTypeState::~CMsgCheerTypeState() {
  // @@protoc_insertion_point(destructor:CMsgCheerTypeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCheerTypeState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCheerTypeState::ArenaDtor(void* object) {
  CMsgCheerTypeState* _this = reinterpret_cast< CMsgCheerTypeState* >(object);
  (void)_this;
}
void CMsgCheerTypeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCheerTypeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCheerTypeState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCheerTypeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cheer_counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&max_per_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&override_scale_) -
        reinterpret_cast<char*>(&max_per_second_)) + sizeof(override_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCheerTypeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 cheer_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cheer_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cheer_counts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_per_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_per_second(&has_bits);
          max_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cheer_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cheer_scale(&has_bits);
          cheer_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float override_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_override_scale(&has_bits);
          override_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCheerTypeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCheerTypeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cheer_counts = 1;
  for (int i = 0, n = this->_internal_cheer_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cheer_counts(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float max_per_second = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_per_second(), target);
  }

  // optional float cheer_scale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cheer_scale(), target);
  }

  // optional float override_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_override_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCheerTypeState)
  return target;
}

size_t CMsgCheerTypeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCheerTypeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cheer_counts = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cheer_counts_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cheer_counts_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float max_per_second = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float cheer_scale = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float override_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCheerTypeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCheerTypeState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCheerTypeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCheerTypeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCheerTypeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCheerTypeState)
    MergeFrom(*source);
  }
}

void CMsgCheerTypeState::MergeFrom(const CMsgCheerTypeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCheerTypeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cheer_counts_.MergeFrom(from.cheer_counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      max_per_second_ = from.max_per_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      cheer_scale_ = from.cheer_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_scale_ = from.override_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCheerTypeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCheerTypeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCheerTypeState::CopyFrom(const CMsgCheerTypeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCheerTypeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCheerTypeState::IsInitialized() const {
  return true;
}

void CMsgCheerTypeState::InternalSwap(CMsgCheerTypeState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cheer_counts_.InternalSwap(&other->cheer_counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCheerTypeState, override_scale_)
      + sizeof(CMsgCheerTypeState::override_scale_)
      - PROTOBUF_FIELD_OFFSET(CMsgCheerTypeState, max_per_second_)>(
          reinterpret_cast<char*>(&max_per_second_),
          reinterpret_cast<char*>(&other->max_per_second_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCheerTypeState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCheerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCheerState>()._has_bits_);
  static void set_has_radiant_crowd_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dire_crowd_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgCheerState::CMsgCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cheer_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCheerState)
}
CMsgCheerState::CMsgCheerState(const CMsgCheerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cheer_types_(from.cheer_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radiant_crowd_level_, &from.radiant_crowd_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&dire_crowd_level_) -
    reinterpret_cast<char*>(&radiant_crowd_level_)) + sizeof(dire_crowd_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgCheerState)
}

void CMsgCheerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radiant_crowd_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dire_crowd_level_) -
    reinterpret_cast<char*>(&radiant_crowd_level_)) + sizeof(dire_crowd_level_));
}

CMsgCheerState::~CMsgCheerState() {
  // @@protoc_insertion_point(destructor:CMsgCheerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCheerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCheerState::ArenaDtor(void* object) {
  CMsgCheerState* _this = reinterpret_cast< CMsgCheerState* >(object);
  (void)_this;
}
void CMsgCheerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCheerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCheerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCheerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cheer_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&radiant_crowd_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_crowd_level_) -
        reinterpret_cast<char*>(&radiant_crowd_level_)) + sizeof(dire_crowd_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCheerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgCheerTypeState cheer_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheer_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_crowd_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radiant_crowd_level(&has_bits);
          radiant_crowd_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_crowd_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dire_crowd_level(&has_bits);
          dire_crowd_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCheerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCheerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgCheerTypeState cheer_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cheer_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cheer_types(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 radiant_crowd_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radiant_crowd_level(), target);
  }

  // optional uint32 dire_crowd_level = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dire_crowd_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCheerState)
  return target;
}

size_t CMsgCheerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCheerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCheerTypeState cheer_types = 1;
  total_size += 1UL * this->_internal_cheer_types_size();
  for (const auto& msg : this->cheer_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 radiant_crowd_level = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_crowd_level());
    }

    // optional uint32 dire_crowd_level = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_crowd_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCheerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCheerState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCheerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCheerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCheerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCheerState)
    MergeFrom(*source);
  }
}

void CMsgCheerState::MergeFrom(const CMsgCheerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCheerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cheer_types_.MergeFrom(from.cheer_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radiant_crowd_level_ = from.radiant_crowd_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      dire_crowd_level_ = from.dire_crowd_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCheerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCheerState::CopyFrom(const CMsgCheerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCheerState::IsInitialized() const {
  return true;
}

void CMsgCheerState::InternalSwap(CMsgCheerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cheer_types_.InternalSwap(&other->cheer_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCheerState, dire_crowd_level_)
      + sizeof(CMsgCheerState::dire_crowd_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgCheerState, radiant_crowd_level_)>(
          reinterpret_cast<char*>(&radiant_crowd_level_),
          reinterpret_cast<char*>(&other->radiant_crowd_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCheerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCReportCheerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCReportCheerState>()._has_bits_);
  static const ::CMsgCheerConfig& cheer_config(const CMsgServerToGCReportCheerState* msg);
  static void set_has_cheer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgCheerState& cheer_state(const CMsgServerToGCReportCheerState* msg);
  static void set_has_cheer_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgCheerConfig&
CMsgServerToGCReportCheerState::_Internal::cheer_config(const CMsgServerToGCReportCheerState* msg) {
  return *msg->cheer_config_;
}
const ::CMsgCheerState&
CMsgServerToGCReportCheerState::_Internal::cheer_state(const CMsgServerToGCReportCheerState* msg) {
  return *msg->cheer_state_;
}
CMsgServerToGCReportCheerState::CMsgServerToGCReportCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCReportCheerState)
}
CMsgServerToGCReportCheerState::CMsgServerToGCReportCheerState(const CMsgServerToGCReportCheerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cheer_config()) {
    cheer_config_ = new ::CMsgCheerConfig(*from.cheer_config_);
  } else {
    cheer_config_ = nullptr;
  }
  if (from._internal_has_cheer_state()) {
    cheer_state_ = new ::CMsgCheerState(*from.cheer_state_);
  } else {
    cheer_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCReportCheerState)
}

void CMsgServerToGCReportCheerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cheer_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cheer_state_) -
    reinterpret_cast<char*>(&cheer_config_)) + sizeof(cheer_state_));
}

CMsgServerToGCReportCheerState::~CMsgServerToGCReportCheerState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCReportCheerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCReportCheerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cheer_config_;
  if (this != internal_default_instance()) delete cheer_state_;
}

void CMsgServerToGCReportCheerState::ArenaDtor(void* object) {
  CMsgServerToGCReportCheerState* _this = reinterpret_cast< CMsgServerToGCReportCheerState* >(object);
  (void)_this;
}
void CMsgServerToGCReportCheerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCReportCheerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCReportCheerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCReportCheerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cheer_config_ != nullptr);
      cheer_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cheer_state_ != nullptr);
      cheer_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCReportCheerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgCheerConfig cheer_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgCheerState cheer_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCReportCheerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCReportCheerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgCheerConfig cheer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cheer_config(this), target, stream);
  }

  // optional .CMsgCheerState cheer_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cheer_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCReportCheerState)
  return target;
}

size_t CMsgServerToGCReportCheerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCReportCheerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgCheerConfig cheer_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cheer_config_);
    }

    // optional .CMsgCheerState cheer_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cheer_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCReportCheerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCReportCheerState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCReportCheerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCReportCheerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCReportCheerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCReportCheerState)
    MergeFrom(*source);
  }
}

void CMsgServerToGCReportCheerState::MergeFrom(const CMsgServerToGCReportCheerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCReportCheerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cheer_config()->::CMsgCheerConfig::MergeFrom(from._internal_cheer_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cheer_state()->::CMsgCheerState::MergeFrom(from._internal_cheer_state());
    }
  }
}

void CMsgServerToGCReportCheerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCReportCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCReportCheerState::CopyFrom(const CMsgServerToGCReportCheerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCReportCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCReportCheerState::IsInitialized() const {
  return true;
}

void CMsgServerToGCReportCheerState::InternalSwap(CMsgServerToGCReportCheerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCReportCheerState, cheer_state_)
      + sizeof(CMsgServerToGCReportCheerState::cheer_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCReportCheerState, cheer_config_)>(
          reinterpret_cast<char*>(&cheer_config_),
          reinterpret_cast<char*>(&other->cheer_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCReportCheerState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgPoorNetworkConditions_Player* Arena::CreateMaybeMessage< ::CMsgPoorNetworkConditions_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPoorNetworkConditions_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPoorNetworkConditions* Arena::CreateMaybeMessage< ::CMsgPoorNetworkConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPoorNetworkConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameserverCrash* Arena::CreateMaybeMessage< ::CMsgGameserverCrash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameserverCrash >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConnectedPlayers_Player* Arena::CreateMaybeMessage< ::CMsgConnectedPlayers_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConnectedPlayers_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConnectedPlayers* Arena::CreateMaybeMessage< ::CMsgConnectedPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConnectedPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerInfo* Arena::CreateMaybeMessage< ::CMsgGameServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaverDetected* Arena::CreateMaybeMessage< ::CMsgLeaverDetected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaverDetected >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaverDetectedResponse* Arena::CreateMaybeMessage< ::CMsgLeaverDetectedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaverDetectedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyFinalPlayerStats* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyFinalPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyFinalPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLivePlayerStats* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLivePlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLivePlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyMatch* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAUpdateClippy* Arena::CreateMaybeMessage< ::CMsgDOTAUpdateClippy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAUpdateClippy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRealtimeStats* Arena::CreateMaybeMessage< ::CMsgServerToGCRealtimeStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRealtimeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerRealtimeStatsStartStop* Arena::CreateMaybeMessage< ::CMsgGCToServerRealtimeStatsStartStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerRealtimeStatsStartStop >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerUpdateSteamBroadcasting* Arena::CreateMaybeMessage< ::CMsgGCToServerUpdateSteamBroadcasting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerUpdateSteamBroadcasting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGameplayStats_CPlayer* Arena::CreateMaybeMessage< ::CMsgSignOutGameplayStats_CPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGameplayStats_CPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGameplayStats_CTeam* Arena::CreateMaybeMessage< ::CMsgSignOutGameplayStats_CTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGameplayStats_CTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGameplayStats* Arena::CreateMaybeMessage< ::CMsgSignOutGameplayStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGameplayStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam_CPlayer* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam_CPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam_CPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CCustomGameData* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CCustomGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CCustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_WardPlacement* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_WardPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_WardPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutDraftInfo* Arena::CreateMaybeMessage< ::CMsgSignOutDraftInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutDraftInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutBotInfo* Arena::CreateMaybeMessage< ::CMsgSignOutBotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutBotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutTextMuteInfo_TextMuteMessage* Arena::CreateMaybeMessage< ::CMsgSignOutTextMuteInfo_TextMuteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutTextMuteInfo_TextMuteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutTextMuteInfo* Arena::CreateMaybeMessage< ::CMsgSignOutTextMuteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutTextMuteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutPlayerStats* Arena::CreateMaybeMessage< ::CMsgSignOutPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* Arena::CreateMaybeMessage< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunicationSummary_PlayerCommunication* Arena::CreateMaybeMessage< ::CMsgSignOutCommunicationSummary_PlayerCommunication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunicationSummary_PlayerCommunication >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunicationSummary* Arena::CreateMaybeMessage< ::CMsgSignOutCommunicationSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunicationSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignoutResponse_PlayerMetadata* Arena::CreateMaybeMessage< ::CMsgGameMatchSignoutResponse_PlayerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignoutResponse_PlayerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignoutResponse* Arena::CreateMaybeMessage< ::CMsgGameMatchSignoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTimedRewardContainer* Arena::CreateMaybeMessage< ::CMsgTimedRewardContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTimedRewardContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutPermissionRequest* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutPermissionResponse* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutEventGameData* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutEventGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutEventGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutPerfData* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutPerfData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutPerfData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutBanData* Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutBanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutBanData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate_Team_Player* Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate_Team* Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate* Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestBatchPlayerResources* Arena::CreateMaybeMessage< ::CMsgServerToGCRequestBatchPlayerResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestBatchPlayerResources >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* Arena::CreateMaybeMessage< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestBatchPlayerResourcesResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCRequestBatchPlayerResourcesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestBatchPlayerResourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerFailedToConnect* Arena::CreateMaybeMessage< ::CMsgDOTAPlayerFailedToConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerFailedToConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToRelayConnect* Arena::CreateMaybeMessage< ::CMsgGCToRelayConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToRelayConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGCToLANServerRelayConnect* Arena::CreateMaybeMessage< ::CMsgGCGCToLANServerRelayConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGCToLANServerRelayConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToRelayConnectResponse* Arena::CreateMaybeMessage< ::CMsgGCToRelayConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToRelayConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCBanStatusRequest* Arena::CreateMaybeMessage< ::CMsgGCBanStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCBanStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCBanStatusResponse* Arena::CreateMaybeMessage< ::CMsgGCBanStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCBanStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTournamentItemEvent* Arena::CreateMaybeMessage< ::CMsgTournamentItemEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTournamentItemEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTournamentItemEventResponse* Arena::CreateMaybeMessage< ::CMsgTournamentItemEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTournamentItemEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTeamFanfare* Arena::CreateMaybeMessage< ::CMsgTeamFanfare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTeamFanfare >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgResponseTeamFanfare* Arena::CreateMaybeMessage< ::CMsgResponseTeamFanfare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgResponseTeamFanfare >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerUploadSaveGame* Arena::CreateMaybeMessage< ::CMsgGameServerUploadSaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerUploadSaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerSaveGameResult* Arena::CreateMaybeMessage< ::CMsgGameServerSaveGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerSaveGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerGetLoadGame* Arena::CreateMaybeMessage< ::CMsgGameServerGetLoadGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerGetLoadGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerGetLoadGameResult* Arena::CreateMaybeMessage< ::CMsgGameServerGetLoadGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerGetLoadGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGenerateDiretidePrizeList* Arena::CreateMaybeMessage< ::CMsgDOTAGenerateDiretidePrizeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGenerateDiretidePrizeList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGenerateDiretidePrizeListResponse* Arena::CreateMaybeMessage< ::CMsgDOTAGenerateDiretidePrizeListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGenerateDiretidePrizeListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARewardDiretidePrizes* Arena::CreateMaybeMessage< ::CMsgDOTARewardDiretidePrizes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARewardDiretidePrizes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADiretidePrizesRewardedResponse* Arena::CreateMaybeMessage< ::CMsgDOTADiretidePrizesRewardedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADiretidePrizesRewardedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAAwardEventPoints_AwardPoints* Arena::CreateMaybeMessage< ::CMsgDOTAAwardEventPoints_AwardPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAAwardEventPoints_AwardPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAAwardEventPoints* Arena::CreateMaybeMessage< ::CMsgDOTAAwardEventPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAAwardEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* Arena::CreateMaybeMessage< ::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCSignoutAwardAdditionalDrops* Arena::CreateMaybeMessage< ::CMsgServerToGCSignoutAwardAdditionalDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCSignoutAwardAdditionalDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFrostivusTimeElapsed_User* Arena::CreateMaybeMessage< ::CMsgDOTAFrostivusTimeElapsed_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFrostivusTimeElapsed_User >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFrostivusTimeElapsed* Arena::CreateMaybeMessage< ::CMsgDOTAFrostivusTimeElapsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFrostivusTimeElapsed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPingRequest* Arena::CreateMaybeMessage< ::CMsgGCToServerPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPingResponse* Arena::CreateMaybeMessage< ::CMsgGCToServerPingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerConsoleCommand* Arena::CreateMaybeMessage< ::CMsgGCToServerConsoleCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerConsoleCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGetEventPoints* Arena::CreateMaybeMessage< ::CMsgServerGetEventPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGetEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGetEventPointsResponse_Points* Arena::CreateMaybeMessage< ::CMsgServerGetEventPointsResponse_Points >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGetEventPointsResponse_Points >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGetEventPointsResponse* Arena::CreateMaybeMessage< ::CMsgServerGetEventPointsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGetEventPointsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGrantSurveyPermission_Survey* Arena::CreateMaybeMessage< ::CMsgServerGrantSurveyPermission_Survey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGrantSurveyPermission_Survey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGrantSurveyPermission* Arena::CreateMaybeMessage< ::CMsgServerGrantSurveyPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGrantSurveyPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGrantSurveyPermissionResponse* Arena::CreateMaybeMessage< ::CMsgServerGrantSurveyPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGrantSurveyPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchConnectionStats_Player* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchConnectionStats_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchConnectionStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchConnectionStats* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchConnectionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchConnectionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGCUpdateSpectatorCount* Arena::CreateMaybeMessage< ::CMsgServerGCUpdateSpectatorCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGCUpdateSpectatorCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CSerializedCombatLog_Dictionary_DictString* Arena::CreateMaybeMessage< ::CSerializedCombatLog_Dictionary_DictString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSerializedCombatLog_Dictionary_DictString >(arena);
}
template<> PROTOBUF_NOINLINE ::CSerializedCombatLog_Dictionary* Arena::CreateMaybeMessage< ::CSerializedCombatLog_Dictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSerializedCombatLog_Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::CSerializedCombatLog* Arena::CreateMaybeMessage< ::CSerializedCombatLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSerializedCombatLog >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* Arena::CreateMaybeMessage< ::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetAdditionalEquipsResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCGetAdditionalEquipsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetAdditionalEquipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetProfileCard* Arena::CreateMaybeMessage< ::CMsgServerToGCGetProfileCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetProfileCard >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetProfileCardResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCGetProfileCardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetProfileCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCVictoryPredictions_Record* Arena::CreateMaybeMessage< ::CMsgServerToGCVictoryPredictions_Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCVictoryPredictions_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCVictoryPredictions* Arena::CreateMaybeMessage< ::CMsgServerToGCVictoryPredictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCVictoryPredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestStatus* Arena::CreateMaybeMessage< ::CMsgServerToGCRequestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestStatus_Response* Arena::CreateMaybeMessage< ::CMsgServerToGCRequestStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutAssassinMiniGameInfo* Arena::CreateMaybeMessage< ::CMsgSignOutAssassinMiniGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutAssassinMiniGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetIngameEventData* Arena::CreateMaybeMessage< ::CMsgServerToGCGetIngameEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetIngameEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerIngameEventDataOraclePA* Arena::CreateMaybeMessage< ::CMsgGCToServerIngameEventDataOraclePA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerIngameEventDataOraclePA >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCKillSummaries_KillSummary* Arena::CreateMaybeMessage< ::CMsgServerToGCKillSummaries_KillSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCKillSummaries_KillSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCKillSummaries* Arena::CreateMaybeMessage< ::CMsgServerToGCKillSummaries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCKillSummaries >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPredictionResult_Prediction* Arena::CreateMaybeMessage< ::CMsgGCToServerPredictionResult_Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPredictionResult_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPredictionResult* Arena::CreateMaybeMessage< ::CMsgGCToServerPredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCLockCharmTrading* Arena::CreateMaybeMessage< ::CMsgServerToGCLockCharmTrading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCLockCharmTrading >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutUpdatePlayerChallenge_Challenge* Arena::CreateMaybeMessage< ::CMsgSignOutUpdatePlayerChallenge_Challenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutUpdatePlayerChallenge_Challenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutUpdatePlayerChallenge* Arena::CreateMaybeMessage< ::CMsgSignOutUpdatePlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutUpdatePlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRerollPlayerChallenge* Arena::CreateMaybeMessage< ::CMsgServerToGCRerollPlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRerollPlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutWagerStats_Player* Arena::CreateMaybeMessage< ::CMsgSignOutWagerStats_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutWagerStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutWagerStats* Arena::CreateMaybeMessage< ::CMsgSignOutWagerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutWagerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpendWager_Player* Arena::CreateMaybeMessage< ::CMsgSpendWager_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpendWager_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpendWager* Arena::CreateMaybeMessage< ::CMsgSpendWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpendWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutXPCoins_Player* Arena::CreateMaybeMessage< ::CMsgSignOutXPCoins_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutXPCoins_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutXPCoins* Arena::CreateMaybeMessage< ::CMsgSignOutXPCoins >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutXPCoins >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutBounties_Bounty* Arena::CreateMaybeMessage< ::CMsgSignOutBounties_Bounty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutBounties_Bounty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutBounties* Arena::CreateMaybeMessage< ::CMsgSignOutBounties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutBounties >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* Arena::CreateMaybeMessage< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunityGoalProgress* Arena::CreateMaybeMessage< ::CMsgSignOutCommunityGoalProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunityGoalProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCPostMatchTip* Arena::CreateMaybeMessage< ::CMsgServerToGCPostMatchTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCPostMatchTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCPostMatchTipResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCPostMatchTipResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCPostMatchTipResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCloseCompendiumInGamePredictionVoting* Arena::CreateMaybeMessage< ::CMsgServerToGCCloseCompendiumInGamePredictionVoting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCloseCompendiumInGamePredictionVoting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumInGamePredictionResults* Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumInGamePredictionResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumInGamePredictionResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumChosenInGamePredictions* Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumChosenInGamePredictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumChosenInGamePredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumInGamePredictionResultsResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumInGamePredictionResultsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumInGamePredictionResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCCompendiumInGamePredictionResults* Arena::CreateMaybeMessage< ::CMsgGCToGCCompendiumInGamePredictionResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCCompendiumInGamePredictionResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerItemPurchaseHistory* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerItemPurchaseHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerItemPurchaseHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory_PlayerState* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory_PlayerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory_PlayerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory_TeamState* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory_TeamState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory_TeamState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory_MatchState* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory_MatchState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory_MatchState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory* Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchStateSteamMLEntry* Arena::CreateMaybeMessage< ::CMsgMatchStateSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchStateSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLaneSelectionSteamMLEntry* Arena::CreateMaybeMessage< ::CMsgLaneSelectionSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLaneSelectionSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAbilitySelectionSteamMLEntry* Arena::CreateMaybeMessage< ::CMsgAbilitySelectionSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAbilitySelectionSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemPurchasePregameSteamMLEntry* Arena::CreateMaybeMessage< ::CMsgItemPurchasePregameSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemPurchasePregameSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemPurchaseSteamMLEntry* Arena::CreateMaybeMessage< ::CMsgItemPurchaseSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemPurchaseSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemPurchaseSequenceSteamMLEntry* Arena::CreateMaybeMessage< ::CMsgItemPurchaseSequenceSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemPurchaseSequenceSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCavernCrawlIsHeroActive* Arena::CreateMaybeMessage< ::CMsgServerToGCCavernCrawlIsHeroActive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCavernCrawlIsHeroActive >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* Arena::CreateMaybeMessage< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCPlayerChallengeHistory* Arena::CreateMaybeMessage< ::CMsgServerToGCPlayerChallengeHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCPlayerChallengeHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* Arena::CreateMaybeMessage< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCavernCrawlIsHeroActiveResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCtoServerTensorflowInstance* Arena::CreateMaybeMessage< ::CMsgGCtoServerTensorflowInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCtoServerTensorflowInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_PlayerStatEntry* Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_PlayerStatEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_PlayerStatEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_GameStats* Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_GameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_GameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_MinuteEntry* Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_MinuteEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_MinuteEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_PlayerInfo* Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats* Arena::CreateMaybeMessage< ::CMsgDetailedGameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAllStarStats_PlayerStats* Arena::CreateMaybeMessage< ::CMsgAllStarStats_PlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAllStarStats_PlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAllStarStats* Arena::CreateMaybeMessage< ::CMsgAllStarStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAllStarStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNeutralItemStats_NeutralItem* Arena::CreateMaybeMessage< ::CMsgNeutralItemStats_NeutralItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNeutralItemStats_NeutralItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNeutralItemStats* Arena::CreateMaybeMessage< ::CMsgNeutralItemStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNeutralItemStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* Arena::CreateMaybeMessage< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerLobbyHeroBanRates* Arena::CreateMaybeMessage< ::CMsgGCToServerLobbyHeroBanRates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerLobbyHeroBanRates >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* Arena::CreateMaybeMessage< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildContractProgress_PlayerContract* Arena::CreateMaybeMessage< ::CMsgSignOutGuildContractProgress_PlayerContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildContractProgress_PlayerContract >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildContractProgress* Arena::CreateMaybeMessage< ::CMsgSignOutGuildContractProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildContractProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* Arena::CreateMaybeMessage< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildChallengeProgress* Arena::CreateMaybeMessage< ::CMsgSignOutGuildChallengeProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildChallengeProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMVPStats_Player_KillEaterEvent* Arena::CreateMaybeMessage< ::CMsgSignOutMVPStats_Player_KillEaterEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMVPStats_Player_KillEaterEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMVPStats_Player* Arena::CreateMaybeMessage< ::CMsgSignOutMVPStats_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMVPStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMVPStats* Arena::CreateMaybeMessage< ::CMsgSignOutMVPStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMVPStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerRecordTrainingData* Arena::CreateMaybeMessage< ::CMsgGCToServerRecordTrainingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerRecordTrainingData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContracts* Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContractsResponse_Player* Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContractsResponse_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContractsResponse_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContractsResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContractsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContractsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchDiretideCandy_CandyDetails* Arena::CreateMaybeMessage< ::CMsgMatchDiretideCandy_CandyDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchDiretideCandy_CandyDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchDiretideCandy_PlayerCandy* Arena::CreateMaybeMessage< ::CMsgMatchDiretideCandy_PlayerCandy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchDiretideCandy_PlayerCandy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchDiretideCandy* Arena::CreateMaybeMessage< ::CMsgMatchDiretideCandy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchDiretideCandy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerData_CheerTypeCount* Arena::CreateMaybeMessage< ::CMsgGCToServerCheerData_CheerTypeCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerData_CheerTypeCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerData* Arena::CreateMaybeMessage< ::CMsgGCToServerCheerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCheerConfig* Arena::CreateMaybeMessage< ::CMsgCheerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCheerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerConfig* Arena::CreateMaybeMessage< ::CMsgGCToServerCheerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetCheerConfig* Arena::CreateMaybeMessage< ::CMsgServerToGCGetCheerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetCheerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetCheerConfigResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCGetCheerConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetCheerConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerScalesOverride* Arena::CreateMaybeMessage< ::CMsgGCToServerCheerScalesOverride >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerScalesOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerGetCheerState* Arena::CreateMaybeMessage< ::CMsgGCToServerGetCheerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerGetCheerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCheerTypeState* Arena::CreateMaybeMessage< ::CMsgCheerTypeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCheerTypeState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCheerState* Arena::CreateMaybeMessage< ::CMsgCheerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCheerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCReportCheerState* Arena::CreateMaybeMessage< ::CMsgServerToGCReportCheerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCReportCheerState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
