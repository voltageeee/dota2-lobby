// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: econ_shared_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_econ_5fshared_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_econ_5fshared_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_econ_5fshared_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_econ_5fshared_5fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_econ_5fshared_5fenums_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_econ_5fshared_5fenums_2eproto_metadata_getter(int index);
class CMsgGenericResult;
struct CMsgGenericResultDefaultTypeInternal;
extern CMsgGenericResultDefaultTypeInternal _CMsgGenericResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgGenericResult* Arena::CreateMaybeMessage<::CMsgGenericResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EGCEconBaseMsg : int {
  k_EMsgGCGenericResult = 2579
};
bool EGCEconBaseMsg_IsValid(int value);
constexpr EGCEconBaseMsg EGCEconBaseMsg_MIN = k_EMsgGCGenericResult;
constexpr EGCEconBaseMsg EGCEconBaseMsg_MAX = k_EMsgGCGenericResult;
constexpr int EGCEconBaseMsg_ARRAYSIZE = EGCEconBaseMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCEconBaseMsg_descriptor();
template<typename T>
inline const std::string& EGCEconBaseMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCEconBaseMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCEconBaseMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCEconBaseMsg_descriptor(), enum_t_value);
}
inline bool EGCEconBaseMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCEconBaseMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCEconBaseMsg>(
    EGCEconBaseMsg_descriptor(), name, value);
}
enum EGCMsgResponse : int {
  k_EGCMsgResponseOK = 0,
  k_EGCMsgResponseDenied = 1,
  k_EGCMsgResponseServerError = 2,
  k_EGCMsgResponseTimeout = 3,
  k_EGCMsgResponseInvalid = 4,
  k_EGCMsgResponseNoMatch = 5,
  k_EGCMsgResponseUnknownError = 6,
  k_EGCMsgResponseNotLoggedOn = 7,
  k_EGCMsgFailedToCreate = 8
};
bool EGCMsgResponse_IsValid(int value);
constexpr EGCMsgResponse EGCMsgResponse_MIN = k_EGCMsgResponseOK;
constexpr EGCMsgResponse EGCMsgResponse_MAX = k_EGCMsgFailedToCreate;
constexpr int EGCMsgResponse_ARRAYSIZE = EGCMsgResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCMsgResponse_descriptor();
template<typename T>
inline const std::string& EGCMsgResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCMsgResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCMsgResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCMsgResponse_descriptor(), enum_t_value);
}
inline bool EGCMsgResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCMsgResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCMsgResponse>(
    EGCMsgResponse_descriptor(), name, value);
}
enum EGCPartnerRequestResponse : int {
  k_EPartnerRequestOK = 1,
  k_EPartnerRequestBadAccount = 2,
  k_EPartnerRequestNotLinked = 3,
  k_EPartnerRequestUnsupportedPartnerType = 4
};
bool EGCPartnerRequestResponse_IsValid(int value);
constexpr EGCPartnerRequestResponse EGCPartnerRequestResponse_MIN = k_EPartnerRequestOK;
constexpr EGCPartnerRequestResponse EGCPartnerRequestResponse_MAX = k_EPartnerRequestUnsupportedPartnerType;
constexpr int EGCPartnerRequestResponse_ARRAYSIZE = EGCPartnerRequestResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCPartnerRequestResponse_descriptor();
template<typename T>
inline const std::string& EGCPartnerRequestResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCPartnerRequestResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCPartnerRequestResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCPartnerRequestResponse_descriptor(), enum_t_value);
}
inline bool EGCPartnerRequestResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCPartnerRequestResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCPartnerRequestResponse>(
    EGCPartnerRequestResponse_descriptor(), name, value);
}
enum EGCMsgUseItemResponse : int {
  k_EGCMsgUseItemResponse_ItemUsed = 0,
  k_EGCMsgUseItemResponse_GiftNoOtherPlayers = 1,
  k_EGCMsgUseItemResponse_ServerError = 2,
  k_EGCMsgUseItemResponse_MiniGameAlreadyStarted = 3,
  k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted = 4,
  k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted = 5,
  k_EGCMsgUseItemResponse_NotInLowPriorityPool = 6,
  k_EGCMsgUseItemResponse_NotHighEnoughLevel = 7,
  k_EGCMsgUseItemResponse_EventNotActive = 8,
  k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted = 9,
  k_EGCMsgUseItemResponse_MissingRequirement = 10,
  k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew = 11,
  k_EGCMsgUseItemResponse_EmoticonUnlock_Complete = 12,
  k_EGCMsgUseItemResponse_ItemUsed_Compendium = 13
};
bool EGCMsgUseItemResponse_IsValid(int value);
constexpr EGCMsgUseItemResponse EGCMsgUseItemResponse_MIN = k_EGCMsgUseItemResponse_ItemUsed;
constexpr EGCMsgUseItemResponse EGCMsgUseItemResponse_MAX = k_EGCMsgUseItemResponse_ItemUsed_Compendium;
constexpr int EGCMsgUseItemResponse_ARRAYSIZE = EGCMsgUseItemResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCMsgUseItemResponse_descriptor();
template<typename T>
inline const std::string& EGCMsgUseItemResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCMsgUseItemResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCMsgUseItemResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCMsgUseItemResponse_descriptor(), enum_t_value);
}
inline bool EGCMsgUseItemResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCMsgUseItemResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCMsgUseItemResponse>(
    EGCMsgUseItemResponse_descriptor(), name, value);
}
// ===================================================================

class CMsgGenericResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGenericResult) */ {
 public:
  inline CMsgGenericResult() : CMsgGenericResult(nullptr) {}
  virtual ~CMsgGenericResult();
  explicit constexpr CMsgGenericResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGenericResult(const CMsgGenericResult& from);
  CMsgGenericResult(CMsgGenericResult&& from) noexcept
    : CMsgGenericResult() {
    *this = ::std::move(from);
  }

  inline CMsgGenericResult& operator=(const CMsgGenericResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGenericResult& operator=(CMsgGenericResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgGenericResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGenericResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGenericResult*>(
               &_CMsgGenericResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgGenericResult& a, CMsgGenericResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGenericResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGenericResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGenericResult* New() const final {
    return CreateMaybeMessage<CMsgGenericResult>(nullptr);
  }

  CMsgGenericResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGenericResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGenericResult& from);
  void MergeFrom(const CMsgGenericResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGenericResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGenericResult";
  }
  protected:
  explicit CMsgGenericResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_econ_5fshared_5fenums_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugMessageFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional string debug_message = 2;
  bool has_debug_message() const;
  private:
  bool _internal_has_debug_message() const;
  public:
  void clear_debug_message();
  const std::string& debug_message() const;
  void set_debug_message(const std::string& value);
  void set_debug_message(std::string&& value);
  void set_debug_message(const char* value);
  void set_debug_message(const char* value, size_t size);
  std::string* mutable_debug_message();
  std::string* release_debug_message();
  void set_allocated_debug_message(std::string* debug_message);
  private:
  const std::string& _internal_debug_message() const;
  void _internal_set_debug_message(const std::string& value);
  std::string* _internal_mutable_debug_message();
  public:

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGenericResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eresult_;
  friend struct ::TableStruct_econ_5fshared_5fenums_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgGenericResult

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgGenericResult::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGenericResult::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgGenericResult::clear_eresult() {
  eresult_ = 2u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGenericResult::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGenericResult::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgGenericResult.eresult)
  return _internal_eresult();
}
inline void CMsgGenericResult::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgGenericResult::set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgGenericResult.eresult)
}

// optional string debug_message = 2;
inline bool CMsgGenericResult::_internal_has_debug_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGenericResult::has_debug_message() const {
  return _internal_has_debug_message();
}
inline void CMsgGenericResult::clear_debug_message() {
  debug_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGenericResult::debug_message() const {
  // @@protoc_insertion_point(field_get:CMsgGenericResult.debug_message)
  return _internal_debug_message();
}
inline void CMsgGenericResult::set_debug_message(const std::string& value) {
  _internal_set_debug_message(value);
  // @@protoc_insertion_point(field_set:CMsgGenericResult.debug_message)
}
inline std::string* CMsgGenericResult::mutable_debug_message() {
  // @@protoc_insertion_point(field_mutable:CMsgGenericResult.debug_message)
  return _internal_mutable_debug_message();
}
inline const std::string& CMsgGenericResult::_internal_debug_message() const {
  return debug_message_.Get();
}
inline void CMsgGenericResult::_internal_set_debug_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgGenericResult::set_debug_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgGenericResult.debug_message)
}
inline void CMsgGenericResult::set_debug_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  debug_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgGenericResult.debug_message)
}
inline void CMsgGenericResult::set_debug_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  debug_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgGenericResult.debug_message)
}
inline std::string* CMsgGenericResult::_internal_mutable_debug_message() {
  _has_bits_[0] |= 0x00000001u;
  return debug_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgGenericResult::release_debug_message() {
  // @@protoc_insertion_point(field_release:CMsgGenericResult.debug_message)
  if (!_internal_has_debug_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return debug_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgGenericResult::set_allocated_debug_message(std::string* debug_message) {
  if (debug_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debug_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debug_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgGenericResult.debug_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EGCEconBaseMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCEconBaseMsg>() {
  return ::EGCEconBaseMsg_descriptor();
}
template <> struct is_proto_enum< ::EGCMsgResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCMsgResponse>() {
  return ::EGCMsgResponse_descriptor();
}
template <> struct is_proto_enum< ::EGCPartnerRequestResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCPartnerRequestResponse>() {
  return ::EGCPartnerRequestResponse_descriptor();
}
template <> struct is_proto_enum< ::EGCMsgUseItemResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCMsgUseItemResponse>() {
  return ::EGCMsgUseItemResponse_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_econ_5fshared_5fenums_2eproto
