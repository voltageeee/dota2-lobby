// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_client_enums.proto

#include "dota_client_enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_dota_5fclient_5fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fclient_5fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fclient_5fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_dota_5fclient_5fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027dota_client_enums.proto*^\n\023ETournament"
  "Template\022\036\n\032k_ETournamentTemplate_None\020\000"
  "\022\'\n#k_ETournamentTemplate_AutomatedWin3\020"
  "\001*\250\003\n\024ETournamentGameState\022\"\n\036k_ETournam"
  "entGameState_Unknown\020\000\022#\n\037k_ETournamentG"
  "ameState_Canceled\020\001\022$\n k_ETournamentGame"
  "State_Scheduled\020\002\022!\n\035k_ETournamentGameSt"
  "ate_Active\020\003\022%\n!k_ETournamentGameState_R"
  "adVictory\020\024\022&\n\"k_ETournamentGameState_Di"
  "reVictory\020\025\022.\n*k_ETournamentGameState_Ra"
  "dVictoryByForfeit\020\026\022/\n+k_ETournamentGame"
  "State_DireVictoryByForfeit\020\027\022(\n$k_ETourn"
  "amentGameState_ServerFailure\020(\022$\n k_ETou"
  "rnamentGameState_NotNeeded\020)*\347\006\n\024ETourna"
  "mentTeamState\022\"\n\036k_ETournamentTeamState_"
  "Unknown\020\000\022 \n\034k_ETournamentTeamState_Node"
  "1\020\001\022#\n\036k_ETournamentTeamState_NodeMax\020\200\010"
  "\022&\n!k_ETournamentTeamState_Eliminated\020\263m"
  "\022%\n k_ETournamentTeamState_Forfeited\020\264m\022"
  "\'\n\"k_ETournamentTeamState_Finished1st\020\231u"
  "\022\'\n\"k_ETournamentTeamState_Finished2nd\020\232"
  "u\022\'\n\"k_ETournamentTeamState_Finished3rd\020"
  "\233u\022\'\n\"k_ETournamentTeamState_Finished4th"
  "\020\234u\022\'\n\"k_ETournamentTeamState_Finished5t"
  "h\020\235u\022\'\n\"k_ETournamentTeamState_Finished6"
  "th\020\236u\022\'\n\"k_ETournamentTeamState_Finished"
  "7th\020\237u\022\'\n\"k_ETournamentTeamState_Finishe"
  "d8th\020\240u\022\'\n\"k_ETournamentTeamState_Finish"
  "ed9th\020\241u\022(\n#k_ETournamentTeamState_Finis"
  "hed10th\020\242u\022(\n#k_ETournamentTeamState_Fin"
  "ished11th\020\243u\022(\n#k_ETournamentTeamState_F"
  "inished12th\020\244u\022(\n#k_ETournamentTeamState"
  "_Finished13th\020\245u\022(\n#k_ETournamentTeamSta"
  "te_Finished14th\020\246u\022(\n#k_ETournamentTeamS"
  "tate_Finished15th\020\247u\022(\n#k_ETournamentTea"
  "mState_Finished16th\020\250u*\354\003\n\020ETournamentSt"
  "ate\022\036\n\032k_ETournamentState_Unknown\020\000\022&\n\"k"
  "_ETournamentState_CanceledByAdmin\020\001\022 \n\034k"
  "_ETournamentState_Completed\020\002\022\035\n\031k_ETour"
  "namentState_Merged\020\003\022$\n k_ETournamentSta"
  "te_ServerFailure\020\004\022$\n k_ETournamentState"
  "_TeamAbandoned\020\005\022)\n%k_ETournamentState_T"
  "eamTimeoutForfeit\020\006\022(\n$k_ETournamentStat"
  "e_TeamTimeoutRefund\020\007\0222\n.k_ETournamentSt"
  "ate_ServerFailureGrantedVictory\020\010\0220\n,k_E"
  "TournamentState_TeamTimeoutGrantedVictor"
  "y\020\t\022!\n\035k_ETournamentState_InProgress\020d\022%"
  "\n!k_ETournamentState_WaitingToMerge\020e*\314\004"
  "\n\024ETournamentNodeState\022\"\n\036k_ETournamentN"
  "odeState_Unknown\020\000\022#\n\037k_ETournamentNodeS"
  "tate_Canceled\020\001\022.\n*k_ETournamentNodeStat"
  "e_TeamsNotYetAssigned\020\002\022)\n%k_ETournament"
  "NodeState_InBetweenGames\020\003\022)\n%k_ETournam"
  "entNodeState_GameInProgress\020\004\022 \n\034k_ETour"
  "namentNodeState_A_Won\020\005\022 \n\034k_ETournament"
  "NodeState_B_Won\020\006\022)\n%k_ETournamentNodeSt"
  "ate_A_WonByForfeit\020\007\022)\n%k_ETournamentNod"
  "eState_B_WonByForfeit\020\010\022 \n\034k_ETournament"
  "NodeState_A_Bye\020\t\022&\n\"k_ETournamentNodeSt"
  "ate_A_Abandoned\020\n\022(\n$k_ETournamentNodeSt"
  "ate_ServerFailure\020\013\022+\n\'k_ETournamentNode"
  "State_A_TimeoutForfeit\020\014\022*\n&k_ETournamen"
  "tNodeState_A_TimeoutRefund\020\r*\307\003\n\025EDOTAGr"
  "oupMergeResult\022\036\n\032k_EDOTAGroupMergeResul"
  "t_OK\020\000\022*\n&k_EDOTAGroupMergeResult_FAILED"
  "_GENERIC\020\001\022&\n\"k_EDOTAGroupMergeResult_NO"
  "T_LEADER\020\002\022,\n(k_EDOTAGroupMergeResult_TO"
  "O_MANY_PLAYERS\020\003\022,\n(k_EDOTAGroupMergeRes"
  "ult_TOO_MANY_COACHES\020\004\022+\n\'k_EDOTAGroupMe"
  "rgeResult_ENGINE_MISMATCH\020\005\022)\n%k_EDOTAGr"
  "oupMergeResult_NO_SUCH_GROUP\020\006\0220\n,k_EDOT"
  "AGroupMergeResult_OTHER_GROUP_NOT_OPEN\020\007"
  "\022+\n\'k_EDOTAGroupMergeResult_ALREADY_INVI"
  "TED\020\010\022\'\n#k_EDOTAGroupMergeResult_NOT_INV"
  "ITED\020\t*U\n\020EPartyBeaconType\022 \n\034k_EPartyBe"
  "aconType_Available\020\000\022\037\n\033k_EPartyBeaconTy"
  "pe_Joinable\020\001B\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fclient_5fenums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fclient_5fenums_2eproto = {
  false, false, 3060, descriptor_table_protodef_dota_5fclient_5fenums_2eproto, "dota_client_enums.proto", 
  &descriptor_table_dota_5fclient_5fenums_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_dota_5fclient_5fenums_2eproto::offsets,
  file_level_metadata_dota_5fclient_5fenums_2eproto, file_level_enum_descriptors_dota_5fclient_5fenums_2eproto, file_level_service_descriptors_dota_5fclient_5fenums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fclient_5fenums_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return descriptor_table_dota_5fclient_5fenums_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fclient_5fenums_2eproto(&descriptor_table_dota_5fclient_5fenums_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETournamentTemplate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[0];
}
bool ETournamentTemplate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETournamentGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[1];
}
bool ETournamentGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 20:
    case 21:
    case 22:
    case 23:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETournamentTeamState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[2];
}
bool ETournamentTeamState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1024:
    case 14003:
    case 14004:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETournamentState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[3];
}
bool ETournamentState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETournamentNodeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[4];
}
bool ETournamentNodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAGroupMergeResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[5];
}
bool EDOTAGroupMergeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPartyBeaconType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclient_5fenums_2eproto);
  return file_level_enum_descriptors_dota_5fclient_5fenums_2eproto[6];
}
bool EPartyBeaconType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
