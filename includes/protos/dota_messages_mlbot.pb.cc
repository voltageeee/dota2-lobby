// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_messages_mlbot.proto

#include "dota_messages_mlbot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgMLBotMatchMetadata_Player::CMsgMLBotMatchMetadata_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , team_id_(0)
  , hero_id_(0)
  , rank_(0){}
struct CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal {
  constexpr CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal() {}
  union {
    CMsgMLBotMatchMetadata_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal _CMsgMLBotMatchMetadata_Player_default_instance_;
constexpr CMsgMLBotMatchMetadata::CMsgMLBotMatchMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , game_mode_(0u)
  , lobby_type_(-1){}
struct CMsgMLBotMatchMetadataDefaultTypeInternal {
  constexpr CMsgMLBotMatchMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMLBotMatchMetadataDefaultTypeInternal() {}
  union {
    CMsgMLBotMatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMLBotMatchMetadataDefaultTypeInternal _CMsgMLBotMatchMetadata_default_instance_;
constexpr CMsgMLBotTickBoundary::CMsgMLBotTickBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tick_number_(0u){}
struct CMsgMLBotTickBoundaryDefaultTypeInternal {
  constexpr CMsgMLBotTickBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMLBotTickBoundaryDefaultTypeInternal() {}
  union {
    CMsgMLBotTickBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMLBotTickBoundaryDefaultTypeInternal _CMsgMLBotTickBoundary_default_instance_;
constexpr CMsgMLBot_PlayerOrder::CMsgMLBot_PlayerOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selected_unit_handles_()
  , player_id_(0)
  , team_id_(0)
  , order_type_(0)
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0)
  , queue_(false)
  , target_index_(-1)
  , target_handle_(4294967295u)
  , ability_index_(-1)
  , ability_handle_(4294967295u){}
struct CMsgMLBot_PlayerOrderDefaultTypeInternal {
  constexpr CMsgMLBot_PlayerOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMLBot_PlayerOrderDefaultTypeInternal() {}
  union {
    CMsgMLBot_PlayerOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMLBot_PlayerOrderDefaultTypeInternal _CMsgMLBot_PlayerOrder_default_instance_;
constexpr CMsgMLBot_TeamInference::CMsgMLBot_TeamInference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bot_player_ids_()
  , world_state_(nullptr)
  , team_id_(0){}
struct CMsgMLBot_TeamInferenceDefaultTypeInternal {
  constexpr CMsgMLBot_TeamInferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMLBot_TeamInferenceDefaultTypeInternal() {}
  union {
    CMsgMLBot_TeamInference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMLBot_TeamInferenceDefaultTypeInternal _CMsgMLBot_TeamInference_default_instance_;
constexpr CMsgMLBot_TeamInferenceResponse::CMsgMLBot_TeamInferenceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_(){}
struct CMsgMLBot_TeamInferenceResponseDefaultTypeInternal {
  constexpr CMsgMLBot_TeamInferenceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMLBot_TeamInferenceResponseDefaultTypeInternal() {}
  union {
    CMsgMLBot_TeamInferenceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMLBot_TeamInferenceResponseDefaultTypeInternal _CMsgMLBot_TeamInferenceResponse_default_instance_;
constexpr CMsgMLBot_TeamInferenceList::CMsgMLBot_TeamInferenceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct CMsgMLBot_TeamInferenceListDefaultTypeInternal {
  constexpr CMsgMLBot_TeamInferenceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMLBot_TeamInferenceListDefaultTypeInternal() {}
  union {
    CMsgMLBot_TeamInferenceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMLBot_TeamInferenceListDefaultTypeInternal _CMsgMLBot_TeamInferenceList_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fmessages_5fmlbot_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fmessages_5fmlbot_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fmessages_5fmlbot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fmessages_5fmlbot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, rank_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, players_),
  0,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotTickBoundary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotTickBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotTickBoundary, tick_number_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, order_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, selected_unit_handles_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, target_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, target_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, ability_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, pos_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, pos_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, pos_z_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, queue_),
  0,
  1,
  2,
  ~0u,
  7,
  8,
  9,
  10,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, bot_player_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, world_state_),
  1,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceList, messages_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgMLBotMatchMetadata_Player)},
  { 13, 23, sizeof(::CMsgMLBotMatchMetadata)},
  { 28, 34, sizeof(::CMsgMLBotTickBoundary)},
  { 35, 52, sizeof(::CMsgMLBot_PlayerOrder)},
  { 64, 72, sizeof(::CMsgMLBot_TeamInference)},
  { 75, -1, sizeof(::CMsgMLBot_TeamInferenceResponse)},
  { 81, -1, sizeof(::CMsgMLBot_TeamInferenceList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMLBotMatchMetadata_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMLBotMatchMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMLBotTickBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMLBot_PlayerOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMLBot_TeamInference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMLBot_TeamInferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMLBot_TeamInferenceList_default_instance_),
};

const char descriptor_table_protodef_dota_5fmessages_5fmlbot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031dota_messages_mlbot.proto\032\'dota_gcmess"
  "ages_common_bot_script.proto\032\031dota_commo"
  "nmessages.proto\"\345\001\n\026CMsgMLBotMatchMetada"
  "ta\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobby_id\030\002 \001(\004\022\026"
  "\n\nlobby_type\030\003 \001(\005:\002-1\022\021\n\tgame_mode\030\004 \001("
  "\r\022/\n\007players\030\005 \003(\0132\036.CMsgMLBotMatchMetad"
  "ata.Player\032K\n\006Player\022\021\n\tplayer_id\030\001 \001(\005\022"
  "\017\n\007team_id\030\002 \001(\005\022\017\n\007hero_id\030\003 \001(\005\022\014\n\004ran"
  "k\030\004 \001(\005\",\n\025CMsgMLBotTickBoundary\022\023\n\013tick"
  "_number\030\001 \001(\r\"\246\002\n\025CMsgMLBot_PlayerOrder\022"
  "\021\n\tplayer_id\030\001 \001(\005\022\017\n\007team_id\030\002 \001(\005\022\022\n\no"
  "rder_type\030\003 \001(\005\022\035\n\025selected_unit_handles"
  "\030\004 \003(\r\022\030\n\014target_index\030\005 \001(\005:\002-1\022!\n\rtarg"
  "et_handle\030\006 \001(\r:\n4294967295\022\031\n\rability_i"
  "ndex\030\007 \001(\005:\002-1\022\"\n\016ability_handle\030\010 \001(\r:\n"
  "4294967295\022\r\n\005pos_x\030\t \001(\002\022\r\n\005pos_y\030\n \001(\002"
  "\022\r\n\005pos_z\030\013 \001(\002\022\r\n\005queue\030\014 \001(\010\"k\n\027CMsgML"
  "Bot_TeamInference\022\017\n\007team_id\030\001 \001(\005\022\026\n\016bo"
  "t_player_ids\030\002 \003(\005\022\'\n\013world_state\030\003 \001(\0132"
  "\022.CMsgBotWorldState\"I\n\037CMsgMLBot_TeamInf"
  "erenceResponse\022&\n\006orders\030\001 \003(\0132\026.CMsgMLB"
  "ot_PlayerOrder\"I\n\033CMsgMLBot_TeamInferenc"
  "eList\022*\n\010messages\030\001 \003(\0132\030.CMsgMLBot_Team"
  "Inference*\354\001\n\017MLBot_MessageId\022\027\n\023mlbot_M"
  "atchMetadata\020\001\022\026\n\022mlbot_TickBoundary\020\002\022\033"
  "\n\027mlbot_TeamState_Radiant\020\003\022!\n\035mlbot_Tea"
  "mState_Radiant_Delta\020\004\022\030\n\024mlbot_TeamStat"
  "e_Dire\020\005\022\036\n\032mlbot_TeamState_Dire_Delta\020\006"
  "\022\027\n\023mlbot_PlayerCommand\020\007\022\025\n\021mlbot_Playe"
  "rOrder\020\010B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fmessages_5fmlbot_2eproto_deps[2] = {
  &::descriptor_table_dota_5fcommonmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fmessages_5fmlbot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fmessages_5fmlbot_2eproto = {
  false, false, 1175, descriptor_table_protodef_dota_5fmessages_5fmlbot_2eproto, "dota_messages_mlbot.proto", 
  &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once, descriptor_table_dota_5fmessages_5fmlbot_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_dota_5fmessages_5fmlbot_2eproto::offsets,
  file_level_metadata_dota_5fmessages_5fmlbot_2eproto, file_level_enum_descriptors_dota_5fmessages_5fmlbot_2eproto, file_level_service_descriptors_dota_5fmessages_5fmlbot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fmessages_5fmlbot_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fmessages_5fmlbot_2eproto);
  return descriptor_table_dota_5fmessages_5fmlbot_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fmessages_5fmlbot_2eproto(&descriptor_table_dota_5fmessages_5fmlbot_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MLBot_MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fmessages_5fmlbot_2eproto);
  return file_level_enum_descriptors_dota_5fmessages_5fmlbot_2eproto[0];
}
bool MLBot_MessageId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgMLBotMatchMetadata_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBotMatchMetadata_Player>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMLBotMatchMetadata_Player::CMsgMLBotMatchMetadata_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBotMatchMetadata.Player)
}
CMsgMLBotMatchMetadata_Player::CMsgMLBotMatchMetadata_Player(const CMsgMLBotMatchMetadata_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:CMsgMLBotMatchMetadata.Player)
}

void CMsgMLBotMatchMetadata_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(rank_));
}

CMsgMLBotMatchMetadata_Player::~CMsgMLBotMatchMetadata_Player() {
  // @@protoc_insertion_point(destructor:CMsgMLBotMatchMetadata.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMLBotMatchMetadata_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMLBotMatchMetadata_Player::ArenaDtor(void* object) {
  CMsgMLBotMatchMetadata_Player* _this = reinterpret_cast< CMsgMLBotMatchMetadata_Player* >(object);
  (void)_this;
}
void CMsgMLBotMatchMetadata_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMLBotMatchMetadata_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMLBotMatchMetadata_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBotMatchMetadata.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBotMatchMetadata_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMLBotMatchMetadata_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBotMatchMetadata.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional int32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional int32 rank = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBotMatchMetadata.Player)
  return target;
}

size_t CMsgMLBotMatchMetadata_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBotMatchMetadata.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

    // optional int32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hero_id());
    }

    // optional int32 rank = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMLBotMatchMetadata_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMLBotMatchMetadata.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMLBotMatchMetadata_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMLBotMatchMetadata_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMLBotMatchMetadata.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMLBotMatchMetadata.Player)
    MergeFrom(*source);
  }
}

void CMsgMLBotMatchMetadata_Player::MergeFrom(const CMsgMLBotMatchMetadata_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBotMatchMetadata.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMLBotMatchMetadata_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMLBotMatchMetadata.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMLBotMatchMetadata_Player::CopyFrom(const CMsgMLBotMatchMetadata_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBotMatchMetadata.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBotMatchMetadata_Player::IsInitialized() const {
  return true;
}

void CMsgMLBotMatchMetadata_Player::InternalSwap(CMsgMLBotMatchMetadata_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata_Player, rank_)
      + sizeof(CMsgMLBotMatchMetadata_Player::rank_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata_Player, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBotMatchMetadata_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMLBotMatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBotMatchMetadata>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMLBotMatchMetadata::CMsgMLBotMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBotMatchMetadata)
}
CMsgMLBotMatchMetadata::CMsgMLBotMatchMetadata(const CMsgMLBotMatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_type_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgMLBotMatchMetadata)
}

void CMsgMLBotMatchMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(game_mode_));
lobby_type_ = -1;
}

CMsgMLBotMatchMetadata::~CMsgMLBotMatchMetadata() {
  // @@protoc_insertion_point(destructor:CMsgMLBotMatchMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMLBotMatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMLBotMatchMetadata::ArenaDtor(void* object) {
  CMsgMLBotMatchMetadata* _this = reinterpret_cast< CMsgMLBotMatchMetadata* >(object);
  (void)_this;
}
void CMsgMLBotMatchMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMLBotMatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMLBotMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBotMatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_mode_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(game_mode_));
    lobby_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBotMatchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_type = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgMLBotMatchMetadata.Player players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMLBotMatchMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBotMatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional int32 lobby_type = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lobby_type(), target);
  }

  // optional uint32 game_mode = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_mode(), target);
  }

  // repeated .CMsgMLBotMatchMetadata.Player players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBotMatchMetadata)
  return target;
}

size_t CMsgMLBotMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBotMatchMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMLBotMatchMetadata.Player players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint32 game_mode = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional int32 lobby_type = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMLBotMatchMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMLBotMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMLBotMatchMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMLBotMatchMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMLBotMatchMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMLBotMatchMetadata)
    MergeFrom(*source);
  }
}

void CMsgMLBotMatchMetadata::MergeFrom(const CMsgMLBotMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBotMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMLBotMatchMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMLBotMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMLBotMatchMetadata::CopyFrom(const CMsgMLBotMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBotMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBotMatchMetadata::IsInitialized() const {
  return true;
}

void CMsgMLBotMatchMetadata::InternalSwap(CMsgMLBotMatchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata, game_mode_)
      + sizeof(CMsgMLBotMatchMetadata::game_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
  swap(lobby_type_, other->lobby_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBotMatchMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMLBotTickBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBotTickBoundary>()._has_bits_);
  static void set_has_tick_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMLBotTickBoundary::CMsgMLBotTickBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBotTickBoundary)
}
CMsgMLBotTickBoundary::CMsgMLBotTickBoundary(const CMsgMLBotTickBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tick_number_ = from.tick_number_;
  // @@protoc_insertion_point(copy_constructor:CMsgMLBotTickBoundary)
}

void CMsgMLBotTickBoundary::SharedCtor() {
tick_number_ = 0u;
}

CMsgMLBotTickBoundary::~CMsgMLBotTickBoundary() {
  // @@protoc_insertion_point(destructor:CMsgMLBotTickBoundary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMLBotTickBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMLBotTickBoundary::ArenaDtor(void* object) {
  CMsgMLBotTickBoundary* _this = reinterpret_cast< CMsgMLBotTickBoundary* >(object);
  (void)_this;
}
void CMsgMLBotTickBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMLBotTickBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMLBotTickBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBotTickBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tick_number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBotTickBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tick_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tick_number(&has_bits);
          tick_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMLBotTickBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBotTickBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tick_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tick_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBotTickBoundary)
  return target;
}

size_t CMsgMLBotTickBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBotTickBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 tick_number = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tick_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMLBotTickBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMLBotTickBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMLBotTickBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMLBotTickBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMLBotTickBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMLBotTickBoundary)
    MergeFrom(*source);
  }
}

void CMsgMLBotTickBoundary::MergeFrom(const CMsgMLBotTickBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBotTickBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tick_number()) {
    _internal_set_tick_number(from._internal_tick_number());
  }
}

void CMsgMLBotTickBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMLBotTickBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMLBotTickBoundary::CopyFrom(const CMsgMLBotTickBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBotTickBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBotTickBoundary::IsInitialized() const {
  return true;
}

void CMsgMLBotTickBoundary::InternalSwap(CMsgMLBotTickBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tick_number_, other->tick_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBotTickBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMLBot_PlayerOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBot_PlayerOrder>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_target_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ability_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgMLBot_PlayerOrder::CMsgMLBot_PlayerOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selected_unit_handles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_PlayerOrder)
}
CMsgMLBot_PlayerOrder::CMsgMLBot_PlayerOrder(const CMsgMLBot_PlayerOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      selected_unit_handles_(from.selected_unit_handles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_handle_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ability_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_PlayerOrder)
}

void CMsgMLBot_PlayerOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&queue_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(queue_));
target_index_ = -1;
target_handle_ = 4294967295u;
ability_index_ = -1;
ability_handle_ = 4294967295u;
}

CMsgMLBot_PlayerOrder::~CMsgMLBot_PlayerOrder() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_PlayerOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMLBot_PlayerOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMLBot_PlayerOrder::ArenaDtor(void* object) {
  CMsgMLBot_PlayerOrder* _this = reinterpret_cast< CMsgMLBot_PlayerOrder* >(object);
  (void)_this;
}
void CMsgMLBot_PlayerOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMLBot_PlayerOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMLBot_PlayerOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_PlayerOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_unit_handles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queue_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(queue_));
    target_index_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    target_handle_ = 4294967295u;
    ability_index_ = -1;
    ability_handle_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_PlayerOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order_type(&has_bits);
          order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 selected_unit_handles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_selected_unit_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_selected_unit_handles(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_index = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_target_index(&has_bits);
          target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_handle = 6 [default = 4294967295];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_target_handle(&has_bits);
          target_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability_index = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ability_index(&has_bits);
          ability_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 8 [default = 4294967295];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ability_handle(&has_bits);
          ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pos_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_pos_x(&has_bits);
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_pos_y(&has_bits);
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_pos_z(&has_bits);
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool queue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_queue(&has_bits);
          queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMLBot_PlayerOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_PlayerOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional int32 order_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_order_type(), target);
  }

  // repeated uint32 selected_unit_handles = 4;
  for (int i = 0, n = this->_internal_selected_unit_handles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selected_unit_handles(i), target);
  }

  // optional int32 target_index = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_index(), target);
  }

  // optional uint32 target_handle = 6 [default = 4294967295];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_handle(), target);
  }

  // optional int32 ability_index = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ability_index(), target);
  }

  // optional uint32 ability_handle = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ability_handle(), target);
  }

  // optional float pos_x = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_pos_z(), target);
  }

  // optional bool queue = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_queue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_PlayerOrder)
  return target;
}

size_t CMsgMLBot_PlayerOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_PlayerOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 selected_unit_handles = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->selected_unit_handles_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_selected_unit_handles_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

    // optional int32 order_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_order_type());
    }

    // optional float pos_x = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool queue = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 target_index = 5 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_index());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 target_handle = 6 [default = 4294967295];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_handle());
    }

    // optional int32 ability_index = 7 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability_index());
    }

    // optional uint32 ability_handle = 8 [default = 4294967295];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMLBot_PlayerOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMLBot_PlayerOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMLBot_PlayerOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMLBot_PlayerOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMLBot_PlayerOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMLBot_PlayerOrder)
    MergeFrom(*source);
  }
}

void CMsgMLBot_PlayerOrder::MergeFrom(const CMsgMLBot_PlayerOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_PlayerOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_unit_handles_.MergeFrom(from.selected_unit_handles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      queue_ = from.queue_;
    }
    if (cached_has_bits & 0x00000080u) {
      target_index_ = from.target_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      target_handle_ = from.target_handle_;
    }
    if (cached_has_bits & 0x00000200u) {
      ability_index_ = from.ability_index_;
    }
    if (cached_has_bits & 0x00000400u) {
      ability_handle_ = from.ability_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMLBot_PlayerOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMLBot_PlayerOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMLBot_PlayerOrder::CopyFrom(const CMsgMLBot_PlayerOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_PlayerOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_PlayerOrder::IsInitialized() const {
  return true;
}

void CMsgMLBot_PlayerOrder::InternalSwap(CMsgMLBot_PlayerOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  selected_unit_handles_.InternalSwap(&other->selected_unit_handles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBot_PlayerOrder, queue_)
      + sizeof(CMsgMLBot_PlayerOrder::queue_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBot_PlayerOrder, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
  swap(target_index_, other->target_index_);
  swap(target_handle_, other->target_handle_);
  swap(ability_index_, other->ability_index_);
  swap(ability_handle_, other->ability_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_PlayerOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMLBot_TeamInference::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBot_TeamInference>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState& world_state(const CMsgMLBot_TeamInference* msg);
  static void set_has_world_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBotWorldState&
CMsgMLBot_TeamInference::_Internal::world_state(const CMsgMLBot_TeamInference* msg) {
  return *msg->world_state_;
}
void CMsgMLBot_TeamInference::clear_world_state() {
  if (world_state_ != nullptr) world_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgMLBot_TeamInference::CMsgMLBot_TeamInference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bot_player_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_TeamInference)
}
CMsgMLBot_TeamInference::CMsgMLBot_TeamInference(const CMsgMLBot_TeamInference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bot_player_ids_(from.bot_player_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_state()) {
    world_state_ = new ::CMsgBotWorldState(*from.world_state_);
  } else {
    world_state_ = nullptr;
  }
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_TeamInference)
}

void CMsgMLBot_TeamInference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&world_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&world_state_)) + sizeof(team_id_));
}

CMsgMLBot_TeamInference::~CMsgMLBot_TeamInference() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_TeamInference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMLBot_TeamInference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete world_state_;
}

void CMsgMLBot_TeamInference::ArenaDtor(void* object) {
  CMsgMLBot_TeamInference* _this = reinterpret_cast< CMsgMLBot_TeamInference* >(object);
  (void)_this;
}
void CMsgMLBot_TeamInference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMLBot_TeamInference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMLBot_TeamInference::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_TeamInference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bot_player_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(world_state_ != nullptr);
    world_state_->Clear();
  }
  team_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_TeamInference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bot_player_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bot_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bot_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState world_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMLBot_TeamInference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_TeamInference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_id(), target);
  }

  // repeated int32 bot_player_ids = 2;
  for (int i = 0, n = this->_internal_bot_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bot_player_ids(i), target);
  }

  // optional .CMsgBotWorldState world_state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::world_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_TeamInference)
  return target;
}

size_t CMsgMLBot_TeamInference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_TeamInference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bot_player_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bot_player_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bot_player_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBotWorldState world_state = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_state_);
    }

    // optional int32 team_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMLBot_TeamInference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMLBot_TeamInference)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMLBot_TeamInference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMLBot_TeamInference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMLBot_TeamInference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMLBot_TeamInference)
    MergeFrom(*source);
  }
}

void CMsgMLBot_TeamInference::MergeFrom(const CMsgMLBot_TeamInference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_TeamInference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bot_player_ids_.MergeFrom(from.bot_player_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_world_state()->::CMsgBotWorldState::MergeFrom(from._internal_world_state());
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMLBot_TeamInference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMLBot_TeamInference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMLBot_TeamInference::CopyFrom(const CMsgMLBot_TeamInference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_TeamInference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_TeamInference::IsInitialized() const {
  return true;
}

void CMsgMLBot_TeamInference::InternalSwap(CMsgMLBot_TeamInference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bot_player_ids_.InternalSwap(&other->bot_player_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBot_TeamInference, team_id_)
      + sizeof(CMsgMLBot_TeamInference::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBot_TeamInference, world_state_)>(
          reinterpret_cast<char*>(&world_state_),
          reinterpret_cast<char*>(&other->world_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_TeamInference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMLBot_TeamInferenceResponse::_Internal {
 public:
};

CMsgMLBot_TeamInferenceResponse::CMsgMLBot_TeamInferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_TeamInferenceResponse)
}
CMsgMLBot_TeamInferenceResponse::CMsgMLBot_TeamInferenceResponse(const CMsgMLBot_TeamInferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_TeamInferenceResponse)
}

void CMsgMLBot_TeamInferenceResponse::SharedCtor() {
}

CMsgMLBot_TeamInferenceResponse::~CMsgMLBot_TeamInferenceResponse() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_TeamInferenceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMLBot_TeamInferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMLBot_TeamInferenceResponse::ArenaDtor(void* object) {
  CMsgMLBot_TeamInferenceResponse* _this = reinterpret_cast< CMsgMLBot_TeamInferenceResponse* >(object);
  (void)_this;
}
void CMsgMLBot_TeamInferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMLBot_TeamInferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMLBot_TeamInferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_TeamInferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_TeamInferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgMLBot_PlayerOrder orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMLBot_TeamInferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_TeamInferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMLBot_PlayerOrder orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_TeamInferenceResponse)
  return target;
}

size_t CMsgMLBot_TeamInferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_TeamInferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMLBot_PlayerOrder orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMLBot_TeamInferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMLBot_TeamInferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMLBot_TeamInferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMLBot_TeamInferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMLBot_TeamInferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMLBot_TeamInferenceResponse)
    MergeFrom(*source);
  }
}

void CMsgMLBot_TeamInferenceResponse::MergeFrom(const CMsgMLBot_TeamInferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_TeamInferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void CMsgMLBot_TeamInferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMLBot_TeamInferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMLBot_TeamInferenceResponse::CopyFrom(const CMsgMLBot_TeamInferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_TeamInferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_TeamInferenceResponse::IsInitialized() const {
  return true;
}

void CMsgMLBot_TeamInferenceResponse::InternalSwap(CMsgMLBot_TeamInferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_TeamInferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMLBot_TeamInferenceList::_Internal {
 public:
};

CMsgMLBot_TeamInferenceList::CMsgMLBot_TeamInferenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_TeamInferenceList)
}
CMsgMLBot_TeamInferenceList::CMsgMLBot_TeamInferenceList(const CMsgMLBot_TeamInferenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_TeamInferenceList)
}

void CMsgMLBot_TeamInferenceList::SharedCtor() {
}

CMsgMLBot_TeamInferenceList::~CMsgMLBot_TeamInferenceList() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_TeamInferenceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMLBot_TeamInferenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMLBot_TeamInferenceList::ArenaDtor(void* object) {
  CMsgMLBot_TeamInferenceList* _this = reinterpret_cast< CMsgMLBot_TeamInferenceList* >(object);
  (void)_this;
}
void CMsgMLBot_TeamInferenceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMLBot_TeamInferenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMLBot_TeamInferenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_TeamInferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_TeamInferenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgMLBot_TeamInference messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMLBot_TeamInferenceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_TeamInferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMLBot_TeamInference messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_TeamInferenceList)
  return target;
}

size_t CMsgMLBot_TeamInferenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_TeamInferenceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMLBot_TeamInference messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMLBot_TeamInferenceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMLBot_TeamInferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMLBot_TeamInferenceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMLBot_TeamInferenceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMLBot_TeamInferenceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMLBot_TeamInferenceList)
    MergeFrom(*source);
  }
}

void CMsgMLBot_TeamInferenceList::MergeFrom(const CMsgMLBot_TeamInferenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_TeamInferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void CMsgMLBot_TeamInferenceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMLBot_TeamInferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMLBot_TeamInferenceList::CopyFrom(const CMsgMLBot_TeamInferenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_TeamInferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_TeamInferenceList::IsInitialized() const {
  return true;
}

void CMsgMLBot_TeamInferenceList::InternalSwap(CMsgMLBot_TeamInferenceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_TeamInferenceList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgMLBotMatchMetadata_Player* Arena::CreateMaybeMessage< ::CMsgMLBotMatchMetadata_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBotMatchMetadata_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBotMatchMetadata* Arena::CreateMaybeMessage< ::CMsgMLBotMatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBotMatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBotTickBoundary* Arena::CreateMaybeMessage< ::CMsgMLBotTickBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBotTickBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_PlayerOrder* Arena::CreateMaybeMessage< ::CMsgMLBot_PlayerOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_PlayerOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_TeamInference* Arena::CreateMaybeMessage< ::CMsgMLBot_TeamInference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_TeamInference >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_TeamInferenceResponse* Arena::CreateMaybeMessage< ::CMsgMLBot_TeamInferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_TeamInferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_TeamInferenceList* Arena::CreateMaybeMessage< ::CMsgMLBot_TeamInferenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_TeamInferenceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
