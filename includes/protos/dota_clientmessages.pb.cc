// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_clientmessages.proto

#include "dota_clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_ping_(nullptr){}
struct CDOTAClientMsg_MapPingDefaultTypeInternal {
  constexpr CDOTAClientMsg_MapPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_MapPingDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_MapPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_MapPingDefaultTypeInternal _CDOTAClientMsg_MapPing_default_instance_;
constexpr CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_alert_(nullptr){}
struct CDOTAClientMsg_ItemAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_ItemAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ItemAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ItemAlertDefaultTypeInternal _CDOTAClientMsg_ItemAlert_default_instance_;
constexpr CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_entindex_(0u)
  , rune_type_(-1)
  , item_level_(-1)
  , primary_charges_(-1)
  , secondary_charges_(-1){}
struct CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EnemyItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal _CDOTAClientMsg_EnemyItemAlert_default_instance_;
constexpr CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buff_internal_index_(0)
  , target_entindex_(0u){}
struct CDOTAClientMsg_ModifierAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_ModifierAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ModifierAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ModifierAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ModifierAlertDefaultTypeInternal _CDOTAClientMsg_ModifierAlert_default_instance_;
constexpr CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buff_internal_index_(0)
  , target_entindex_(0u){}
struct CDOTAClientMsg_ClickedBuffDefaultTypeInternal {
  constexpr CDOTAClientMsg_ClickedBuffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ClickedBuffDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ClickedBuff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ClickedBuffDefaultTypeInternal _CDOTAClientMsg_ClickedBuff_default_instance_;
constexpr CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_entindex_(0u)
  , show_raw_values_(false){}
struct CDOTAClientMsg_HPManaAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_HPManaAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_HPManaAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_HPManaAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_HPManaAlertDefaultTypeInternal _CDOTAClientMsg_HPManaAlert_default_instance_;
constexpr CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : negative_(false){}
struct CDOTAClientMsg_GlyphAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_GlyphAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_GlyphAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_GlyphAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_GlyphAlertDefaultTypeInternal _CDOTAClientMsg_GlyphAlert_default_instance_;
constexpr CDOTAClientMsg_RadarAlert::CDOTAClientMsg_RadarAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : negative_(false){}
struct CDOTAClientMsg_RadarAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_RadarAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RadarAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RadarAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RadarAlertDefaultTypeInternal _CDOTAClientMsg_RadarAlert_default_instance_;
constexpr CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mapline_(nullptr){}
struct CDOTAClientMsg_MapLineDefaultTypeInternal {
  constexpr CDOTAClientMsg_MapLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_MapLineDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_MapLineDefaultTypeInternal _CDOTAClientMsg_MapLine_default_instance_;
constexpr CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ratio_(0){}
struct CDOTAClientMsg_AspectRatioDefaultTypeInternal {
  constexpr CDOTAClientMsg_AspectRatioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_AspectRatioDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_AspectRatio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_AspectRatioDefaultTypeInternal _CDOTAClientMsg_AspectRatio_default_instance_;
constexpr CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_type_(0)

  , mode_(-1)
{}
struct CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal {
  constexpr CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_UnitsAutoAttackMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal _CDOTAClientMsg_UnitsAutoAttackMode_default_instance_;
constexpr CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal {
  constexpr CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_UnitsAutoAttackAfterSpell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal _CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_;
constexpr CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal {
  constexpr CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_TeleportRequiresHalt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal _CDOTAClientMsg_TeleportRequiresHalt_default_instance_;
constexpr CDOTAClientMsg_ChannelRequiresHalt::CDOTAClientMsg_ChannelRequiresHalt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct CDOTAClientMsg_ChannelRequiresHaltDefaultTypeInternal {
  constexpr CDOTAClientMsg_ChannelRequiresHaltDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ChannelRequiresHaltDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ChannelRequiresHalt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ChannelRequiresHaltDefaultTypeInternal _CDOTAClientMsg_ChannelRequiresHalt_default_instance_;
constexpr CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAClientMsg_SearchStringDefaultTypeInternal {
  constexpr CDOTAClientMsg_SearchStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SearchStringDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SearchString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SearchStringDefaultTypeInternal _CDOTAClientMsg_SearchString_default_instance_;
constexpr CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAClientMsg_PauseDefaultTypeInternal {
  constexpr CDOTAClientMsg_PauseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_PauseDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_Pause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_PauseDefaultTypeInternal _CDOTAClientMsg_Pause_default_instance_;
constexpr CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0u){}
struct CDOTAClientMsg_ShopViewModeDefaultTypeInternal {
  constexpr CDOTAClientMsg_ShopViewModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ShopViewModeDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ShopViewMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ShopViewModeDefaultTypeInternal _CDOTAClientMsg_ShopViewMode_default_instance_;
constexpr CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(0u)
  , flag_(0u)
  , state_(false){}
struct CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal {
  constexpr CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SetUnitShareFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal _CDOTAClientMsg_SetUnitShareFlag_default_instance_;
constexpr CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAClientMsg_SwapRequestDefaultTypeInternal {
  constexpr CDOTAClientMsg_SwapRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SwapRequestDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SwapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SwapRequestDefaultTypeInternal _CDOTAClientMsg_SwapRequest_default_instance_;
constexpr CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAClientMsg_SwapAcceptDefaultTypeInternal {
  constexpr CDOTAClientMsg_SwapAcceptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SwapAcceptDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SwapAccept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SwapAcceptDefaultTypeInternal _CDOTAClientMsg_SwapAccept_default_instance_;
constexpr CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldline_(nullptr){}
struct CDOTAClientMsg_WorldLineDefaultTypeInternal {
  constexpr CDOTAClientMsg_WorldLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_WorldLineDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_WorldLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_WorldLineDefaultTypeInternal _CDOTAClientMsg_WorldLine_default_instance_;
constexpr CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal {
  constexpr CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RequestGraphUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal _CDOTAClientMsg_RequestGraphUpdate_default_instance_;
constexpr CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_message_id_(0u)
  , param_hero_id_(0u)
  , emoticon_id_(0u){}
struct CDOTAClientMsg_ChatWheelDefaultTypeInternal {
  constexpr CDOTAClientMsg_ChatWheelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ChatWheelDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ChatWheelDefaultTypeInternal _CDOTAClientMsg_ChatWheel_default_instance_;
constexpr CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statpopup_(nullptr){}
struct CDOTAClientMsg_SendStatPopupDefaultTypeInternal {
  constexpr CDOTAClientMsg_SendStatPopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SendStatPopupDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SendStatPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SendStatPopupDefaultTypeInternal _CDOTAClientMsg_SendStatPopup_default_instance_;
constexpr CDOTAClientMsg_DismissAllStatPopups::CDOTAClientMsg_DismissAllStatPopups(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dismissallmsg_(nullptr){}
struct CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal {
  constexpr CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_DismissAllStatPopups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal _CDOTAClientMsg_DismissAllStatPopups_default_instance_;
constexpr CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chosen_lane_(0u)
  , helper_enabled_(false){}
struct CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal {
  constexpr CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_BeginLastHitChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal _CDOTAClientMsg_BeginLastHitChallenge_default_instance_;
constexpr CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchasable_(false)
  , item_ability_id_(-1){}
struct CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal {
  constexpr CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_UpdateQuickBuyItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal _CDOTAClientMsg_UpdateQuickBuyItem_default_instance_;
constexpr CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal {
  constexpr CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_UpdateQuickBuy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal _CDOTAClientMsg_UpdateQuickBuy_default_instance_;
constexpr CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : choice_index_(0){}
struct CDOTAClientMsg_RecordVoteDefaultTypeInternal {
  constexpr CDOTAClientMsg_RecordVoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RecordVoteDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RecordVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RecordVoteDefaultTypeInternal _CDOTAClientMsg_RecordVote_default_instance_;
constexpr CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ability_id_(0)
  , gold_remaining_(0u)
  , suggestion_player_id_(0){}
struct CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_WillPurchaseAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal _CDOTAClientMsg_WillPurchaseAlert_default_instance_;
constexpr CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_BuyBackStateAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal _CDOTAClientMsg_BuyBackStateAlert_default_instance_;
constexpr CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ability_id_(0)
  , gold_cost_(0)
  , item_cooldown_seconds_(0)
  , show_buyback_(false){}
struct CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_QuickBuyAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal _CDOTAClientMsg_QuickBuyAlert_default_instance_;
constexpr CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : showcase_(false){}
struct CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal {
  constexpr CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_PlayerShowCase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal _CDOTAClientMsg_PlayerShowCase_default_instance_;
constexpr CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zoom_amount_(0){}
struct CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal {
  constexpr CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_CameraZoomAmount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal _CDOTAClientMsg_CameraZoomAmount_default_instance_;
constexpr CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cameraman_(false){}
struct CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal {
  constexpr CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_BroadcasterUsingCameraman _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal _CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_;
constexpr CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal {
  constexpr CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal _CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_;
constexpr CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : class_id_(0u)
  , slot_id_(0u)
  , def_index_(0u){}
struct CAdditionalEquipSlotClientMsgDefaultTypeInternal {
  constexpr CAdditionalEquipSlotClientMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAdditionalEquipSlotClientMsgDefaultTypeInternal() {}
  union {
    CAdditionalEquipSlotClientMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAdditionalEquipSlotClientMsgDefaultTypeInternal _CAdditionalEquipSlotClientMsg_default_instance_;
constexpr CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equips_(){}
struct CDOTAClientMsg_FreeInventoryDefaultTypeInternal {
  constexpr CDOTAClientMsg_FreeInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_FreeInventoryDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_FreeInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_FreeInventoryDefaultTypeInternal _CDOTAClientMsg_FreeInventory_default_instance_;
constexpr CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fillwithbots_(false){}
struct CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal {
  constexpr CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_FillEmptySlotsWithBots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal _CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_;
constexpr CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_player_id_(0u){}
struct CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal {
  constexpr CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_HeroStatueLike _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal _CDOTAClientMsg_HeroStatueLike_default_instance_;
constexpr CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal {
  constexpr CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EventCNY2015Cmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal _CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
constexpr CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_defs_()
  , item_ids_()
  , hero_id_(0)
  , hero_id_to_spawn_(0)
  , style_index_(0u)
  , keep_existing_demohero_(false){}
struct CDOTAClientMsg_DemoHeroDefaultTypeInternal {
  constexpr CDOTAClientMsg_DemoHeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_DemoHeroDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_DemoHero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_DemoHeroDefaultTypeInternal _CDOTAClientMsg_DemoHero_default_instance_;
constexpr CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0u)
  , slot_id_(0u)
  , sequence_id_(0u){}
struct CDOTAClientMsg_ChallengeSelectDefaultTypeInternal {
  constexpr CDOTAClientMsg_ChallengeSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ChallengeSelectDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ChallengeSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ChallengeSelectDefaultTypeInternal _CDOTAClientMsg_ChallengeSelect_default_instance_;
constexpr CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0)

  , slot_id_(0u)
  , sequence_id_(0u)
  , hero_id_(0u){}
struct CDOTAClientMsg_ChallengeRerollDefaultTypeInternal {
  constexpr CDOTAClientMsg_ChallengeRerollDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ChallengeRerollDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ChallengeReroll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ChallengeRerollDefaultTypeInternal _CDOTAClientMsg_ChallengeReroll_default_instance_;
constexpr CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wager_amount_(0u){}
struct CDOTAClientMsg_CoinWagerDefaultTypeInternal {
  constexpr CDOTAClientMsg_CoinWagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_CoinWagerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_CoinWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_CoinWagerDefaultTypeInternal _CDOTAClientMsg_CoinWager_default_instance_;
constexpr CDOTAClientMsg_CoinWagerToken::CDOTAClientMsg_CoinWagerToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wager_token_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal {
  constexpr CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_CoinWagerToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal _CDOTAClientMsg_CoinWagerToken_default_instance_;
constexpr CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announce_wager_(false){}
struct CDOTAClientMsg_RankWagerDefaultTypeInternal {
  constexpr CDOTAClientMsg_RankWagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RankWagerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RankWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RankWagerDefaultTypeInternal _CDOTAClientMsg_RankWager_default_instance_;
constexpr CDOTAClientMsg_PlayerBounty::CDOTAClientMsg_PlayerBounty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAClientMsg_PlayerBountyDefaultTypeInternal {
  constexpr CDOTAClientMsg_PlayerBountyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_PlayerBountyDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_PlayerBounty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_PlayerBountyDefaultTypeInternal _CDOTAClientMsg_PlayerBounty_default_instance_;
constexpr CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recipient_player_id_(0u){}
struct CDOTAClientMsg_EventPointsTipDefaultTypeInternal {
  constexpr CDOTAClientMsg_EventPointsTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EventPointsTipDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EventPointsTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EventPointsTipDefaultTypeInternal _CDOTAClientMsg_EventPointsTip_default_instance_;
constexpr CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_(){}
struct CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal {
  constexpr CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ExecuteOrders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal _CDOTAClientMsg_ExecuteOrders_default_instance_;
constexpr CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_entindex_(0u)
  , damage_taken_(0u){}
struct CDOTAClientMsg_XPAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_XPAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_XPAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_XPAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_XPAlertDefaultTypeInternal _CDOTAClientMsg_XPAlert_default_instance_;
constexpr CDOTAClientMsg_TalentTreeAlert::CDOTAClientMsg_TalentTreeAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_entindex_(0u)
  , ability_id_(0)
  , slot_(0)
  , learned_(false){}
struct CDOTAClientMsg_TalentTreeAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_TalentTreeAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_TalentTreeAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_TalentTreeAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_TalentTreeAlertDefaultTypeInternal _CDOTAClientMsg_TalentTreeAlert_default_instance_;
constexpr CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , damage_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_entindex_(0u)
  , damage_taken_(0u)
  , item_type_(0u)
  , item_ability_id_(0u){}
struct CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal {
  constexpr CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_KillcamDamageTaken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal _CDOTAClientMsg_KillcamDamageTaken_default_instance_;
constexpr CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CDOTAClientMsg_MatchMetadataDefaultTypeInternal {
  constexpr CDOTAClientMsg_MatchMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_MatchMetadataDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_MatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_MatchMetadataDefaultTypeInternal _CDOTAClientMsg_MatchMetadata_default_instance_;
constexpr CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAClientMsg_KillMyHeroDefaultTypeInternal {
  constexpr CDOTAClientMsg_KillMyHeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_KillMyHeroDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_KillMyHero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_KillMyHeroDefaultTypeInternal _CDOTAClientMsg_KillMyHero_default_instance_;
constexpr CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_id_(0u)
  , challenge_id_(0u)
  , progress_(0u)
  , goal_(0u)
  , query_(0u)
  , fail_gametime_(0)
  , item_ability_id_(0u){}
struct CDOTAClientMsg_QuestStatusDefaultTypeInternal {
  constexpr CDOTAClientMsg_QuestStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_QuestStatusDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_QuestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_QuestStatusDefaultTypeInternal _CDOTAClientMsg_QuestStatus_default_instance_;
constexpr CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
  , show_message_(false){}
struct CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal {
  constexpr CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ToggleAutoattack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal _CDOTAClientMsg_ToggleAutoattack_default_instance_;
constexpr CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_index_(0u)
  , target_entindex_(0u){}
struct CDOTAClientMsg_SpecialAbilityDefaultTypeInternal {
  constexpr CDOTAClientMsg_SpecialAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SpecialAbilityDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SpecialAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SpecialAbilityDefaultTypeInternal _CDOTAClientMsg_SpecialAbility_default_instance_;
constexpr CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enemy_player_id_(0u)
  , enemy_starting_position_(0u){}
struct CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal {
  constexpr CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SetEnemyStartingPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal _CDOTAClientMsg_SetEnemyStartingPosition_default_instance_;
constexpr CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ward_index_(0u)
  , ward_x_(0)
  , ward_y_(0){}
struct CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal {
  constexpr CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SetDesiredWardPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal _CDOTAClientMsg_SetDesiredWardPlacement_default_instance_;
constexpr CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_type_(0u)
  , roll_min_(0u)
  , roll_max_(0u){}
struct CDOTAClientMsg_RollDiceDefaultTypeInternal {
  constexpr CDOTAClientMsg_RollDiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RollDiceDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RollDice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RollDiceDefaultTypeInternal _CDOTAClientMsg_RollDice_default_instance_;
constexpr CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_type_(0u){}
struct CDOTAClientMsg_FlipCoinDefaultTypeInternal {
  constexpr CDOTAClientMsg_FlipCoinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_FlipCoinDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_FlipCoin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_FlipCoinDefaultTypeInternal _CDOTAClientMsg_FlipCoin_default_instance_;
constexpr CDOTAClientMsg_RequestItemSuggestions::CDOTAClientMsg_RequestItemSuggestions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal {
  constexpr CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RequestItemSuggestions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal _CDOTAClientMsg_RequestItemSuggestions_default_instance_;
constexpr CDOTAClientMsg_MakeTeamCaptain::CDOTAClientMsg_MakeTeamCaptain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal {
  constexpr CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_MakeTeamCaptain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal _CDOTAClientMsg_MakeTeamCaptain_default_instance_;
constexpr CDOTAClientMsg_HelpTipSystemStateChanged::CDOTAClientMsg_HelpTipSystemStateChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tip_displayed_(false){}
struct CDOTAClientMsg_HelpTipSystemStateChangedDefaultTypeInternal {
  constexpr CDOTAClientMsg_HelpTipSystemStateChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_HelpTipSystemStateChangedDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_HelpTipSystemStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_HelpTipSystemStateChangedDefaultTypeInternal _CDOTAClientMsg_HelpTipSystemStateChanged_default_instance_;
constexpr CDOTAClientMsg_RequestBulkCombatLog::CDOTAClientMsg_RequestBulkCombatLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_time_(0)
  , duration_(0)
  , recent_player_death_(false)
  , player_id_(0){}
struct CDOTAClientMsg_RequestBulkCombatLogDefaultTypeInternal {
  constexpr CDOTAClientMsg_RequestBulkCombatLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RequestBulkCombatLogDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RequestBulkCombatLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RequestBulkCombatLogDefaultTypeInternal _CDOTAClientMsg_RequestBulkCombatLog_default_instance_;
constexpr CDOTAClientMsg_AbilityDraftRequestAbility::CDOTAClientMsg_AbilityDraftRequestAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requested_ability_id_(0u)
  , ctrl_is_down_(false){}
struct CDOTAClientMsg_AbilityDraftRequestAbilityDefaultTypeInternal {
  constexpr CDOTAClientMsg_AbilityDraftRequestAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_AbilityDraftRequestAbilityDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_AbilityDraftRequestAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_AbilityDraftRequestAbilityDefaultTypeInternal _CDOTAClientMsg_AbilityDraftRequestAbility_default_instance_;
constexpr CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_(0u)
  , force_recalculate_(false){}
struct CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal {
  constexpr CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_GuideSelectOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal _CDOTAClientMsg_GuideSelectOption_default_instance_;
constexpr CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guide_workshop_id_(PROTOBUF_ULONGLONG(0))
  , is_plus_guide_(false){}
struct CDOTAClientMsg_GuideSelectedDefaultTypeInternal {
  constexpr CDOTAClientMsg_GuideSelectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_GuideSelectedDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_GuideSelected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_GuideSelectedDefaultTypeInternal _CDOTAClientMsg_GuideSelected_default_instance_;
constexpr CDOTAClientMsg_DamageReport::CDOTAClientMsg_DamageReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_hero_id_(0u)
  , source_hero_id_(0u)
  , damage_amount_(0)
  , broadcast_(false){}
struct CDOTAClientMsg_DamageReportDefaultTypeInternal {
  constexpr CDOTAClientMsg_DamageReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_DamageReportDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_DamageReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_DamageReportDefaultTypeInternal _CDOTAClientMsg_DamageReport_default_instance_;
constexpr CDOTAClientMsg_SalutePlayer::CDOTAClientMsg_SalutePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_player_id_(0)
  , event_id_(0){}
struct CDOTAClientMsg_SalutePlayerDefaultTypeInternal {
  constexpr CDOTAClientMsg_SalutePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SalutePlayerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SalutePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SalutePlayerDefaultTypeInternal _CDOTAClientMsg_SalutePlayer_default_instance_;
constexpr CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tip_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAClientMsg_TipAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_TipAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_TipAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_TipAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_TipAlertDefaultTypeInternal _CDOTAClientMsg_TipAlert_default_instance_;
constexpr CDOTAClientMsg_EmptyTeleportAlert::CDOTAClientMsg_EmptyTeleportAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_entindex_(0){}
struct CDOTAClientMsg_EmptyTeleportAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_EmptyTeleportAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EmptyTeleportAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EmptyTeleportAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EmptyTeleportAlertDefaultTypeInternal _CDOTAClientMsg_EmptyTeleportAlert_default_instance_;
constexpr CDOTAClientMsg_SetCavernMapVariant::CDOTAClientMsg_SetCavernMapVariant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_variant_(0u){}
struct CDOTAClientMsg_SetCavernMapVariantDefaultTypeInternal {
  constexpr CDOTAClientMsg_SetCavernMapVariantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_SetCavernMapVariantDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_SetCavernMapVariant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_SetCavernMapVariantDefaultTypeInternal _CDOTAClientMsg_SetCavernMapVariant_default_instance_;
constexpr CDOTAClientMsg_PauseGameOrder::CDOTAClientMsg_PauseGameOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(0)
  , data_(0){}
struct CDOTAClientMsg_PauseGameOrderDefaultTypeInternal {
  constexpr CDOTAClientMsg_PauseGameOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_PauseGameOrderDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_PauseGameOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_PauseGameOrderDefaultTypeInternal _CDOTAClientMsg_PauseGameOrder_default_instance_;
constexpr CDOTAClientMsg_VersusScene_PlayerBehavior::CDOTAClientMsg_VersusScene_PlayerBehavior(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : play_activity_(nullptr)
  , chat_wheel_(nullptr)
  , playback_rate_(nullptr)
  , behavior_(1)
{}
struct CDOTAClientMsg_VersusScene_PlayerBehaviorDefaultTypeInternal {
  constexpr CDOTAClientMsg_VersusScene_PlayerBehaviorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_VersusScene_PlayerBehaviorDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_VersusScene_PlayerBehavior _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_VersusScene_PlayerBehaviorDefaultTypeInternal _CDOTAClientMsg_VersusScene_PlayerBehavior_default_instance_;
constexpr CDOTAClientMsg_EmptyItemSlotAlert::CDOTAClientMsg_EmptyItemSlotAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_entindex_(0)
  , slot_index_(0){}
struct CDOTAClientMsg_EmptyItemSlotAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_EmptyItemSlotAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EmptyItemSlotAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EmptyItemSlotAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EmptyItemSlotAlertDefaultTypeInternal _CDOTAClientMsg_EmptyItemSlotAlert_default_instance_;
constexpr CDOTAClientMsg_AddOverwatchReportMarker::CDOTAClientMsg_AddOverwatchReportMarker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_player_id_(0)
  , reason_(0)

  , seconds_ago_(0u){}
struct CDOTAClientMsg_AddOverwatchReportMarkerDefaultTypeInternal {
  constexpr CDOTAClientMsg_AddOverwatchReportMarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_AddOverwatchReportMarkerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_AddOverwatchReportMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_AddOverwatchReportMarkerDefaultTypeInternal _CDOTAClientMsg_AddOverwatchReportMarker_default_instance_;
constexpr CDOTAClientMsg_AghsStatusAlert::CDOTAClientMsg_AghsStatusAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_player_id_(0u)
  , target_player_id_(0u)
  , target_entindex_(0u)
  , alert_type_(0u){}
struct CDOTAClientMsg_AghsStatusAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_AghsStatusAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_AghsStatusAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_AghsStatusAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_AghsStatusAlertDefaultTypeInternal _CDOTAClientMsg_AghsStatusAlert_default_instance_;
constexpr CDOTAClientMsg_PerfReport::CDOTAClientMsg_PerfReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_frame_time_(0)
  , max_frame_time_(0)
  , average_compute_time_(0)
  , max_compute_time_(0)
  , average_client_tick_time_(0)
  , max_client_tick_time_(0)
  , average_client_simulate_time_(0)
  , max_client_simulate_time_(0)
  , average_output_time_(0)
  , max_output_time_(0)
  , average_wait_for_rendering_to_complete_time_(0)
  , max_wait_for_rendering_to_complete_time_(0)
  , average_swap_time_(0)
  , max_swap_time_(0)
  , average_frame_update_time_(0)
  , max_frame_update_time_(0)
  , average_idle_time_(0)
  , max_idle_time_(0)
  , average_input_processing_time_(0)
  , max_input_processing_time_(0){}
struct CDOTAClientMsg_PerfReportDefaultTypeInternal {
  constexpr CDOTAClientMsg_PerfReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_PerfReportDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_PerfReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_PerfReportDefaultTypeInternal _CDOTAClientMsg_PerfReport_default_instance_;
constexpr CDOTAClientMsg_ContextualTips_Subscribe_Entry::CDOTAClientMsg_ContextualTips_Subscribe_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variants_seen_()
  , unsubscribe_(false)
  , tip_id_(0)
  , prior_display_count_(0){}
struct CDOTAClientMsg_ContextualTips_Subscribe_EntryDefaultTypeInternal {
  constexpr CDOTAClientMsg_ContextualTips_Subscribe_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ContextualTips_Subscribe_EntryDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ContextualTips_Subscribe_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ContextualTips_Subscribe_EntryDefaultTypeInternal _CDOTAClientMsg_ContextualTips_Subscribe_Entry_default_instance_;
constexpr CDOTAClientMsg_ContextualTips_Subscribe::CDOTAClientMsg_ContextualTips_Subscribe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tips_(){}
struct CDOTAClientMsg_ContextualTips_SubscribeDefaultTypeInternal {
  constexpr CDOTAClientMsg_ContextualTips_SubscribeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ContextualTips_SubscribeDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ContextualTips_Subscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ContextualTips_SubscribeDefaultTypeInternal _CDOTAClientMsg_ContextualTips_Subscribe_default_instance_;
constexpr CDOTAClientMsg_ChatMessage::CDOTAClientMsg_ChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_type_(0u){}
struct CDOTAClientMsg_ChatMessageDefaultTypeInternal {
  constexpr CDOTAClientMsg_ChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ChatMessageDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ChatMessageDefaultTypeInternal _CDOTAClientMsg_ChatMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fclientmessages_2eproto[83];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fclientmessages_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fclientmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fclientmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MapPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MapPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MapPing, location_ping_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ItemAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ItemAlert, item_alert_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EnemyItemAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EnemyItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EnemyItemAlert, item_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EnemyItemAlert, rune_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EnemyItemAlert, item_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EnemyItemAlert, primary_charges_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EnemyItemAlert, secondary_charges_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ModifierAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ModifierAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ModifierAlert, buff_internal_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ModifierAlert, target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ClickedBuff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ClickedBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ClickedBuff, buff_internal_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ClickedBuff, target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HPManaAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HPManaAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HPManaAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HPManaAlert, show_raw_values_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GlyphAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GlyphAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GlyphAlert, negative_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RadarAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RadarAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RadarAlert, negative_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MapLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MapLine, mapline_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AspectRatio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AspectRatio, ratio_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UnitsAutoAttackMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UnitsAutoAttackMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UnitsAutoAttackMode, mode_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UnitsAutoAttackMode, unit_type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UnitsAutoAttackAfterSpell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UnitsAutoAttackAfterSpell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UnitsAutoAttackAfterSpell, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TeleportRequiresHalt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TeleportRequiresHalt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TeleportRequiresHalt, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChannelRequiresHalt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChannelRequiresHalt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChannelRequiresHalt, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SearchString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SearchString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SearchString, search_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_Pause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ShopViewMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ShopViewMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ShopViewMode, mode_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetUnitShareFlag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetUnitShareFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetUnitShareFlag, playerid_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetUnitShareFlag, flag_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetUnitShareFlag, state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SwapRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SwapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SwapRequest, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SwapAccept, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SwapAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SwapAccept, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WorldLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WorldLine, worldline_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestGraphUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatWheel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatWheel, chat_message_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatWheel, param_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatWheel, emoticon_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SendStatPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SendStatPopup, statpopup_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DismissAllStatPopups, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DismissAllStatPopups, dismissallmsg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BeginLastHitChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BeginLastHitChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BeginLastHitChallenge, chosen_lane_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BeginLastHitChallenge, helper_enabled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UpdateQuickBuyItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UpdateQuickBuyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UpdateQuickBuyItem, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UpdateQuickBuyItem, purchasable_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UpdateQuickBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_UpdateQuickBuy, items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RecordVote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RecordVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RecordVote, choice_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WillPurchaseAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WillPurchaseAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WillPurchaseAlert, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WillPurchaseAlert, gold_remaining_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_WillPurchaseAlert, suggestion_player_id_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BuyBackStateAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuickBuyAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuickBuyAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuickBuyAlert, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuickBuyAlert, gold_cost_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuickBuyAlert, item_cooldown_seconds_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuickBuyAlert, show_buyback_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PlayerShowCase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PlayerShowCase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PlayerShowCase, showcase_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CameraZoomAmount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CameraZoomAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CameraZoomAmount, zoom_amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BroadcasterUsingCameraman, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BroadcasterUsingCameraman, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BroadcasterUsingCameraman, cameraman_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlotClientMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlotClientMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlotClientMsg, class_id_),
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlotClientMsg, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlotClientMsg, def_index_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FreeInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FreeInventory, equips_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FillEmptySlotsWithBots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FillEmptySlotsWithBots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FillEmptySlotsWithBots, fillwithbots_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HeroStatueLike, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HeroStatueLike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HeroStatueLike, owner_player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, hero_id_to_spawn_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, item_defs_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, item_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, style_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DemoHero, keep_existing_demohero_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeSelect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeSelect, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeSelect, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeSelect, sequence_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeReroll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeReroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeReroll, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeReroll, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeReroll, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChallengeReroll, hero_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, wager_amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWagerToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWagerToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWagerToken, wager_token_item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, announce_wager_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PlayerBounty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PlayerBounty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PlayerBounty, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, recipient_player_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ExecuteOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ExecuteOrders, orders_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_XPAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_XPAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_XPAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_XPAlert, damage_taken_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TalentTreeAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TalentTreeAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TalentTreeAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TalentTreeAlert, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TalentTreeAlert, slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TalentTreeAlert, learned_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, damage_taken_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, item_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, hero_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillcamDamageTaken, damage_color_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, metadata_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_KillMyHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, quest_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, goal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, query_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, fail_gametime_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_QuestStatus, item_ability_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ToggleAutoattack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ToggleAutoattack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ToggleAutoattack, mode_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ToggleAutoattack, show_message_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SpecialAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SpecialAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SpecialAbility, ability_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SpecialAbility, target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetEnemyStartingPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetEnemyStartingPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetEnemyStartingPosition, enemy_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetEnemyStartingPosition, enemy_starting_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetDesiredWardPlacement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetDesiredWardPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetDesiredWardPlacement, ward_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetDesiredWardPlacement, ward_x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetDesiredWardPlacement, ward_y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RollDice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RollDice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RollDice, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RollDice, roll_min_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RollDice, roll_max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FlipCoin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FlipCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_FlipCoin, channel_type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestItemSuggestions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MakeTeamCaptain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MakeTeamCaptain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MakeTeamCaptain, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HelpTipSystemStateChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HelpTipSystemStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_HelpTipSystemStateChanged, tip_displayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestBulkCombatLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestBulkCombatLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestBulkCombatLog, game_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestBulkCombatLog, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestBulkCombatLog, recent_player_death_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RequestBulkCombatLog, player_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AbilityDraftRequestAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AbilityDraftRequestAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AbilityDraftRequestAbility, requested_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AbilityDraftRequestAbility, ctrl_is_down_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, option_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, force_recalculate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, guide_workshop_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, is_plus_guide_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DamageReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DamageReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DamageReport, target_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DamageReport, source_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DamageReport, damage_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_DamageReport, broadcast_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SalutePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SalutePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SalutePlayer, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SalutePlayer, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, tip_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EmptyTeleportAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EmptyTeleportAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EmptyTeleportAlert, target_entindex_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetCavernMapVariant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetCavernMapVariant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_SetCavernMapVariant, map_variant_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PauseGameOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PauseGameOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PauseGameOrder, order_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PauseGameOrder, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_VersusScene_PlayerBehavior, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_VersusScene_PlayerBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_VersusScene_PlayerBehavior, behavior_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_VersusScene_PlayerBehavior, play_activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_VersusScene_PlayerBehavior, chat_wheel_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_VersusScene_PlayerBehavior, playback_rate_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EmptyItemSlotAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EmptyItemSlotAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EmptyItemSlotAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EmptyItemSlotAlert, slot_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AddOverwatchReportMarker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AddOverwatchReportMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AddOverwatchReportMarker, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AddOverwatchReportMarker, reason_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AddOverwatchReportMarker, seconds_ago_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AghsStatusAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AghsStatusAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AghsStatusAlert, source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AghsStatusAlert, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AghsStatusAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_AghsStatusAlert, alert_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_output_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_output_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, average_input_processing_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_PerfReport, max_input_processing_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe_Entry, unsubscribe_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe_Entry, tip_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe_Entry, prior_display_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe_Entry, variants_seen_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ContextualTips_Subscribe, tips_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, message_text_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CDOTAClientMsg_MapPing)},
  { 7, 13, sizeof(::CDOTAClientMsg_ItemAlert)},
  { 14, 24, sizeof(::CDOTAClientMsg_EnemyItemAlert)},
  { 29, 36, sizeof(::CDOTAClientMsg_ModifierAlert)},
  { 38, 45, sizeof(::CDOTAClientMsg_ClickedBuff)},
  { 47, 54, sizeof(::CDOTAClientMsg_HPManaAlert)},
  { 56, 62, sizeof(::CDOTAClientMsg_GlyphAlert)},
  { 63, 69, sizeof(::CDOTAClientMsg_RadarAlert)},
  { 70, 76, sizeof(::CDOTAClientMsg_MapLine)},
  { 77, 83, sizeof(::CDOTAClientMsg_AspectRatio)},
  { 84, 91, sizeof(::CDOTAClientMsg_UnitsAutoAttackMode)},
  { 93, 99, sizeof(::CDOTAClientMsg_UnitsAutoAttackAfterSpell)},
  { 100, 106, sizeof(::CDOTAClientMsg_TeleportRequiresHalt)},
  { 107, 113, sizeof(::CDOTAClientMsg_ChannelRequiresHalt)},
  { 114, 120, sizeof(::CDOTAClientMsg_SearchString)},
  { 121, -1, sizeof(::CDOTAClientMsg_Pause)},
  { 126, 132, sizeof(::CDOTAClientMsg_ShopViewMode)},
  { 133, 141, sizeof(::CDOTAClientMsg_SetUnitShareFlag)},
  { 144, 150, sizeof(::CDOTAClientMsg_SwapRequest)},
  { 151, 157, sizeof(::CDOTAClientMsg_SwapAccept)},
  { 158, 164, sizeof(::CDOTAClientMsg_WorldLine)},
  { 165, -1, sizeof(::CDOTAClientMsg_RequestGraphUpdate)},
  { 170, 178, sizeof(::CDOTAClientMsg_ChatWheel)},
  { 181, 187, sizeof(::CDOTAClientMsg_SendStatPopup)},
  { 188, 194, sizeof(::CDOTAClientMsg_DismissAllStatPopups)},
  { 195, 202, sizeof(::CDOTAClientMsg_BeginLastHitChallenge)},
  { 204, 211, sizeof(::CDOTAClientMsg_UpdateQuickBuyItem)},
  { 213, -1, sizeof(::CDOTAClientMsg_UpdateQuickBuy)},
  { 219, 225, sizeof(::CDOTAClientMsg_RecordVote)},
  { 226, 234, sizeof(::CDOTAClientMsg_WillPurchaseAlert)},
  { 237, -1, sizeof(::CDOTAClientMsg_BuyBackStateAlert)},
  { 242, 251, sizeof(::CDOTAClientMsg_QuickBuyAlert)},
  { 255, 261, sizeof(::CDOTAClientMsg_PlayerShowCase)},
  { 262, 268, sizeof(::CDOTAClientMsg_CameraZoomAmount)},
  { 269, 275, sizeof(::CDOTAClientMsg_BroadcasterUsingCameraman)},
  { 276, 282, sizeof(::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)},
  { 283, 291, sizeof(::CAdditionalEquipSlotClientMsg)},
  { 294, -1, sizeof(::CDOTAClientMsg_FreeInventory)},
  { 300, 306, sizeof(::CDOTAClientMsg_FillEmptySlotsWithBots)},
  { 307, 313, sizeof(::CDOTAClientMsg_HeroStatueLike)},
  { 314, 320, sizeof(::CDOTAClientMsg_EventCNY2015Cmd)},
  { 321, 332, sizeof(::CDOTAClientMsg_DemoHero)},
  { 338, 346, sizeof(::CDOTAClientMsg_ChallengeSelect)},
  { 349, 358, sizeof(::CDOTAClientMsg_ChallengeReroll)},
  { 362, 368, sizeof(::CDOTAClientMsg_CoinWager)},
  { 369, 375, sizeof(::CDOTAClientMsg_CoinWagerToken)},
  { 376, 382, sizeof(::CDOTAClientMsg_RankWager)},
  { 383, 389, sizeof(::CDOTAClientMsg_PlayerBounty)},
  { 390, 396, sizeof(::CDOTAClientMsg_EventPointsTip)},
  { 397, -1, sizeof(::CDOTAClientMsg_ExecuteOrders)},
  { 403, 410, sizeof(::CDOTAClientMsg_XPAlert)},
  { 412, 421, sizeof(::CDOTAClientMsg_TalentTreeAlert)},
  { 425, 436, sizeof(::CDOTAClientMsg_KillcamDamageTaken)},
  { 442, 449, sizeof(::CDOTAClientMsg_MatchMetadata)},
  { 451, -1, sizeof(::CDOTAClientMsg_KillMyHero)},
  { 456, 468, sizeof(::CDOTAClientMsg_QuestStatus)},
  { 475, 482, sizeof(::CDOTAClientMsg_ToggleAutoattack)},
  { 484, 491, sizeof(::CDOTAClientMsg_SpecialAbility)},
  { 493, 500, sizeof(::CDOTAClientMsg_SetEnemyStartingPosition)},
  { 502, 510, sizeof(::CDOTAClientMsg_SetDesiredWardPlacement)},
  { 513, 521, sizeof(::CDOTAClientMsg_RollDice)},
  { 524, 530, sizeof(::CDOTAClientMsg_FlipCoin)},
  { 531, -1, sizeof(::CDOTAClientMsg_RequestItemSuggestions)},
  { 536, 542, sizeof(::CDOTAClientMsg_MakeTeamCaptain)},
  { 543, 549, sizeof(::CDOTAClientMsg_HelpTipSystemStateChanged)},
  { 550, 559, sizeof(::CDOTAClientMsg_RequestBulkCombatLog)},
  { 563, 570, sizeof(::CDOTAClientMsg_AbilityDraftRequestAbility)},
  { 572, 579, sizeof(::CDOTAClientMsg_GuideSelectOption)},
  { 581, 588, sizeof(::CDOTAClientMsg_GuideSelected)},
  { 590, 599, sizeof(::CDOTAClientMsg_DamageReport)},
  { 603, 610, sizeof(::CDOTAClientMsg_SalutePlayer)},
  { 612, 618, sizeof(::CDOTAClientMsg_TipAlert)},
  { 619, 625, sizeof(::CDOTAClientMsg_EmptyTeleportAlert)},
  { 626, 632, sizeof(::CDOTAClientMsg_SetCavernMapVariant)},
  { 633, 640, sizeof(::CDOTAClientMsg_PauseGameOrder)},
  { 642, 651, sizeof(::CDOTAClientMsg_VersusScene_PlayerBehavior)},
  { 655, 662, sizeof(::CDOTAClientMsg_EmptyItemSlotAlert)},
  { 664, 672, sizeof(::CDOTAClientMsg_AddOverwatchReportMarker)},
  { 675, 684, sizeof(::CDOTAClientMsg_AghsStatusAlert)},
  { 688, 713, sizeof(::CDOTAClientMsg_PerfReport)},
  { 733, 742, sizeof(::CDOTAClientMsg_ContextualTips_Subscribe_Entry)},
  { 746, -1, sizeof(::CDOTAClientMsg_ContextualTips_Subscribe)},
  { 752, 759, sizeof(::CDOTAClientMsg_ChatMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_MapPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ItemAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EnemyItemAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ModifierAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ClickedBuff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_HPManaAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_GlyphAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RadarAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_MapLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_AspectRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_UnitsAutoAttackMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_TeleportRequiresHalt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ChannelRequiresHalt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SearchString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_Pause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ShopViewMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SetUnitShareFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SwapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SwapAccept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_WorldLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RequestGraphUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ChatWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SendStatPopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_DismissAllStatPopups_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_BeginLastHitChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_UpdateQuickBuyItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_UpdateQuickBuy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RecordVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_WillPurchaseAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_BuyBackStateAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_QuickBuyAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_PlayerShowCase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_CameraZoomAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAdditionalEquipSlotClientMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_FreeInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_HeroStatueLike_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EventCNY2015Cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_DemoHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ChallengeSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ChallengeReroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_CoinWager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_CoinWagerToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RankWager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_PlayerBounty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EventPointsTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ExecuteOrders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_XPAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_TalentTreeAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_KillcamDamageTaken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_MatchMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_KillMyHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_QuestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ToggleAutoattack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SpecialAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SetEnemyStartingPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SetDesiredWardPlacement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RollDice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_FlipCoin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RequestItemSuggestions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_MakeTeamCaptain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_HelpTipSystemStateChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RequestBulkCombatLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_AbilityDraftRequestAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_GuideSelectOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_GuideSelected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_DamageReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SalutePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_TipAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EmptyTeleportAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_SetCavernMapVariant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_PauseGameOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_VersusScene_PlayerBehavior_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EmptyItemSlotAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_AddOverwatchReportMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_AghsStatusAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_PerfReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ContextualTips_Subscribe_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ContextualTips_Subscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ChatMessage_default_instance_),
};

const char descriptor_table_protodef_dota_5fclientmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031dota_clientmessages.proto\032\031dota_common"
  "messages.proto\032\027dota_shared_enums.proto\""
  "G\n\026CDOTAClientMsg_MapPing\022-\n\rlocation_pi"
  "ng\030\001 \001(\0132\026.CDOTAMsg_LocationPing\"C\n\030CDOT"
  "AClientMsg_ItemAlert\022\'\n\nitem_alert\030\001 \001(\013"
  "2\023.CDOTAMsg_ItemAlert\"\241\001\n\035CDOTAClientMsg"
  "_EnemyItemAlert\022\025\n\ritem_entindex\030\001 \001(\r\022\025"
  "\n\trune_type\030\002 \001(\005:\002-1\022\026\n\nitem_level\030\003 \001("
  "\005:\002-1\022\033\n\017primary_charges\030\004 \001(\005:\002-1\022\035\n\021se"
  "condary_charges\030\005 \001(\005:\002-1\"T\n\034CDOTAClient"
  "Msg_ModifierAlert\022\033\n\023buff_internal_index"
  "\030\001 \001(\005\022\027\n\017target_entindex\030\002 \001(\r\"R\n\032CDOTA"
  "ClientMsg_ClickedBuff\022\033\n\023buff_internal_i"
  "ndex\030\001 \001(\005\022\027\n\017target_entindex\030\002 \001(\r\"N\n\032C"
  "DOTAClientMsg_HPManaAlert\022\027\n\017target_enti"
  "ndex\030\001 \001(\r\022\027\n\017show_raw_values\030\002 \001(\010\"-\n\031C"
  "DOTAClientMsg_GlyphAlert\022\020\n\010negative\030\001 \001"
  "(\010\"-\n\031CDOTAClientMsg_RadarAlert\022\020\n\010negat"
  "ive\030\001 \001(\010\"<\n\026CDOTAClientMsg_MapLine\022\"\n\007m"
  "apline\030\001 \001(\0132\021.CDOTAMsg_MapLine\"+\n\032CDOTA"
  "ClientMsg_AspectRatio\022\r\n\005ratio\030\001 \001(\002\"\242\002\n"
  "\"CDOTAClientMsg_UnitsAutoAttackMode\022@\n\004m"
  "ode\030\001 \001(\0162).CDOTAClientMsg_UnitsAutoAtta"
  "ckMode.EMode:\007INVALID\022H\n\tunit_type\030\002 \001(\016"
  "2-.CDOTAClientMsg_UnitsAutoAttackMode.EU"
  "nitType:\006NORMAL\"I\n\005EMode\022\024\n\007INVALID\020\377\377\377\377"
  "\377\377\377\377\377\001\022\t\n\005NEVER\020\000\022\023\n\017AFTER_SPELLCAST\020\001\022\n"
  "\n\006ALWAYS\020\002\"%\n\tEUnitType\022\n\n\006NORMAL\020\000\022\014\n\010S"
  "UMMONED\020\001\";\n(CDOTAClientMsg_UnitsAutoAtt"
  "ackAfterSpell\022\017\n\007enabled\030\001 \001(\010\"6\n#CDOTAC"
  "lientMsg_TeleportRequiresHalt\022\017\n\007enabled"
  "\030\001 \001(\010\"5\n\"CDOTAClientMsg_ChannelRequires"
  "Halt\022\017\n\007enabled\030\001 \001(\010\"-\n\033CDOTAClientMsg_"
  "SearchString\022\016\n\006search\030\001 \001(\t\"\026\n\024CDOTACli"
  "entMsg_Pause\"+\n\033CDOTAClientMsg_ShopViewM"
  "ode\022\014\n\004mode\030\001 \001(\r\"P\n\037CDOTAClientMsg_SetU"
  "nitShareFlag\022\020\n\010playerID\030\001 \001(\r\022\014\n\004flag\030\002"
  " \001(\r\022\r\n\005state\030\003 \001(\010\"/\n\032CDOTAClientMsg_Sw"
  "apRequest\022\021\n\tplayer_id\030\001 \001(\r\".\n\031CDOTACli"
  "entMsg_SwapAccept\022\021\n\tplayer_id\030\001 \001(\r\"B\n\030"
  "CDOTAClientMsg_WorldLine\022&\n\tworldline\030\001 "
  "\001(\0132\023.CDOTAMsg_WorldLine\"#\n!CDOTAClientM"
  "sg_RequestGraphUpdate\"_\n\030CDOTAClientMsg_"
  "ChatWheel\022\027\n\017chat_message_id\030\001 \001(\r\022\025\n\rpa"
  "ram_hero_id\030\002 \001(\r\022\023\n\013emoticon_id\030\003 \001(\r\"J"
  "\n\034CDOTAClientMsg_SendStatPopup\022*\n\tstatpo"
  "pup\030\001 \001(\0132\027.CDOTAMsg_SendStatPopup\"\\\n#CD"
  "OTAClientMsg_DismissAllStatPopups\0225\n\rdis"
  "missallmsg\030\001 \001(\0132\036.CDOTAMsg_DismissAllSt"
  "atPopups\"S\n$CDOTAClientMsg_BeginLastHitC"
  "hallenge\022\023\n\013chosen_lane\030\001 \001(\r\022\026\n\016helper_"
  "enabled\030\002 \001(\010\"\\\n!CDOTAClientMsg_UpdateQu"
  "ickBuyItem\022\033\n\017item_ability_id\030\001 \001(\005:\002-1\022"
  "\032\n\013purchasable\030\002 \001(\010:\005false\"R\n\035CDOTAClie"
  "ntMsg_UpdateQuickBuy\0221\n\005items\030\001 \003(\0132\".CD"
  "OTAClientMsg_UpdateQuickBuyItem\"1\n\031CDOTA"
  "ClientMsg_RecordVote\022\024\n\014choice_index\030\001 \001"
  "(\005\"q\n CDOTAClientMsg_WillPurchaseAlert\022\027"
  "\n\017item_ability_id\030\001 \001(\005\022\026\n\016gold_remainin"
  "g\030\002 \001(\r\022\034\n\024suggestion_player_id\030\003 \001(\005\"\"\n"
  " CDOTAClientMsg_BuyBackStateAlert\"\177\n\034CDO"
  "TAClientMsg_QuickBuyAlert\022\027\n\017item_abilit"
  "y_id\030\001 \001(\005\022\021\n\tgold_cost\030\002 \001(\005\022\035\n\025item_co"
  "oldown_seconds\030\003 \001(\005\022\024\n\014show_buyback\030\004 \001"
  "(\010\"1\n\035CDOTAClientMsg_PlayerShowCase\022\020\n\010s"
  "howcase\030\001 \001(\010\"6\n\037CDOTAClientMsg_CameraZo"
  "omAmount\022\023\n\013zoom_amount\030\001 \001(\002\"=\n(CDOTACl"
  "ientMsg_BroadcasterUsingCameraman\022\021\n\tcam"
  "eraman\030\001 \001(\010\"H\n5CDOTAClientMsg_Broadcast"
  "erUsingAssistedCameraOperator\022\017\n\007enabled"
  "\030\001 \001(\010\"U\n\035CAdditionalEquipSlotClientMsg\022"
  "\020\n\010class_id\030\001 \001(\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tde"
  "f_index\030\003 \001(\r\"N\n\034CDOTAClientMsg_FreeInve"
  "ntory\022.\n\006equips\030\001 \003(\0132\036.CAdditionalEquip"
  "SlotClientMsg\"=\n%CDOTAClientMsg_FillEmpt"
  "ySlotsWithBots\022\024\n\014fillwithbots\030\001 \001(\010\"8\n\035"
  "CDOTAClientMsg_HeroStatueLike\022\027\n\017owner_p"
  "layer_id\030\001 \001(\r\".\n\036CDOTAClientMsg_EventCN"
  "Y2015Cmd\022\014\n\004data\030\001 \001(\014\"\236\001\n\027CDOTAClientMs"
  "g_DemoHero\022\017\n\007hero_id\030\001 \001(\005\022\030\n\020hero_id_t"
  "o_spawn\030\002 \001(\005\022\021\n\titem_defs\030\003 \003(\r\022\020\n\010item"
  "_ids\030\004 \003(\004\022\023\n\013style_index\030\005 \001(\r\022\036\n\026keep_"
  "existing_demohero\030\006 \001(\010\"X\n\036CDOTAClientMs"
  "g_ChallengeSelect\022\020\n\010event_id\030\001 \001(\r\022\017\n\007s"
  "lot_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\"\201\001\n\036CD"
  "OTAClientMsg_ChallengeReroll\022(\n\010event_id"
  "\030\001 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022\017\n\007slot_i"
  "d\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\022\017\n\007hero_id\030"
  "\004 \001(\r\"0\n\030CDOTAClientMsg_CoinWager\022\024\n\014wag"
  "er_amount\030\001 \001(\r\"<\n\035CDOTAClientMsg_CoinWa"
  "gerToken\022\033\n\023wager_token_item_id\030\001 \001(\004\"2\n"
  "\030CDOTAClientMsg_RankWager\022\026\n\016announce_wa"
  "ger\030\001 \001(\010\"0\n\033CDOTAClientMsg_PlayerBounty"
  "\022\021\n\tplayer_id\030\001 \001(\r\"<\n\035CDOTAClientMsg_Ev"
  "entPointsTip\022\033\n\023recipient_player_id\030\001 \001("
  "\r\"C\n\034CDOTAClientMsg_ExecuteOrders\022#\n\006ord"
  "ers\030\001 \003(\0132\023.CDOTAMsg_UnitOrder\"G\n\026CDOTAC"
  "lientMsg_XPAlert\022\027\n\017target_entindex\030\001 \001("
  "\r\022\024\n\014damage_taken\030\002 \001(\r\"l\n\036CDOTAClientMs"
  "g_TalentTreeAlert\022\027\n\017target_entindex\030\001 \001"
  "(\r\022\022\n\nability_id\030\002 \001(\005\022\014\n\004slot\030\003 \001(\005\022\017\n\007"
  "learned\030\004 \001(\010\"\247\001\n!CDOTAClientMsg_Killcam"
  "DamageTaken\022\027\n\017target_entindex\030\001 \001(\r\022\024\n\014"
  "damage_taken\030\002 \001(\r\022\021\n\titem_type\030\003 \001(\r\022\027\n"
  "\017item_ability_id\030\004 \001(\r\022\021\n\thero_name\030\005 \001("
  "\t\022\024\n\014damage_color\030\006 \001(\t\"B\n\034CDOTAClientMs"
  "g_MatchMetadata\022\020\n\010match_id\030\001 \001(\004\022\020\n\010met"
  "adata\030\002 \001(\014\"\033\n\031CDOTAClientMsg_KillMyHero"
  "\"\243\001\n\032CDOTAClientMsg_QuestStatus\022\020\n\010quest"
  "_id\030\001 \001(\r\022\024\n\014challenge_id\030\002 \001(\r\022\020\n\010progr"
  "ess\030\003 \001(\r\022\014\n\004goal\030\004 \001(\r\022\r\n\005query\030\005 \001(\r\022\025"
  "\n\rfail_gametime\030\006 \001(\002\022\027\n\017item_ability_id"
  "\030\007 \001(\r\"E\n\037CDOTAClientMsg_ToggleAutoattac"
  "k\022\014\n\004mode\030\001 \001(\005\022\024\n\014show_message\030\002 \001(\010\"O\n"
  "\035CDOTAClientMsg_SpecialAbility\022\025\n\rabilit"
  "y_index\030\001 \001(\r\022\027\n\017target_entindex\030\002 \001(\r\"c"
  "\n\'CDOTAClientMsg_SetEnemyStartingPositio"
  "n\022\027\n\017enemy_player_id\030\001 \001(\r\022\037\n\027enemy_star"
  "ting_position\030\002 \001(\r\"\\\n&CDOTAClientMsg_Se"
  "tDesiredWardPlacement\022\022\n\nward_index\030\001 \001("
  "\r\022\016\n\006ward_x\030\002 \001(\002\022\016\n\006ward_y\030\003 \001(\002\"S\n\027CDO"
  "TAClientMsg_RollDice\022\024\n\014channel_type\030\001 \001"
  "(\r\022\020\n\010roll_min\030\002 \001(\r\022\020\n\010roll_max\030\003 \001(\r\"/"
  "\n\027CDOTAClientMsg_FlipCoin\022\024\n\014channel_typ"
  "e\030\001 \001(\r\"\'\n%CDOTAClientMsg_RequestItemSug"
  "gestions\"3\n\036CDOTAClientMsg_MakeTeamCapta"
  "in\022\021\n\tplayer_id\030\001 \001(\r\"A\n(CDOTAClientMsg_"
  "HelpTipSystemStateChanged\022\025\n\rtip_display"
  "ed\030\001 \001(\010\"z\n#CDOTAClientMsg_RequestBulkCo"
  "mbatLog\022\021\n\tgame_time\030\001 \001(\002\022\020\n\010duration\030\002"
  " \001(\002\022\033\n\023recent_player_death\030\003 \001(\010\022\021\n\tpla"
  "yer_id\030\004 \001(\005\"_\n)CDOTAClientMsg_AbilityDr"
  "aftRequestAbility\022\034\n\024requested_ability_i"
  "d\030\001 \001(\r\022\024\n\014ctrl_is_down\030\002 \001(\010\"M\n CDOTACl"
  "ientMsg_GuideSelectOption\022\016\n\006option\030\001 \001("
  "\r\022\031\n\021force_recalculate\030\002 \001(\010\"P\n\034CDOTACli"
  "entMsg_GuideSelected\022\031\n\021guide_workshop_i"
  "d\030\001 \001(\004\022\025\n\ris_plus_guide\030\002 \001(\010\"w\n\033CDOTAC"
  "lientMsg_DamageReport\022\026\n\016target_hero_id\030"
  "\001 \001(\r\022\026\n\016source_hero_id\030\002 \001(\r\022\025\n\rdamage_"
  "amount\030\003 \001(\005\022\021\n\tbroadcast\030\004 \001(\010\"I\n\033CDOTA"
  "ClientMsg_SalutePlayer\022\030\n\020target_player_"
  "id\030\001 \001(\005\022\020\n\010event_id\030\002 \001(\005\"+\n\027CDOTAClien"
  "tMsg_TipAlert\022\020\n\010tip_text\030\001 \001(\t\"<\n!CDOTA"
  "ClientMsg_EmptyTeleportAlert\022\027\n\017target_e"
  "ntindex\030\001 \001(\005\"9\n\"CDOTAClientMsg_SetCaver"
  "nMapVariant\022\023\n\013map_variant\030\001 \001(\r\"\?\n\035CDOT"
  "AClientMsg_PauseGameOrder\022\020\n\010order_id\030\001 "
  "\001(\005\022\014\n\004data\030\002 \001(\005\"\220\002\n)CDOTAClientMsg_Ver"
  "susScene_PlayerBehavior\022S\n\010behavior\030\001 \001("
  "\0162\037.EDOTAVersusScenePlayerBehavior: VS_P"
  "LAYER_BEHAVIOR_PLAY_ACTIVITY\0220\n\rplay_act"
  "ivity\030\002 \001(\0132\031.VersusScene_PlayActivity\022*"
  "\n\nchat_wheel\030\003 \001(\0132\026.VersusScene_ChatWhe"
  "el\0220\n\rplayback_rate\030\004 \001(\0132\031.VersusScene_"
  "PlaybackRate\"P\n!CDOTAClientMsg_EmptyItem"
  "SlotAlert\022\027\n\017target_entindex\030\001 \001(\005\022\022\n\nsl"
  "ot_index\030\002 \001(\005\"\243\001\n\'CDOTAClientMsg_AddOve"
  "rwatchReportMarker\022\030\n\020target_player_id\030\001"
  " \001(\005\022I\n\006reason\030\002 \001(\0162\027.EOverwatchReportR"
  "eason: k_EOverwatchReportReason_Unknown\022"
  "\023\n\013seconds_ago\030\004 \001(\r\"\201\001\n\036CDOTAClientMsg_"
  "AghsStatusAlert\022\030\n\020source_player_id\030\001 \001("
  "\r\022\030\n\020target_player_id\030\002 \001(\r\022\027\n\017target_en"
  "tindex\030\003 \001(\r\022\022\n\nalert_type\030\004 \001(\r\"\233\005\n\031CDO"
  "TAClientMsg_PerfReport\022\032\n\022average_frame_"
  "time\030\001 \001(\002\022\026\n\016max_frame_time\030\002 \001(\002\022\034\n\024av"
  "erage_compute_time\030\003 \001(\002\022\030\n\020max_compute_"
  "time\030\004 \001(\002\022 \n\030average_client_tick_time\030\005"
  " \001(\002\022\034\n\024max_client_tick_time\030\006 \001(\002\022$\n\034av"
  "erage_client_simulate_time\030\007 \001(\002\022 \n\030max_"
  "client_simulate_time\030\010 \001(\002\022\033\n\023average_ou"
  "tput_time\030\t \001(\002\022\027\n\017max_output_time\030\n \001(\002"
  "\0223\n+average_wait_for_rendering_to_comple"
  "te_time\030\013 \001(\002\022/\n\'max_wait_for_rendering_"
  "to_complete_time\030\014 \001(\002\022\031\n\021average_swap_t"
  "ime\030\r \001(\002\022\025\n\rmax_swap_time\030\016 \001(\002\022!\n\031aver"
  "age_frame_update_time\030\017 \001(\002\022\035\n\025max_frame"
  "_update_time\030\020 \001(\002\022\031\n\021average_idle_time\030"
  "\021 \001(\002\022\025\n\rmax_idle_time\030\022 \001(\002\022%\n\035average_"
  "input_processing_time\030\023 \001(\002\022!\n\031max_input"
  "_processing_time\030\024 \001(\002\"\210\001\n-CDOTAClientMs"
  "g_ContextualTips_Subscribe_Entry\022\023\n\013unsu"
  "bscribe\030\001 \001(\010\022\016\n\006tip_id\030\002 \001(\005\022\033\n\023prior_d"
  "isplay_count\030\003 \001(\005\022\025\n\rvariants_seen\030\004 \003("
  "\005\"g\n\'CDOTAClientMsg_ContextualTips_Subsc"
  "ribe\022<\n\004tips\030\001 \003(\0132..CDOTAClientMsg_Cont"
  "extualTips_Subscribe_Entry\"H\n\032CDOTAClien"
  "tMsg_ChatMessage\022\024\n\014channel_type\030\001 \001(\r\022\024"
  "\n\014message_text\030\002 \001(\t*\211\025\n\023EDotaClientMess"
  "ages\022\024\n\017DOTA_CM_MapLine\020\255\002\022\030\n\023DOTA_CM_As"
  "pectRatio\020\256\002\022\024\n\017DOTA_CM_MapPing\020\257\002\022\034\n\027DO"
  "TA_CM_UnitsAutoAttack\020\260\002\022\031\n\024DOTA_CM_Sear"
  "chString\020\263\002\022\022\n\rDOTA_CM_Pause\020\264\002\022\031\n\024DOTA_"
  "CM_ShopViewMode\020\265\002\022\035\n\030DOTA_CM_SetUnitSha"
  "reFlag\020\266\002\022\030\n\023DOTA_CM_SwapRequest\020\267\002\022\027\n\022D"
  "OTA_CM_SwapAccept\020\270\002\022\026\n\021DOTA_CM_WorldLin"
  "e\020\271\002\022\037\n\032DOTA_CM_RequestGraphUpdate\020\272\002\022\026\n"
  "\021DOTA_CM_ItemAlert\020\273\002\022\026\n\021DOTA_CM_ChatWhe"
  "el\020\274\002\022\032\n\025DOTA_CM_SendStatPopup\020\275\002\022\"\n\035DOT"
  "A_CM_BeginLastHitChallenge\020\276\002\022\033\n\026DOTA_CM"
  "_UpdateQuickBuy\020\277\002\022\036\n\031DOTA_CM_UpdateCoac"
  "hListen\020\300\002\022\031\n\024DOTA_CM_CoachHUDPing\020\301\002\022\027\n"
  "\022DOTA_CM_RecordVote\020\302\002\022&\n!DOTA_CM_UnitsA"
  "utoAttackAfterSpell\020\303\002\022\036\n\031DOTA_CM_WillPu"
  "rchaseAlert\020\304\002\022\033\n\026DOTA_CM_PlayerShowCase"
  "\020\305\002\022!\n\034DOTA_CM_TeleportRequiresHalt\020\306\002\022\035"
  "\n\030DOTA_CM_CameraZoomAmount\020\307\002\022%\n DOTA_CM"
  "_BroadcasterUsingCamerman\020\310\002\0223\n.DOTA_CM_"
  "BroadcasterUsingAssistedCameraOperator\020\311"
  "\002\022\033\n\026DOTA_CM_EnemyItemAlert\020\312\002\022\032\n\025DOTA_C"
  "M_FreeInventory\020\313\002\022\036\n\031DOTA_CM_BuyBackSta"
  "teAlert\020\314\002\022\032\n\025DOTA_CM_QuickBuyAlert\020\315\002\022\033"
  "\n\026DOTA_CM_HeroStatueLike\020\316\002\022\032\n\025DOTA_CM_M"
  "odifierAlert\020\317\002\022\037\n\032DOTA_CM_TeamShowcaseE"
  "ditor\020\320\002\022\030\n\023DOTA_CM_HPManaAlert\020\321\002\022\027\n\022DO"
  "TA_CM_GlyphAlert\020\322\002\022#\n\036DOTA_CM_TeamShowc"
  "aseClientData\020\323\002\022\035\n\030DOTA_CM_PlayTeamShow"
  "case\020\324\002\022\034\n\027DOTA_CM_EventCNY2015Cmd\020\325\002\022#\n"
  "\036DOTA_CM_FillEmptySlotsWithBots\020\326\002\022\025\n\020DO"
  "TA_CM_DemoHero\020\327\002\022$\n\037DOTA_CM_AbilityLear"
  "nModeToggled\020\330\002\022\034\n\027DOTA_CM_AbilityStartU"
  "se\020\331\002\022\034\n\027DOTA_CM_ChallengeSelect\020\332\002\022\034\n\027D"
  "OTA_CM_ChallengeReroll\020\333\002\022\030\n\023DOTA_CM_Cli"
  "ckedBuff\020\334\002\022\026\n\021DOTA_CM_CoinWager\020\335\002\022\032\n\025D"
  "OTA_CM_ExecuteOrders\020\336\002\022\024\n\017DOTA_CM_XPAle"
  "rt\020\337\002\022\033\n\026DOTA_CM_EventPointsTip\020\341\002\022\032\n\025DO"
  "TA_CM_MatchMetadata\020\342\002\022\027\n\022DOTA_CM_KillMy"
  "Hero\020\343\002\022\030\n\023DOTA_CM_QuestStatus\020\344\002\022\035\n\030DOT"
  "A_CM_ToggleAutoattack\020\345\002\022\033\n\026DOTA_CM_Spec"
  "ialAbility\020\346\002\022\037\n\032DOTA_CM_KillcamDamageTa"
  "ken\020\347\002\022%\n DOTA_CM_SetEnemyStartingPositi"
  "on\020\350\002\022$\n\037DOTA_CM_SetDesiredWardPlacement"
  "\020\351\002\022\025\n\020DOTA_CM_RollDice\020\352\002\022\025\n\020DOTA_CM_Fl"
  "ipCoin\020\353\002\022#\n\036DOTA_CM_RequestItemSuggesti"
  "ons\020\354\002\022\034\n\027DOTA_CM_MakeTeamCaptain\020\355\002\022\033\n\026"
  "DOTA_CM_CoinWagerToken\020\356\002\022\026\n\021DOTA_CM_Ran"
  "kWager\020\357\002\022!\n\034DOTA_CM_DismissAllStatPopup"
  "s\020\360\002\022&\n!DOTA_CM_HelpTipSystemStateChange"
  "d\020\361\002\022 \n\033DOTA_CM_ChannelRequiresHalt\020\362\002\022!"
  "\n\034DOTA_CM_RequestBulkCombatLog\020\363\002\022\'\n\"DOT"
  "A_CM_AbilityDraftRequestAbility\020\364\002\022\036\n\031DO"
  "TA_CM_GuideSelectOption\020\365\002\022\032\n\025DOTA_CM_Gu"
  "ideSelected\020\366\002\022\031\n\024DOTA_CM_DamageReport\020\367"
  "\002\022\031\n\024DOTA_CM_SalutePlayer\020\370\002\022\027\n\022DOTA_CM_"
  "SprayWheel\020\371\002\022\025\n\020DOTA_CM_TipAlert\020\372\002\022\037\n\032"
  "DOTA_CM_EmptyTeleportAlert\020\373\002\022\027\n\022DOTA_CM"
  "_RadarAlert\020\374\002\022\034\n\027DOTA_CM_TalentTreeAler"
  "t\020\375\002\022 \n\033DOTA_CM_SetCavernMapVariant\020\376\002\022\033"
  "\n\026DOTA_CM_PauseGameOrder\020\377\002\022\'\n\"DOTA_CM_V"
  "ersusScene_PlayerBehavior\020\200\003\022\031\n\024DOTA_CM_"
  "PlayerBounty\020\201\003\022\037\n\032DOTA_CM_PlayerBountyC"
  "ancel\020\202\003\022\037\n\032DOTA_CM_EmptyItemSlotAlert\020\204"
  "\003\022%\n DOTA_CM_AddOverwatchReportMarker\020\205\003"
  "\022\034\n\027DOTA_CM_AghsStatusAlert\020\206\003\022\027\n\022DOTA_C"
  "M_PerfReport\020\207\003\022%\n DOTA_CM_ContextualTip"
  "s_Subscribe\020\211\003\022\030\n\023DOTA_CM_ChatMessage\020\212\003"
  "B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fclientmessages_2eproto_deps[2] = {
  &::descriptor_table_dota_5fcommonmessages_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fclientmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fclientmessages_2eproto = {
  false, false, 10287, descriptor_table_protodef_dota_5fclientmessages_2eproto, "dota_clientmessages.proto", 
  &descriptor_table_dota_5fclientmessages_2eproto_once, descriptor_table_dota_5fclientmessages_2eproto_deps, 2, 83,
  schemas, file_default_instances, TableStruct_dota_5fclientmessages_2eproto::offsets,
  file_level_metadata_dota_5fclientmessages_2eproto, file_level_enum_descriptors_dota_5fclientmessages_2eproto, file_level_service_descriptors_dota_5fclientmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fclientmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclientmessages_2eproto);
  return descriptor_table_dota_5fclientmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fclientmessages_2eproto(&descriptor_table_dota_5fclientmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclientmessages_2eproto);
  return file_level_enum_descriptors_dota_5fclientmessages_2eproto[0];
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::INVALID;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::NEVER;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::AFTER_SPELLCAST;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::ALWAYS;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MIN;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MAX;
constexpr int CDOTAClientMsg_UnitsAutoAttackMode::EMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclientmessages_2eproto);
  return file_level_enum_descriptors_dota_5fclientmessages_2eproto[1];
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::NORMAL;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::SUMMONED;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MIN;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MAX;
constexpr int CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaClientMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fclientmessages_2eproto);
  return file_level_enum_descriptors_dota_5fclientmessages_2eproto[2];
}
bool EDotaClientMessages_IsValid(int value) {
  switch (value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 388:
    case 389:
    case 390:
    case 391:
    case 393:
    case 394:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAClientMsg_MapPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_MapPing>()._has_bits_);
  static const ::CDOTAMsg_LocationPing& location_ping(const CDOTAClientMsg_MapPing* msg);
  static void set_has_location_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_LocationPing&
CDOTAClientMsg_MapPing::_Internal::location_ping(const CDOTAClientMsg_MapPing* msg) {
  return *msg->location_ping_;
}
void CDOTAClientMsg_MapPing::clear_location_ping() {
  if (location_ping_ != nullptr) location_ping_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_MapPing)
}
CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(const CDOTAClientMsg_MapPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location_ping()) {
    location_ping_ = new ::CDOTAMsg_LocationPing(*from.location_ping_);
  } else {
    location_ping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::SharedCtor() {
location_ping_ = nullptr;
}

CDOTAClientMsg_MapPing::~CDOTAClientMsg_MapPing() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_MapPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_ping_;
}

void CDOTAClientMsg_MapPing::ArenaDtor(void* object) {
  CDOTAClientMsg_MapPing* _this = reinterpret_cast< CDOTAClientMsg_MapPing* >(object);
  (void)_this;
}
void CDOTAClientMsg_MapPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_MapPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_MapPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_MapPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ping_ != nullptr);
    location_ping_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_MapPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAMsg_LocationPing location_ping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_MapPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location_ping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapPing)
  return target;
}

size_t CDOTAClientMsg_MapPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_MapPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_LocationPing location_ping = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_ping_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MapPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MapPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_MapPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_MapPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_MapPing)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapPing::MergeFrom(const CDOTAClientMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location_ping()) {
    _internal_mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(from._internal_location_ping());
  }
}

void CDOTAClientMsg_MapPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapPing::CopyFrom(const CDOTAClientMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapPing::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MapPing::InternalSwap(CDOTAClientMsg_MapPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_ping_, other->location_ping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_MapPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ItemAlert>()._has_bits_);
  static const ::CDOTAMsg_ItemAlert& item_alert(const CDOTAClientMsg_ItemAlert* msg);
  static void set_has_item_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_ItemAlert&
CDOTAClientMsg_ItemAlert::_Internal::item_alert(const CDOTAClientMsg_ItemAlert* msg) {
  return *msg->item_alert_;
}
void CDOTAClientMsg_ItemAlert::clear_item_alert() {
  if (item_alert_ != nullptr) item_alert_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ItemAlert)
}
CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(const CDOTAClientMsg_ItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_alert()) {
    item_alert_ = new ::CDOTAMsg_ItemAlert(*from.item_alert_);
  } else {
    item_alert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::SharedCtor() {
item_alert_ = nullptr;
}

CDOTAClientMsg_ItemAlert::~CDOTAClientMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ItemAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_alert_;
}

void CDOTAClientMsg_ItemAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_ItemAlert* _this = reinterpret_cast< CDOTAClientMsg_ItemAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_ItemAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ItemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_alert_ != nullptr);
    item_alert_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ItemAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAMsg_ItemAlert item_alert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_alert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ItemAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item_alert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ItemAlert)
  return target;
}

size_t CDOTAClientMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ItemAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_alert_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ItemAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ItemAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ItemAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const CDOTAClientMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_alert()) {
    _internal_mutable_item_alert()->::CDOTAMsg_ItemAlert::MergeFrom(from._internal_item_alert());
  }
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const CDOTAClientMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ItemAlert::InternalSwap(CDOTAClientMsg_ItemAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_alert_, other->item_alert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ItemAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_EnemyItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EnemyItemAlert>()._has_bits_);
  static void set_has_item_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rune_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_primary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EnemyItemAlert)
}
CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(const CDOTAClientMsg_EnemyItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_entindex_, &from.item_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondary_charges_) -
    reinterpret_cast<char*>(&item_entindex_)) + sizeof(secondary_charges_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::SharedCtor() {
item_entindex_ = 0u;
rune_type_ = -1;
item_level_ = -1;
primary_charges_ = -1;
secondary_charges_ = -1;
}

CDOTAClientMsg_EnemyItemAlert::~CDOTAClientMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EnemyItemAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_EnemyItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_EnemyItemAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_EnemyItemAlert* _this = reinterpret_cast< CDOTAClientMsg_EnemyItemAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_EnemyItemAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EnemyItemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EnemyItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EnemyItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    item_entindex_ = 0u;
    rune_type_ = -1;
    item_level_ = -1;
    primary_charges_ = -1;
    secondary_charges_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EnemyItemAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_entindex(&has_bits);
          item_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rune_type = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rune_type(&has_bits);
          rune_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_level = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_level(&has_bits);
          item_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 primary_charges = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_primary_charges(&has_bits);
          primary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 secondary_charges = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_secondary_charges(&has_bits);
          secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_EnemyItemAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EnemyItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_entindex(), target);
  }

  // optional int32 rune_type = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rune_type(), target);
  }

  // optional int32 item_level = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_level(), target);
  }

  // optional int32 primary_charges = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_primary_charges(), target);
  }

  // optional int32 secondary_charges = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_secondary_charges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EnemyItemAlert)
  return target;
}

size_t CDOTAClientMsg_EnemyItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EnemyItemAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_entindex());
    }

    // optional int32 rune_type = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rune_type());
    }

    // optional int32 item_level = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_level());
    }

    // optional int32 primary_charges = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_primary_charges());
    }

    // optional int32 secondary_charges = 5 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_secondary_charges());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EnemyItemAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_EnemyItemAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_EnemyItemAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_EnemyItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_entindex_ = from.item_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      rune_type_ = from.rune_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_level_ = from.item_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      primary_charges_ = from.primary_charges_;
    }
    if (cached_has_bits & 0x00000010u) {
      secondary_charges_ = from.secondary_charges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EnemyItemAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EnemyItemAlert::InternalSwap(CDOTAClientMsg_EnemyItemAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_entindex_, other->item_entindex_);
  swap(rune_type_, other->rune_type_);
  swap(item_level_, other->item_level_);
  swap(primary_charges_, other->primary_charges_);
  swap(secondary_charges_, other->secondary_charges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EnemyItemAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ModifierAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ModifierAlert>()._has_bits_);
  static void set_has_buff_internal_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ModifierAlert)
}
CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(const CDOTAClientMsg_ModifierAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buff_internal_index_, &from.buff_internal_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buff_internal_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
}

CDOTAClientMsg_ModifierAlert::~CDOTAClientMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ModifierAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ModifierAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ModifierAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_ModifierAlert* _this = reinterpret_cast< CDOTAClientMsg_ModifierAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_ModifierAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ModifierAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ModifierAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ModifierAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&buff_internal_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ModifierAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 buff_internal_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_buff_internal_index(&has_bits);
          buff_internal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ModifierAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ModifierAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ModifierAlert)
  return target;
}

size_t CDOTAClientMsg_ModifierAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ModifierAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 buff_internal_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ModifierAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ModifierAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ModifierAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ModifierAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const CDOTAClientMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      buff_internal_index_ = from.buff_internal_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const CDOTAClientMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ModifierAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ModifierAlert::InternalSwap(CDOTAClientMsg_ModifierAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, target_entindex_)
      + sizeof(CDOTAClientMsg_ModifierAlert::target_entindex_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, buff_internal_index_)>(
          reinterpret_cast<char*>(&buff_internal_index_),
          reinterpret_cast<char*>(&other->buff_internal_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ModifierAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ClickedBuff::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ClickedBuff>()._has_bits_);
  static void set_has_buff_internal_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ClickedBuff)
}
CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff(const CDOTAClientMsg_ClickedBuff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buff_internal_index_, &from.buff_internal_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ClickedBuff)
}

void CDOTAClientMsg_ClickedBuff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buff_internal_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
}

CDOTAClientMsg_ClickedBuff::~CDOTAClientMsg_ClickedBuff() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ClickedBuff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ClickedBuff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ClickedBuff::ArenaDtor(void* object) {
  CDOTAClientMsg_ClickedBuff* _this = reinterpret_cast< CDOTAClientMsg_ClickedBuff* >(object);
  (void)_this;
}
void CDOTAClientMsg_ClickedBuff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ClickedBuff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ClickedBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ClickedBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&buff_internal_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ClickedBuff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 buff_internal_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_buff_internal_index(&has_bits);
          buff_internal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ClickedBuff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ClickedBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ClickedBuff)
  return target;
}

size_t CDOTAClientMsg_ClickedBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ClickedBuff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 buff_internal_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ClickedBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ClickedBuff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ClickedBuff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ClickedBuff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ClickedBuff)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const CDOTAClientMsg_ClickedBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ClickedBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      buff_internal_index_ = from.buff_internal_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ClickedBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const CDOTAClientMsg_ClickedBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ClickedBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ClickedBuff::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ClickedBuff::InternalSwap(CDOTAClientMsg_ClickedBuff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, target_entindex_)
      + sizeof(CDOTAClientMsg_ClickedBuff::target_entindex_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, buff_internal_index_)>(
          reinterpret_cast<char*>(&buff_internal_index_),
          reinterpret_cast<char*>(&other->buff_internal_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ClickedBuff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_HPManaAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_HPManaAlert>()._has_bits_);
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_raw_values(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_HPManaAlert)
}
CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(const CDOTAClientMsg_HPManaAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_raw_values_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(show_raw_values_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_raw_values_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(show_raw_values_));
}

CDOTAClientMsg_HPManaAlert::~CDOTAClientMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HPManaAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_HPManaAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_HPManaAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_HPManaAlert* _this = reinterpret_cast< CDOTAClientMsg_HPManaAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_HPManaAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_HPManaAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_HPManaAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_HPManaAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_raw_values_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(show_raw_values_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_HPManaAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_raw_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show_raw_values(&has_bits);
          show_raw_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_HPManaAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HPManaAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_entindex(), target);
  }

  // optional bool show_raw_values = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_raw_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HPManaAlert)
  return target;
}

size_t CDOTAClientMsg_HPManaAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_HPManaAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional bool show_raw_values = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HPManaAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_HPManaAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_HPManaAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_HPManaAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const CDOTAClientMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_raw_values_ = from.show_raw_values_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const CDOTAClientMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HPManaAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HPManaAlert::InternalSwap(CDOTAClientMsg_HPManaAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, show_raw_values_)
      + sizeof(CDOTAClientMsg_HPManaAlert::show_raw_values_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, target_entindex_)>(
          reinterpret_cast<char*>(&target_entindex_),
          reinterpret_cast<char*>(&other->target_entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_HPManaAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_GlyphAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_GlyphAlert>()._has_bits_);
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_GlyphAlert)
}
CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(const CDOTAClientMsg_GlyphAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  negative_ = from.negative_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::SharedCtor() {
negative_ = false;
}

CDOTAClientMsg_GlyphAlert::~CDOTAClientMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GlyphAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_GlyphAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_GlyphAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_GlyphAlert* _this = reinterpret_cast< CDOTAClientMsg_GlyphAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_GlyphAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_GlyphAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_GlyphAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_GlyphAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  negative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_GlyphAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool negative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_negative(&has_bits);
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_GlyphAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GlyphAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GlyphAlert)
  return target;
}

size_t CDOTAClientMsg_GlyphAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_GlyphAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool negative = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GlyphAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_GlyphAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_GlyphAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_GlyphAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const CDOTAClientMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_negative()) {
    _internal_set_negative(from._internal_negative());
  }
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const CDOTAClientMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GlyphAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GlyphAlert::InternalSwap(CDOTAClientMsg_GlyphAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(negative_, other->negative_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_GlyphAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RadarAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_RadarAlert>()._has_bits_);
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_RadarAlert::CDOTAClientMsg_RadarAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RadarAlert)
}
CDOTAClientMsg_RadarAlert::CDOTAClientMsg_RadarAlert(const CDOTAClientMsg_RadarAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  negative_ = from.negative_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RadarAlert)
}

void CDOTAClientMsg_RadarAlert::SharedCtor() {
negative_ = false;
}

CDOTAClientMsg_RadarAlert::~CDOTAClientMsg_RadarAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RadarAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RadarAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RadarAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_RadarAlert* _this = reinterpret_cast< CDOTAClientMsg_RadarAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_RadarAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RadarAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RadarAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RadarAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  negative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RadarAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool negative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_negative(&has_bits);
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RadarAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RadarAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RadarAlert)
  return target;
}

size_t CDOTAClientMsg_RadarAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RadarAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool negative = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RadarAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RadarAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RadarAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RadarAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RadarAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RadarAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RadarAlert::MergeFrom(const CDOTAClientMsg_RadarAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RadarAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_negative()) {
    _internal_set_negative(from._internal_negative());
  }
}

void CDOTAClientMsg_RadarAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RadarAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RadarAlert::CopyFrom(const CDOTAClientMsg_RadarAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RadarAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RadarAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RadarAlert::InternalSwap(CDOTAClientMsg_RadarAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(negative_, other->negative_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RadarAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_MapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_MapLine>()._has_bits_);
  static const ::CDOTAMsg_MapLine& mapline(const CDOTAClientMsg_MapLine* msg);
  static void set_has_mapline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_MapLine&
CDOTAClientMsg_MapLine::_Internal::mapline(const CDOTAClientMsg_MapLine* msg) {
  return *msg->mapline_;
}
void CDOTAClientMsg_MapLine::clear_mapline() {
  if (mapline_ != nullptr) mapline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_MapLine)
}
CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(const CDOTAClientMsg_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapline()) {
    mapline_ = new ::CDOTAMsg_MapLine(*from.mapline_);
  } else {
    mapline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::SharedCtor() {
mapline_ = nullptr;
}

CDOTAClientMsg_MapLine::~CDOTAClientMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mapline_;
}

void CDOTAClientMsg_MapLine::ArenaDtor(void* object) {
  CDOTAClientMsg_MapLine* _this = reinterpret_cast< CDOTAClientMsg_MapLine* >(object);
  (void)_this;
}
void CDOTAClientMsg_MapLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_MapLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_MapLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mapline_ != nullptr);
    mapline_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_MapLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAMsg_MapLine mapline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_MapLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMsg_MapLine mapline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mapline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapLine)
  return target;
}

size_t CDOTAClientMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_MapLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_MapLine mapline = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MapLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MapLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_MapLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_MapLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_MapLine)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapLine::MergeFrom(const CDOTAClientMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mapline()) {
    _internal_mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(from._internal_mapline());
  }
}

void CDOTAClientMsg_MapLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapLine::CopyFrom(const CDOTAClientMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MapLine::InternalSwap(CDOTAClientMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mapline_, other->mapline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_MapLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_AspectRatio::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_AspectRatio>()._has_bits_);
  static void set_has_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_AspectRatio)
}
CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(const CDOTAClientMsg_AspectRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::SharedCtor() {
ratio_ = 0;
}

CDOTAClientMsg_AspectRatio::~CDOTAClientMsg_AspectRatio() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AspectRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_AspectRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_AspectRatio::ArenaDtor(void* object) {
  CDOTAClientMsg_AspectRatio* _this = reinterpret_cast< CDOTAClientMsg_AspectRatio* >(object);
  (void)_this;
}
void CDOTAClientMsg_AspectRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_AspectRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_AspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_AspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_AspectRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ratio(&has_bits);
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_AspectRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AspectRatio)
  return target;
}

size_t CDOTAClientMsg_AspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_AspectRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float ratio = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_AspectRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_AspectRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_AspectRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_AspectRatio)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const CDOTAClientMsg_AspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ratio()) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const CDOTAClientMsg_AspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AspectRatio::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_AspectRatio::InternalSwap(CDOTAClientMsg_AspectRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ratio_, other->ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_AspectRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_UnitsAutoAttackMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_UnitsAutoAttackMode>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_UnitsAutoAttackMode)
}
CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode(const CDOTAClientMsg_UnitsAutoAttackMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_type_, &from.unit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&unit_type_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttackMode)
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedCtor() {
unit_type_ = 0;
mode_ = -1;
}

CDOTAClientMsg_UnitsAutoAttackMode::~CDOTAClientMsg_UnitsAutoAttackMode() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttackMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_UnitsAutoAttackMode::ArenaDtor(void* object) {
  CDOTAClientMsg_UnitsAutoAttackMode* _this = reinterpret_cast< CDOTAClientMsg_UnitsAutoAttackMode* >(object);
  (void)_this;
}
void CDOTAClientMsg_UnitsAutoAttackMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_UnitsAutoAttackMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_UnitsAutoAttackMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_UnitsAutoAttackMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    unit_type_ = 0;
    mode_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_UnitsAutoAttackMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(val))) {
            _internal_set_mode(static_cast<::CDOTAClientMsg_UnitsAutoAttackMode_EMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(val))) {
            _internal_set_unit_type(static_cast<::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_UnitsAutoAttackMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttackMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_unit_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttackMode)
  return target;
}

size_t CDOTAClientMsg_UnitsAutoAttackMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_UnitsAutoAttackMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit_type());
    }

    // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_UnitsAutoAttackMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_UnitsAutoAttackMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_UnitsAutoAttackMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_UnitsAutoAttackMode)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_UnitsAutoAttackMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_UnitsAutoAttackMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_UnitsAutoAttackMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackMode::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UnitsAutoAttackMode::InternalSwap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unit_type_, other->unit_type_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_UnitsAutoAttackMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_UnitsAutoAttackAfterSpell::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_UnitsAutoAttackAfterSpell>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}
CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedCtor() {
enabled_ = false;
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::~CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::ArenaDtor(void* object) {
  CDOTAClientMsg_UnitsAutoAttackAfterSpell* _this = reinterpret_cast< CDOTAClientMsg_UnitsAutoAttackAfterSpell* >(object);
  (void)_this;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_UnitsAutoAttackAfterSpell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_UnitsAutoAttackAfterSpell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return target;
}

size_t CDOTAClientMsg_UnitsAutoAttackAfterSpell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackAfterSpell* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_UnitsAutoAttackAfterSpell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InternalSwap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_UnitsAutoAttackAfterSpell::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_TeleportRequiresHalt::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_TeleportRequiresHalt>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_TeleportRequiresHalt)
}
CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(const CDOTAClientMsg_TeleportRequiresHalt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedCtor() {
enabled_ = false;
}

CDOTAClientMsg_TeleportRequiresHalt::~CDOTAClientMsg_TeleportRequiresHalt() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeleportRequiresHalt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_TeleportRequiresHalt::ArenaDtor(void* object) {
  CDOTAClientMsg_TeleportRequiresHalt* _this = reinterpret_cast< CDOTAClientMsg_TeleportRequiresHalt* >(object);
  (void)_this;
}
void CDOTAClientMsg_TeleportRequiresHalt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_TeleportRequiresHalt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_TeleportRequiresHalt::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_TeleportRequiresHalt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_TeleportRequiresHalt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_TeleportRequiresHalt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeleportRequiresHalt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeleportRequiresHalt)
  return target;
}

size_t CDOTAClientMsg_TeleportRequiresHalt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_TeleportRequiresHalt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_TeleportRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_TeleportRequiresHalt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_TeleportRequiresHalt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_TeleportRequiresHalt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_TeleportRequiresHalt)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_TeleportRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_TeleportRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_TeleportRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeleportRequiresHalt::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TeleportRequiresHalt::InternalSwap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_TeleportRequiresHalt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ChannelRequiresHalt::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ChannelRequiresHalt>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_ChannelRequiresHalt::CDOTAClientMsg_ChannelRequiresHalt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ChannelRequiresHalt)
}
CDOTAClientMsg_ChannelRequiresHalt::CDOTAClientMsg_ChannelRequiresHalt(const CDOTAClientMsg_ChannelRequiresHalt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChannelRequiresHalt)
}

void CDOTAClientMsg_ChannelRequiresHalt::SharedCtor() {
enabled_ = false;
}

CDOTAClientMsg_ChannelRequiresHalt::~CDOTAClientMsg_ChannelRequiresHalt() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChannelRequiresHalt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ChannelRequiresHalt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ChannelRequiresHalt::ArenaDtor(void* object) {
  CDOTAClientMsg_ChannelRequiresHalt* _this = reinterpret_cast< CDOTAClientMsg_ChannelRequiresHalt* >(object);
  (void)_this;
}
void CDOTAClientMsg_ChannelRequiresHalt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ChannelRequiresHalt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ChannelRequiresHalt::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ChannelRequiresHalt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ChannelRequiresHalt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ChannelRequiresHalt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChannelRequiresHalt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChannelRequiresHalt)
  return target;
}

size_t CDOTAClientMsg_ChannelRequiresHalt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ChannelRequiresHalt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChannelRequiresHalt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ChannelRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChannelRequiresHalt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ChannelRequiresHalt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ChannelRequiresHalt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ChannelRequiresHalt)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChannelRequiresHalt::MergeFrom(const CDOTAClientMsg_ChannelRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ChannelRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void CDOTAClientMsg_ChannelRequiresHalt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ChannelRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChannelRequiresHalt::CopyFrom(const CDOTAClientMsg_ChannelRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ChannelRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChannelRequiresHalt::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChannelRequiresHalt::InternalSwap(CDOTAClientMsg_ChannelRequiresHalt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ChannelRequiresHalt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SearchString::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SearchString>()._has_bits_);
  static void set_has_search(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SearchString)
}
CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(const CDOTAClientMsg_SearchString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_search()) {
    search_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::SharedCtor() {
search_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_SearchString::~CDOTAClientMsg_SearchString() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SearchString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SearchString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_SearchString::ArenaDtor(void* object) {
  CDOTAClientMsg_SearchString* _this = reinterpret_cast< CDOTAClientMsg_SearchString* >(object);
  (void)_this;
}
void CDOTAClientMsg_SearchString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SearchString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SearchString::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SearchString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SearchString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string search = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_SearchString.search");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SearchString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SearchString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search().data(), static_cast<int>(this->_internal_search().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_SearchString.search");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SearchString)
  return target;
}

size_t CDOTAClientMsg_SearchString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SearchString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string search = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SearchString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SearchString)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SearchString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SearchString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SearchString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SearchString)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SearchString::MergeFrom(const CDOTAClientMsg_SearchString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SearchString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_search()) {
    _internal_set_search(from._internal_search());
  }
}

void CDOTAClientMsg_SearchString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SearchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SearchString::CopyFrom(const CDOTAClientMsg_SearchString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SearchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SearchString::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SearchString::InternalSwap(CDOTAClientMsg_SearchString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_.Swap(&other->search_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SearchString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_Pause::_Internal {
 public:
};

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_Pause)
}
CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(const CDOTAClientMsg_Pause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::SharedCtor() {
}

CDOTAClientMsg_Pause::~CDOTAClientMsg_Pause() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_Pause)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_Pause::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_Pause::ArenaDtor(void* object) {
  CDOTAClientMsg_Pause* _this = reinterpret_cast< CDOTAClientMsg_Pause* >(object);
  (void)_this;
}
void CDOTAClientMsg_Pause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_Pause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_Pause::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_Pause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_Pause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_Pause::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_Pause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_Pause)
  return target;
}

size_t CDOTAClientMsg_Pause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_Pause)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_Pause::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_Pause)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_Pause* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_Pause>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_Pause)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_Pause)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_Pause::MergeFrom(const CDOTAClientMsg_Pause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_Pause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_Pause::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_Pause::CopyFrom(const CDOTAClientMsg_Pause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_Pause::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_Pause::InternalSwap(CDOTAClientMsg_Pause* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_Pause::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ShopViewMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ShopViewMode>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ShopViewMode)
}
CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(const CDOTAClientMsg_ShopViewMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::SharedCtor() {
mode_ = 0u;
}

CDOTAClientMsg_ShopViewMode::~CDOTAClientMsg_ShopViewMode() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ShopViewMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ShopViewMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ShopViewMode::ArenaDtor(void* object) {
  CDOTAClientMsg_ShopViewMode* _this = reinterpret_cast< CDOTAClientMsg_ShopViewMode* >(object);
  (void)_this;
}
void CDOTAClientMsg_ShopViewMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ShopViewMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ShopViewMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ShopViewMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ShopViewMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ShopViewMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ShopViewMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ShopViewMode)
  return target;
}

size_t CDOTAClientMsg_ShopViewMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ShopViewMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 mode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ShopViewMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ShopViewMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ShopViewMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ShopViewMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ShopViewMode)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const CDOTAClientMsg_ShopViewMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ShopViewMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mode()) {
    _internal_set_mode(from._internal_mode());
  }
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ShopViewMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const CDOTAClientMsg_ShopViewMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ShopViewMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ShopViewMode::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ShopViewMode::InternalSwap(CDOTAClientMsg_ShopViewMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ShopViewMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SetUnitShareFlag::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SetUnitShareFlag>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SetUnitShareFlag)
}
CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(const CDOTAClientMsg_SetUnitShareFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(state_));
}

CDOTAClientMsg_SetUnitShareFlag::~CDOTAClientMsg_SetUnitShareFlag() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetUnitShareFlag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SetUnitShareFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SetUnitShareFlag::ArenaDtor(void* object) {
  CDOTAClientMsg_SetUnitShareFlag* _this = reinterpret_cast< CDOTAClientMsg_SetUnitShareFlag* >(object);
  (void)_this;
}
void CDOTAClientMsg_SetUnitShareFlag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SetUnitShareFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SetUnitShareFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SetUnitShareFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SetUnitShareFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SetUnitShareFlag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetUnitShareFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // optional uint32 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flag(), target);
  }

  // optional bool state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetUnitShareFlag)
  return target;
}

size_t CDOTAClientMsg_SetUnitShareFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SetUnitShareFlag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 playerID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_playerid());
    }

    // optional uint32 flag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flag());
    }

    // optional bool state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SetUnitShareFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetUnitShareFlag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SetUnitShareFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SetUnitShareFlag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SetUnitShareFlag)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SetUnitShareFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SetUnitShareFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SetUnitShareFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetUnitShareFlag::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetUnitShareFlag::InternalSwap(CDOTAClientMsg_SetUnitShareFlag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, state_)
      + sizeof(CDOTAClientMsg_SetUnitShareFlag::state_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SetUnitShareFlag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SwapRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SwapRequest>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SwapRequest)
}
CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(const CDOTAClientMsg_SwapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::SharedCtor() {
player_id_ = 0u;
}

CDOTAClientMsg_SwapRequest::~CDOTAClientMsg_SwapRequest() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SwapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SwapRequest::ArenaDtor(void* object) {
  CDOTAClientMsg_SwapRequest* _this = reinterpret_cast< CDOTAClientMsg_SwapRequest* >(object);
  (void)_this;
}
void CDOTAClientMsg_SwapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SwapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SwapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SwapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SwapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SwapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapRequest)
  return target;
}

size_t CDOTAClientMsg_SwapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SwapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SwapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SwapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SwapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SwapRequest)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const CDOTAClientMsg_SwapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const CDOTAClientMsg_SwapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapRequest::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SwapRequest::InternalSwap(CDOTAClientMsg_SwapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SwapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SwapAccept::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SwapAccept>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SwapAccept)
}
CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(const CDOTAClientMsg_SwapAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::SharedCtor() {
player_id_ = 0u;
}

CDOTAClientMsg_SwapAccept::~CDOTAClientMsg_SwapAccept() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapAccept)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SwapAccept::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SwapAccept::ArenaDtor(void* object) {
  CDOTAClientMsg_SwapAccept* _this = reinterpret_cast< CDOTAClientMsg_SwapAccept* >(object);
  (void)_this;
}
void CDOTAClientMsg_SwapAccept::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SwapAccept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SwapAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SwapAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SwapAccept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SwapAccept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapAccept)
  return target;
}

size_t CDOTAClientMsg_SwapAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SwapAccept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SwapAccept)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SwapAccept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SwapAccept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SwapAccept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SwapAccept)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const CDOTAClientMsg_SwapAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SwapAccept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SwapAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const CDOTAClientMsg_SwapAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SwapAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapAccept::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SwapAccept::InternalSwap(CDOTAClientMsg_SwapAccept* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SwapAccept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_WorldLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_WorldLine>()._has_bits_);
  static const ::CDOTAMsg_WorldLine& worldline(const CDOTAClientMsg_WorldLine* msg);
  static void set_has_worldline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_WorldLine&
CDOTAClientMsg_WorldLine::_Internal::worldline(const CDOTAClientMsg_WorldLine* msg) {
  return *msg->worldline_;
}
void CDOTAClientMsg_WorldLine::clear_worldline() {
  if (worldline_ != nullptr) worldline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_WorldLine)
}
CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(const CDOTAClientMsg_WorldLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worldline()) {
    worldline_ = new ::CDOTAMsg_WorldLine(*from.worldline_);
  } else {
    worldline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::SharedCtor() {
worldline_ = nullptr;
}

CDOTAClientMsg_WorldLine::~CDOTAClientMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WorldLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_WorldLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete worldline_;
}

void CDOTAClientMsg_WorldLine::ArenaDtor(void* object) {
  CDOTAClientMsg_WorldLine* _this = reinterpret_cast< CDOTAClientMsg_WorldLine* >(object);
  (void)_this;
}
void CDOTAClientMsg_WorldLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_WorldLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_WorldLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(worldline_ != nullptr);
    worldline_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_WorldLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAMsg_WorldLine worldline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_WorldLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WorldLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::worldline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WorldLine)
  return target;
}

size_t CDOTAClientMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_WorldLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_WorldLine worldline = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worldline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_WorldLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_WorldLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_WorldLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_WorldLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_WorldLine)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WorldLine::MergeFrom(const CDOTAClientMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_worldline()) {
    _internal_mutable_worldline()->::CDOTAMsg_WorldLine::MergeFrom(from._internal_worldline());
  }
}

void CDOTAClientMsg_WorldLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WorldLine::CopyFrom(const CDOTAClientMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_WorldLine::InternalSwap(CDOTAClientMsg_WorldLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(worldline_, other->worldline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_WorldLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RequestGraphUpdate::_Internal {
 public:
};

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RequestGraphUpdate)
}
CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(const CDOTAClientMsg_RequestGraphUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::SharedCtor() {
}

CDOTAClientMsg_RequestGraphUpdate::~CDOTAClientMsg_RequestGraphUpdate() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RequestGraphUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RequestGraphUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RequestGraphUpdate::ArenaDtor(void* object) {
  CDOTAClientMsg_RequestGraphUpdate* _this = reinterpret_cast< CDOTAClientMsg_RequestGraphUpdate* >(object);
  (void)_this;
}
void CDOTAClientMsg_RequestGraphUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RequestGraphUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RequestGraphUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RequestGraphUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RequestGraphUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RequestGraphUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RequestGraphUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RequestGraphUpdate)
  return target;
}

size_t CDOTAClientMsg_RequestGraphUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RequestGraphUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RequestGraphUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestGraphUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RequestGraphUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RequestGraphUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RequestGraphUpdate)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RequestGraphUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RequestGraphUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RequestGraphUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestGraphUpdate::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestGraphUpdate::InternalSwap(CDOTAClientMsg_RequestGraphUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RequestGraphUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ChatWheel>()._has_bits_);
  static void set_has_chat_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ChatWheel)
}
CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(const CDOTAClientMsg_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_message_id_, &from.chat_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&emoticon_id_) -
    reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_message_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&emoticon_id_) -
    reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
}

CDOTAClientMsg_ChatWheel::~CDOTAClientMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChatWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ChatWheel::ArenaDtor(void* object) {
  CDOTAClientMsg_ChatWheel* _this = reinterpret_cast< CDOTAClientMsg_ChatWheel* >(object);
  (void)_this;
}
void CDOTAClientMsg_ChatWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ChatWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ChatWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&emoticon_id_) -
        reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ChatWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 chat_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_chat_message_id(&has_bits);
          chat_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 param_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_param_hero_id(&has_bits);
          param_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_emoticon_id(&has_bits);
          emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ChatWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChatWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chat_message_id(), target);
  }

  // optional uint32 param_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_param_hero_id(), target);
  }

  // optional uint32 emoticon_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChatWheel)
  return target;
}

size_t CDOTAClientMsg_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ChatWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 chat_message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_message_id());
    }

    // optional uint32 param_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_param_hero_id());
    }

    // optional uint32 emoticon_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_emoticon_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChatWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ChatWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ChatWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ChatWheel)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const CDOTAClientMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_message_id_ = from.chat_message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      param_hero_id_ = from.param_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      emoticon_id_ = from.emoticon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const CDOTAClientMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatWheel::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChatWheel::InternalSwap(CDOTAClientMsg_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, emoticon_id_)
      + sizeof(CDOTAClientMsg_ChatWheel::emoticon_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, chat_message_id_)>(
          reinterpret_cast<char*>(&chat_message_id_),
          reinterpret_cast<char*>(&other->chat_message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ChatWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SendStatPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SendStatPopup>()._has_bits_);
  static const ::CDOTAMsg_SendStatPopup& statpopup(const CDOTAClientMsg_SendStatPopup* msg);
  static void set_has_statpopup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_SendStatPopup&
CDOTAClientMsg_SendStatPopup::_Internal::statpopup(const CDOTAClientMsg_SendStatPopup* msg) {
  return *msg->statpopup_;
}
void CDOTAClientMsg_SendStatPopup::clear_statpopup() {
  if (statpopup_ != nullptr) statpopup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SendStatPopup)
}
CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(const CDOTAClientMsg_SendStatPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statpopup()) {
    statpopup_ = new ::CDOTAMsg_SendStatPopup(*from.statpopup_);
  } else {
    statpopup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::SharedCtor() {
statpopup_ = nullptr;
}

CDOTAClientMsg_SendStatPopup::~CDOTAClientMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SendStatPopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SendStatPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statpopup_;
}

void CDOTAClientMsg_SendStatPopup::ArenaDtor(void* object) {
  CDOTAClientMsg_SendStatPopup* _this = reinterpret_cast< CDOTAClientMsg_SendStatPopup* >(object);
  (void)_this;
}
void CDOTAClientMsg_SendStatPopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SendStatPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SendStatPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(statpopup_ != nullptr);
    statpopup_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SendStatPopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAMsg_SendStatPopup statpopup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statpopup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SendStatPopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SendStatPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statpopup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SendStatPopup)
  return target;
}

size_t CDOTAClientMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SendStatPopup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statpopup_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SendStatPopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SendStatPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SendStatPopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SendStatPopup)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const CDOTAClientMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_statpopup()) {
    _internal_mutable_statpopup()->::CDOTAMsg_SendStatPopup::MergeFrom(from._internal_statpopup());
  }
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const CDOTAClientMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SendStatPopup::InternalSwap(CDOTAClientMsg_SendStatPopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(statpopup_, other->statpopup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SendStatPopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_DismissAllStatPopups::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_DismissAllStatPopups>()._has_bits_);
  static const ::CDOTAMsg_DismissAllStatPopups& dismissallmsg(const CDOTAClientMsg_DismissAllStatPopups* msg);
  static void set_has_dismissallmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_DismissAllStatPopups&
CDOTAClientMsg_DismissAllStatPopups::_Internal::dismissallmsg(const CDOTAClientMsg_DismissAllStatPopups* msg) {
  return *msg->dismissallmsg_;
}
void CDOTAClientMsg_DismissAllStatPopups::clear_dismissallmsg() {
  if (dismissallmsg_ != nullptr) dismissallmsg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAClientMsg_DismissAllStatPopups::CDOTAClientMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_DismissAllStatPopups)
}
CDOTAClientMsg_DismissAllStatPopups::CDOTAClientMsg_DismissAllStatPopups(const CDOTAClientMsg_DismissAllStatPopups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dismissallmsg()) {
    dismissallmsg_ = new ::CDOTAMsg_DismissAllStatPopups(*from.dismissallmsg_);
  } else {
    dismissallmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_DismissAllStatPopups)
}

void CDOTAClientMsg_DismissAllStatPopups::SharedCtor() {
dismissallmsg_ = nullptr;
}

CDOTAClientMsg_DismissAllStatPopups::~CDOTAClientMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_DismissAllStatPopups)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_DismissAllStatPopups::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dismissallmsg_;
}

void CDOTAClientMsg_DismissAllStatPopups::ArenaDtor(void* object) {
  CDOTAClientMsg_DismissAllStatPopups* _this = reinterpret_cast< CDOTAClientMsg_DismissAllStatPopups* >(object);
  (void)_this;
}
void CDOTAClientMsg_DismissAllStatPopups::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_DismissAllStatPopups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dismissallmsg_ != nullptr);
    dismissallmsg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_DismissAllStatPopups::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dismissallmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_DismissAllStatPopups::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_DismissAllStatPopups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dismissallmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAClientMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_DismissAllStatPopups)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dismissallmsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_DismissAllStatPopups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DismissAllStatPopups* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_DismissAllStatPopups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_DismissAllStatPopups)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_DismissAllStatPopups)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DismissAllStatPopups::MergeFrom(const CDOTAClientMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dismissallmsg()) {
    _internal_mutable_dismissallmsg()->::CDOTAMsg_DismissAllStatPopups::MergeFrom(from._internal_dismissallmsg());
  }
}

void CDOTAClientMsg_DismissAllStatPopups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DismissAllStatPopups::CopyFrom(const CDOTAClientMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DismissAllStatPopups::InternalSwap(CDOTAClientMsg_DismissAllStatPopups* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dismissallmsg_, other->dismissallmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_DismissAllStatPopups::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_BeginLastHitChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_BeginLastHitChallenge>()._has_bits_);
  static void set_has_chosen_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_helper_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_BeginLastHitChallenge)
}
CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(const CDOTAClientMsg_BeginLastHitChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chosen_lane_, &from.chosen_lane_,
    static_cast<size_t>(reinterpret_cast<char*>(&helper_enabled_) -
    reinterpret_cast<char*>(&chosen_lane_)) + sizeof(helper_enabled_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chosen_lane_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&helper_enabled_) -
    reinterpret_cast<char*>(&chosen_lane_)) + sizeof(helper_enabled_));
}

CDOTAClientMsg_BeginLastHitChallenge::~CDOTAClientMsg_BeginLastHitChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BeginLastHitChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_BeginLastHitChallenge::ArenaDtor(void* object) {
  CDOTAClientMsg_BeginLastHitChallenge* _this = reinterpret_cast< CDOTAClientMsg_BeginLastHitChallenge* >(object);
  (void)_this;
}
void CDOTAClientMsg_BeginLastHitChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_BeginLastHitChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_BeginLastHitChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_BeginLastHitChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chosen_lane_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&helper_enabled_) -
        reinterpret_cast<char*>(&chosen_lane_)) + sizeof(helper_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_BeginLastHitChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 chosen_lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_chosen_lane(&has_bits);
          chosen_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool helper_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_helper_enabled(&has_bits);
          helper_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_BeginLastHitChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BeginLastHitChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chosen_lane = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chosen_lane(), target);
  }

  // optional bool helper_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_helper_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BeginLastHitChallenge)
  return target;
}

size_t CDOTAClientMsg_BeginLastHitChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_BeginLastHitChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 chosen_lane = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chosen_lane());
    }

    // optional bool helper_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_BeginLastHitChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BeginLastHitChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_BeginLastHitChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_BeginLastHitChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_BeginLastHitChallenge)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_BeginLastHitChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chosen_lane_ = from.chosen_lane_;
    }
    if (cached_has_bits & 0x00000002u) {
      helper_enabled_ = from.helper_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_BeginLastHitChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_BeginLastHitChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BeginLastHitChallenge::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BeginLastHitChallenge::InternalSwap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, helper_enabled_)
      + sizeof(CDOTAClientMsg_BeginLastHitChallenge::helper_enabled_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, chosen_lane_)>(
          reinterpret_cast<char*>(&chosen_lane_),
          reinterpret_cast<char*>(&other->chosen_lane_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_BeginLastHitChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_UpdateQuickBuyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_UpdateQuickBuyItem>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_purchasable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}
CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(const CDOTAClientMsg_UpdateQuickBuyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&purchasable_, &from.purchasable_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&purchasable_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedCtor() {
purchasable_ = false;
item_ability_id_ = -1;
}

CDOTAClientMsg_UpdateQuickBuyItem::~CDOTAClientMsg_UpdateQuickBuyItem() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuyItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_UpdateQuickBuyItem::ArenaDtor(void* object) {
  CDOTAClientMsg_UpdateQuickBuyItem* _this = reinterpret_cast< CDOTAClientMsg_UpdateQuickBuyItem* >(object);
  (void)_this;
}
void CDOTAClientMsg_UpdateQuickBuyItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_UpdateQuickBuyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_UpdateQuickBuyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_UpdateQuickBuyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    purchasable_ = false;
    item_ability_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_UpdateQuickBuyItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool purchasable = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_purchasable(&has_bits);
          purchasable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_UpdateQuickBuyItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional bool purchasable = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_purchasable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuyItem)
  return target;
}

size_t CDOTAClientMsg_UpdateQuickBuyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_UpdateQuickBuyItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool purchasable = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 item_ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_UpdateQuickBuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuyItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_UpdateQuickBuyItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_UpdateQuickBuyItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_UpdateQuickBuyItem)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_UpdateQuickBuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      purchasable_ = from.purchasable_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_UpdateQuickBuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_UpdateQuickBuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuyItem::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UpdateQuickBuyItem::InternalSwap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(purchasable_, other->purchasable_);
  swap(item_ability_id_, other->item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_UpdateQuickBuyItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_UpdateQuickBuy::_Internal {
 public:
};

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_UpdateQuickBuy)
}
CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(const CDOTAClientMsg_UpdateQuickBuy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::SharedCtor() {
}

CDOTAClientMsg_UpdateQuickBuy::~CDOTAClientMsg_UpdateQuickBuy() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_UpdateQuickBuy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_UpdateQuickBuy::ArenaDtor(void* object) {
  CDOTAClientMsg_UpdateQuickBuy* _this = reinterpret_cast< CDOTAClientMsg_UpdateQuickBuy* >(object);
  (void)_this;
}
void CDOTAClientMsg_UpdateQuickBuy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_UpdateQuickBuy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_UpdateQuickBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_UpdateQuickBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_UpdateQuickBuy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_UpdateQuickBuy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuy)
  return target;
}

size_t CDOTAClientMsg_UpdateQuickBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_UpdateQuickBuy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_UpdateQuickBuy)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_UpdateQuickBuy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_UpdateQuickBuy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_UpdateQuickBuy)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_UpdateQuickBuy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_UpdateQuickBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_UpdateQuickBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuy::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UpdateQuickBuy::InternalSwap(CDOTAClientMsg_UpdateQuickBuy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_UpdateQuickBuy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RecordVote::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_RecordVote>()._has_bits_);
  static void set_has_choice_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RecordVote)
}
CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(const CDOTAClientMsg_RecordVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  choice_index_ = from.choice_index_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::SharedCtor() {
choice_index_ = 0;
}

CDOTAClientMsg_RecordVote::~CDOTAClientMsg_RecordVote() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RecordVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RecordVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RecordVote::ArenaDtor(void* object) {
  CDOTAClientMsg_RecordVote* _this = reinterpret_cast< CDOTAClientMsg_RecordVote* >(object);
  (void)_this;
}
void CDOTAClientMsg_RecordVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RecordVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RecordVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RecordVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choice_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RecordVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 choice_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_choice_index(&has_bits);
          choice_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RecordVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RecordVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 choice_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_choice_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RecordVote)
  return target;
}

size_t CDOTAClientMsg_RecordVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RecordVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 choice_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_choice_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RecordVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RecordVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RecordVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RecordVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RecordVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RecordVote)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RecordVote::MergeFrom(const CDOTAClientMsg_RecordVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RecordVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_choice_index()) {
    _internal_set_choice_index(from._internal_choice_index());
  }
}

void CDOTAClientMsg_RecordVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RecordVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RecordVote::CopyFrom(const CDOTAClientMsg_RecordVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RecordVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RecordVote::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RecordVote::InternalSwap(CDOTAClientMsg_RecordVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(choice_index_, other->choice_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RecordVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_WillPurchaseAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_WillPurchaseAlert>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gold_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_suggestion_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_WillPurchaseAlert)
}
CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(const CDOTAClientMsg_WillPurchaseAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
}

CDOTAClientMsg_WillPurchaseAlert::~CDOTAClientMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WillPurchaseAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_WillPurchaseAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_WillPurchaseAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_WillPurchaseAlert* _this = reinterpret_cast< CDOTAClientMsg_WillPurchaseAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_WillPurchaseAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_WillPurchaseAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_WillPurchaseAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suggestion_player_id_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_WillPurchaseAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gold_remaining(&has_bits);
          gold_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 suggestion_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_suggestion_player_id(&has_bits);
          suggestion_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_WillPurchaseAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WillPurchaseAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional uint32 gold_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gold_remaining(), target);
  }

  // optional int32 suggestion_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_suggestion_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WillPurchaseAlert)
  return target;
}

size_t CDOTAClientMsg_WillPurchaseAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_WillPurchaseAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 item_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

    // optional uint32 gold_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_remaining());
    }

    // optional int32 suggestion_player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_suggestion_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_WillPurchaseAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_WillPurchaseAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_WillPurchaseAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_WillPurchaseAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_remaining_ = from.gold_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      suggestion_player_id_ = from.suggestion_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WillPurchaseAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_WillPurchaseAlert::InternalSwap(CDOTAClientMsg_WillPurchaseAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, suggestion_player_id_)
      + sizeof(CDOTAClientMsg_WillPurchaseAlert::suggestion_player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, item_ability_id_)>(
          reinterpret_cast<char*>(&item_ability_id_),
          reinterpret_cast<char*>(&other->item_ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_WillPurchaseAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_BuyBackStateAlert::_Internal {
 public:
};

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_BuyBackStateAlert)
}
CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(const CDOTAClientMsg_BuyBackStateAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::SharedCtor() {
}

CDOTAClientMsg_BuyBackStateAlert::~CDOTAClientMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BuyBackStateAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_BuyBackStateAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_BuyBackStateAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_BuyBackStateAlert* _this = reinterpret_cast< CDOTAClientMsg_BuyBackStateAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_BuyBackStateAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_BuyBackStateAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_BuyBackStateAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_BuyBackStateAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_BuyBackStateAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BuyBackStateAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BuyBackStateAlert)
  return target;
}

size_t CDOTAClientMsg_BuyBackStateAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_BuyBackStateAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BuyBackStateAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_BuyBackStateAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_BuyBackStateAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_BuyBackStateAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BuyBackStateAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BuyBackStateAlert::InternalSwap(CDOTAClientMsg_BuyBackStateAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_BuyBackStateAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_QuickBuyAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_QuickBuyAlert>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gold_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_show_buyback(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_QuickBuyAlert)
}
CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(const CDOTAClientMsg_QuickBuyAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_buyback_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(show_buyback_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_buyback_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(show_buyback_));
}

CDOTAClientMsg_QuickBuyAlert::~CDOTAClientMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_QuickBuyAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_QuickBuyAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_QuickBuyAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_QuickBuyAlert* _this = reinterpret_cast< CDOTAClientMsg_QuickBuyAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_QuickBuyAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_QuickBuyAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_QuickBuyAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_QuickBuyAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_buyback_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(show_buyback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_QuickBuyAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gold_cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gold_cost(&has_bits);
          gold_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_cooldown_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_cooldown_seconds(&has_bits);
          item_cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_buyback = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_show_buyback(&has_bits);
          show_buyback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_QuickBuyAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_QuickBuyAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional int32 gold_cost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold_cost(), target);
  }

  // optional int32 item_cooldown_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_cooldown_seconds(), target);
  }

  // optional bool show_buyback = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_show_buyback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_QuickBuyAlert)
  return target;
}

size_t CDOTAClientMsg_QuickBuyAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_QuickBuyAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 item_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

    // optional int32 gold_cost = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gold_cost());
    }

    // optional int32 item_cooldown_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_cooldown_seconds());
    }

    // optional bool show_buyback = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_QuickBuyAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_QuickBuyAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_QuickBuyAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_QuickBuyAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_cost_ = from.gold_cost_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_cooldown_seconds_ = from.item_cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_buyback_ = from.show_buyback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuickBuyAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_QuickBuyAlert::InternalSwap(CDOTAClientMsg_QuickBuyAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, show_buyback_)
      + sizeof(CDOTAClientMsg_QuickBuyAlert::show_buyback_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, item_ability_id_)>(
          reinterpret_cast<char*>(&item_ability_id_),
          reinterpret_cast<char*>(&other->item_ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_QuickBuyAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_PlayerShowCase::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_PlayerShowCase>()._has_bits_);
  static void set_has_showcase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_PlayerShowCase)
}
CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(const CDOTAClientMsg_PlayerShowCase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  showcase_ = from.showcase_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::SharedCtor() {
showcase_ = false;
}

CDOTAClientMsg_PlayerShowCase::~CDOTAClientMsg_PlayerShowCase() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PlayerShowCase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_PlayerShowCase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_PlayerShowCase::ArenaDtor(void* object) {
  CDOTAClientMsg_PlayerShowCase* _this = reinterpret_cast< CDOTAClientMsg_PlayerShowCase* >(object);
  (void)_this;
}
void CDOTAClientMsg_PlayerShowCase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_PlayerShowCase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_PlayerShowCase::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_PlayerShowCase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  showcase_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_PlayerShowCase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool showcase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_showcase(&has_bits);
          showcase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_PlayerShowCase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PlayerShowCase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool showcase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_showcase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PlayerShowCase)
  return target;
}

size_t CDOTAClientMsg_PlayerShowCase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_PlayerShowCase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool showcase = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_PlayerShowCase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_PlayerShowCase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_PlayerShowCase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_PlayerShowCase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_PlayerShowCase)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const CDOTAClientMsg_PlayerShowCase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_PlayerShowCase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_showcase()) {
    _internal_set_showcase(from._internal_showcase());
  }
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_PlayerShowCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const CDOTAClientMsg_PlayerShowCase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_PlayerShowCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayerShowCase::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_PlayerShowCase::InternalSwap(CDOTAClientMsg_PlayerShowCase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(showcase_, other->showcase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_PlayerShowCase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_CameraZoomAmount::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_CameraZoomAmount>()._has_bits_);
  static void set_has_zoom_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_CameraZoomAmount)
}
CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(const CDOTAClientMsg_CameraZoomAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  zoom_amount_ = from.zoom_amount_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::SharedCtor() {
zoom_amount_ = 0;
}

CDOTAClientMsg_CameraZoomAmount::~CDOTAClientMsg_CameraZoomAmount() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CameraZoomAmount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_CameraZoomAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_CameraZoomAmount::ArenaDtor(void* object) {
  CDOTAClientMsg_CameraZoomAmount* _this = reinterpret_cast< CDOTAClientMsg_CameraZoomAmount* >(object);
  (void)_this;
}
void CDOTAClientMsg_CameraZoomAmount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_CameraZoomAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_CameraZoomAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_CameraZoomAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zoom_amount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_CameraZoomAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float zoom_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_zoom_amount(&has_bits);
          zoom_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_CameraZoomAmount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CameraZoomAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float zoom_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_zoom_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CameraZoomAmount)
  return target;
}

size_t CDOTAClientMsg_CameraZoomAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_CameraZoomAmount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float zoom_amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_CameraZoomAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CameraZoomAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_CameraZoomAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_CameraZoomAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_CameraZoomAmount)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_CameraZoomAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_zoom_amount()) {
    _internal_set_zoom_amount(from._internal_zoom_amount());
  }
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_CameraZoomAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_CameraZoomAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CameraZoomAmount::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CameraZoomAmount::InternalSwap(CDOTAClientMsg_CameraZoomAmount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(zoom_amount_, other->zoom_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_CameraZoomAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_BroadcasterUsingCameraman::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_BroadcasterUsingCameraman>()._has_bits_);
  static void set_has_cameraman(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}
CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(const CDOTAClientMsg_BroadcasterUsingCameraman& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cameraman_ = from.cameraman_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedCtor() {
cameraman_ = false;
}

CDOTAClientMsg_BroadcasterUsingCameraman::~CDOTAClientMsg_BroadcasterUsingCameraman() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingCameraman)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::ArenaDtor(void* object) {
  CDOTAClientMsg_BroadcasterUsingCameraman* _this = reinterpret_cast< CDOTAClientMsg_BroadcasterUsingCameraman* >(object);
  (void)_this;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_BroadcasterUsingCameraman::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraman_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_BroadcasterUsingCameraman::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool cameraman = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cameraman(&has_bits);
          cameraman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_BroadcasterUsingCameraman::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cameraman = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_cameraman(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingCameraman)
  return target;
}

size_t CDOTAClientMsg_BroadcasterUsingCameraman::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool cameraman = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingCameraman* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_BroadcasterUsingCameraman>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_BroadcasterUsingCameraman)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_BroadcasterUsingCameraman)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cameraman()) {
    _internal_set_cameraman(from._internal_cameraman());
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::InternalSwap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cameraman_, other->cameraman_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_BroadcasterUsingCameraman::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}
CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedCtor() {
enabled_ = false;
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::ArenaDtor(void* object) {
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* _this = reinterpret_cast< CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* >(object);
  (void)_this;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return target;
}

size_t CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InternalSwap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAdditionalEquipSlotClientMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CAdditionalEquipSlotClientMsg>()._has_bits_);
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAdditionalEquipSlotClientMsg)
}
CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(const CAdditionalEquipSlotClientMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&class_id_, &from.class_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&class_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
}

CAdditionalEquipSlotClientMsg::~CAdditionalEquipSlotClientMsg() {
  // @@protoc_insertion_point(destructor:CAdditionalEquipSlotClientMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAdditionalEquipSlotClientMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAdditionalEquipSlotClientMsg::ArenaDtor(void* object) {
  CAdditionalEquipSlotClientMsg* _this = reinterpret_cast< CAdditionalEquipSlotClientMsg* >(object);
  (void)_this;
}
void CAdditionalEquipSlotClientMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAdditionalEquipSlotClientMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAdditionalEquipSlotClientMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CAdditionalEquipSlotClientMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&class_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&def_index_) -
        reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAdditionalEquipSlotClientMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 class_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_class_id(&has_bits);
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAdditionalEquipSlotClientMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAdditionalEquipSlotClientMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAdditionalEquipSlotClientMsg)
  return target;
}

size_t CAdditionalEquipSlotClientMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAdditionalEquipSlotClientMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 class_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_class_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAdditionalEquipSlotClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CAdditionalEquipSlotClientMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAdditionalEquipSlotClientMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAdditionalEquipSlotClientMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAdditionalEquipSlotClientMsg)
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const CAdditionalEquipSlotClientMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAdditionalEquipSlotClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAdditionalEquipSlotClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const CAdditionalEquipSlotClientMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAdditionalEquipSlotClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlotClientMsg::IsInitialized() const {
  return true;
}

void CAdditionalEquipSlotClientMsg::InternalSwap(CAdditionalEquipSlotClientMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, def_index_)
      + sizeof(CAdditionalEquipSlotClientMsg::def_index_)
      - PROTOBUF_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, class_id_)>(
          reinterpret_cast<char*>(&class_id_),
          reinterpret_cast<char*>(&other->class_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAdditionalEquipSlotClientMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_FreeInventory::_Internal {
 public:
};

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_FreeInventory)
}
CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(const CDOTAClientMsg_FreeInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::SharedCtor() {
}

CDOTAClientMsg_FreeInventory::~CDOTAClientMsg_FreeInventory() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FreeInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_FreeInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_FreeInventory::ArenaDtor(void* object) {
  CDOTAClientMsg_FreeInventory* _this = reinterpret_cast< CDOTAClientMsg_FreeInventory* >(object);
  (void)_this;
}
void CDOTAClientMsg_FreeInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_FreeInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_FreeInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_FreeInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_FreeInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CAdditionalEquipSlotClientMsg equips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_FreeInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FreeInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_equips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FreeInventory)
  return target;
}

size_t CDOTAClientMsg_FreeInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_FreeInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  total_size += 1UL * this->_internal_equips_size();
  for (const auto& msg : this->equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_FreeInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FreeInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_FreeInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_FreeInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_FreeInventory)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const CDOTAClientMsg_FreeInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_FreeInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_FreeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const CDOTAClientMsg_FreeInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_FreeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FreeInventory::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FreeInventory::InternalSwap(CDOTAClientMsg_FreeInventory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equips_.InternalSwap(&other->equips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_FreeInventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_FillEmptySlotsWithBots::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_FillEmptySlotsWithBots>()._has_bits_);
  static void set_has_fillwithbots(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_FillEmptySlotsWithBots)
}
CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots(const CDOTAClientMsg_FillEmptySlotsWithBots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fillwithbots_ = from.fillwithbots_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FillEmptySlotsWithBots)
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedCtor() {
fillwithbots_ = false;
}

CDOTAClientMsg_FillEmptySlotsWithBots::~CDOTAClientMsg_FillEmptySlotsWithBots() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FillEmptySlotsWithBots)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_FillEmptySlotsWithBots::ArenaDtor(void* object) {
  CDOTAClientMsg_FillEmptySlotsWithBots* _this = reinterpret_cast< CDOTAClientMsg_FillEmptySlotsWithBots* >(object);
  (void)_this;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_FillEmptySlotsWithBots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fillwithbots_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_FillEmptySlotsWithBots::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool fillwithbots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fillwithbots(&has_bits);
          fillwithbots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_FillEmptySlotsWithBots::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool fillwithbots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_fillwithbots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FillEmptySlotsWithBots)
  return target;
}

size_t CDOTAClientMsg_FillEmptySlotsWithBots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool fillwithbots = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FillEmptySlotsWithBots* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_FillEmptySlotsWithBots>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_FillEmptySlotsWithBots)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_FillEmptySlotsWithBots)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fillwithbots()) {
    _internal_set_fillwithbots(from._internal_fillwithbots());
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::InternalSwap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fillwithbots_, other->fillwithbots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_FillEmptySlotsWithBots::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_HeroStatueLike::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_HeroStatueLike>()._has_bits_);
  static void set_has_owner_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_HeroStatueLike)
}
CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(const CDOTAClientMsg_HeroStatueLike& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_player_id_ = from.owner_player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::SharedCtor() {
owner_player_id_ = 0u;
}

CDOTAClientMsg_HeroStatueLike::~CDOTAClientMsg_HeroStatueLike() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HeroStatueLike)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_HeroStatueLike::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_HeroStatueLike::ArenaDtor(void* object) {
  CDOTAClientMsg_HeroStatueLike* _this = reinterpret_cast< CDOTAClientMsg_HeroStatueLike* >(object);
  (void)_this;
}
void CDOTAClientMsg_HeroStatueLike::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_HeroStatueLike::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_HeroStatueLike::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_HeroStatueLike)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_HeroStatueLike::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_player_id(&has_bits);
          owner_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_HeroStatueLike::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HeroStatueLike)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HeroStatueLike)
  return target;
}

size_t CDOTAClientMsg_HeroStatueLike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_HeroStatueLike)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 owner_player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_HeroStatueLike)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HeroStatueLike* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_HeroStatueLike>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_HeroStatueLike)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_HeroStatueLike)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const CDOTAClientMsg_HeroStatueLike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_HeroStatueLike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner_player_id()) {
    _internal_set_owner_player_id(from._internal_owner_player_id());
  }
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_HeroStatueLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const CDOTAClientMsg_HeroStatueLike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_HeroStatueLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HeroStatueLike::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HeroStatueLike::InternalSwap(CDOTAClientMsg_HeroStatueLike* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_player_id_, other->owner_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_HeroStatueLike::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_EventCNY2015Cmd::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EventCNY2015Cmd>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}
CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventCNY2015Cmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_EventCNY2015Cmd::ArenaDtor(void* object) {
  CDOTAClientMsg_EventCNY2015Cmd* _this = reinterpret_cast< CDOTAClientMsg_EventCNY2015Cmd* >(object);
  (void)_this;
}
void CDOTAClientMsg_EventCNY2015Cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EventCNY2015Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EventCNY2015Cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_EventCNY2015Cmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventCNY2015Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

size_t CDOTAClientMsg_EventCNY2015Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EventCNY2015Cmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventCNY2015Cmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_EventCNY2015Cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_EventCNY2015Cmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_EventCNY2015Cmd)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_DemoHero::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_DemoHero>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id_to_spawn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_keep_existing_demohero(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_defs_(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_DemoHero)
}
CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero(const CDOTAClientMsg_DemoHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_defs_(from.item_defs_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_existing_demohero_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(keep_existing_demohero_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_DemoHero)
}

void CDOTAClientMsg_DemoHero::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keep_existing_demohero_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(keep_existing_demohero_));
}

CDOTAClientMsg_DemoHero::~CDOTAClientMsg_DemoHero() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_DemoHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_DemoHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_DemoHero::ArenaDtor(void* object) {
  CDOTAClientMsg_DemoHero* _this = reinterpret_cast< CDOTAClientMsg_DemoHero* >(object);
  (void)_this;
}
void CDOTAClientMsg_DemoHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_DemoHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_DemoHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_DemoHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_defs_.Clear();
  item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keep_existing_demohero_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(keep_existing_demohero_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_DemoHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hero_id_to_spawn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id_to_spawn(&has_bits);
          hero_id_to_spawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 item_defs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_style_index(&has_bits);
          style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keep_existing_demohero = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_keep_existing_demohero(&has_bits);
          keep_existing_demohero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_DemoHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_DemoHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hero_id_to_spawn(), target);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_defs(i), target);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_item_ids(i), target);
  }

  // optional uint32 style_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_style_index(), target);
  }

  // optional bool keep_existing_demohero = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_keep_existing_demohero(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_DemoHero)
  return target;
}

size_t CDOTAClientMsg_DemoHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_DemoHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // repeated uint64 item_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hero_id());
    }

    // optional int32 hero_id_to_spawn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hero_id_to_spawn());
    }

    // optional uint32 style_index = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style_index());
    }

    // optional bool keep_existing_demohero = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_DemoHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_DemoHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DemoHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_DemoHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_DemoHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_DemoHero)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DemoHero::MergeFrom(const CDOTAClientMsg_DemoHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_DemoHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_to_spawn_ = from.hero_id_to_spawn_;
    }
    if (cached_has_bits & 0x00000004u) {
      style_index_ = from.style_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      keep_existing_demohero_ = from.keep_existing_demohero_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_DemoHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_DemoHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DemoHero::CopyFrom(const CDOTAClientMsg_DemoHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_DemoHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DemoHero::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DemoHero::InternalSwap(CDOTAClientMsg_DemoHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_defs_.InternalSwap(&other->item_defs_);
  item_ids_.InternalSwap(&other->item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_DemoHero, keep_existing_demohero_)
      + sizeof(CDOTAClientMsg_DemoHero::keep_existing_demohero_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_DemoHero, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_DemoHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ChallengeSelect::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ChallengeSelect>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ChallengeSelect)
}
CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect(const CDOTAClientMsg_ChallengeSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(sequence_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChallengeSelect)
}

void CDOTAClientMsg_ChallengeSelect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(sequence_id_));
}

CDOTAClientMsg_ChallengeSelect::~CDOTAClientMsg_ChallengeSelect() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChallengeSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ChallengeSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ChallengeSelect::ArenaDtor(void* object) {
  CDOTAClientMsg_ChallengeSelect* _this = reinterpret_cast< CDOTAClientMsg_ChallengeSelect* >(object);
  (void)_this;
}
void CDOTAClientMsg_ChallengeSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ChallengeSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ChallengeSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ChallengeSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(sequence_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ChallengeSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_id(&has_bits);
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ChallengeSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChallengeSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChallengeSelect)
  return target;
}

size_t CDOTAClientMsg_ChallengeSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ChallengeSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sequence_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ChallengeSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ChallengeSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ChallengeSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ChallengeSelect)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const CDOTAClientMsg_ChallengeSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ChallengeSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ChallengeSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const CDOTAClientMsg_ChallengeSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ChallengeSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeSelect::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChallengeSelect::InternalSwap(CDOTAClientMsg_ChallengeSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, sequence_id_)
      + sizeof(CDOTAClientMsg_ChallengeSelect::sequence_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ChallengeSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ChallengeReroll::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ChallengeReroll>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ChallengeReroll)
}
CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll(const CDOTAClientMsg_ChallengeReroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChallengeReroll)
}

void CDOTAClientMsg_ChallengeReroll::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
}

CDOTAClientMsg_ChallengeReroll::~CDOTAClientMsg_ChallengeReroll() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChallengeReroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ChallengeReroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ChallengeReroll::ArenaDtor(void* object) {
  CDOTAClientMsg_ChallengeReroll* _this = reinterpret_cast< CDOTAClientMsg_ChallengeReroll* >(object);
  (void)_this;
}
void CDOTAClientMsg_ChallengeReroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ChallengeReroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ChallengeReroll::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ChallengeReroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ChallengeReroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_id(&has_bits);
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ChallengeReroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChallengeReroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_id(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChallengeReroll)
  return target;
}

size_t CDOTAClientMsg_ChallengeReroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ChallengeReroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sequence_id());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ChallengeReroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeReroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ChallengeReroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ChallengeReroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ChallengeReroll)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const CDOTAClientMsg_ChallengeReroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ChallengeReroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ChallengeReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const CDOTAClientMsg_ChallengeReroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ChallengeReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeReroll::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChallengeReroll::InternalSwap(CDOTAClientMsg_ChallengeReroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, hero_id_)
      + sizeof(CDOTAClientMsg_ChallengeReroll::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ChallengeReroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_CoinWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_CoinWager>()._has_bits_);
  static void set_has_wager_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_CoinWager)
}
CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wager_amount_ = from.wager_amount_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::SharedCtor() {
wager_amount_ = 0u;
}

CDOTAClientMsg_CoinWager::~CDOTAClientMsg_CoinWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoinWager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_CoinWager::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_CoinWager::ArenaDtor(void* object) {
  CDOTAClientMsg_CoinWager* _this = reinterpret_cast< CDOTAClientMsg_CoinWager* >(object);
  (void)_this;
}
void CDOTAClientMsg_CoinWager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_CoinWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_CoinWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_CoinWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wager_amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_CoinWager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 wager_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wager_amount(&has_bits);
          wager_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_CoinWager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoinWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wager_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wager_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoinWager)
  return target;
}

size_t CDOTAClientMsg_CoinWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_CoinWager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 wager_amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wager_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_CoinWager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_CoinWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_CoinWager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_CoinWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWager::MergeFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wager_amount()) {
    _internal_set_wager_amount(from._internal_wager_amount());
  }
}

void CDOTAClientMsg_CoinWager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWager::CopyFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWager::InternalSwap(CDOTAClientMsg_CoinWager* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wager_amount_, other->wager_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_CoinWager::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_CoinWagerToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_CoinWagerToken>()._has_bits_);
  static void set_has_wager_token_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_CoinWagerToken::CDOTAClientMsg_CoinWagerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_CoinWagerToken)
}
CDOTAClientMsg_CoinWagerToken::CDOTAClientMsg_CoinWagerToken(const CDOTAClientMsg_CoinWagerToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wager_token_item_id_ = from.wager_token_item_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoinWagerToken)
}

void CDOTAClientMsg_CoinWagerToken::SharedCtor() {
wager_token_item_id_ = PROTOBUF_ULONGLONG(0);
}

CDOTAClientMsg_CoinWagerToken::~CDOTAClientMsg_CoinWagerToken() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoinWagerToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_CoinWagerToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_CoinWagerToken::ArenaDtor(void* object) {
  CDOTAClientMsg_CoinWagerToken* _this = reinterpret_cast< CDOTAClientMsg_CoinWagerToken* >(object);
  (void)_this;
}
void CDOTAClientMsg_CoinWagerToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_CoinWagerToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_CoinWagerToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_CoinWagerToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wager_token_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_CoinWagerToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 wager_token_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wager_token_item_id(&has_bits);
          wager_token_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_CoinWagerToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoinWagerToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 wager_token_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_wager_token_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoinWagerToken)
  return target;
}

size_t CDOTAClientMsg_CoinWagerToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_CoinWagerToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 wager_token_item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_wager_token_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_CoinWagerToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_CoinWagerToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWagerToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_CoinWagerToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_CoinWagerToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_CoinWagerToken)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWagerToken::MergeFrom(const CDOTAClientMsg_CoinWagerToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_CoinWagerToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wager_token_item_id()) {
    _internal_set_wager_token_item_id(from._internal_wager_token_item_id());
  }
}

void CDOTAClientMsg_CoinWagerToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_CoinWagerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWagerToken::CopyFrom(const CDOTAClientMsg_CoinWagerToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_CoinWagerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWagerToken::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWagerToken::InternalSwap(CDOTAClientMsg_CoinWagerToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wager_token_item_id_, other->wager_token_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_CoinWagerToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RankWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_RankWager>()._has_bits_);
  static void set_has_announce_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RankWager)
}
CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(const CDOTAClientMsg_RankWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announce_wager_ = from.announce_wager_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RankWager)
}

void CDOTAClientMsg_RankWager::SharedCtor() {
announce_wager_ = false;
}

CDOTAClientMsg_RankWager::~CDOTAClientMsg_RankWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RankWager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RankWager::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RankWager::ArenaDtor(void* object) {
  CDOTAClientMsg_RankWager* _this = reinterpret_cast< CDOTAClientMsg_RankWager* >(object);
  (void)_this;
}
void CDOTAClientMsg_RankWager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RankWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RankWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RankWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  announce_wager_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RankWager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool announce_wager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_announce_wager(&has_bits);
          announce_wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RankWager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RankWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool announce_wager = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_announce_wager(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RankWager)
  return target;
}

size_t CDOTAClientMsg_RankWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RankWager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool announce_wager = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RankWager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RankWager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RankWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RankWager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RankWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RankWager::MergeFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_announce_wager()) {
    _internal_set_announce_wager(from._internal_announce_wager());
  }
}

void CDOTAClientMsg_RankWager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RankWager::CopyFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RankWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RankWager::InternalSwap(CDOTAClientMsg_RankWager* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(announce_wager_, other->announce_wager_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RankWager::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_PlayerBounty::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_PlayerBounty>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_PlayerBounty::CDOTAClientMsg_PlayerBounty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_PlayerBounty)
}
CDOTAClientMsg_PlayerBounty::CDOTAClientMsg_PlayerBounty(const CDOTAClientMsg_PlayerBounty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PlayerBounty)
}

void CDOTAClientMsg_PlayerBounty::SharedCtor() {
player_id_ = 0u;
}

CDOTAClientMsg_PlayerBounty::~CDOTAClientMsg_PlayerBounty() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PlayerBounty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_PlayerBounty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_PlayerBounty::ArenaDtor(void* object) {
  CDOTAClientMsg_PlayerBounty* _this = reinterpret_cast< CDOTAClientMsg_PlayerBounty* >(object);
  (void)_this;
}
void CDOTAClientMsg_PlayerBounty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_PlayerBounty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_PlayerBounty::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_PlayerBounty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_PlayerBounty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_PlayerBounty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PlayerBounty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PlayerBounty)
  return target;
}

size_t CDOTAClientMsg_PlayerBounty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_PlayerBounty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_PlayerBounty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_PlayerBounty)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_PlayerBounty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_PlayerBounty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_PlayerBounty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_PlayerBounty)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayerBounty::MergeFrom(const CDOTAClientMsg_PlayerBounty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_PlayerBounty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAClientMsg_PlayerBounty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_PlayerBounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayerBounty::CopyFrom(const CDOTAClientMsg_PlayerBounty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_PlayerBounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayerBounty::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_PlayerBounty::InternalSwap(CDOTAClientMsg_PlayerBounty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_PlayerBounty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_EventPointsTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EventPointsTip>()._has_bits_);
  static void set_has_recipient_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EventPointsTip)
}
CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_player_id_ = from.recipient_player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventPointsTip)
}

void CDOTAClientMsg_EventPointsTip::SharedCtor() {
recipient_player_id_ = 0u;
}

CDOTAClientMsg_EventPointsTip::~CDOTAClientMsg_EventPointsTip() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventPointsTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_EventPointsTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_EventPointsTip::ArenaDtor(void* object) {
  CDOTAClientMsg_EventPointsTip* _this = reinterpret_cast< CDOTAClientMsg_EventPointsTip* >(object);
  (void)_this;
}
void CDOTAClientMsg_EventPointsTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EventPointsTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EventPointsTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EventPointsTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EventPointsTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 recipient_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recipient_player_id(&has_bits);
          recipient_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_EventPointsTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventPointsTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recipient_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventPointsTip)
  return target;
}

size_t CDOTAClientMsg_EventPointsTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EventPointsTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 recipient_player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recipient_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventPointsTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_EventPointsTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_EventPointsTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_EventPointsTip)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recipient_player_id()) {
    _internal_set_recipient_player_id(from._internal_recipient_player_id());
  }
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventPointsTip::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventPointsTip::InternalSwap(CDOTAClientMsg_EventPointsTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recipient_player_id_, other->recipient_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EventPointsTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ExecuteOrders::_Internal {
 public:
};

void CDOTAClientMsg_ExecuteOrders::clear_orders() {
  orders_.Clear();
}
CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ExecuteOrders)
}
CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders(const CDOTAClientMsg_ExecuteOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ExecuteOrders)
}

void CDOTAClientMsg_ExecuteOrders::SharedCtor() {
}

CDOTAClientMsg_ExecuteOrders::~CDOTAClientMsg_ExecuteOrders() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ExecuteOrders)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ExecuteOrders::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ExecuteOrders::ArenaDtor(void* object) {
  CDOTAClientMsg_ExecuteOrders* _this = reinterpret_cast< CDOTAClientMsg_ExecuteOrders* >(object);
  (void)_this;
}
void CDOTAClientMsg_ExecuteOrders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ExecuteOrders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ExecuteOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ExecuteOrders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ExecuteOrders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAMsg_UnitOrder orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ExecuteOrders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ExecuteOrders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAMsg_UnitOrder orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ExecuteOrders)
  return target;
}

size_t CDOTAClientMsg_ExecuteOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ExecuteOrders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMsg_UnitOrder orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ExecuteOrders)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ExecuteOrders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ExecuteOrders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ExecuteOrders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ExecuteOrders)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const CDOTAClientMsg_ExecuteOrders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ExecuteOrders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ExecuteOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const CDOTAClientMsg_ExecuteOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ExecuteOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ExecuteOrders::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ExecuteOrders::InternalSwap(CDOTAClientMsg_ExecuteOrders* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ExecuteOrders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_XPAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_XPAlert>()._has_bits_);
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_XPAlert)
}
CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert(const CDOTAClientMsg_XPAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_taken_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(damage_taken_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_XPAlert)
}

void CDOTAClientMsg_XPAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_taken_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(damage_taken_));
}

CDOTAClientMsg_XPAlert::~CDOTAClientMsg_XPAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_XPAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_XPAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_XPAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_XPAlert* _this = reinterpret_cast< CDOTAClientMsg_XPAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_XPAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_XPAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_XPAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_XPAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_taken_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(damage_taken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_XPAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_taken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_damage_taken(&has_bits);
          damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_XPAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_XPAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_XPAlert)
  return target;
}

size_t CDOTAClientMsg_XPAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_XPAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_taken());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_XPAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_XPAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_XPAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_XPAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_XPAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_XPAlert::MergeFrom(const CDOTAClientMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_taken_ = from.damage_taken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_XPAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_XPAlert::CopyFrom(const CDOTAClientMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_XPAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_XPAlert::InternalSwap(CDOTAClientMsg_XPAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_XPAlert, damage_taken_)
      + sizeof(CDOTAClientMsg_XPAlert::damage_taken_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_XPAlert, target_entindex_)>(
          reinterpret_cast<char*>(&target_entindex_),
          reinterpret_cast<char*>(&other->target_entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_XPAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_TalentTreeAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_TalentTreeAlert>()._has_bits_);
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_learned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAClientMsg_TalentTreeAlert::CDOTAClientMsg_TalentTreeAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_TalentTreeAlert)
}
CDOTAClientMsg_TalentTreeAlert::CDOTAClientMsg_TalentTreeAlert(const CDOTAClientMsg_TalentTreeAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&learned_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(learned_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TalentTreeAlert)
}

void CDOTAClientMsg_TalentTreeAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&learned_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(learned_));
}

CDOTAClientMsg_TalentTreeAlert::~CDOTAClientMsg_TalentTreeAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TalentTreeAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_TalentTreeAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_TalentTreeAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_TalentTreeAlert* _this = reinterpret_cast< CDOTAClientMsg_TalentTreeAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_TalentTreeAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_TalentTreeAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_TalentTreeAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_TalentTreeAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&learned_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(learned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_TalentTreeAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool learned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_learned(&has_bits);
          learned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_TalentTreeAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TalentTreeAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_entindex(), target);
  }

  // optional int32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional int32 slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_slot(), target);
  }

  // optional bool learned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_learned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TalentTreeAlert)
  return target;
}

size_t CDOTAClientMsg_TalentTreeAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_TalentTreeAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 target_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional int32 ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability_id());
    }

    // optional int32 slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot());
    }

    // optional bool learned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_TalentTreeAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_TalentTreeAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_TalentTreeAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_TalentTreeAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_TalentTreeAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_TalentTreeAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TalentTreeAlert::MergeFrom(const CDOTAClientMsg_TalentTreeAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_TalentTreeAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      learned_ = from.learned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_TalentTreeAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_TalentTreeAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TalentTreeAlert::CopyFrom(const CDOTAClientMsg_TalentTreeAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_TalentTreeAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TalentTreeAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TalentTreeAlert::InternalSwap(CDOTAClientMsg_TalentTreeAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_TalentTreeAlert, learned_)
      + sizeof(CDOTAClientMsg_TalentTreeAlert::learned_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_TalentTreeAlert, target_entindex_)>(
          reinterpret_cast<char*>(&target_entindex_),
          reinterpret_cast<char*>(&other->target_entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_TalentTreeAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_KillcamDamageTaken::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_KillcamDamageTaken>()._has_bits_);
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_KillcamDamageTaken)
}
CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken(const CDOTAClientMsg_KillcamDamageTaken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero_name()) {
    hero_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero_name(), 
      GetArena());
  }
  damage_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_damage_color()) {
    damage_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_damage_color(), 
      GetArena());
  }
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_KillcamDamageTaken)
}

void CDOTAClientMsg_KillcamDamageTaken::SharedCtor() {
hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
damage_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(item_ability_id_));
}

CDOTAClientMsg_KillcamDamageTaken::~CDOTAClientMsg_KillcamDamageTaken() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_KillcamDamageTaken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_KillcamDamageTaken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hero_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  damage_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_KillcamDamageTaken::ArenaDtor(void* object) {
  CDOTAClientMsg_KillcamDamageTaken* _this = reinterpret_cast< CDOTAClientMsg_KillcamDamageTaken* >(object);
  (void)_this;
}
void CDOTAClientMsg_KillcamDamageTaken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_KillcamDamageTaken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_KillcamDamageTaken::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_KillcamDamageTaken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      damage_color_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_ability_id_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(item_ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_KillcamDamageTaken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_taken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_damage_taken(&has_bits);
          damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_type(&has_bits);
          item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_ability_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hero_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_KillcamDamageTaken.hero_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string damage_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_damage_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_KillcamDamageTaken.damage_color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_KillcamDamageTaken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_KillcamDamageTaken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage_taken(), target);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_type(), target);
  }

  // optional uint32 item_ability_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_item_ability_id(), target);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_name().data(), static_cast<int>(this->_internal_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_KillcamDamageTaken.hero_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hero_name(), target);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_damage_color().data(), static_cast<int>(this->_internal_damage_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_KillcamDamageTaken.damage_color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_damage_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_KillcamDamageTaken)
  return target;
}

size_t CDOTAClientMsg_KillcamDamageTaken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_KillcamDamageTaken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string hero_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_name());
    }

    // optional string damage_color = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_damage_color());
    }

    // optional uint32 target_entindex = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_taken());
    }

    // optional uint32 item_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_type());
    }

    // optional uint32 item_ability_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_KillcamDamageTaken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_KillcamDamageTaken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_KillcamDamageTaken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_KillcamDamageTaken)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hero_name(from._internal_hero_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_damage_color(from._internal_damage_color());
    }
    if (cached_has_bits & 0x00000004u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_taken_ = from.damage_taken_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillcamDamageTaken::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_KillcamDamageTaken::InternalSwap(CDOTAClientMsg_KillcamDamageTaken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_name_.Swap(&other->hero_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  damage_color_.Swap(&other->damage_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, item_ability_id_)
      + sizeof(CDOTAClientMsg_KillcamDamageTaken::item_ability_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, target_entindex_)>(
          reinterpret_cast<char*>(&target_entindex_),
          reinterpret_cast<char*>(&other->target_entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_KillcamDamageTaken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_MatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_MatchMetadata>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_MatchMetadata)
}
CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(const CDOTAClientMsg_MatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MatchMetadata)
}

void CDOTAClientMsg_MatchMetadata::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
match_id_ = PROTOBUF_ULONGLONG(0);
}

CDOTAClientMsg_MatchMetadata::~CDOTAClientMsg_MatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MatchMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_MatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_MatchMetadata::ArenaDtor(void* object) {
  CDOTAClientMsg_MatchMetadata* _this = reinterpret_cast< CDOTAClientMsg_MatchMetadata* >(object);
  (void)_this;
}
void CDOTAClientMsg_MatchMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_MatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_MatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_MatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmpty();
  }
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_MatchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_MatchMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MatchMetadata)
  return target;
}

size_t CDOTAClientMsg_MatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_MatchMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MatchMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_MatchMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_MatchMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_MatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MatchMetadata::InternalSwap(CDOTAClientMsg_MatchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_MatchMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_KillMyHero::_Internal {
 public:
};

CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_KillMyHero)
}
CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero(const CDOTAClientMsg_KillMyHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_KillMyHero)
}

void CDOTAClientMsg_KillMyHero::SharedCtor() {
}

CDOTAClientMsg_KillMyHero::~CDOTAClientMsg_KillMyHero() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_KillMyHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_KillMyHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_KillMyHero::ArenaDtor(void* object) {
  CDOTAClientMsg_KillMyHero* _this = reinterpret_cast< CDOTAClientMsg_KillMyHero* >(object);
  (void)_this;
}
void CDOTAClientMsg_KillMyHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_KillMyHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_KillMyHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_KillMyHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_KillMyHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_KillMyHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_KillMyHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_KillMyHero)
  return target;
}

size_t CDOTAClientMsg_KillMyHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_KillMyHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_KillMyHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_KillMyHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_KillMyHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_KillMyHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_KillMyHero)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const CDOTAClientMsg_KillMyHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_KillMyHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_KillMyHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_KillMyHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillMyHero::CopyFrom(const CDOTAClientMsg_KillMyHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_KillMyHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillMyHero::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_KillMyHero::InternalSwap(CDOTAClientMsg_KillMyHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_KillMyHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_QuestStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_QuestStatus>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fail_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_QuestStatus)
}
CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus(const CDOTAClientMsg_QuestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_QuestStatus)
}

void CDOTAClientMsg_QuestStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quest_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(item_ability_id_));
}

CDOTAClientMsg_QuestStatus::~CDOTAClientMsg_QuestStatus() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_QuestStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_QuestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_QuestStatus::ArenaDtor(void* object) {
  CDOTAClientMsg_QuestStatus* _this = reinterpret_cast< CDOTAClientMsg_QuestStatus* >(object);
  (void)_this;
}
void CDOTAClientMsg_QuestStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_QuestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_QuestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_ability_id_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(item_ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_QuestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_challenge_id(&has_bits);
          challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 goal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_goal(&has_bits);
          goal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 query = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_query(&has_bits);
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fail_gametime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_fail_gametime(&has_bits);
          fail_gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_ability_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_QuestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_QuestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 challenge_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_id(), target);
  }

  // optional uint32 progress = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_progress(), target);
  }

  // optional uint32 goal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_goal(), target);
  }

  // optional uint32 query = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_query(), target);
  }

  // optional float fail_gametime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fail_gametime(), target);
  }

  // optional uint32 item_ability_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_QuestStatus)
  return target;
}

size_t CDOTAClientMsg_QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_QuestStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quest_id());
    }

    // optional uint32 challenge_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_id());
    }

    // optional uint32 progress = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress());
    }

    // optional uint32 goal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goal());
    }

    // optional uint32 query = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_query());
    }

    // optional float fail_gametime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 item_ability_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_QuestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_QuestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_QuestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_QuestStatus)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const CDOTAClientMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_id_ = from.challenge_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000008u) {
      goal_ = from.goal_;
    }
    if (cached_has_bits & 0x00000010u) {
      query_ = from.query_;
    }
    if (cached_has_bits & 0x00000020u) {
      fail_gametime_ = from.fail_gametime_;
    }
    if (cached_has_bits & 0x00000040u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const CDOTAClientMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuestStatus::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_QuestStatus::InternalSwap(CDOTAClientMsg_QuestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, item_ability_id_)
      + sizeof(CDOTAClientMsg_QuestStatus::item_ability_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, quest_id_)>(
          reinterpret_cast<char*>(&quest_id_),
          reinterpret_cast<char*>(&other->quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_QuestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ToggleAutoattack::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ToggleAutoattack>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ToggleAutoattack)
}
CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack(const CDOTAClientMsg_ToggleAutoattack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_message_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(show_message_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ToggleAutoattack)
}

void CDOTAClientMsg_ToggleAutoattack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_message_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(show_message_));
}

CDOTAClientMsg_ToggleAutoattack::~CDOTAClientMsg_ToggleAutoattack() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ToggleAutoattack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ToggleAutoattack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ToggleAutoattack::ArenaDtor(void* object) {
  CDOTAClientMsg_ToggleAutoattack* _this = reinterpret_cast< CDOTAClientMsg_ToggleAutoattack* >(object);
  (void)_this;
}
void CDOTAClientMsg_ToggleAutoattack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ToggleAutoattack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ToggleAutoattack::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ToggleAutoattack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_message_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(show_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ToggleAutoattack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show_message(&has_bits);
          show_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ToggleAutoattack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ToggleAutoattack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // optional bool show_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ToggleAutoattack)
  return target;
}

size_t CDOTAClientMsg_ToggleAutoattack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ToggleAutoattack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mode());
    }

    // optional bool show_message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ToggleAutoattack)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ToggleAutoattack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ToggleAutoattack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ToggleAutoattack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ToggleAutoattack)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ToggleAutoattack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_message_ = from.show_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ToggleAutoattack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ToggleAutoattack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ToggleAutoattack::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ToggleAutoattack::InternalSwap(CDOTAClientMsg_ToggleAutoattack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, show_message_)
      + sizeof(CDOTAClientMsg_ToggleAutoattack::show_message_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ToggleAutoattack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SpecialAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SpecialAbility>()._has_bits_);
  static void set_has_ability_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SpecialAbility)
}
CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility(const CDOTAClientMsg_SpecialAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ability_index_, &from.ability_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&ability_index_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SpecialAbility)
}

void CDOTAClientMsg_SpecialAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ability_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&ability_index_)) + sizeof(target_entindex_));
}

CDOTAClientMsg_SpecialAbility::~CDOTAClientMsg_SpecialAbility() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SpecialAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SpecialAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SpecialAbility::ArenaDtor(void* object) {
  CDOTAClientMsg_SpecialAbility* _this = reinterpret_cast< CDOTAClientMsg_SpecialAbility* >(object);
  (void)_this;
}
void CDOTAClientMsg_SpecialAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SpecialAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SpecialAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SpecialAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&ability_index_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SpecialAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability_index(&has_bits);
          ability_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SpecialAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SpecialAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SpecialAbility)
  return target;
}

size_t CDOTAClientMsg_SpecialAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SpecialAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_index());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SpecialAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SpecialAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SpecialAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SpecialAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SpecialAbility)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const CDOTAClientMsg_SpecialAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SpecialAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_index_ = from.ability_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SpecialAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const CDOTAClientMsg_SpecialAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SpecialAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SpecialAbility::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SpecialAbility::InternalSwap(CDOTAClientMsg_SpecialAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, target_entindex_)
      + sizeof(CDOTAClientMsg_SpecialAbility::target_entindex_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, ability_index_)>(
          reinterpret_cast<char*>(&ability_index_),
          reinterpret_cast<char*>(&other->ability_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SpecialAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SetEnemyStartingPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SetEnemyStartingPosition>()._has_bits_);
  static void set_has_enemy_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enemy_starting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SetEnemyStartingPosition)
}
CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition(const CDOTAClientMsg_SetEnemyStartingPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enemy_player_id_, &from.enemy_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enemy_starting_position_) -
    reinterpret_cast<char*>(&enemy_player_id_)) + sizeof(enemy_starting_position_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetEnemyStartingPosition)
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enemy_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enemy_starting_position_) -
    reinterpret_cast<char*>(&enemy_player_id_)) + sizeof(enemy_starting_position_));
}

CDOTAClientMsg_SetEnemyStartingPosition::~CDOTAClientMsg_SetEnemyStartingPosition() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetEnemyStartingPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SetEnemyStartingPosition::ArenaDtor(void* object) {
  CDOTAClientMsg_SetEnemyStartingPosition* _this = reinterpret_cast< CDOTAClientMsg_SetEnemyStartingPosition* >(object);
  (void)_this;
}
void CDOTAClientMsg_SetEnemyStartingPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SetEnemyStartingPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SetEnemyStartingPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SetEnemyStartingPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&enemy_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enemy_starting_position_) -
        reinterpret_cast<char*>(&enemy_player_id_)) + sizeof(enemy_starting_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SetEnemyStartingPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 enemy_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enemy_player_id(&has_bits);
          enemy_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enemy_starting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enemy_starting_position(&has_bits);
          enemy_starting_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SetEnemyStartingPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetEnemyStartingPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 enemy_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_enemy_player_id(), target);
  }

  // optional uint32 enemy_starting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enemy_starting_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetEnemyStartingPosition)
  return target;
}

size_t CDOTAClientMsg_SetEnemyStartingPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SetEnemyStartingPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 enemy_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemy_player_id());
    }

    // optional uint32 enemy_starting_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemy_starting_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SetEnemyStartingPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetEnemyStartingPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SetEnemyStartingPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SetEnemyStartingPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SetEnemyStartingPosition)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SetEnemyStartingPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enemy_player_id_ = from.enemy_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      enemy_starting_position_ = from.enemy_starting_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SetEnemyStartingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SetEnemyStartingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetEnemyStartingPosition::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetEnemyStartingPosition::InternalSwap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, enemy_starting_position_)
      + sizeof(CDOTAClientMsg_SetEnemyStartingPosition::enemy_starting_position_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, enemy_player_id_)>(
          reinterpret_cast<char*>(&enemy_player_id_),
          reinterpret_cast<char*>(&other->enemy_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SetEnemyStartingPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SetDesiredWardPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SetDesiredWardPlacement>()._has_bits_);
  static void set_has_ward_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ward_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ward_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SetDesiredWardPlacement)
}
CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement(const CDOTAClientMsg_SetDesiredWardPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ward_index_, &from.ward_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&ward_y_) -
    reinterpret_cast<char*>(&ward_index_)) + sizeof(ward_y_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetDesiredWardPlacement)
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ward_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ward_y_) -
    reinterpret_cast<char*>(&ward_index_)) + sizeof(ward_y_));
}

CDOTAClientMsg_SetDesiredWardPlacement::~CDOTAClientMsg_SetDesiredWardPlacement() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetDesiredWardPlacement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SetDesiredWardPlacement::ArenaDtor(void* object) {
  CDOTAClientMsg_SetDesiredWardPlacement* _this = reinterpret_cast< CDOTAClientMsg_SetDesiredWardPlacement* >(object);
  (void)_this;
}
void CDOTAClientMsg_SetDesiredWardPlacement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SetDesiredWardPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SetDesiredWardPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SetDesiredWardPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ward_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ward_y_) -
        reinterpret_cast<char*>(&ward_index_)) + sizeof(ward_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SetDesiredWardPlacement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ward_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ward_index(&has_bits);
          ward_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ward_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ward_x(&has_bits);
          ward_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ward_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ward_y(&has_bits);
          ward_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SetDesiredWardPlacement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetDesiredWardPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ward_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ward_index(), target);
  }

  // optional float ward_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ward_x(), target);
  }

  // optional float ward_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ward_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetDesiredWardPlacement)
  return target;
}

size_t CDOTAClientMsg_SetDesiredWardPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SetDesiredWardPlacement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ward_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ward_index());
    }

    // optional float ward_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float ward_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SetDesiredWardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetDesiredWardPlacement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SetDesiredWardPlacement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SetDesiredWardPlacement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SetDesiredWardPlacement)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SetDesiredWardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ward_index_ = from.ward_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      ward_x_ = from.ward_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      ward_y_ = from.ward_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SetDesiredWardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SetDesiredWardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetDesiredWardPlacement::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetDesiredWardPlacement::InternalSwap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_y_)
      + sizeof(CDOTAClientMsg_SetDesiredWardPlacement::ward_y_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_index_)>(
          reinterpret_cast<char*>(&ward_index_),
          reinterpret_cast<char*>(&other->ward_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SetDesiredWardPlacement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RollDice::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_RollDice>()._has_bits_);
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roll_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roll_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RollDice)
}
CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice(const CDOTAClientMsg_RollDice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_type_, &from.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_max_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(roll_max_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RollDice)
}

void CDOTAClientMsg_RollDice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_max_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(roll_max_));
}

CDOTAClientMsg_RollDice::~CDOTAClientMsg_RollDice() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RollDice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RollDice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RollDice::ArenaDtor(void* object) {
  CDOTAClientMsg_RollDice* _this = reinterpret_cast< CDOTAClientMsg_RollDice* >(object);
  (void)_this;
}
void CDOTAClientMsg_RollDice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RollDice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RollDice::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RollDice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_max_) -
        reinterpret_cast<char*>(&channel_type_)) + sizeof(roll_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RollDice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_type(&has_bits);
          channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roll_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_roll_min(&has_bits);
          roll_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roll_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_roll_max(&has_bits);
          roll_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RollDice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RollDice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_type(), target);
  }

  // optional uint32 roll_min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_roll_min(), target);
  }

  // optional uint32 roll_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roll_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RollDice)
  return target;
}

size_t CDOTAClientMsg_RollDice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RollDice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 channel_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_type());
    }

    // optional uint32 roll_min = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roll_min());
    }

    // optional uint32 roll_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roll_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RollDice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RollDice)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RollDice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RollDice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RollDice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RollDice)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RollDice::MergeFrom(const CDOTAClientMsg_RollDice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RollDice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_max_ = from.roll_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_RollDice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RollDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RollDice::CopyFrom(const CDOTAClientMsg_RollDice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RollDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RollDice::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RollDice::InternalSwap(CDOTAClientMsg_RollDice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_RollDice, roll_max_)
      + sizeof(CDOTAClientMsg_RollDice::roll_max_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_RollDice, channel_type_)>(
          reinterpret_cast<char*>(&channel_type_),
          reinterpret_cast<char*>(&other->channel_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RollDice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_FlipCoin::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_FlipCoin>()._has_bits_);
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_FlipCoin)
}
CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin(const CDOTAClientMsg_FlipCoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FlipCoin)
}

void CDOTAClientMsg_FlipCoin::SharedCtor() {
channel_type_ = 0u;
}

CDOTAClientMsg_FlipCoin::~CDOTAClientMsg_FlipCoin() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FlipCoin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_FlipCoin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_FlipCoin::ArenaDtor(void* object) {
  CDOTAClientMsg_FlipCoin* _this = reinterpret_cast< CDOTAClientMsg_FlipCoin* >(object);
  (void)_this;
}
void CDOTAClientMsg_FlipCoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_FlipCoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_FlipCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_FlipCoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_FlipCoin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_type(&has_bits);
          channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_FlipCoin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FlipCoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FlipCoin)
  return target;
}

size_t CDOTAClientMsg_FlipCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_FlipCoin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 channel_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_FlipCoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FlipCoin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_FlipCoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_FlipCoin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_FlipCoin)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const CDOTAClientMsg_FlipCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_FlipCoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel_type()) {
    _internal_set_channel_type(from._internal_channel_type());
  }
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_FlipCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const CDOTAClientMsg_FlipCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_FlipCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FlipCoin::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FlipCoin::InternalSwap(CDOTAClientMsg_FlipCoin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_type_, other->channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_FlipCoin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RequestItemSuggestions::_Internal {
 public:
};

CDOTAClientMsg_RequestItemSuggestions::CDOTAClientMsg_RequestItemSuggestions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RequestItemSuggestions)
}
CDOTAClientMsg_RequestItemSuggestions::CDOTAClientMsg_RequestItemSuggestions(const CDOTAClientMsg_RequestItemSuggestions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RequestItemSuggestions)
}

void CDOTAClientMsg_RequestItemSuggestions::SharedCtor() {
}

CDOTAClientMsg_RequestItemSuggestions::~CDOTAClientMsg_RequestItemSuggestions() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RequestItemSuggestions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RequestItemSuggestions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RequestItemSuggestions::ArenaDtor(void* object) {
  CDOTAClientMsg_RequestItemSuggestions* _this = reinterpret_cast< CDOTAClientMsg_RequestItemSuggestions* >(object);
  (void)_this;
}
void CDOTAClientMsg_RequestItemSuggestions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RequestItemSuggestions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RequestItemSuggestions::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RequestItemSuggestions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RequestItemSuggestions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RequestItemSuggestions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RequestItemSuggestions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RequestItemSuggestions)
  return target;
}

size_t CDOTAClientMsg_RequestItemSuggestions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RequestItemSuggestions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RequestItemSuggestions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestItemSuggestions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RequestItemSuggestions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RequestItemSuggestions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RequestItemSuggestions)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestItemSuggestions::MergeFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_RequestItemSuggestions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestItemSuggestions::CopyFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestItemSuggestions::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestItemSuggestions::InternalSwap(CDOTAClientMsg_RequestItemSuggestions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RequestItemSuggestions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_MakeTeamCaptain::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_MakeTeamCaptain>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_MakeTeamCaptain::CDOTAClientMsg_MakeTeamCaptain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_MakeTeamCaptain)
}
CDOTAClientMsg_MakeTeamCaptain::CDOTAClientMsg_MakeTeamCaptain(const CDOTAClientMsg_MakeTeamCaptain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MakeTeamCaptain)
}

void CDOTAClientMsg_MakeTeamCaptain::SharedCtor() {
player_id_ = 0u;
}

CDOTAClientMsg_MakeTeamCaptain::~CDOTAClientMsg_MakeTeamCaptain() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MakeTeamCaptain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_MakeTeamCaptain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_MakeTeamCaptain::ArenaDtor(void* object) {
  CDOTAClientMsg_MakeTeamCaptain* _this = reinterpret_cast< CDOTAClientMsg_MakeTeamCaptain* >(object);
  (void)_this;
}
void CDOTAClientMsg_MakeTeamCaptain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_MakeTeamCaptain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_MakeTeamCaptain::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_MakeTeamCaptain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_MakeTeamCaptain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_MakeTeamCaptain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MakeTeamCaptain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MakeTeamCaptain)
  return target;
}

size_t CDOTAClientMsg_MakeTeamCaptain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_MakeTeamCaptain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MakeTeamCaptain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_MakeTeamCaptain)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MakeTeamCaptain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_MakeTeamCaptain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_MakeTeamCaptain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_MakeTeamCaptain)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MakeTeamCaptain::MergeFrom(const CDOTAClientMsg_MakeTeamCaptain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_MakeTeamCaptain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAClientMsg_MakeTeamCaptain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_MakeTeamCaptain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MakeTeamCaptain::CopyFrom(const CDOTAClientMsg_MakeTeamCaptain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_MakeTeamCaptain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MakeTeamCaptain::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MakeTeamCaptain::InternalSwap(CDOTAClientMsg_MakeTeamCaptain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_MakeTeamCaptain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_HelpTipSystemStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_HelpTipSystemStateChanged>()._has_bits_);
  static void set_has_tip_displayed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_HelpTipSystemStateChanged::CDOTAClientMsg_HelpTipSystemStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_HelpTipSystemStateChanged)
}
CDOTAClientMsg_HelpTipSystemStateChanged::CDOTAClientMsg_HelpTipSystemStateChanged(const CDOTAClientMsg_HelpTipSystemStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tip_displayed_ = from.tip_displayed_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HelpTipSystemStateChanged)
}

void CDOTAClientMsg_HelpTipSystemStateChanged::SharedCtor() {
tip_displayed_ = false;
}

CDOTAClientMsg_HelpTipSystemStateChanged::~CDOTAClientMsg_HelpTipSystemStateChanged() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HelpTipSystemStateChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_HelpTipSystemStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_HelpTipSystemStateChanged::ArenaDtor(void* object) {
  CDOTAClientMsg_HelpTipSystemStateChanged* _this = reinterpret_cast< CDOTAClientMsg_HelpTipSystemStateChanged* >(object);
  (void)_this;
}
void CDOTAClientMsg_HelpTipSystemStateChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_HelpTipSystemStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_HelpTipSystemStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_HelpTipSystemStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tip_displayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_HelpTipSystemStateChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool tip_displayed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tip_displayed(&has_bits);
          tip_displayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_HelpTipSystemStateChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HelpTipSystemStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tip_displayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_tip_displayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HelpTipSystemStateChanged)
  return target;
}

size_t CDOTAClientMsg_HelpTipSystemStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_HelpTipSystemStateChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool tip_displayed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_HelpTipSystemStateChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_HelpTipSystemStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HelpTipSystemStateChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_HelpTipSystemStateChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_HelpTipSystemStateChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_HelpTipSystemStateChanged)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HelpTipSystemStateChanged::MergeFrom(const CDOTAClientMsg_HelpTipSystemStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_HelpTipSystemStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tip_displayed()) {
    _internal_set_tip_displayed(from._internal_tip_displayed());
  }
}

void CDOTAClientMsg_HelpTipSystemStateChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_HelpTipSystemStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HelpTipSystemStateChanged::CopyFrom(const CDOTAClientMsg_HelpTipSystemStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_HelpTipSystemStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HelpTipSystemStateChanged::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HelpTipSystemStateChanged::InternalSwap(CDOTAClientMsg_HelpTipSystemStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tip_displayed_, other->tip_displayed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_HelpTipSystemStateChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RequestBulkCombatLog::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_RequestBulkCombatLog>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recent_player_death(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAClientMsg_RequestBulkCombatLog::CDOTAClientMsg_RequestBulkCombatLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RequestBulkCombatLog)
}
CDOTAClientMsg_RequestBulkCombatLog::CDOTAClientMsg_RequestBulkCombatLog(const CDOTAClientMsg_RequestBulkCombatLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RequestBulkCombatLog)
}

void CDOTAClientMsg_RequestBulkCombatLog::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(player_id_));
}

CDOTAClientMsg_RequestBulkCombatLog::~CDOTAClientMsg_RequestBulkCombatLog() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RequestBulkCombatLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RequestBulkCombatLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RequestBulkCombatLog::ArenaDtor(void* object) {
  CDOTAClientMsg_RequestBulkCombatLog* _this = reinterpret_cast< CDOTAClientMsg_RequestBulkCombatLog* >(object);
  (void)_this;
}
void CDOTAClientMsg_RequestBulkCombatLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RequestBulkCombatLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RequestBulkCombatLog::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RequestBulkCombatLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_id_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RequestBulkCombatLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool recent_player_death = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_recent_player_death(&has_bits);
          recent_player_death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RequestBulkCombatLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RequestBulkCombatLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_game_time(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional bool recent_player_death = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_recent_player_death(), target);
  }

  // optional int32 player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RequestBulkCombatLog)
  return target;
}

size_t CDOTAClientMsg_RequestBulkCombatLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RequestBulkCombatLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float game_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool recent_player_death = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RequestBulkCombatLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RequestBulkCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestBulkCombatLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RequestBulkCombatLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RequestBulkCombatLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RequestBulkCombatLog)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestBulkCombatLog::MergeFrom(const CDOTAClientMsg_RequestBulkCombatLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RequestBulkCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      recent_player_death_ = from.recent_player_death_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_RequestBulkCombatLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RequestBulkCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestBulkCombatLog::CopyFrom(const CDOTAClientMsg_RequestBulkCombatLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RequestBulkCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestBulkCombatLog::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestBulkCombatLog::InternalSwap(CDOTAClientMsg_RequestBulkCombatLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_RequestBulkCombatLog, player_id_)
      + sizeof(CDOTAClientMsg_RequestBulkCombatLog::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_RequestBulkCombatLog, game_time_)>(
          reinterpret_cast<char*>(&game_time_),
          reinterpret_cast<char*>(&other->game_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RequestBulkCombatLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_AbilityDraftRequestAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_AbilityDraftRequestAbility>()._has_bits_);
  static void set_has_requested_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ctrl_is_down(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_AbilityDraftRequestAbility::CDOTAClientMsg_AbilityDraftRequestAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_AbilityDraftRequestAbility)
}
CDOTAClientMsg_AbilityDraftRequestAbility::CDOTAClientMsg_AbilityDraftRequestAbility(const CDOTAClientMsg_AbilityDraftRequestAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requested_ability_id_, &from.requested_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctrl_is_down_) -
    reinterpret_cast<char*>(&requested_ability_id_)) + sizeof(ctrl_is_down_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AbilityDraftRequestAbility)
}

void CDOTAClientMsg_AbilityDraftRequestAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requested_ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ctrl_is_down_) -
    reinterpret_cast<char*>(&requested_ability_id_)) + sizeof(ctrl_is_down_));
}

CDOTAClientMsg_AbilityDraftRequestAbility::~CDOTAClientMsg_AbilityDraftRequestAbility() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AbilityDraftRequestAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_AbilityDraftRequestAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_AbilityDraftRequestAbility::ArenaDtor(void* object) {
  CDOTAClientMsg_AbilityDraftRequestAbility* _this = reinterpret_cast< CDOTAClientMsg_AbilityDraftRequestAbility* >(object);
  (void)_this;
}
void CDOTAClientMsg_AbilityDraftRequestAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_AbilityDraftRequestAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_AbilityDraftRequestAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_AbilityDraftRequestAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&requested_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctrl_is_down_) -
        reinterpret_cast<char*>(&requested_ability_id_)) + sizeof(ctrl_is_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_AbilityDraftRequestAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 requested_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requested_ability_id(&has_bits);
          requested_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ctrl_is_down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ctrl_is_down(&has_bits);
          ctrl_is_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_AbilityDraftRequestAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AbilityDraftRequestAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 requested_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requested_ability_id(), target);
  }

  // optional bool ctrl_is_down = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ctrl_is_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AbilityDraftRequestAbility)
  return target;
}

size_t CDOTAClientMsg_AbilityDraftRequestAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_AbilityDraftRequestAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 requested_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_requested_ability_id());
    }

    // optional bool ctrl_is_down = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_AbilityDraftRequestAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_AbilityDraftRequestAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_AbilityDraftRequestAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_AbilityDraftRequestAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_AbilityDraftRequestAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_AbilityDraftRequestAbility)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AbilityDraftRequestAbility::MergeFrom(const CDOTAClientMsg_AbilityDraftRequestAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_AbilityDraftRequestAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requested_ability_id_ = from.requested_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ctrl_is_down_ = from.ctrl_is_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_AbilityDraftRequestAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_AbilityDraftRequestAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AbilityDraftRequestAbility::CopyFrom(const CDOTAClientMsg_AbilityDraftRequestAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_AbilityDraftRequestAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AbilityDraftRequestAbility::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_AbilityDraftRequestAbility::InternalSwap(CDOTAClientMsg_AbilityDraftRequestAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_AbilityDraftRequestAbility, ctrl_is_down_)
      + sizeof(CDOTAClientMsg_AbilityDraftRequestAbility::ctrl_is_down_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_AbilityDraftRequestAbility, requested_ability_id_)>(
          reinterpret_cast<char*>(&requested_ability_id_),
          reinterpret_cast<char*>(&other->requested_ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_AbilityDraftRequestAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_GuideSelectOption::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_GuideSelectOption>()._has_bits_);
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_recalculate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_GuideSelectOption)
}
CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(const CDOTAClientMsg_GuideSelectOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&option_, &from.option_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_recalculate_) -
    reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GuideSelectOption)
}

void CDOTAClientMsg_GuideSelectOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&option_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_recalculate_) -
    reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
}

CDOTAClientMsg_GuideSelectOption::~CDOTAClientMsg_GuideSelectOption() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GuideSelectOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_GuideSelectOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_GuideSelectOption::ArenaDtor(void* object) {
  CDOTAClientMsg_GuideSelectOption* _this = reinterpret_cast< CDOTAClientMsg_GuideSelectOption* >(object);
  (void)_this;
}
void CDOTAClientMsg_GuideSelectOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_GuideSelectOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_GuideSelectOption::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_GuideSelectOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_recalculate_) -
        reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_GuideSelectOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_option(&has_bits);
          option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_recalculate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_force_recalculate(&has_bits);
          force_recalculate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_GuideSelectOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GuideSelectOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 option = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_option(), target);
  }

  // optional bool force_recalculate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force_recalculate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GuideSelectOption)
  return target;
}

size_t CDOTAClientMsg_GuideSelectOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_GuideSelectOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 option = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_option());
    }

    // optional bool force_recalculate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GuideSelectOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_GuideSelectOption)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GuideSelectOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_GuideSelectOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_GuideSelectOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_GuideSelectOption)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GuideSelectOption::MergeFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_GuideSelectOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      option_ = from.option_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_recalculate_ = from.force_recalculate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_GuideSelectOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_GuideSelectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GuideSelectOption::CopyFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_GuideSelectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelectOption::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelectOption::InternalSwap(CDOTAClientMsg_GuideSelectOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelectOption, force_recalculate_)
      + sizeof(CDOTAClientMsg_GuideSelectOption::force_recalculate_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelectOption, option_)>(
          reinterpret_cast<char*>(&option_),
          reinterpret_cast<char*>(&other->option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_GuideSelectOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_GuideSelected::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_GuideSelected>()._has_bits_);
  static void set_has_guide_workshop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_plus_guide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_GuideSelected)
}
CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(const CDOTAClientMsg_GuideSelected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guide_workshop_id_, &from.guide_workshop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_plus_guide_) -
    reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GuideSelected)
}

void CDOTAClientMsg_GuideSelected::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guide_workshop_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_plus_guide_) -
    reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
}

CDOTAClientMsg_GuideSelected::~CDOTAClientMsg_GuideSelected() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GuideSelected)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_GuideSelected::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_GuideSelected::ArenaDtor(void* object) {
  CDOTAClientMsg_GuideSelected* _this = reinterpret_cast< CDOTAClientMsg_GuideSelected* >(object);
  (void)_this;
}
void CDOTAClientMsg_GuideSelected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_GuideSelected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_GuideSelected::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_GuideSelected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guide_workshop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_plus_guide_) -
        reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_GuideSelected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guide_workshop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guide_workshop_id(&has_bits);
          guide_workshop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_plus_guide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_plus_guide(&has_bits);
          is_plus_guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_GuideSelected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GuideSelected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guide_workshop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guide_workshop_id(), target);
  }

  // optional bool is_plus_guide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_plus_guide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GuideSelected)
  return target;
}

size_t CDOTAClientMsg_GuideSelected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_GuideSelected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 guide_workshop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guide_workshop_id());
    }

    // optional bool is_plus_guide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GuideSelected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_GuideSelected)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GuideSelected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_GuideSelected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_GuideSelected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_GuideSelected)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GuideSelected::MergeFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_GuideSelected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guide_workshop_id_ = from.guide_workshop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_plus_guide_ = from.is_plus_guide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_GuideSelected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_GuideSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GuideSelected::CopyFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_GuideSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelected::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelected::InternalSwap(CDOTAClientMsg_GuideSelected* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelected, is_plus_guide_)
      + sizeof(CDOTAClientMsg_GuideSelected::is_plus_guide_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelected, guide_workshop_id_)>(
          reinterpret_cast<char*>(&guide_workshop_id_),
          reinterpret_cast<char*>(&other->guide_workshop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_GuideSelected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_DamageReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_DamageReport>()._has_bits_);
  static void set_has_target_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAClientMsg_DamageReport::CDOTAClientMsg_DamageReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_DamageReport)
}
CDOTAClientMsg_DamageReport::CDOTAClientMsg_DamageReport(const CDOTAClientMsg_DamageReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_hero_id_, &from.target_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&target_hero_id_)) + sizeof(broadcast_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_DamageReport)
}

void CDOTAClientMsg_DamageReport::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&target_hero_id_)) + sizeof(broadcast_));
}

CDOTAClientMsg_DamageReport::~CDOTAClientMsg_DamageReport() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_DamageReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_DamageReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_DamageReport::ArenaDtor(void* object) {
  CDOTAClientMsg_DamageReport* _this = reinterpret_cast< CDOTAClientMsg_DamageReport* >(object);
  (void)_this;
}
void CDOTAClientMsg_DamageReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_DamageReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_DamageReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_DamageReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&target_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_) -
        reinterpret_cast<char*>(&target_hero_id_)) + sizeof(broadcast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_DamageReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_hero_id(&has_bits);
          target_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_hero_id(&has_bits);
          source_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 damage_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_damage_amount(&has_bits);
          damage_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_broadcast(&has_bits);
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_DamageReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_DamageReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_hero_id(), target);
  }

  // optional uint32 source_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_hero_id(), target);
  }

  // optional int32 damage_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_damage_amount(), target);
  }

  // optional bool broadcast = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_DamageReport)
  return target;
}

size_t CDOTAClientMsg_DamageReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_DamageReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 target_hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_hero_id());
    }

    // optional uint32 source_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_hero_id());
    }

    // optional int32 damage_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_damage_amount());
    }

    // optional bool broadcast = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_DamageReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_DamageReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DamageReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_DamageReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_DamageReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_DamageReport)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DamageReport::MergeFrom(const CDOTAClientMsg_DamageReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_DamageReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      target_hero_id_ = from.target_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_hero_id_ = from.source_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      damage_amount_ = from.damage_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_DamageReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_DamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DamageReport::CopyFrom(const CDOTAClientMsg_DamageReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_DamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DamageReport::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DamageReport::InternalSwap(CDOTAClientMsg_DamageReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_DamageReport, broadcast_)
      + sizeof(CDOTAClientMsg_DamageReport::broadcast_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_DamageReport, target_hero_id_)>(
          reinterpret_cast<char*>(&target_hero_id_),
          reinterpret_cast<char*>(&other->target_hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_DamageReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SalutePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SalutePlayer>()._has_bits_);
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_SalutePlayer::CDOTAClientMsg_SalutePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SalutePlayer)
}
CDOTAClientMsg_SalutePlayer::CDOTAClientMsg_SalutePlayer(const CDOTAClientMsg_SalutePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_player_id_, &from.target_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&target_player_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SalutePlayer)
}

void CDOTAClientMsg_SalutePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&target_player_id_)) + sizeof(event_id_));
}

CDOTAClientMsg_SalutePlayer::~CDOTAClientMsg_SalutePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SalutePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SalutePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SalutePlayer::ArenaDtor(void* object) {
  CDOTAClientMsg_SalutePlayer* _this = reinterpret_cast< CDOTAClientMsg_SalutePlayer* >(object);
  (void)_this;
}
void CDOTAClientMsg_SalutePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SalutePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SalutePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SalutePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&target_player_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SalutePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 target_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SalutePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SalutePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_player_id(), target);
  }

  // optional int32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SalutePlayer)
  return target;
}

size_t CDOTAClientMsg_SalutePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SalutePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 target_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_player_id());
    }

    // optional int32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SalutePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SalutePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SalutePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SalutePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SalutePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SalutePlayer)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SalutePlayer::MergeFrom(const CDOTAClientMsg_SalutePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SalutePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SalutePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SalutePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SalutePlayer::CopyFrom(const CDOTAClientMsg_SalutePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SalutePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SalutePlayer::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SalutePlayer::InternalSwap(CDOTAClientMsg_SalutePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SalutePlayer, event_id_)
      + sizeof(CDOTAClientMsg_SalutePlayer::event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_SalutePlayer, target_player_id_)>(
          reinterpret_cast<char*>(&target_player_id_),
          reinterpret_cast<char*>(&other->target_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SalutePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_TipAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_TipAlert>()._has_bits_);
  static void set_has_tip_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_TipAlert)
}
CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(const CDOTAClientMsg_TipAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tip_text()) {
    tip_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TipAlert)
}

void CDOTAClientMsg_TipAlert::SharedCtor() {
tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_TipAlert::~CDOTAClientMsg_TipAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TipAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_TipAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tip_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_TipAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_TipAlert* _this = reinterpret_cast< CDOTAClientMsg_TipAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_TipAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_TipAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_TipAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_TipAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tip_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_TipAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tip_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tip_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_TipAlert.tip_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_TipAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TipAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tip_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_text().data(), static_cast<int>(this->_internal_tip_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_TipAlert.tip_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tip_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TipAlert)
  return target;
}

size_t CDOTAClientMsg_TipAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_TipAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tip_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tip_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_TipAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_TipAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_TipAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_TipAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_TipAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TipAlert::MergeFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tip_text()) {
    _internal_set_tip_text(from._internal_tip_text());
  }
}

void CDOTAClientMsg_TipAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TipAlert::CopyFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TipAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TipAlert::InternalSwap(CDOTAClientMsg_TipAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tip_text_.Swap(&other->tip_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_TipAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_EmptyTeleportAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EmptyTeleportAlert>()._has_bits_);
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_EmptyTeleportAlert::CDOTAClientMsg_EmptyTeleportAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EmptyTeleportAlert)
}
CDOTAClientMsg_EmptyTeleportAlert::CDOTAClientMsg_EmptyTeleportAlert(const CDOTAClientMsg_EmptyTeleportAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_entindex_ = from.target_entindex_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EmptyTeleportAlert)
}

void CDOTAClientMsg_EmptyTeleportAlert::SharedCtor() {
target_entindex_ = 0;
}

CDOTAClientMsg_EmptyTeleportAlert::~CDOTAClientMsg_EmptyTeleportAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EmptyTeleportAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_EmptyTeleportAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_EmptyTeleportAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_EmptyTeleportAlert* _this = reinterpret_cast< CDOTAClientMsg_EmptyTeleportAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_EmptyTeleportAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EmptyTeleportAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EmptyTeleportAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EmptyTeleportAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_entindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EmptyTeleportAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 target_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_EmptyTeleportAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EmptyTeleportAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EmptyTeleportAlert)
  return target;
}

size_t CDOTAClientMsg_EmptyTeleportAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EmptyTeleportAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 target_entindex = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_entindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EmptyTeleportAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_EmptyTeleportAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EmptyTeleportAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_EmptyTeleportAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_EmptyTeleportAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_EmptyTeleportAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EmptyTeleportAlert::MergeFrom(const CDOTAClientMsg_EmptyTeleportAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EmptyTeleportAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_entindex()) {
    _internal_set_target_entindex(from._internal_target_entindex());
  }
}

void CDOTAClientMsg_EmptyTeleportAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_EmptyTeleportAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EmptyTeleportAlert::CopyFrom(const CDOTAClientMsg_EmptyTeleportAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EmptyTeleportAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EmptyTeleportAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EmptyTeleportAlert::InternalSwap(CDOTAClientMsg_EmptyTeleportAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_entindex_, other->target_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EmptyTeleportAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_SetCavernMapVariant::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_SetCavernMapVariant>()._has_bits_);
  static void set_has_map_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_SetCavernMapVariant::CDOTAClientMsg_SetCavernMapVariant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_SetCavernMapVariant)
}
CDOTAClientMsg_SetCavernMapVariant::CDOTAClientMsg_SetCavernMapVariant(const CDOTAClientMsg_SetCavernMapVariant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_variant_ = from.map_variant_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetCavernMapVariant)
}

void CDOTAClientMsg_SetCavernMapVariant::SharedCtor() {
map_variant_ = 0u;
}

CDOTAClientMsg_SetCavernMapVariant::~CDOTAClientMsg_SetCavernMapVariant() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetCavernMapVariant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_SetCavernMapVariant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_SetCavernMapVariant::ArenaDtor(void* object) {
  CDOTAClientMsg_SetCavernMapVariant* _this = reinterpret_cast< CDOTAClientMsg_SetCavernMapVariant* >(object);
  (void)_this;
}
void CDOTAClientMsg_SetCavernMapVariant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_SetCavernMapVariant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_SetCavernMapVariant::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_SetCavernMapVariant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_variant_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_SetCavernMapVariant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 map_variant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_map_variant(&has_bits);
          map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_SetCavernMapVariant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetCavernMapVariant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 map_variant = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_map_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetCavernMapVariant)
  return target;
}

size_t CDOTAClientMsg_SetCavernMapVariant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_SetCavernMapVariant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 map_variant = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_map_variant());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SetCavernMapVariant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_SetCavernMapVariant)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetCavernMapVariant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_SetCavernMapVariant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_SetCavernMapVariant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_SetCavernMapVariant)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetCavernMapVariant::MergeFrom(const CDOTAClientMsg_SetCavernMapVariant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_SetCavernMapVariant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_map_variant()) {
    _internal_set_map_variant(from._internal_map_variant());
  }
}

void CDOTAClientMsg_SetCavernMapVariant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_SetCavernMapVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetCavernMapVariant::CopyFrom(const CDOTAClientMsg_SetCavernMapVariant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_SetCavernMapVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetCavernMapVariant::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetCavernMapVariant::InternalSwap(CDOTAClientMsg_SetCavernMapVariant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(map_variant_, other->map_variant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_SetCavernMapVariant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_PauseGameOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_PauseGameOrder>()._has_bits_);
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_PauseGameOrder::CDOTAClientMsg_PauseGameOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_PauseGameOrder)
}
CDOTAClientMsg_PauseGameOrder::CDOTAClientMsg_PauseGameOrder(const CDOTAClientMsg_PauseGameOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&order_id_, &from.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PauseGameOrder)
}

void CDOTAClientMsg_PauseGameOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&order_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(data_));
}

CDOTAClientMsg_PauseGameOrder::~CDOTAClientMsg_PauseGameOrder() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PauseGameOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_PauseGameOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_PauseGameOrder::ArenaDtor(void* object) {
  CDOTAClientMsg_PauseGameOrder* _this = reinterpret_cast< CDOTAClientMsg_PauseGameOrder* >(object);
  (void)_this;
}
void CDOTAClientMsg_PauseGameOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_PauseGameOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_PauseGameOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_PauseGameOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&order_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_) -
        reinterpret_cast<char*>(&order_id_)) + sizeof(data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_PauseGameOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_order_id(&has_bits);
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_PauseGameOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PauseGameOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order_id(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PauseGameOrder)
  return target;
}

size_t CDOTAClientMsg_PauseGameOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_PauseGameOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 order_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_order_id());
    }

    // optional int32 data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_PauseGameOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_PauseGameOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_PauseGameOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_PauseGameOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_PauseGameOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_PauseGameOrder)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PauseGameOrder::MergeFrom(const CDOTAClientMsg_PauseGameOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_PauseGameOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      order_id_ = from.order_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_PauseGameOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_PauseGameOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PauseGameOrder::CopyFrom(const CDOTAClientMsg_PauseGameOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_PauseGameOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PauseGameOrder::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_PauseGameOrder::InternalSwap(CDOTAClientMsg_PauseGameOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_PauseGameOrder, data_)
      + sizeof(CDOTAClientMsg_PauseGameOrder::data_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_PauseGameOrder, order_id_)>(
          reinterpret_cast<char*>(&order_id_),
          reinterpret_cast<char*>(&other->order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_PauseGameOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_VersusScene_PlayerBehavior::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_VersusScene_PlayerBehavior>()._has_bits_);
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::VersusScene_PlayActivity& play_activity(const CDOTAClientMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_play_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::VersusScene_ChatWheel& chat_wheel(const CDOTAClientMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_chat_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::VersusScene_PlaybackRate& playback_rate(const CDOTAClientMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::VersusScene_PlayActivity&
CDOTAClientMsg_VersusScene_PlayerBehavior::_Internal::play_activity(const CDOTAClientMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->play_activity_;
}
const ::VersusScene_ChatWheel&
CDOTAClientMsg_VersusScene_PlayerBehavior::_Internal::chat_wheel(const CDOTAClientMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->chat_wheel_;
}
const ::VersusScene_PlaybackRate&
CDOTAClientMsg_VersusScene_PlayerBehavior::_Internal::playback_rate(const CDOTAClientMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->playback_rate_;
}
void CDOTAClientMsg_VersusScene_PlayerBehavior::clear_play_activity() {
  if (play_activity_ != nullptr) play_activity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_VersusScene_PlayerBehavior::clear_chat_wheel() {
  if (chat_wheel_ != nullptr) chat_wheel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_VersusScene_PlayerBehavior::clear_playback_rate() {
  if (playback_rate_ != nullptr) playback_rate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CDOTAClientMsg_VersusScene_PlayerBehavior::CDOTAClientMsg_VersusScene_PlayerBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_VersusScene_PlayerBehavior)
}
CDOTAClientMsg_VersusScene_PlayerBehavior::CDOTAClientMsg_VersusScene_PlayerBehavior(const CDOTAClientMsg_VersusScene_PlayerBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_play_activity()) {
    play_activity_ = new ::VersusScene_PlayActivity(*from.play_activity_);
  } else {
    play_activity_ = nullptr;
  }
  if (from._internal_has_chat_wheel()) {
    chat_wheel_ = new ::VersusScene_ChatWheel(*from.chat_wheel_);
  } else {
    chat_wheel_ = nullptr;
  }
  if (from._internal_has_playback_rate()) {
    playback_rate_ = new ::VersusScene_PlaybackRate(*from.playback_rate_);
  } else {
    playback_rate_ = nullptr;
  }
  behavior_ = from.behavior_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_VersusScene_PlayerBehavior)
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&play_activity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playback_rate_) -
    reinterpret_cast<char*>(&play_activity_)) + sizeof(playback_rate_));
behavior_ = 1;
}

CDOTAClientMsg_VersusScene_PlayerBehavior::~CDOTAClientMsg_VersusScene_PlayerBehavior() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_VersusScene_PlayerBehavior)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete play_activity_;
  if (this != internal_default_instance()) delete chat_wheel_;
  if (this != internal_default_instance()) delete playback_rate_;
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::ArenaDtor(void* object) {
  CDOTAClientMsg_VersusScene_PlayerBehavior* _this = reinterpret_cast< CDOTAClientMsg_VersusScene_PlayerBehavior* >(object);
  (void)_this;
}
void CDOTAClientMsg_VersusScene_PlayerBehavior::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_VersusScene_PlayerBehavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_VersusScene_PlayerBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(play_activity_ != nullptr);
      play_activity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chat_wheel_ != nullptr);
      chat_wheel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(playback_rate_ != nullptr);
      playback_rate_->Clear();
    }
    behavior_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_VersusScene_PlayerBehavior::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EDOTAVersusScenePlayerBehavior behavior = 1 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAVersusScenePlayerBehavior_IsValid(val))) {
            _internal_set_behavior(static_cast<::EDOTAVersusScenePlayerBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .VersusScene_PlayActivity play_activity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_play_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .VersusScene_ChatWheel chat_wheel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .VersusScene_PlaybackRate playback_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_playback_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_VersusScene_PlayerBehavior::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_VersusScene_PlayerBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EDOTAVersusScenePlayerBehavior behavior = 1 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_behavior(), target);
  }

  // optional .VersusScene_PlayActivity play_activity = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::play_activity(this), target, stream);
  }

  // optional .VersusScene_ChatWheel chat_wheel = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chat_wheel(this), target, stream);
  }

  // optional .VersusScene_PlaybackRate playback_rate = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::playback_rate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_VersusScene_PlayerBehavior)
  return target;
}

size_t CDOTAClientMsg_VersusScene_PlayerBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_VersusScene_PlayerBehavior)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .VersusScene_PlayActivity play_activity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *play_activity_);
    }

    // optional .VersusScene_ChatWheel chat_wheel = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chat_wheel_);
    }

    // optional .VersusScene_PlaybackRate playback_rate = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playback_rate_);
    }

    // optional .EDOTAVersusScenePlayerBehavior behavior = 1 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_VersusScene_PlayerBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_VersusScene_PlayerBehavior* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_VersusScene_PlayerBehavior>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_VersusScene_PlayerBehavior)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_VersusScene_PlayerBehavior)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::MergeFrom(const CDOTAClientMsg_VersusScene_PlayerBehavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_VersusScene_PlayerBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_play_activity()->::VersusScene_PlayActivity::MergeFrom(from._internal_play_activity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chat_wheel()->::VersusScene_ChatWheel::MergeFrom(from._internal_chat_wheel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_playback_rate()->::VersusScene_PlaybackRate::MergeFrom(from._internal_playback_rate());
    }
    if (cached_has_bits & 0x00000008u) {
      behavior_ = from.behavior_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_VersusScene_PlayerBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::CopyFrom(const CDOTAClientMsg_VersusScene_PlayerBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_VersusScene_PlayerBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_VersusScene_PlayerBehavior::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_VersusScene_PlayerBehavior::InternalSwap(CDOTAClientMsg_VersusScene_PlayerBehavior* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_VersusScene_PlayerBehavior, playback_rate_)
      + sizeof(CDOTAClientMsg_VersusScene_PlayerBehavior::playback_rate_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_VersusScene_PlayerBehavior, play_activity_)>(
          reinterpret_cast<char*>(&play_activity_),
          reinterpret_cast<char*>(&other->play_activity_));
  swap(behavior_, other->behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_VersusScene_PlayerBehavior::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_EmptyItemSlotAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EmptyItemSlotAlert>()._has_bits_);
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_EmptyItemSlotAlert::CDOTAClientMsg_EmptyItemSlotAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EmptyItemSlotAlert)
}
CDOTAClientMsg_EmptyItemSlotAlert::CDOTAClientMsg_EmptyItemSlotAlert(const CDOTAClientMsg_EmptyItemSlotAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(slot_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EmptyItemSlotAlert)
}

void CDOTAClientMsg_EmptyItemSlotAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(slot_index_));
}

CDOTAClientMsg_EmptyItemSlotAlert::~CDOTAClientMsg_EmptyItemSlotAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EmptyItemSlotAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_EmptyItemSlotAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_EmptyItemSlotAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_EmptyItemSlotAlert* _this = reinterpret_cast< CDOTAClientMsg_EmptyItemSlotAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_EmptyItemSlotAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EmptyItemSlotAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EmptyItemSlotAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EmptyItemSlotAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_index_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(slot_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EmptyItemSlotAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 target_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_index(&has_bits);
          slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_EmptyItemSlotAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EmptyItemSlotAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_entindex(), target);
  }

  // optional int32 slot_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EmptyItemSlotAlert)
  return target;
}

size_t CDOTAClientMsg_EmptyItemSlotAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EmptyItemSlotAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 target_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_entindex());
    }

    // optional int32 slot_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EmptyItemSlotAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_EmptyItemSlotAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EmptyItemSlotAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_EmptyItemSlotAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_EmptyItemSlotAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_EmptyItemSlotAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EmptyItemSlotAlert::MergeFrom(const CDOTAClientMsg_EmptyItemSlotAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EmptyItemSlotAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_index_ = from.slot_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_EmptyItemSlotAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_EmptyItemSlotAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EmptyItemSlotAlert::CopyFrom(const CDOTAClientMsg_EmptyItemSlotAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EmptyItemSlotAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EmptyItemSlotAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EmptyItemSlotAlert::InternalSwap(CDOTAClientMsg_EmptyItemSlotAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_EmptyItemSlotAlert, slot_index_)
      + sizeof(CDOTAClientMsg_EmptyItemSlotAlert::slot_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_EmptyItemSlotAlert, target_entindex_)>(
          reinterpret_cast<char*>(&target_entindex_),
          reinterpret_cast<char*>(&other->target_entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EmptyItemSlotAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_AddOverwatchReportMarker::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_AddOverwatchReportMarker>()._has_bits_);
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_ago(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_AddOverwatchReportMarker::CDOTAClientMsg_AddOverwatchReportMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_AddOverwatchReportMarker)
}
CDOTAClientMsg_AddOverwatchReportMarker::CDOTAClientMsg_AddOverwatchReportMarker(const CDOTAClientMsg_AddOverwatchReportMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_player_id_, &from.target_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_ago_) -
    reinterpret_cast<char*>(&target_player_id_)) + sizeof(seconds_ago_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AddOverwatchReportMarker)
}

void CDOTAClientMsg_AddOverwatchReportMarker::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_ago_) -
    reinterpret_cast<char*>(&target_player_id_)) + sizeof(seconds_ago_));
}

CDOTAClientMsg_AddOverwatchReportMarker::~CDOTAClientMsg_AddOverwatchReportMarker() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AddOverwatchReportMarker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_AddOverwatchReportMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_AddOverwatchReportMarker::ArenaDtor(void* object) {
  CDOTAClientMsg_AddOverwatchReportMarker* _this = reinterpret_cast< CDOTAClientMsg_AddOverwatchReportMarker* >(object);
  (void)_this;
}
void CDOTAClientMsg_AddOverwatchReportMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_AddOverwatchReportMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_AddOverwatchReportMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_AddOverwatchReportMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&target_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_ago_) -
        reinterpret_cast<char*>(&target_player_id_)) + sizeof(seconds_ago_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_AddOverwatchReportMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 target_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EOverwatchReportReason reason = 2 [default = k_EOverwatchReportReason_Unknown];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EOverwatchReportReason_IsValid(val))) {
            _internal_set_reason(static_cast<::EOverwatchReportReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_ago = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seconds_ago(&has_bits);
          seconds_ago_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_AddOverwatchReportMarker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AddOverwatchReportMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_player_id(), target);
  }

  // optional .EOverwatchReportReason reason = 2 [default = k_EOverwatchReportReason_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // optional uint32 seconds_ago = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seconds_ago(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AddOverwatchReportMarker)
  return target;
}

size_t CDOTAClientMsg_AddOverwatchReportMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_AddOverwatchReportMarker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 target_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_player_id());
    }

    // optional .EOverwatchReportReason reason = 2 [default = k_EOverwatchReportReason_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

    // optional uint32 seconds_ago = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_ago());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_AddOverwatchReportMarker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_AddOverwatchReportMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_AddOverwatchReportMarker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_AddOverwatchReportMarker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_AddOverwatchReportMarker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_AddOverwatchReportMarker)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AddOverwatchReportMarker::MergeFrom(const CDOTAClientMsg_AddOverwatchReportMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_AddOverwatchReportMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_ago_ = from.seconds_ago_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_AddOverwatchReportMarker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_AddOverwatchReportMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AddOverwatchReportMarker::CopyFrom(const CDOTAClientMsg_AddOverwatchReportMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_AddOverwatchReportMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AddOverwatchReportMarker::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_AddOverwatchReportMarker::InternalSwap(CDOTAClientMsg_AddOverwatchReportMarker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_AddOverwatchReportMarker, seconds_ago_)
      + sizeof(CDOTAClientMsg_AddOverwatchReportMarker::seconds_ago_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_AddOverwatchReportMarker, target_player_id_)>(
          reinterpret_cast<char*>(&target_player_id_),
          reinterpret_cast<char*>(&other->target_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_AddOverwatchReportMarker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_AghsStatusAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_AghsStatusAlert>()._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alert_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAClientMsg_AghsStatusAlert::CDOTAClientMsg_AghsStatusAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_AghsStatusAlert)
}
CDOTAClientMsg_AghsStatusAlert::CDOTAClientMsg_AghsStatusAlert(const CDOTAClientMsg_AghsStatusAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_player_id_, &from.source_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&alert_type_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(alert_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AghsStatusAlert)
}

void CDOTAClientMsg_AghsStatusAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alert_type_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(alert_type_));
}

CDOTAClientMsg_AghsStatusAlert::~CDOTAClientMsg_AghsStatusAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AghsStatusAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_AghsStatusAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_AghsStatusAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_AghsStatusAlert* _this = reinterpret_cast< CDOTAClientMsg_AghsStatusAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_AghsStatusAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_AghsStatusAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_AghsStatusAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_AghsStatusAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alert_type_) -
        reinterpret_cast<char*>(&source_player_id_)) + sizeof(alert_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_AghsStatusAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 alert_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_alert_type(&has_bits);
          alert_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_AghsStatusAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AghsStatusAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional uint32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional uint32 target_entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_entindex(), target);
  }

  // optional uint32 alert_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_alert_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AghsStatusAlert)
  return target;
}

size_t CDOTAClientMsg_AghsStatusAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_AghsStatusAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 source_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_player_id());
    }

    // optional uint32 target_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_player_id());
    }

    // optional uint32 target_entindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional uint32 alert_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_alert_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_AghsStatusAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_AghsStatusAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_AghsStatusAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_AghsStatusAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_AghsStatusAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_AghsStatusAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AghsStatusAlert::MergeFrom(const CDOTAClientMsg_AghsStatusAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_AghsStatusAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_player_id_ = from.source_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      alert_type_ = from.alert_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_AghsStatusAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_AghsStatusAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AghsStatusAlert::CopyFrom(const CDOTAClientMsg_AghsStatusAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_AghsStatusAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AghsStatusAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_AghsStatusAlert::InternalSwap(CDOTAClientMsg_AghsStatusAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_AghsStatusAlert, alert_type_)
      + sizeof(CDOTAClientMsg_AghsStatusAlert::alert_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_AghsStatusAlert, source_player_id_)>(
          reinterpret_cast<char*>(&source_player_id_),
          reinterpret_cast<char*>(&other->source_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_AghsStatusAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_PerfReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_PerfReport>()._has_bits_);
  static void set_has_average_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_average_compute_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_compute_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_average_client_tick_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_client_tick_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_average_client_simulate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_client_simulate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_average_output_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_output_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_average_wait_for_rendering_to_complete_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_wait_for_rendering_to_complete_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_average_swap_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_swap_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_average_frame_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_frame_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_average_idle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_idle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_average_input_processing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_input_processing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

CDOTAClientMsg_PerfReport::CDOTAClientMsg_PerfReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_PerfReport)
}
CDOTAClientMsg_PerfReport::CDOTAClientMsg_PerfReport(const CDOTAClientMsg_PerfReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_frame_time_, &from.average_frame_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_input_processing_time_) -
    reinterpret_cast<char*>(&average_frame_time_)) + sizeof(max_input_processing_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PerfReport)
}

void CDOTAClientMsg_PerfReport::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_frame_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_input_processing_time_) -
    reinterpret_cast<char*>(&average_frame_time_)) + sizeof(max_input_processing_time_));
}

CDOTAClientMsg_PerfReport::~CDOTAClientMsg_PerfReport() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PerfReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_PerfReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_PerfReport::ArenaDtor(void* object) {
  CDOTAClientMsg_PerfReport* _this = reinterpret_cast< CDOTAClientMsg_PerfReport* >(object);
  (void)_this;
}
void CDOTAClientMsg_PerfReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_PerfReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_PerfReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_PerfReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&average_frame_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_client_simulate_time_) -
        reinterpret_cast<char*>(&average_frame_time_)) + sizeof(max_client_simulate_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&average_output_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_frame_update_time_) -
        reinterpret_cast<char*>(&average_output_time_)) + sizeof(max_frame_update_time_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&average_idle_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_input_processing_time_) -
        reinterpret_cast<char*>(&average_idle_time_)) + sizeof(max_input_processing_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_PerfReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float average_frame_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_average_frame_time(&has_bits);
          average_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_frame_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_frame_time(&has_bits);
          max_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_compute_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_average_compute_time(&has_bits);
          average_compute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_compute_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max_compute_time(&has_bits);
          max_compute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_client_tick_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_average_client_tick_time(&has_bits);
          average_client_tick_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_client_tick_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_max_client_tick_time(&has_bits);
          max_client_tick_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_client_simulate_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_average_client_simulate_time(&has_bits);
          average_client_simulate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_client_simulate_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_max_client_simulate_time(&has_bits);
          max_client_simulate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_output_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_average_output_time(&has_bits);
          average_output_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_output_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_max_output_time(&has_bits);
          max_output_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_wait_for_rendering_to_complete_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_average_wait_for_rendering_to_complete_time(&has_bits);
          average_wait_for_rendering_to_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_wait_for_rendering_to_complete_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_max_wait_for_rendering_to_complete_time(&has_bits);
          max_wait_for_rendering_to_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_swap_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_average_swap_time(&has_bits);
          average_swap_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_swap_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_max_swap_time(&has_bits);
          max_swap_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_frame_update_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_average_frame_update_time(&has_bits);
          average_frame_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_frame_update_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_max_frame_update_time(&has_bits);
          max_frame_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_idle_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_average_idle_time(&has_bits);
          average_idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_idle_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_max_idle_time(&has_bits);
          max_idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_input_processing_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_average_input_processing_time(&has_bits);
          average_input_processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_input_processing_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_max_input_processing_time(&has_bits);
          max_input_processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_PerfReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PerfReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float average_frame_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_average_frame_time(), target);
  }

  // optional float max_frame_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_frame_time(), target);
  }

  // optional float average_compute_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_average_compute_time(), target);
  }

  // optional float max_compute_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_compute_time(), target);
  }

  // optional float average_client_tick_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_average_client_tick_time(), target);
  }

  // optional float max_client_tick_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max_client_tick_time(), target);
  }

  // optional float average_client_simulate_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_average_client_simulate_time(), target);
  }

  // optional float max_client_simulate_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_max_client_simulate_time(), target);
  }

  // optional float average_output_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_average_output_time(), target);
  }

  // optional float max_output_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_max_output_time(), target);
  }

  // optional float average_wait_for_rendering_to_complete_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_average_wait_for_rendering_to_complete_time(), target);
  }

  // optional float max_wait_for_rendering_to_complete_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_max_wait_for_rendering_to_complete_time(), target);
  }

  // optional float average_swap_time = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_average_swap_time(), target);
  }

  // optional float max_swap_time = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_max_swap_time(), target);
  }

  // optional float average_frame_update_time = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_average_frame_update_time(), target);
  }

  // optional float max_frame_update_time = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_max_frame_update_time(), target);
  }

  // optional float average_idle_time = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_average_idle_time(), target);
  }

  // optional float max_idle_time = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_max_idle_time(), target);
  }

  // optional float average_input_processing_time = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_average_input_processing_time(), target);
  }

  // optional float max_input_processing_time = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_max_input_processing_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PerfReport)
  return target;
}

size_t CDOTAClientMsg_PerfReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_PerfReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float average_frame_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_frame_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float average_compute_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_compute_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float average_client_tick_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float max_client_tick_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float average_client_simulate_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float max_client_simulate_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float average_output_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float max_output_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float average_wait_for_rendering_to_complete_time = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float max_wait_for_rendering_to_complete_time = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float average_swap_time = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float max_swap_time = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float average_frame_update_time = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float max_frame_update_time = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float average_idle_time = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float max_idle_time = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float average_input_processing_time = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float max_input_processing_time = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_PerfReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_PerfReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_PerfReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_PerfReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_PerfReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_PerfReport)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PerfReport::MergeFrom(const CDOTAClientMsg_PerfReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_PerfReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      average_frame_time_ = from.average_frame_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_frame_time_ = from.max_frame_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      average_compute_time_ = from.average_compute_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_compute_time_ = from.max_compute_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      average_client_tick_time_ = from.average_client_tick_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_client_tick_time_ = from.max_client_tick_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      average_client_simulate_time_ = from.average_client_simulate_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_client_simulate_time_ = from.max_client_simulate_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      average_output_time_ = from.average_output_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_output_time_ = from.max_output_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      average_wait_for_rendering_to_complete_time_ = from.average_wait_for_rendering_to_complete_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_wait_for_rendering_to_complete_time_ = from.max_wait_for_rendering_to_complete_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      average_swap_time_ = from.average_swap_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_swap_time_ = from.max_swap_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      average_frame_update_time_ = from.average_frame_update_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_frame_update_time_ = from.max_frame_update_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      average_idle_time_ = from.average_idle_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_idle_time_ = from.max_idle_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      average_input_processing_time_ = from.average_input_processing_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_input_processing_time_ = from.max_input_processing_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_PerfReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_PerfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PerfReport::CopyFrom(const CDOTAClientMsg_PerfReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_PerfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PerfReport::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_PerfReport::InternalSwap(CDOTAClientMsg_PerfReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_PerfReport, max_input_processing_time_)
      + sizeof(CDOTAClientMsg_PerfReport::max_input_processing_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_PerfReport, average_frame_time_)>(
          reinterpret_cast<char*>(&average_frame_time_),
          reinterpret_cast<char*>(&other->average_frame_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_PerfReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ContextualTips_Subscribe_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ContextualTips_Subscribe_Entry>()._has_bits_);
  static void set_has_unsubscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prior_display_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAClientMsg_ContextualTips_Subscribe_Entry::CDOTAClientMsg_ContextualTips_Subscribe_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variants_seen_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
}
CDOTAClientMsg_ContextualTips_Subscribe_Entry::CDOTAClientMsg_ContextualTips_Subscribe_Entry(const CDOTAClientMsg_ContextualTips_Subscribe_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      variants_seen_(from.variants_seen_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unsubscribe_, &from.unsubscribe_,
    static_cast<size_t>(reinterpret_cast<char*>(&prior_display_count_) -
    reinterpret_cast<char*>(&unsubscribe_)) + sizeof(prior_display_count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unsubscribe_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prior_display_count_) -
    reinterpret_cast<char*>(&unsubscribe_)) + sizeof(prior_display_count_));
}

CDOTAClientMsg_ContextualTips_Subscribe_Entry::~CDOTAClientMsg_ContextualTips_Subscribe_Entry() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::ArenaDtor(void* object) {
  CDOTAClientMsg_ContextualTips_Subscribe_Entry* _this = reinterpret_cast< CDOTAClientMsg_ContextualTips_Subscribe_Entry* >(object);
  (void)_this;
}
void CDOTAClientMsg_ContextualTips_Subscribe_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ContextualTips_Subscribe_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variants_seen_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&unsubscribe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prior_display_count_) -
        reinterpret_cast<char*>(&unsubscribe_)) + sizeof(prior_display_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ContextualTips_Subscribe_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool unsubscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unsubscribe(&has_bits);
          unsubscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tip_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tip_id(&has_bits);
          tip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 prior_display_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prior_display_count(&has_bits);
          prior_display_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 variants_seen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_variants_seen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_variants_seen(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ContextualTips_Subscribe_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool unsubscribe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_unsubscribe(), target);
  }

  // optional int32 tip_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tip_id(), target);
  }

  // optional int32 prior_display_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prior_display_count(), target);
  }

  // repeated int32 variants_seen = 4;
  for (int i = 0, n = this->_internal_variants_seen_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_variants_seen(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  return target;
}

size_t CDOTAClientMsg_ContextualTips_Subscribe_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 variants_seen = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->variants_seen_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variants_seen_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool unsubscribe = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 tip_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tip_id());
    }

    // optional int32 prior_display_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_prior_display_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ContextualTips_Subscribe_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ContextualTips_Subscribe_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::MergeFrom(const CDOTAClientMsg_ContextualTips_Subscribe_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variants_seen_.MergeFrom(from.variants_seen_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unsubscribe_ = from.unsubscribe_;
    }
    if (cached_has_bits & 0x00000002u) {
      tip_id_ = from.tip_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      prior_display_count_ = from.prior_display_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::CopyFrom(const CDOTAClientMsg_ContextualTips_Subscribe_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ContextualTips_Subscribe_Entry::InternalSwap(CDOTAClientMsg_ContextualTips_Subscribe_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  variants_seen_.InternalSwap(&other->variants_seen_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ContextualTips_Subscribe_Entry, prior_display_count_)
      + sizeof(CDOTAClientMsg_ContextualTips_Subscribe_Entry::prior_display_count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_ContextualTips_Subscribe_Entry, unsubscribe_)>(
          reinterpret_cast<char*>(&unsubscribe_),
          reinterpret_cast<char*>(&other->unsubscribe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ContextualTips_Subscribe_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ContextualTips_Subscribe::_Internal {
 public:
};

CDOTAClientMsg_ContextualTips_Subscribe::CDOTAClientMsg_ContextualTips_Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ContextualTips_Subscribe)
}
CDOTAClientMsg_ContextualTips_Subscribe::CDOTAClientMsg_ContextualTips_Subscribe(const CDOTAClientMsg_ContextualTips_Subscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tips_(from.tips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ContextualTips_Subscribe)
}

void CDOTAClientMsg_ContextualTips_Subscribe::SharedCtor() {
}

CDOTAClientMsg_ContextualTips_Subscribe::~CDOTAClientMsg_ContextualTips_Subscribe() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ContextualTips_Subscribe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ContextualTips_Subscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_ContextualTips_Subscribe::ArenaDtor(void* object) {
  CDOTAClientMsg_ContextualTips_Subscribe* _this = reinterpret_cast< CDOTAClientMsg_ContextualTips_Subscribe* >(object);
  (void)_this;
}
void CDOTAClientMsg_ContextualTips_Subscribe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ContextualTips_Subscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ContextualTips_Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ContextualTips_Subscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ContextualTips_Subscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAClientMsg_ContextualTips_Subscribe_Entry tips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ContextualTips_Subscribe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ContextualTips_Subscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAClientMsg_ContextualTips_Subscribe_Entry tips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ContextualTips_Subscribe)
  return target;
}

size_t CDOTAClientMsg_ContextualTips_Subscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ContextualTips_Subscribe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAClientMsg_ContextualTips_Subscribe_Entry tips = 1;
  total_size += 1UL * this->_internal_tips_size();
  for (const auto& msg : this->tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ContextualTips_Subscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ContextualTips_Subscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ContextualTips_Subscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ContextualTips_Subscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ContextualTips_Subscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ContextualTips_Subscribe)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ContextualTips_Subscribe::MergeFrom(const CDOTAClientMsg_ContextualTips_Subscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ContextualTips_Subscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tips_.MergeFrom(from.tips_);
}

void CDOTAClientMsg_ContextualTips_Subscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ContextualTips_Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ContextualTips_Subscribe::CopyFrom(const CDOTAClientMsg_ContextualTips_Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ContextualTips_Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ContextualTips_Subscribe::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ContextualTips_Subscribe::InternalSwap(CDOTAClientMsg_ContextualTips_Subscribe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tips_.InternalSwap(&other->tips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ContextualTips_Subscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ChatMessage>()._has_bits_);
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_ChatMessage::CDOTAClientMsg_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ChatMessage)
}
CDOTAClientMsg_ChatMessage::CDOTAClientMsg_ChatMessage(const CDOTAClientMsg_ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_text()) {
    message_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_text(), 
      GetArena());
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChatMessage)
}

void CDOTAClientMsg_ChatMessage::SharedCtor() {
message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_type_ = 0u;
}

CDOTAClientMsg_ChatMessage::~CDOTAClientMsg_ChatMessage() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_ChatMessage::ArenaDtor(void* object) {
  CDOTAClientMsg_ChatMessage* _this = reinterpret_cast< CDOTAClientMsg_ChatMessage* >(object);
  (void)_this;
}
void CDOTAClientMsg_ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_text_.ClearNonDefaultToEmpty();
  }
  channel_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_type(&has_bits);
          channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_ChatMessage.message_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_type(), target);
  }

  // optional string message_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_text().data(), static_cast<int>(this->_internal_message_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_ChatMessage.message_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChatMessage)
  return target;
}

size_t CDOTAClientMsg_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ChatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_text());
    }

    // optional uint32 channel_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ChatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ChatMessage)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatMessage::MergeFrom(const CDOTAClientMsg_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_text(from._internal_message_text());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatMessage::CopyFrom(const CDOTAClientMsg_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatMessage::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChatMessage::InternalSwap(CDOTAClientMsg_ChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_text_.Swap(&other->message_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_type_, other->channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ChatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_MapPing* Arena::CreateMaybeMessage< ::CDOTAClientMsg_MapPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_MapPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ItemAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EnemyItemAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EnemyItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EnemyItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ModifierAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ModifierAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ModifierAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ClickedBuff* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ClickedBuff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ClickedBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_HPManaAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_HPManaAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_HPManaAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_GlyphAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_GlyphAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_GlyphAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RadarAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RadarAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RadarAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_MapLine* Arena::CreateMaybeMessage< ::CDOTAClientMsg_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_AspectRatio* Arena::CreateMaybeMessage< ::CDOTAClientMsg_AspectRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_AspectRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_UnitsAutoAttackMode* Arena::CreateMaybeMessage< ::CDOTAClientMsg_UnitsAutoAttackMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_UnitsAutoAttackMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_UnitsAutoAttackAfterSpell* Arena::CreateMaybeMessage< ::CDOTAClientMsg_UnitsAutoAttackAfterSpell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_UnitsAutoAttackAfterSpell >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_TeleportRequiresHalt* Arena::CreateMaybeMessage< ::CDOTAClientMsg_TeleportRequiresHalt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_TeleportRequiresHalt >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ChannelRequiresHalt* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ChannelRequiresHalt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ChannelRequiresHalt >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SearchString* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SearchString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SearchString >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_Pause* Arena::CreateMaybeMessage< ::CDOTAClientMsg_Pause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_Pause >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ShopViewMode* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ShopViewMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ShopViewMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SetUnitShareFlag* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SetUnitShareFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SetUnitShareFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SwapRequest* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SwapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SwapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SwapAccept* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SwapAccept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SwapAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_WorldLine* Arena::CreateMaybeMessage< ::CDOTAClientMsg_WorldLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_WorldLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RequestGraphUpdate* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RequestGraphUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RequestGraphUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ChatWheel* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SendStatPopup* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SendStatPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SendStatPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_DismissAllStatPopups* Arena::CreateMaybeMessage< ::CDOTAClientMsg_DismissAllStatPopups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_DismissAllStatPopups >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_BeginLastHitChallenge* Arena::CreateMaybeMessage< ::CDOTAClientMsg_BeginLastHitChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_BeginLastHitChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_UpdateQuickBuyItem* Arena::CreateMaybeMessage< ::CDOTAClientMsg_UpdateQuickBuyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_UpdateQuickBuyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_UpdateQuickBuy* Arena::CreateMaybeMessage< ::CDOTAClientMsg_UpdateQuickBuy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_UpdateQuickBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RecordVote* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RecordVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RecordVote >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_WillPurchaseAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_WillPurchaseAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_WillPurchaseAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_BuyBackStateAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_BuyBackStateAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_BuyBackStateAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_QuickBuyAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_QuickBuyAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_QuickBuyAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_PlayerShowCase* Arena::CreateMaybeMessage< ::CDOTAClientMsg_PlayerShowCase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_PlayerShowCase >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_CameraZoomAmount* Arena::CreateMaybeMessage< ::CDOTAClientMsg_CameraZoomAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_CameraZoomAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_BroadcasterUsingCameraman* Arena::CreateMaybeMessage< ::CDOTAClientMsg_BroadcasterUsingCameraman >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_BroadcasterUsingCameraman >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* Arena::CreateMaybeMessage< ::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::CAdditionalEquipSlotClientMsg* Arena::CreateMaybeMessage< ::CAdditionalEquipSlotClientMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAdditionalEquipSlotClientMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_FreeInventory* Arena::CreateMaybeMessage< ::CDOTAClientMsg_FreeInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_FreeInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_FillEmptySlotsWithBots* Arena::CreateMaybeMessage< ::CDOTAClientMsg_FillEmptySlotsWithBots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_FillEmptySlotsWithBots >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_HeroStatueLike* Arena::CreateMaybeMessage< ::CDOTAClientMsg_HeroStatueLike >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_HeroStatueLike >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EventCNY2015Cmd* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EventCNY2015Cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EventCNY2015Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_DemoHero* Arena::CreateMaybeMessage< ::CDOTAClientMsg_DemoHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_DemoHero >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ChallengeSelect* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ChallengeSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ChallengeSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ChallengeReroll* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ChallengeReroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ChallengeReroll >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_CoinWager* Arena::CreateMaybeMessage< ::CDOTAClientMsg_CoinWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_CoinWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_CoinWagerToken* Arena::CreateMaybeMessage< ::CDOTAClientMsg_CoinWagerToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_CoinWagerToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RankWager* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RankWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RankWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_PlayerBounty* Arena::CreateMaybeMessage< ::CDOTAClientMsg_PlayerBounty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_PlayerBounty >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EventPointsTip* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EventPointsTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EventPointsTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ExecuteOrders* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ExecuteOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ExecuteOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_XPAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_XPAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_XPAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_TalentTreeAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_TalentTreeAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_TalentTreeAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_KillcamDamageTaken* Arena::CreateMaybeMessage< ::CDOTAClientMsg_KillcamDamageTaken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_KillcamDamageTaken >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_MatchMetadata* Arena::CreateMaybeMessage< ::CDOTAClientMsg_MatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_MatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_KillMyHero* Arena::CreateMaybeMessage< ::CDOTAClientMsg_KillMyHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_KillMyHero >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_QuestStatus* Arena::CreateMaybeMessage< ::CDOTAClientMsg_QuestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_QuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ToggleAutoattack* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ToggleAutoattack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ToggleAutoattack >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SpecialAbility* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SpecialAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SpecialAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SetEnemyStartingPosition* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SetEnemyStartingPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SetEnemyStartingPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SetDesiredWardPlacement* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SetDesiredWardPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SetDesiredWardPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RollDice* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RollDice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RollDice >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_FlipCoin* Arena::CreateMaybeMessage< ::CDOTAClientMsg_FlipCoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_FlipCoin >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RequestItemSuggestions* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RequestItemSuggestions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RequestItemSuggestions >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_MakeTeamCaptain* Arena::CreateMaybeMessage< ::CDOTAClientMsg_MakeTeamCaptain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_MakeTeamCaptain >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_HelpTipSystemStateChanged* Arena::CreateMaybeMessage< ::CDOTAClientMsg_HelpTipSystemStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_HelpTipSystemStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RequestBulkCombatLog* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RequestBulkCombatLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RequestBulkCombatLog >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_AbilityDraftRequestAbility* Arena::CreateMaybeMessage< ::CDOTAClientMsg_AbilityDraftRequestAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_AbilityDraftRequestAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_GuideSelectOption* Arena::CreateMaybeMessage< ::CDOTAClientMsg_GuideSelectOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_GuideSelectOption >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_GuideSelected* Arena::CreateMaybeMessage< ::CDOTAClientMsg_GuideSelected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_GuideSelected >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_DamageReport* Arena::CreateMaybeMessage< ::CDOTAClientMsg_DamageReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_DamageReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SalutePlayer* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SalutePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SalutePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_TipAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_TipAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_TipAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EmptyTeleportAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EmptyTeleportAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EmptyTeleportAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_SetCavernMapVariant* Arena::CreateMaybeMessage< ::CDOTAClientMsg_SetCavernMapVariant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_SetCavernMapVariant >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_PauseGameOrder* Arena::CreateMaybeMessage< ::CDOTAClientMsg_PauseGameOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_PauseGameOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_VersusScene_PlayerBehavior* Arena::CreateMaybeMessage< ::CDOTAClientMsg_VersusScene_PlayerBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_VersusScene_PlayerBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EmptyItemSlotAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EmptyItemSlotAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EmptyItemSlotAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_AddOverwatchReportMarker* Arena::CreateMaybeMessage< ::CDOTAClientMsg_AddOverwatchReportMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_AddOverwatchReportMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_AghsStatusAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_AghsStatusAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_AghsStatusAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_PerfReport* Arena::CreateMaybeMessage< ::CDOTAClientMsg_PerfReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_PerfReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ContextualTips_Subscribe_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ContextualTips_Subscribe_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ContextualTips_Subscribe* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ContextualTips_Subscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ContextualTips_Subscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ChatMessage* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ChatMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
