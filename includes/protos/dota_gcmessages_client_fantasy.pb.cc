// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_fantasy.proto

#include "dota_gcmessages_client_fantasy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u)
  , placement_(0u)
  , earnings_(0u){}
struct CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal {
  constexpr CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfo_Results _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal _CMsgDOTAPlayerInfo_Results_default_instance_;
constexpr CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_url_logo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_timestamp_(0u)
  , end_timestamp_(0u)
  , team_id_(0u){}
struct CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal {
  constexpr CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfo_AuditEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal _CMsgDOTAPlayerInfo_AuditEntry_default_instance_;
constexpr CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , audit_entries_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sponsor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_url_logo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , fantasy_role_(0)

  , team_id_(0u)
  , is_locked_(false)
  , is_pro_(false)
  , total_earnings_(0u){}
struct CMsgDOTAPlayerInfoDefaultTypeInternal {
  constexpr CMsgDOTAPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPlayerInfoDefaultTypeInternal _CMsgDOTAPlayerInfo_default_instance_;
constexpr CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_infos_(){}
struct CMsgDOTAPlayerInfoListDefaultTypeInternal {
  constexpr CMsgDOTAPlayerInfoListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfoListDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPlayerInfoListDefaultTypeInternal _CMsgDOTAPlayerInfoList_default_instance_;
constexpr CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : percent_(0u)
  , shard_winnings_(0){}
struct CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal {
  constexpr CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal() {}
  union {
    CMsgDOTADPCProfileInfo_PredictionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_;
constexpr CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_90_finishes_(0u)
  , top_75_finishes_(0u)
  , top_50_finishes_(0u)
  , shard_winnings_(0u){}
struct CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal {
  constexpr CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal() {}
  union {
    CMsgDOTADPCProfileInfo_FantasyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_;
constexpr CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disabled_notifications_()
  , player_info_(nullptr)
  , prediction_info_(nullptr)
  , fantasy_info_(nullptr){}
struct CMsgDOTADPCProfileInfoDefaultTypeInternal {
  constexpr CMsgDOTADPCProfileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCProfileInfoDefaultTypeInternal() {}
  union {
    CMsgDOTADPCProfileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCProfileInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_default_instance_;
constexpr CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_()
  , division_(0u){}
struct CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal {
  constexpr CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal() {}
  union {
    CMsgDOTALeaderboards_RegionLeaderboard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal _CMsgDOTALeaderboards_RegionLeaderboard_default_instance_;
constexpr CMsgDOTALeaderboards::CMsgDOTALeaderboards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leaderboards_(){}
struct CMsgDOTALeaderboardsDefaultTypeInternal {
  constexpr CMsgDOTALeaderboardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeaderboardsDefaultTypeInternal() {}
  union {
    CMsgDOTALeaderboards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeaderboardsDefaultTypeInternal _CMsgDOTALeaderboards_default_instance_;
constexpr CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , league_logo_(PROTOBUF_ULONGLONG(0))
  , selection_mode_(0)

  , team_count_(0u){}
struct CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal {
  constexpr CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal() {}
  union {
    CMsgDOTACreateFantasyLeagueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal _CMsgDOTACreateFantasyLeagueRequest_default_instance_;
constexpr CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal {
  constexpr CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal() {}
  union {
    CMsgDOTACreateFantasyLeagueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal _CMsgDOTACreateFantasyLeagueResponse_default_instance_;
constexpr CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0)
  , kills_(0)
  , deaths_(0)
  , assists_(0)
  , last_hits_(0)
  , denies_(0)
  , gpm_(0)
  , xppm_(0)
  , stuns_(0)
  , healing_(0)
  , tower_kills_(0)
  , roshan_kills_(0)
  , multiplier_premium_(0)
  , multiplier_professional_(0){}
struct CMsgFantasyLeagueScoringDefaultTypeInternal {
  constexpr CMsgFantasyLeagueScoringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFantasyLeagueScoringDefaultTypeInternal() {}
  union {
    CMsgFantasyLeagueScoring _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFantasyLeagueScoringDefaultTypeInternal _CMsgFantasyLeagueScoring_default_instance_;
constexpr CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_account_id_()
  , owner_account_id_(0u)
  , left_league_(false){}
struct CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueInfo_OwnerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal _CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_;
constexpr CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_info_()
  , players_()
  , fantasy_league_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scoring_(nullptr)
  , fantasy_league_id_(0u)
  , commissioner_account_id_(0u)
  , selection_mode_(0)

  , team_count_(0u)
  , logo_(PROTOBUF_ULONGLONG(0))
  , draft_time_(0u)
  , draft_pick_time_(0u)
  , season_start_(0u)
  , season_length_(0u)
  , veto_votes_(0u)
  , acquisitions_(0u)
  , slot_1_(0u)
  , slot_2_(0u)
  , slot_3_(0u)
  , slot_4_(0u)
  , slot_5_(0u)
  , bench_slots_(0u)
  , time_zone_(0u)
  , season_(0u){}
struct CMsgDOTAFantasyLeagueInfoDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueInfoDefaultTypeInternal _CMsgDOTAFantasyLeagueInfo_default_instance_;
constexpr CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edit_info_(nullptr)
  , fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueEditInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueEditInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_;
constexpr CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueFindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueFindRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commissioner_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueFindResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueFindResponse_default_instance_;
constexpr CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueInfoRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueInfoResponse_default_instance_;
constexpr CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueMatchupsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_account_id_1_(0u)
  , owner_account_id_2_(0u)
  , score_1_(0)
  , score_2_(0){}
struct CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueMatchupsResponse_Matchup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matchup_()
  , start_time_(0u)
  , end_time_(0u){}
struct CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weekly_matchups_()
  , result_(0)

  , fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueMatchupsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_;
constexpr CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fantasy_league_id_(0u)
  , team_index_(0u)
  , team_logo_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal {
  constexpr CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAEditFantasyTeamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal _CMsgDOTAEditFantasyTeamRequest_default_instance_;
constexpr CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal {
  constexpr CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAEditFantasyTeamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal _CMsgDOTAEditFantasyTeamResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u){}
struct CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal _CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_;
constexpr CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_account_id_(0u){}
struct CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal _CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_;
constexpr CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal _CMsgDOTAFantasyTeamInfoResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_roster_()
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fantasy_league_id_(0u)
  , owner_account_id_(0u)
  , fantasy_team_index_(0u)
  , wins_(0u)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , losses_(0u){}
struct CMsgDOTAFantasyTeamInfoDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamInfoDefaultTypeInternal _CMsgDOTAFantasyTeamInfo_default_instance_;
constexpr CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , owner_account_id_(0u)
  , filter_match_id_(PROTOBUF_ULONGLONG(0))
  , fantasy_team_index_(0u)
  , filter_start_time_(0u)
  , filter_end_time_(0u)
  , include_bench_(false){}
struct CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamScoreRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal _CMsgDOTAFantasyTeamScoreRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , score_(0){}
struct CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal _CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_;
constexpr CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_player_score_()
  , result_(0)

  , fantasy_team_score_(0){}
struct CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamScoreResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal _CMsgDOTAFantasyTeamScoreResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , count_(0u)
  , filter_start_time_(0u)
  , filter_end_time_(0u)
  , filter_match_id_(PROTOBUF_ULONGLONG(0))
  , filter_last_match_(false)
  , filter_in_hall_(false){}
struct CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamStandingsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal _CMsgDOTAFantasyTeamStandingsRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fantasy_team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fantasy_league_id_(0u)
  , owner_account_id_(0u)
  , fantasy_team_logo_(PROTOBUF_ULONGLONG(0))
  , fantasy_team_index_(0u)
  , score_(0)
  , score_against_(0)
  , wins_(0u)
  , losses_(0u)
  , streak_(0){}
struct CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal _CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_;
constexpr CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_scores_()
  , result_(0)
{}
struct CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamStandingsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal _CMsgDOTAFantasyTeamStandingsResponse_default_instance_;
constexpr CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , player_account_id_(0u)
  , filter_start_time_(0u)
  , filter_end_time_(0u)
  , filter_match_id_(PROTOBUF_ULONGLONG(0))
  , filter_last_match_(false){}
struct CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerScoreRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreRequest_default_instance_;
constexpr CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)

  , fantasy_league_id_(0u)
  , player_account_id_(0u)
  , score_(0){}
struct CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerScoreResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreResponse_default_instance_;
constexpr CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , count_(0u)
  , role_(0u)
  , filter_start_time_(0u)
  , filter_match_id_(PROTOBUF_ULONGLONG(0))
  , filter_end_time_(0u)
  , filter_last_match_(false){}
struct CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerStandingsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerStandingsRequest_default_instance_;
constexpr CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_account_id_(0u)
  , score_(0){}
struct CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal _CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_;
constexpr CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_scores_()
  , result_(0)

  , fantasy_league_id_(0u)
  , role_(0u){}
struct CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerStandingsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerStandingsResponse_default_instance_;
constexpr CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(PROTOBUF_ULONGLONG(0))
  , ticket_item_id_(PROTOBUF_ULONGLONG(0))
  , season_id_(0u){}
struct CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueCreateRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)

  , fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueCreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueCreateResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(PROTOBUF_ULONGLONG(0))
  , ticket_item_id_(PROTOBUF_ULONGLONG(0))
  , fantasy_league_id_(0u){}
struct CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal _CMsgDOTAFantasyTeamCreateRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)

  , fantasy_team_index_(0u){}
struct CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamCreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal _CMsgDOTAFantasyTeamCreateResponse_default_instance_;
constexpr CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , invited_(false){}
struct CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_;
constexpr CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_change_()
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueEditInvitesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueEditInvitesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_;
constexpr CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u){}
struct CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueDraftStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : draft_order_()
  , available_players_()
  , fantasy_league_id_(0u)
  , current_pick_(0u)
  , time_remaining_(0u)
  , pending_resume_(false)
  , completed_(false){}
struct CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueDraftStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftStatus_default_instance_;
constexpr CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , team_index_(0u)
  , player_account_id_(0u){}
struct CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueDraftPlayerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeagueDraftPlayerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , team_index_(0u)
  , timestamp_(0u)
  , slot_1_(0u)
  , slot_2_(0u){}
struct CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamRosterSwapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal _CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamRosterSwapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal _CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , team_index_(0u)
  , add_account_id_(0u)
  , drop_account_id_(0u){}
struct CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamRosterAddDropRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal _CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamRosterAddDropResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal _CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u){}
struct CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamTradesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal _CMsgDOTAFantasyTeamTradesRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(0u)
  , owner_account_id_1_(0u)
  , owner_account_id_2_(0u)
  , player_account_id_1_(0u)
  , player_account_id_2_(0u)
  , status_(0u){}
struct CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamTradesResponse_Trade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal _CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_;
constexpr CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trades_()
  , result_(0)
{}
struct CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamTradesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal _CMsgDOTAFantasyTeamTradesResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , team_index_1_(0u)
  , owner_account_id_2_(0u)
  , team_index_2_(0u){}
struct CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamTradeCancelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal _CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamTradeCancelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal _CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_;
constexpr CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , team_index_(0u)
  , owner_account_id_(0u)
  , timestamp_(0u){}
struct CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamRosterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal _CMsgDOTAFantasyTeamRosterRequest_default_instance_;
constexpr CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_account_ids_()
  , player_locked_()
  , result_(0)
{}
struct CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyTeamRosterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal _CMsgDOTAFantasyTeamRosterResponse_default_instance_;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u){}
struct CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerHisoricalStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matches_(0u)
  , levels_(0)
  , kills_(0)
  , deaths_(0)
  , assists_(0)
  , last_hits_(0)
  , denies_(0)
  , gpm_(0)
  , xppm_(0)
  , stuns_(0)
  , healing_(0)
  , tower_kills_(0)
  , roshan_kills_(0)
  , score_(0){}
struct CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_premium_(nullptr)
  , stats_professional_(nullptr)
  , account_id_(0u)
  , weeks_(0u){}
struct CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , result_(0)
{}
struct CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerHisoricalStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_;
constexpr CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fantasy_league_id_(0u){}
struct CMsgDOTAFantasyMessageAddDefaultTypeInternal {
  constexpr CMsgDOTAFantasyMessageAddDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyMessageAddDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyMessageAdd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyMessageAddDefaultTypeInternal _CMsgDOTAFantasyMessageAdd_default_instance_;
constexpr CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , start_message_(0u)
  , end_message_(0u){}
struct CMsgDOTAFantasyMessagesRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyMessagesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyMessagesRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyMessagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyMessagesRequestDefaultTypeInternal _CMsgDOTAFantasyMessagesRequest_default_instance_;
constexpr CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_id_(0u)
  , author_account_id_(0u)
  , time_(0u){}
struct CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal {
  constexpr CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyMessagesResponse_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal _CMsgDOTAFantasyMessagesResponse_Message_default_instance_;
constexpr CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , result_(0)

  , num_total_messages_(0u){}
struct CMsgDOTAFantasyMessagesResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyMessagesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyMessagesResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyMessagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyMessagesResponseDefaultTypeInternal _CMsgDOTAFantasyMessagesResponse_default_instance_;
constexpr CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , owner_account_id_(0u)
  , team_index_(0u){}
struct CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal {
  constexpr CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyRemoveOwner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal _CMsgDOTAFantasyRemoveOwner_default_instance_;
constexpr CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyRemoveOwnerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal _CMsgDOTAFantasyRemoveOwnerResponse_default_instance_;
constexpr CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u){}
struct CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyScheduledMatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal _CMsgDOTAFantasyScheduledMatchesRequest_default_instance_;
constexpr CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_ids_()
  , league_ids_()
  , timestamp_(0u){}
struct CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal {
  constexpr CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal _CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_;
constexpr CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scheduled_match_days_()
  , result_(0)
{}
struct CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyScheduledMatchesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal _CMsgDOTAFantasyScheduledMatchesResponse_default_instance_;
constexpr CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , fantasy_team_index_(0u){}
struct CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeaveLeagueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal _CMsgDOTAFantasyLeaveLeagueRequest_default_instance_;
constexpr CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLeaveLeagueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal _CMsgDOTAFantasyLeaveLeagueResponse_default_instance_;
constexpr CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fantasy_league_id_(0u)
  , player_account_id_(0u)
  , start_time_(0u)
  , end_time_(0u){}
struct CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerScoreDetailsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_;
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opposing_team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , series_id_(0u)
  , series_num_(0u)
  , series_type_(0u)
  , league_tier_(0u)
  , league_id_(0u)
  , opposing_team_id_(0u)
  , opposing_team_logo_(PROTOBUF_ULONGLONG(0))
  , owned_by_(0u)
  , benched_(false){}
struct CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_;
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , result_(0)
{}
struct CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerScoreDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_;
constexpr CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u)
  , winner_id_(0u)
  , runnerup_id_(0u){}
struct CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal {
  constexpr CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportVoteTeamGuess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal _CMsgDOTAPassportVoteTeamGuess_default_instance_;
constexpr CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_index_(0)

  , selection_(0u){}
struct CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal {
  constexpr CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportVoteGenericSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal _CMsgDOTAPassportVoteGenericSelection_default_instance_;
constexpr CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0))
  , stamp_level_(0u){}
struct CMsgDOTAPassportStampedPlayerDefaultTypeInternal {
  constexpr CMsgDOTAPassportStampedPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPassportStampedPlayerDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportStampedPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPassportStampedPlayerDefaultTypeInternal _CMsgDOTAPassportStampedPlayer_default_instance_;
constexpr CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : challenge_id_(0u){}
struct CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal {
  constexpr CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportPlayerCardChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal _CMsgDOTAPassportPlayerCardChallenge_default_instance_;
constexpr CMsgDOTAPassportVote::CMsgDOTAPassportVote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_votes_()
  , generic_selections_()
  , stamped_players_()
  , player_card_challenges_(){}
struct CMsgDOTAPassportVoteDefaultTypeInternal {
  constexpr CMsgDOTAPassportVoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAPassportVoteDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAPassportVoteDefaultTypeInternal _CMsgDOTAPassportVote_default_instance_;
constexpr CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u)
  , timestamp_(0u){}
struct CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal {
  constexpr CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetPlayerCardRosterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_;
constexpr CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_card_item_id_()
  , result_(0)

  , score_(0)
  , finalized_(false)
  , percentile_(0){}
struct CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal {
  constexpr CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetPlayerCardRosterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_;
constexpr CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u)
  , timestamp_(0u)
  , player_card_item_id_(PROTOBUF_ULONGLONG(0))
  , slot_(0u)
  , event_id_(0u){}
struct CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal {
  constexpr CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetPlayerCardRosterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_;
constexpr CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal {
  constexpr CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetPlayerCardRosterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_;
constexpr CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : day_timestamps_()
  , league_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , league_id_(0u)
  , start_timestamp_(0u)
  , end_timestamp_(0u)
  , status_(0)
{}
struct CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal {
  constexpr CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_;
constexpr CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_infos_(){}
struct CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal {
  constexpr CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyDPCLeagueStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_default_instance_;
constexpr CMsgDOTADPCSearchResults_Player::CMsgDOTADPCSearchResults_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal {
  constexpr CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal _CMsgDOTADPCSearchResults_Player_default_instance_;
constexpr CMsgDOTADPCSearchResults_Team::CMsgDOTADPCSearchResults_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CMsgDOTADPCSearchResults_TeamDefaultTypeInternal {
  constexpr CMsgDOTADPCSearchResults_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResults_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSearchResults_TeamDefaultTypeInternal _CMsgDOTADPCSearchResults_Team_default_instance_;
constexpr CMsgDOTADPCSearchResults_League::CMsgDOTADPCSearchResults_League(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal {
  constexpr CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults_League _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal _CMsgDOTADPCSearchResults_League_default_instance_;
constexpr CMsgDOTADPCSearchResults::CMsgDOTADPCSearchResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , teams_()
  , leagues_(){}
struct CMsgDOTADPCSearchResultsDefaultTypeInternal {
  constexpr CMsgDOTADPCSearchResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResultsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSearchResultsDefaultTypeInternal _CMsgDOTADPCSearchResults_default_instance_;
constexpr CMsgDOTADPCTeamFavoriteRankings_Team::CMsgDOTADPCTeamFavoriteRankings_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u)
  , favorites_(0u){}
struct CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal {
  constexpr CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTADPCTeamFavoriteRankings_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_;
constexpr CMsgDOTADPCTeamFavoriteRankings::CMsgDOTADPCTeamFavoriteRankings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_(){}
struct CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal {
  constexpr CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCTeamFavoriteRankings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[98];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[30];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, placement_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, earnings_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, team_url_logo_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, fantasy_role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, sponsor_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, is_locked_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, is_pro_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, real_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, total_earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, team_url_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, audit_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, team_abbreviation_),
  8,
  0,
  1,
  9,
  10,
  2,
  3,
  4,
  11,
  12,
  5,
  13,
  ~0u,
  6,
  ~0u,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfoList, player_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, percent_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, shard_winnings_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, top_90_finishes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, top_75_finishes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, top_50_finishes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, shard_winnings_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, player_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, prediction_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, fantasy_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, disabled_notifications_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, division_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, account_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards, leaderboards_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueRequest, league_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueRequest, league_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueRequest, selection_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueRequest, team_count_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateFantasyLeagueResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, xppm_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, stuns_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, multiplier_premium_),
  PROTOBUF_FIELD_OFFSET(::CMsgFantasyLeagueScoring, multiplier_professional_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo_OwnerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo_OwnerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo_OwnerInfo, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo_OwnerInfo, left_league_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo_OwnerInfo, player_account_id_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, commissioner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, fantasy_league_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, selection_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, team_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, scoring_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, draft_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, draft_pick_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, season_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, season_length_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, veto_votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, acquisitions_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, slot_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, slot_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, slot_3_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, slot_4_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, slot_5_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, bench_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, owner_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, time_zone_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, season_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfo, password_),
  3,
  4,
  0,
  5,
  6,
  7,
  2,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  ~0u,
  20,
  21,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInfoRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInfoRequest, edit_info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInfoResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindRequest, password_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindResponse, fantasy_league_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueFindResponse, commissioner_name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfoRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueInfoResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_2_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, matchup_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, end_time_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueMatchupsResponse, weekly_matchups_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamRequest, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamRequest, team_logo_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditFantasyTeamResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, owner_account_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfoResponse, results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, fantasy_team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, losses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamInfo, current_roster_),
  1,
  2,
  3,
  0,
  5,
  4,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, fantasy_team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreRequest, include_bench_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse, fantasy_team_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamScoreResponse, fantasy_player_score_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, filter_last_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsRequest, filter_in_hall_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_against_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, losses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, streak_),
  2,
  3,
  5,
  4,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamStandingsResponse, team_scores_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreRequest, filter_last_match_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreResponse, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreResponse, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreResponse, player_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreResponse, score_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsRequest, filter_last_match_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, score_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse, role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStandingsResponse, player_scores_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, season_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, fantasy_league_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, password_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateRequest, ticket_item_id_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueCreateResponse, fantasy_league_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateRequest, password_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateRequest, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateRequest, logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateRequest, ticket_item_id_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamCreateResponse, fantasy_team_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, invited_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest, password_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesRequest, invite_change_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueEditInvitesResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatusRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, draft_order_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, current_pick_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, time_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, pending_resume_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftStatus, available_players_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerRequest, player_account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeagueDraftPlayerResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapRequest, slot_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapRequest, slot_2_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterSwapResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropRequest, add_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropRequest, drop_account_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterAddDropResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse_Trade, status_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradesResponse, trades_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelRequest, team_index_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelRequest, owner_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelRequest, team_index_2_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamTradeCancelResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterRequest, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterRequest, timestamp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterResponse, player_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyTeamRosterResponse, player_locked_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, levels_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, xppm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, stuns_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, weeks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_premium_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_professional_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerHisoricalStatsResponse, stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessageAdd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessageAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessageAdd, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessageAdd, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesRequest, start_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesRequest, end_message_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse_Message, message_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse_Message, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse_Message, author_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse_Message, time_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse, messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyMessagesResponse, num_total_messages_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwner, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwner, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwner, team_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwnerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyRemoveOwnerResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, team_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, league_ids_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyScheduledMatchesResponse, scheduled_match_days_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeaveLeagueRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeaveLeagueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeaveLeagueRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeaveLeagueRequest, fantasy_team_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeaveLeagueResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeaveLeagueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLeaveLeagueResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsRequest, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsRequest, end_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_num_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, owned_by_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, benched_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerScoreDetailsResponse, data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, winner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, runnerup_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, selection_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, selection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, stamp_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportPlayerCardChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportPlayerCardChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportPlayerCardChallenge, challenge_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, team_votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, generic_selections_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, stamped_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, player_card_challenges_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, finalized_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, percentile_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, event_id_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, league_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, day_timestamps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, status_),
  1,
  0,
  2,
  3,
  ~0u,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus, league_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, real_name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, url_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, leagues_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, favorites_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings, teams_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgDOTAPlayerInfo_Results)},
  { 11, 22, sizeof(::CMsgDOTAPlayerInfo_AuditEntry)},
  { 28, 49, sizeof(::CMsgDOTAPlayerInfo)},
  { 65, -1, sizeof(::CMsgDOTAPlayerInfoList)},
  { 71, 78, sizeof(::CMsgDOTADPCProfileInfo_PredictionInfo)},
  { 80, 89, sizeof(::CMsgDOTADPCProfileInfo_FantasyInfo)},
  { 93, 102, sizeof(::CMsgDOTADPCProfileInfo)},
  { 106, 113, sizeof(::CMsgDOTALeaderboards_RegionLeaderboard)},
  { 115, -1, sizeof(::CMsgDOTALeaderboards)},
  { 121, 130, sizeof(::CMsgDOTACreateFantasyLeagueRequest)},
  { 134, 140, sizeof(::CMsgDOTACreateFantasyLeagueResponse)},
  { 141, 160, sizeof(::CMsgFantasyLeagueScoring)},
  { 174, 182, sizeof(::CMsgDOTAFantasyLeagueInfo_OwnerInfo)},
  { 185, 214, sizeof(::CMsgDOTAFantasyLeagueInfo)},
  { 238, 245, sizeof(::CMsgDOTAFantasyLeagueEditInfoRequest)},
  { 247, 253, sizeof(::CMsgDOTAFantasyLeagueEditInfoResponse)},
  { 254, 261, sizeof(::CMsgDOTAFantasyLeagueFindRequest)},
  { 263, 271, sizeof(::CMsgDOTAFantasyLeagueFindResponse)},
  { 274, 280, sizeof(::CMsgDOTAFantasyLeagueInfoRequest)},
  { 281, 287, sizeof(::CMsgDOTAFantasyLeagueInfoResponse)},
  { 288, 294, sizeof(::CMsgDOTAFantasyLeagueMatchupsRequest)},
  { 295, 304, sizeof(::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup)},
  { 308, 316, sizeof(::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups)},
  { 319, 327, sizeof(::CMsgDOTAFantasyLeagueMatchupsResponse)},
  { 330, 339, sizeof(::CMsgDOTAEditFantasyTeamRequest)},
  { 343, 349, sizeof(::CMsgDOTAEditFantasyTeamResponse)},
  { 350, 356, sizeof(::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)},
  { 357, 363, sizeof(::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)},
  { 364, -1, sizeof(::CMsgDOTAFantasyTeamInfoResponse)},
  { 370, 383, sizeof(::CMsgDOTAFantasyTeamInfo)},
  { 391, 403, sizeof(::CMsgDOTAFantasyTeamScoreRequest)},
  { 410, 417, sizeof(::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore)},
  { 419, 427, sizeof(::CMsgDOTAFantasyTeamScoreResponse)},
  { 430, 442, sizeof(::CMsgDOTAFantasyTeamStandingsRequest)},
  { 449, 465, sizeof(::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore)},
  { 476, 483, sizeof(::CMsgDOTAFantasyTeamStandingsResponse)},
  { 485, 496, sizeof(::CMsgDOTAFantasyPlayerScoreRequest)},
  { 502, 512, sizeof(::CMsgDOTAFantasyPlayerScoreResponse)},
  { 517, 529, sizeof(::CMsgDOTAFantasyPlayerStandingsRequest)},
  { 536, 544, sizeof(::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore)},
  { 547, 556, sizeof(::CMsgDOTAFantasyPlayerStandingsResponse)},
  { 560, 571, sizeof(::CMsgDOTAFantasyLeagueCreateRequest)},
  { 577, 584, sizeof(::CMsgDOTAFantasyLeagueCreateResponse)},
  { 586, 596, sizeof(::CMsgDOTAFantasyTeamCreateRequest)},
  { 601, 608, sizeof(::CMsgDOTAFantasyTeamCreateResponse)},
  { 610, 617, sizeof(::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange)},
  { 619, 627, sizeof(::CMsgDOTAFantasyLeagueEditInvitesRequest)},
  { 630, 636, sizeof(::CMsgDOTAFantasyLeagueEditInvitesResponse)},
  { 637, 643, sizeof(::CMsgDOTAFantasyLeagueDraftStatusRequest)},
  { 644, 656, sizeof(::CMsgDOTAFantasyLeagueDraftStatus)},
  { 663, 671, sizeof(::CMsgDOTAFantasyLeagueDraftPlayerRequest)},
  { 674, 680, sizeof(::CMsgDOTAFantasyLeagueDraftPlayerResponse)},
  { 681, 691, sizeof(::CMsgDOTAFantasyTeamRosterSwapRequest)},
  { 696, 702, sizeof(::CMsgDOTAFantasyTeamRosterSwapResponse)},
  { 703, 712, sizeof(::CMsgDOTAFantasyTeamRosterAddDropRequest)},
  { 716, 722, sizeof(::CMsgDOTAFantasyTeamRosterAddDropResponse)},
  { 723, 729, sizeof(::CMsgDOTAFantasyTeamTradesRequest)},
  { 730, 741, sizeof(::CMsgDOTAFantasyTeamTradesResponse_Trade)},
  { 747, 754, sizeof(::CMsgDOTAFantasyTeamTradesResponse)},
  { 756, 765, sizeof(::CMsgDOTAFantasyTeamTradeCancelRequest)},
  { 769, 775, sizeof(::CMsgDOTAFantasyTeamTradeCancelResponse)},
  { 776, 785, sizeof(::CMsgDOTAFantasyTeamRosterRequest)},
  { 789, 797, sizeof(::CMsgDOTAFantasyTeamRosterResponse)},
  { 800, 806, sizeof(::CMsgDOTAFantasyPlayerHisoricalStatsRequest)},
  { 807, 826, sizeof(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator)},
  { 840, 849, sizeof(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats)},
  { 853, 860, sizeof(::CMsgDOTAFantasyPlayerHisoricalStatsResponse)},
  { 862, 869, sizeof(::CMsgDOTAFantasyMessageAdd)},
  { 871, 879, sizeof(::CMsgDOTAFantasyMessagesRequest)},
  { 882, 891, sizeof(::CMsgDOTAFantasyMessagesResponse_Message)},
  { 895, 903, sizeof(::CMsgDOTAFantasyMessagesResponse)},
  { 906, 914, sizeof(::CMsgDOTAFantasyRemoveOwner)},
  { 917, 923, sizeof(::CMsgDOTAFantasyRemoveOwnerResponse)},
  { 924, 930, sizeof(::CMsgDOTAFantasyScheduledMatchesRequest)},
  { 931, 939, sizeof(::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays)},
  { 942, 949, sizeof(::CMsgDOTAFantasyScheduledMatchesResponse)},
  { 951, 958, sizeof(::CMsgDOTAFantasyLeaveLeagueRequest)},
  { 960, 966, sizeof(::CMsgDOTAFantasyLeaveLeagueResponse)},
  { 967, 976, sizeof(::CMsgDOTAFantasyPlayerScoreDetailsRequest)},
  { 980, 996, sizeof(::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData)},
  { 1007, 1014, sizeof(::CMsgDOTAFantasyPlayerScoreDetailsResponse)},
  { 1016, 1024, sizeof(::CMsgDOTAPassportVoteTeamGuess)},
  { 1027, 1034, sizeof(::CMsgDOTAPassportVoteGenericSelection)},
  { 1036, 1043, sizeof(::CMsgDOTAPassportStampedPlayer)},
  { 1045, 1051, sizeof(::CMsgDOTAPassportPlayerCardChallenge)},
  { 1052, -1, sizeof(::CMsgDOTAPassportVote)},
  { 1061, 1068, sizeof(::CMsgClientToGCGetPlayerCardRosterRequest)},
  { 1070, 1080, sizeof(::CMsgClientToGCGetPlayerCardRosterResponse)},
  { 1085, 1095, sizeof(::CMsgClientToGCSetPlayerCardRosterRequest)},
  { 1100, 1106, sizeof(::CMsgClientToGCSetPlayerCardRosterResponse)},
  { 1107, 1118, sizeof(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo)},
  { 1124, -1, sizeof(::CMsgDOTAFantasyDPCLeagueStatus)},
  { 1130, 1138, sizeof(::CMsgDOTADPCSearchResults_Player)},
  { 1141, 1149, sizeof(::CMsgDOTADPCSearchResults_Team)},
  { 1152, 1159, sizeof(::CMsgDOTADPCSearchResults_League)},
  { 1161, -1, sizeof(::CMsgDOTADPCSearchResults)},
  { 1169, 1176, sizeof(::CMsgDOTADPCTeamFavoriteRankings_Team)},
  { 1178, -1, sizeof(::CMsgDOTADPCTeamFavoriteRankings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPlayerInfo_Results_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPlayerInfo_AuditEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPlayerInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCProfileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeaderboards_RegionLeaderboard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeaderboards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTACreateFantasyLeagueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTACreateFantasyLeagueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFantasyLeagueScoring_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueFindRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueFindResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAEditFantasyTeamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAEditFantasyTeamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamScoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamScoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamStandingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamStandingsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerScoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerScoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerStandingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerStandingsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueDraftStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamTradesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamTradesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamRosterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyTeamRosterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyMessageAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyMessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyMessagesResponse_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyMessagesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyRemoveOwner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyRemoveOwnerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyScheduledMatchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyScheduledMatchesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeaveLeagueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyLeaveLeagueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPassportVoteTeamGuess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPassportVoteGenericSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPassportStampedPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPassportPlayerCardChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAPassportVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetPlayerCardRosterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetPlayerCardRosterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSetPlayerCardRosterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSetPlayerCardRosterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyDPCLeagueStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSearchResults_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSearchResults_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSearchResults_League_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSearchResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCTeamFavoriteRankings_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5ffantasy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$dota_gcmessages_client_fantasy.proto\032\027"
  "dota_shared_enums.proto\"\205\005\n\022CMsgDOTAPlay"
  "erInfo\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t"
  "\022\024\n\014country_code\030\003 \001(\t\022<\n\014fantasy_role\030\004"
  " \001(\0162\016.Fantasy_Roles:\026FANTASY_ROLE_UNDEF"
  "INED\022\017\n\007team_id\030\005 \001(\r\022\021\n\tteam_name\030\006 \001(\t"
  "\022\020\n\010team_tag\030\007 \001(\t\022\017\n\007sponsor\030\010 \001(\t\022\021\n\ti"
  "s_locked\030\t \001(\010\022\016\n\006is_pro\030\n \001(\010\022\021\n\treal_n"
  "ame\030\013 \001(\t\022\026\n\016total_earnings\030\r \001(\r\022,\n\007res"
  "ults\030\016 \003(\0132\033.CMsgDOTAPlayerInfo.Results\022"
  "\025\n\rteam_url_logo\030\017 \001(\t\0225\n\raudit_entries\030"
  "\020 \003(\0132\036.CMsgDOTAPlayerInfo.AuditEntry\022\031\n"
  "\021team_abbreviation\030\021 \001(\t\032A\n\007Results\022\021\n\tl"
  "eague_id\030\001 \001(\r\022\021\n\tplacement\030\002 \001(\r\022\020\n\010ear"
  "nings\030\003 \001(\r\032\211\001\n\nAuditEntry\022\027\n\017start_time"
  "stamp\030\001 \001(\r\022\025\n\rend_timestamp\030\002 \001(\r\022\017\n\007te"
  "am_id\030\003 \001(\r\022\021\n\tteam_name\030\004 \001(\t\022\020\n\010team_t"
  "ag\030\005 \001(\t\022\025\n\rteam_url_logo\030\006 \001(\t\"C\n\026CMsgD"
  "OTAPlayerInfoList\022)\n\014player_infos\030\001 \003(\0132"
  "\023.CMsgDOTAPlayerInfo\"\213\003\n\026CMsgDOTADPCProf"
  "ileInfo\022(\n\013player_info\030\001 \001(\0132\023.CMsgDOTAP"
  "layerInfo\022\?\n\017prediction_info\030\002 \001(\0132&.CMs"
  "gDOTADPCProfileInfo.PredictionInfo\0229\n\014fa"
  "ntasy_info\030\003 \001(\0132#.CMsgDOTADPCProfileInf"
  "o.FantasyInfo\022\036\n\026disabled_notifications\030"
  "\004 \003(\r\0329\n\016PredictionInfo\022\017\n\007percent\030\001 \001(\r"
  "\022\026\n\016shard_winnings\030\002 \001(\005\032p\n\013FantasyInfo\022"
  "\027\n\017top_90_finishes\030\001 \001(\r\022\027\n\017top_75_finis"
  "hes\030\002 \001(\r\022\027\n\017top_50_finishes\030\003 \001(\r\022\026\n\016sh"
  "ard_winnings\030\004 \001(\r\"\221\001\n\024CMsgDOTALeaderboa"
  "rds\022=\n\014leaderboards\030\002 \003(\0132\'.CMsgDOTALead"
  "erboards.RegionLeaderboard\032:\n\021RegionLead"
  "erboard\022\020\n\010division\030\001 \001(\r\022\023\n\013account_ids"
  "\030\002 \003(\r\"\256\001\n\"CMsgDOTACreateFantasyLeagueRe"
  "quest\022\023\n\013league_name\030\001 \001(\t\022\023\n\013league_log"
  "o\030\002 \001(\004\022J\n\016selection_mode\030\003 \001(\0162\027.Fantas"
  "y_Selection_Mode:\031FANTASY_SELECTION_INVA"
  "LID\022\022\n\nteam_count\030\004 \001(\r\"\363\001\n#CMsgDOTACrea"
  "teFantasyLeagueResponse\022E\n\006result\030\001 \001(\0162"
  ",.CMsgDOTACreateFantasyLeagueResponse.ER"
  "esult:\007SUCCESS\"\204\001\n\007EResult\022\013\n\007SUCCESS\020\000\022"
  "\025\n\021ERROR_UNSPECIFIED\020\001\022\032\n\026ERROR_TOO_MANY"
  "_LEAGUES\020\002\022\034\n\030ERROR_INVALID_TEAM_COUNT\020\003"
  "\022\033\n\027ERROR_CREATION_DISABLED\020\004\"\237\002\n\030CMsgFa"
  "ntasyLeagueScoring\022\r\n\005level\030\001 \001(\002\022\r\n\005kil"
  "ls\030\002 \001(\002\022\016\n\006deaths\030\003 \001(\002\022\017\n\007assists\030\004 \001("
  "\002\022\021\n\tlast_hits\030\005 \001(\002\022\016\n\006denies\030\006 \001(\002\022\013\n\003"
  "gpm\030\007 \001(\002\022\014\n\004xppm\030\010 \001(\002\022\r\n\005stuns\030\t \001(\002\022\017"
  "\n\007healing\030\n \001(\002\022\023\n\013tower_kills\030\013 \001(\002\022\024\n\014"
  "roshan_kills\030\014 \001(\002\022\032\n\022multiplier_premium"
  "\030\r \001(\002\022\037\n\027multiplier_professional\030\016 \001(\002\""
  "\316\005\n\031CMsgDOTAFantasyLeagueInfo\022\031\n\021fantasy"
  "_league_id\030\001 \001(\r\022\037\n\027commissioner_account"
  "_id\030\002 \001(\r\022\033\n\023fantasy_league_name\030\003 \001(\t\022J"
  "\n\016selection_mode\030\004 \001(\0162\027.Fantasy_Selecti"
  "on_Mode:\031FANTASY_SELECTION_INVALID\022\022\n\nte"
  "am_count\030\005 \001(\r\022\014\n\004logo\030\006 \001(\004\022*\n\007scoring\030"
  "\007 \001(\0132\031.CMsgFantasyLeagueScoring\022\022\n\ndraf"
  "t_time\030\014 \001(\r\022\027\n\017draft_pick_time\030\r \001(\r\022\024\n"
  "\014season_start\030\017 \001(\r\022\025\n\rseason_length\030\020 \001"
  "(\r\022\022\n\nveto_votes\030\021 \001(\r\022\024\n\014acquisitions\030\022"
  " \001(\r\022\016\n\006slot_1\030\023 \001(\r\022\016\n\006slot_2\030\024 \001(\r\022\016\n\006"
  "slot_3\030\025 \001(\r\022\016\n\006slot_4\030\026 \001(\r\022\016\n\006slot_5\030\027"
  " \001(\r\022\023\n\013bench_slots\030\030 \001(\r\0228\n\nowner_info\030"
  "\031 \003(\0132$.CMsgDOTAFantasyLeagueInfo.OwnerI"
  "nfo\022\017\n\007players\030\032 \003(\r\022\021\n\ttime_zone\030\033 \001(\r\022"
  "\016\n\006season\030\034 \001(\r\022\020\n\010password\030\035 \001(\t\032U\n\tOwn"
  "erInfo\022\030\n\020owner_account_id\030\001 \001(\r\022\023\n\013left"
  "_league\030\002 \001(\010\022\031\n\021player_account_id\030\003 \003(\r"
  "\"p\n$CMsgDOTAFantasyLeagueEditInfoRequest"
  "\022\031\n\021fantasy_league_id\030\001 \001(\r\022-\n\tedit_info"
  "\030\002 \001(\0132\032.CMsgDOTAFantasyLeagueInfo\"\270\001\n%C"
  "MsgDOTAFantasyLeagueEditInfoResponse\022G\n\006"
  "result\030\001 \001(\0162..CMsgDOTAFantasyLeagueEdit"
  "InfoResponse.EResult:\007SUCCESS\"F\n\007EResult"
  "\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023"
  "ERROR_NO_PERMISSION\020\002\"O\n CMsgDOTAFantasy"
  "LeagueFindRequest\022\031\n\021fantasy_league_id\030\001"
  " \001(\r\022\020\n\010password\030\002 \001(\t\"\307\002\n!CMsgDOTAFanta"
  "syLeagueFindResponse\022C\n\006result\030\001 \001(\0162*.C"
  "MsgDOTAFantasyLeagueFindResponse.EResult"
  ":\007SUCCESS\022\033\n\023fantasy_league_name\030\002 \001(\t\022\031"
  "\n\021commissioner_name\030\003 \001(\t\"\244\001\n\007EResult\022\013\n"
  "\007SUCCESS\020\000\022\032\n\026ERROR_LEAGUE_NOT_FOUND\020\001\022\026"
  "\n\022ERROR_BAD_PASSWORD\020\002\022\025\n\021ERROR_UNSPECIF"
  "IED\020\003\022\016\n\nERROR_FULL\020\004\022\030\n\024ERROR_ALREADY_M"
  "EMBER\020\005\022\027\n\023ERROR_LEAGUE_LOCKED\020\006\"=\n CMsg"
  "DOTAFantasyLeagueInfoRequest\022\031\n\021fantasy_"
  "league_id\030\001 \001(\r\"\260\001\n!CMsgDOTAFantasyLeagu"
  "eInfoResponse\022C\n\006result\030\001 \001(\0162*.CMsgDOTA"
  "FantasyLeagueInfoResponse.EResult:\007SUCCE"
  "SS\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSP"
  "ECIFIED\020\001\022\027\n\023ERROR_BAD_LEAGUE_ID\020\002\"A\n$CM"
  "sgDOTAFantasyLeagueMatchupsRequest\022\031\n\021fa"
  "ntasy_league_id\030\001 \001(\r\"\232\004\n%CMsgDOTAFantas"
  "yLeagueMatchupsResponse\022G\n\006result\030\001 \001(\0162"
  "..CMsgDOTAFantasyLeagueMatchupsResponse."
  "EResult:\007SUCCESS\022\031\n\021fantasy_league_id\030\002 "
  "\001(\r\022N\n\017weekly_matchups\030\003 \003(\01325.CMsgDOTAF"
  "antasyLeagueMatchupsResponse.WeeklyMatch"
  "ups\032c\n\007Matchup\022\032\n\022owner_account_id_1\030\001 \001"
  "(\r\022\032\n\022owner_account_id_2\030\002 \001(\r\022\017\n\007score_"
  "1\030\003 \001(\002\022\017\n\007score_2\030\004 \001(\002\032w\n\016WeeklyMatchu"
  "ps\022\?\n\007matchup\030\001 \003(\0132..CMsgDOTAFantasyLea"
  "gueMatchupsResponse.Matchup\022\022\n\nstart_tim"
  "e\030\002 \001(\r\022\020\n\010end_time\030\003 \001(\r\"_\n\007EResult\022\013\n\007"
  "SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERRO"
  "R_BAD_LEAGUE_ID\020\002\022\027\n\023ERROR_NO_PERMISSION"
  "\020\003\"u\n\036CMsgDOTAEditFantasyTeamRequest\022\031\n\021"
  "fantasy_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002 "
  "\001(\r\022\021\n\tteam_name\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001("
  "\004\"\350\001\n\037CMsgDOTAEditFantasyTeamResponse\022A\n"
  "\006result\030\001 \001(\0162(.CMsgDOTAEditFantasyTeamR"
  "esponse.EResult:\007SUCCESS\"\201\001\n\007EResult\022\013\n\007"
  "SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\033\n\027ERRO"
  "R_INVALID_TEAM_INFO\020\002\022\034\n\030ERROR_NAME_ALRE"
  "ADY_TAKEN\020\003\022\027\n\023ERROR_NO_PERMISSION\020\004\"L\n/"
  "CMsgDOTAFantasyTeamInfoRequestByFantasyL"
  "eagueID\022\031\n\021fantasy_league_id\030\001 \001(\r\"J\n.CM"
  "sgDOTAFantasyTeamInfoRequestByOwnerAccou"
  "ntID\022\030\n\020owner_account_id\030\001 \001(\r\"L\n\037CMsgDO"
  "TAFantasyTeamInfoResponse\022)\n\007results\030\001 \003"
  "(\0132\030.CMsgDOTAFantasyTeamInfo\"\306\001\n\027CMsgDOT"
  "AFantasyTeamInfo\022\031\n\021fantasy_league_id\030\001 "
  "\001(\r\022\030\n\020owner_account_id\030\002 \001(\r\022\032\n\022fantasy"
  "_team_index\030\003 \001(\r\022\021\n\tteam_name\030\004 \001(\t\022\021\n\t"
  "team_logo\030\005 \001(\004\022\014\n\004wins\030\006 \001(\r\022\016\n\006losses\030"
  "\007 \001(\r\022\026\n\016current_roster\030\010 \003(\r\"\326\001\n\037CMsgDO"
  "TAFantasyTeamScoreRequest\022\031\n\021fantasy_lea"
  "gue_id\030\001 \001(\r\022\030\n\020owner_account_id\030\002 \001(\r\022\032"
  "\n\022fantasy_team_index\030\003 \001(\r\022\027\n\017filter_mat"
  "ch_id\030\004 \001(\004\022\031\n\021filter_start_time\030\005 \001(\r\022\027"
  "\n\017filter_end_time\030\006 \001(\r\022\025\n\rinclude_bench"
  "\030\007 \001(\010\"\360\002\n CMsgDOTAFantasyTeamScoreRespo"
  "nse\022B\n\006result\030\001 \001(\0162).CMsgDOTAFantasyTea"
  "mScoreResponse.EResult:\007SUCCESS\022\032\n\022fanta"
  "sy_team_score\030\002 \001(\002\022O\n\024fantasy_player_sc"
  "ore\030\003 \003(\01321.CMsgDOTAFantasyTeamScoreResp"
  "onse.CMsgPlayerScore\0324\n\017CMsgPlayerScore\022"
  "\022\n\naccount_id\030\001 \001(\r\022\r\n\005score\030\002 \001(\002\"e\n\007ER"
  "esult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020"
  "\001\022\027\n\023ERROR_NO_PERMISSION\020\002\022\035\n\031ERROR_OWNE"
  "R_NOT_IN_LEAGUE\020\003\"\317\001\n#CMsgDOTAFantasyTea"
  "mStandingsRequest\022\031\n\021fantasy_league_id\030\001"
  " \001(\r\022\r\n\005count\030\002 \001(\r\022\031\n\021filter_start_time"
  "\030\003 \001(\r\022\027\n\017filter_end_time\030\004 \001(\r\022\027\n\017filte"
  "r_match_id\030\005 \001(\004\022\031\n\021filter_last_match\030\006 "
  "\001(\010\022\026\n\016filter_in_hall\030\007 \001(\010\"\201\004\n$CMsgDOTA"
  "FantasyTeamStandingsResponse\022F\n\006result\030\001"
  " \001(\0162-.CMsgDOTAFantasyTeamStandingsRespo"
  "nse.EResult:\007SUCCESS\022H\n\013team_scores\030\003 \003("
  "\01323.CMsgDOTAFantasyTeamStandingsResponse"
  ".CMsgTeamScore\032\376\001\n\rCMsgTeamScore\022\031\n\021fant"
  "asy_league_id\030\001 \001(\r\022\030\n\020owner_account_id\030"
  "\002 \001(\r\022\032\n\022fantasy_team_index\030\003 \001(\r\022\031\n\021fan"
  "tasy_team_logo\030\004 \001(\004\022\022\n\nowner_name\030\005 \001(\t"
  "\022\031\n\021fantasy_team_name\030\006 \001(\t\022\r\n\005score\030\007 \001"
  "(\002\022\025\n\rscore_against\030\010 \001(\002\022\014\n\004wins\030\t \001(\r\022"
  "\016\n\006losses\030\n \001(\r\022\016\n\006streak\030\013 \001(\005\"F\n\007EResu"
  "lt\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027"
  "\n\023ERROR_NO_PERMISSION\020\002\"\301\001\n!CMsgDOTAFant"
  "asyPlayerScoreRequest\022\031\n\021fantasy_league_"
  "id\030\001 \001(\r\022\031\n\021player_account_id\030\002 \001(\r\022\031\n\021f"
  "ilter_start_time\030\003 \001(\r\022\027\n\017filter_end_tim"
  "e\030\004 \001(\r\022\027\n\017filter_match_id\030\005 \001(\004\022\031\n\021filt"
  "er_last_match\030\006 \001(\010\"\214\002\n\"CMsgDOTAFantasyP"
  "layerScoreResponse\022D\n\006result\030\001 \001(\0162+.CMs"
  "gDOTAFantasyPlayerScoreResponse.EResult:"
  "\007SUCCESS\022\031\n\021fantasy_league_id\030\002 \001(\r\022\031\n\021p"
  "layer_account_id\030\003 \001(\r\022\023\n\013player_name\030\004 "
  "\001(\t\022\r\n\005score\030\005 \001(\002\"F\n\007EResult\022\013\n\007SUCCESS"
  "\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PE"
  "RMISSION\020\002\"\307\001\n%CMsgDOTAFantasyPlayerStan"
  "dingsRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022"
  "\r\n\005count\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\022\031\n\021filter_s"
  "tart_time\030\004 \001(\r\022\027\n\017filter_end_time\030\005 \001(\r"
  "\022\027\n\017filter_match_id\030\006 \001(\004\022\031\n\021filter_last"
  "_match\030\007 \001(\010\"\205\003\n&CMsgDOTAFantasyPlayerSt"
  "andingsResponse\022H\n\006result\030\001 \001(\0162/.CMsgDO"
  "TAFantasyPlayerStandingsResponse.EResult"
  ":\007SUCCESS\022\031\n\021fantasy_league_id\030\002 \001(\r\022\014\n\004"
  "role\030\003 \001(\r\022N\n\rplayer_scores\030\004 \003(\01327.CMsg"
  "DOTAFantasyPlayerStandingsResponse.CMsgP"
  "layerScore\032P\n\017CMsgPlayerScore\022\031\n\021player_"
  "account_id\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t\022\r\n"
  "\005score\030\003 \001(\002\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021"
  "ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSI"
  "ON\020\002\"\237\001\n\"CMsgDOTAFantasyLeagueCreateRequ"
  "est\022\021\n\tseason_id\030\001 \001(\r\022\033\n\023fantasy_league"
  "_name\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\021\n\tteam_na"
  "me\030\004 \001(\t\022\014\n\004logo\030\005 \001(\004\022\026\n\016ticket_item_id"
  "\030\006 \001(\004\"\320\002\n#CMsgDOTAFantasyLeagueCreateRe"
  "sponse\022E\n\006result\030\001 \001(\0162,.CMsgDOTAFantasy"
  "LeagueCreateResponse.EResult:\007SUCCESS\022\031\n"
  "\021fantasy_league_id\030\002 \001(\r\"\306\001\n\007EResult\022\013\n\007"
  "SUCCESS\020\000\022\027\n\023ERROR_NO_PERMISSION\020\001\022\027\n\023ER"
  "ROR_BAD_SEASON_ID\020\002\022\031\n\025ERROR_BAD_LEAGUE_"
  "NAME\020\003\022\027\n\023ERROR_BAD_TEAM_NAME\020\004\022\025\n\021ERROR"
  "_UNSPECIFIED\020\005\022\034\n\030ERROR_FAILED_LOGO_UPLO"
  "AD\020\006\022\023\n\017ERROR_NO_TICKET\020\007\"\210\001\n CMsgDOTAFa"
  "ntasyTeamCreateRequest\022\031\n\021fantasy_league"
  "_id\030\001 \001(\r\022\020\n\010password\030\002 \001(\t\022\021\n\tteam_name"
  "\030\003 \001(\t\022\014\n\004logo\030\004 \001(\004\022\026\n\016ticket_item_id\030\005"
  " \001(\004\"\220\003\n!CMsgDOTAFantasyTeamCreateRespon"
  "se\022C\n\006result\030\001 \001(\0162*.CMsgDOTAFantasyTeam"
  "CreateResponse.EResult:\007SUCCESS\022\032\n\022fanta"
  "sy_team_index\030\002 \001(\r\"\211\002\n\007EResult\022\013\n\007SUCCE"
  "SS\020\000\022\027\n\023ERROR_NO_PERMISSION\020\001\022\034\n\030ERROR_F"
  "AILED_LOGO_UPLOAD\020\002\022\037\n\033ERROR_BAD_FANTASY"
  "_LEAGUE_ID\020\003\022\022\n\016ERROR_BAD_NAME\020\004\022\016\n\nERRO"
  "R_FULL\020\005\022\030\n\024ERROR_ALREADY_MEMBER\020\006\022\026\n\022ER"
  "ROR_BAD_PASSWORD\020\007\022\025\n\021ERROR_UNSPECIFIED\020"
  "\010\022\023\n\017ERROR_NO_TICKET\020\t\022\027\n\023ERROR_LEAGUE_L"
  "OCKED\020\n\"\331\001\n\'CMsgDOTAFantasyLeagueEditInv"
  "itesRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\020"
  "\n\010password\030\002 \001(\t\022L\n\rinvite_change\030\003 \003(\0132"
  "5.CMsgDOTAFantasyLeagueEditInvitesReques"
  "t.InviteChange\0323\n\014InviteChange\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\017\n\007invited\030\002 \001(\010\"\245\001\n(CMsgDOTA"
  "FantasyLeagueEditInvitesResponse\022J\n\006resu"
  "lt\030\001 \001(\01621.CMsgDOTAFantasyLeagueEditInvi"
  "tesResponse.EResult:\007SUCCESS\"-\n\007EResult\022"
  "\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\"D\n\'C"
  "MsgDOTAFantasyLeagueDraftStatusRequest\022\031"
  "\n\021fantasy_league_id\030\001 \001(\r\"\306\001\n CMsgDOTAFa"
  "ntasyLeagueDraftStatus\022\031\n\021fantasy_league"
  "_id\030\001 \001(\r\022\023\n\013draft_order\030\002 \003(\r\022\024\n\014curren"
  "t_pick\030\003 \001(\r\022\026\n\016time_remaining\030\004 \001(\r\022\026\n\016"
  "pending_resume\030\005 \001(\010\022\021\n\tcompleted\030\006 \001(\010\022"
  "\031\n\021available_players\030\007 \003(\r\"s\n\'CMsgDOTAFa"
  "ntasyLeagueDraftPlayerRequest\022\031\n\021fantasy"
  "_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002 \001(\r\022\031\n\021"
  "player_account_id\030\003 \001(\r\"\202\003\n(CMsgDOTAFant"
  "asyLeagueDraftPlayerResponse\022J\n\006result\030\001"
  " \001(\01621.CMsgDOTAFantasyLeagueDraftPlayerR"
  "esponse.EResult:\007SUCCESS\"\211\002\n\007EResult\022\013\n\007"
  "SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022 \n\034ERRO"
  "R_INVALID_FANTASY_LEAGUE\020\002\022%\n!ERROR_FANT"
  "ASY_LEAGUE_NOT_DRAFTING\020\003\022\035\n\031ERROR_OWNER"
  "_NOT_IN_LEAGUE\020\004\022\031\n\025ERROR_NOT_OWNERS_TUR"
  "N\020\005\022\030\n\024ERROR_PLAYER_INVALID\020\006\022\034\n\030ERROR_P"
  "LAYER_UNAVAILABLE\020\007\022\037\n\033ERROR_PLAYER_NO_V"
  "ALID_SLOTS\020\010\"\210\001\n$CMsgDOTAFantasyTeamRost"
  "erSwapRequest\022\031\n\021fantasy_league_id\030\001 \001(\r"
  "\022\022\n\nteam_index\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r\022"
  "\016\n\006slot_1\030\004 \001(\r\022\016\n\006slot_2\030\005 \001(\r\"\356\001\n%CMsg"
  "DOTAFantasyTeamRosterSwapResponse\022G\n\006res"
  "ult\030\001 \001(\0162..CMsgDOTAFantasyTeamRosterSwa"
  "pResponse.EResult:\007SUCCESS\"|\n\007EResult\022\013\n"
  "\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\035\n\031ERR"
  "OR_OWNER_NOT_IN_LEAGUE\020\002\022\027\n\023ERROR_SLOTS_"
  "INVALID\020\003\022\025\n\021ERROR_SLOT_LOCKED\020\004\"\211\001\n\'CMs"
  "gDOTAFantasyTeamRosterAddDropRequest\022\031\n\021"
  "fantasy_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002 "
  "\001(\r\022\026\n\016add_account_id\030\005 \001(\r\022\027\n\017drop_acco"
  "unt_id\030\006 \001(\r\"\244\002\n(CMsgDOTAFantasyTeamRost"
  "erAddDropResponse\022J\n\006result\030\001 \001(\01621.CMsg"
  "DOTAFantasyTeamRosterAddDropResponse.ERe"
  "sult:\007SUCCESS\"\253\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\025"
  "\n\021ERROR_UNSPECIFIED\020\001\022\035\n\031ERROR_OWNER_NOT"
  "_IN_LEAGUE\020\002\022\036\n\032ERROR_PLAYER_NOT_AVAILAB"
  "LE\020\003\022\034\n\030ERROR_PLAYER_NOT_ON_TEAM\020\004\022\037\n\033ER"
  "ROR_TRADE_ALREADY_PENDING\020\005\"=\n CMsgDOTAF"
  "antasyTeamTradesRequest\022\031\n\021fantasy_leagu"
  "e_id\030\001 \001(\r\"\211\003\n!CMsgDOTAFantasyTeamTrades"
  "Response\022C\n\006result\030\001 \001(\0162*.CMsgDOTAFanta"
  "syTeamTradesResponse.EResult:\007SUCCESS\0228\n"
  "\006trades\030\002 \003(\0132(.CMsgDOTAFantasyTeamTrade"
  "sResponse.Trade\032\234\001\n\005Trade\022\021\n\ttimestamp\030\001"
  " \001(\r\022\032\n\022owner_account_id_1\030\002 \001(\r\022\032\n\022owne"
  "r_account_id_2\030\003 \001(\r\022\033\n\023player_account_i"
  "d_1\030\004 \001(\r\022\033\n\023player_account_id_2\030\005 \001(\r\022\016"
  "\n\006status\030\006 \001(\r\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025"
  "\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMIS"
  "SION\020\002\"\212\001\n%CMsgDOTAFantasyTeamTradeCance"
  "lRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\024\n\014t"
  "eam_index_1\030\003 \001(\r\022\032\n\022owner_account_id_2\030"
  "\004 \001(\r\022\024\n\014team_index_2\030\005 \001(\r\"\316\001\n&CMsgDOTA"
  "FantasyTeamTradeCancelResponse\022H\n\006result"
  "\030\001 \001(\0162/.CMsgDOTAFantasyTeamTradeCancelR"
  "esponse.EResult:\007SUCCESS\"Z\n\007EResult\022\013\n\007S"
  "UCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR"
  "_NO_PERMISSION\020\002\022\022\n\016ERROR_NO_TRADE\020\003\"~\n "
  "CMsgDOTAFantasyTeamRosterRequest\022\031\n\021fant"
  "asy_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002 \001(\r\022"
  "\030\n\020owner_account_id\030\003 \001(\r\022\021\n\ttimestamp\030\004"
  " \001(\r\"\202\002\n!CMsgDOTAFantasyTeamRosterRespon"
  "se\022C\n\006result\030\001 \001(\0162*.CMsgDOTAFantasyTeam"
  "RosterResponse.EResult:\007SUCCESS\022\032\n\022playe"
  "r_account_ids\030\002 \003(\r\022\025\n\rplayer_locked\030\003 \003"
  "(\010\"e\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSP"
  "ECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\022\035\n\031ER"
  "ROR_OWNER_NOT_IN_LEAGUE\020\003\"G\n*CMsgDOTAFan"
  "tasyPlayerHisoricalStatsRequest\022\031\n\021fanta"
  "sy_league_id\030\001 \001(\r\"\201\006\n+CMsgDOTAFantasyPl"
  "ayerHisoricalStatsResponse\022M\n\006result\030\001 \001"
  "(\01624.CMsgDOTAFantasyPlayerHisoricalStats"
  "Response.EResult:\007SUCCESS\022G\n\005stats\030\002 \003(\013"
  "28.CMsgDOTAFantasyPlayerHisoricalStatsRe"
  "sponse.PlayerStats\032\201\002\n\026PlayerScoreAccumu"
  "lator\022\017\n\007matches\030\001 \001(\r\022\016\n\006levels\030\002 \001(\002\022\r"
  "\n\005kills\030\003 \001(\002\022\016\n\006deaths\030\004 \001(\002\022\017\n\007assists"
  "\030\005 \001(\002\022\021\n\tlast_hits\030\006 \001(\002\022\016\n\006denies\030\007 \001("
  "\002\022\013\n\003gpm\030\010 \001(\002\022\014\n\004xppm\030\t \001(\002\022\r\n\005stuns\030\n "
  "\001(\002\022\017\n\007healing\030\013 \001(\002\022\023\n\013tower_kills\030\014 \001("
  "\002\022\024\n\014roshan_kills\030\r \001(\002\022\r\n\005score\030\016 \001(\002\032\355"
  "\001\n\013PlayerStats\022\022\n\naccount_id\030\001 \001(\r\022\r\n\005we"
  "eks\030\002 \001(\r\022Z\n\rstats_premium\030\004 \001(\0132C.CMsgD"
  "OTAFantasyPlayerHisoricalStatsResponse.P"
  "layerScoreAccumulator\022_\n\022stats_professio"
  "nal\030\005 \001(\0132C.CMsgDOTAFantasyPlayerHisoric"
  "alStatsResponse.PlayerScoreAccumulator\"F"
  "\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIF"
  "IED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"G\n\031CMsgDO"
  "TAFantasyMessageAdd\022\031\n\021fantasy_league_id"
  "\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"g\n\036CMsgDOTAFanta"
  "syMessagesRequest\022\031\n\021fantasy_league_id\030\001"
  " \001(\r\022\025\n\rstart_message\030\002 \001(\r\022\023\n\013end_messa"
  "ge\030\003 \001(\r\"\335\002\n\037CMsgDOTAFantasyMessagesResp"
  "onse\022A\n\006result\030\001 \001(\0162(.CMsgDOTAFantasyMe"
  "ssagesResponse.EResult:\007SUCCESS\022:\n\010messa"
  "ges\030\002 \003(\0132(.CMsgDOTAFantasyMessagesRespo"
  "nse.Message\022\032\n\022num_total_messages\030\003 \001(\r\032"
  "W\n\007Message\022\022\n\nmessage_id\030\001 \001(\r\022\017\n\007messag"
  "e\030\002 \001(\t\022\031\n\021author_account_id\030\003 \001(\r\022\014\n\004ti"
  "me\030\004 \001(\r\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERRO"
  "R_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002"
  "\"e\n\032CMsgDOTAFantasyRemoveOwner\022\031\n\021fantas"
  "y_league_id\030\001 \001(\r\022\030\n\020owner_account_id\030\002 "
  "\001(\r\022\022\n\nteam_index\030\003 \001(\r\"\343\001\n\"CMsgDOTAFant"
  "asyRemoveOwnerResponse\022D\n\006result\030\001 \001(\0162+"
  ".CMsgDOTAFantasyRemoveOwnerResponse.ERes"
  "ult:\007SUCCESS\"w\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021"
  "ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSI"
  "ON\020\002\022\027\n\023ERROR_LEAGUE_LOCKED\020\003\022\026\n\022ERROR_N"
  "OT_A_MEMBER\020\004\"C\n&CMsgDOTAFantasySchedule"
  "dMatchesRequest\022\031\n\021fantasy_league_id\030\001 \001"
  "(\r\"\315\002\n\'CMsgDOTAFantasyScheduledMatchesRe"
  "sponse\022I\n\006result\030\001 \001(\01620.CMsgDOTAFantasy"
  "ScheduledMatchesResponse.EResult:\007SUCCES"
  "S\022Y\n\024scheduled_match_days\030\002 \003(\0132;.CMsgDO"
  "TAFantasyScheduledMatchesResponse.Schedu"
  "ledMatchDays\032M\n\022ScheduledMatchDays\022\021\n\tti"
  "mestamp\030\001 \001(\r\022\020\n\010team_ids\030\002 \003(\r\022\022\n\nleagu"
  "e_ids\030\003 \003(\r\"-\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021E"
  "RROR_UNSPECIFIED\020\001\"Z\n!CMsgDOTAFantasyLea"
  "veLeagueRequest\022\031\n\021fantasy_league_id\030\001 \001"
  "(\r\022\032\n\022fantasy_team_index\030\002 \001(\r\"\343\001\n\"CMsgD"
  "OTAFantasyLeaveLeagueResponse\022D\n\006result\030"
  "\001 \001(\0162+.CMsgDOTAFantasyLeaveLeagueRespon"
  "se.EResult:\007SUCCESS\"w\n\007EResult\022\013\n\007SUCCES"
  "S\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\024\n\020ERROR_NOT_"
  "MEMBER\020\002\022\032\n\026ERROR_LEAGUE_NOT_FOUND\020\003\022\026\n\022"
  "ERROR_DRAFT_ACTIVE\020\004\"\206\001\n(CMsgDOTAFantasy"
  "PlayerScoreDetailsRequest\022\031\n\021fantasy_lea"
  "gue_id\030\001 \001(\r\022\031\n\021player_account_id\030\002 \001(\r\022"
  "\022\n\nstart_time\030\003 \001(\r\022\020\n\010end_time\030\004 \001(\r\"\206\004"
  "\n)CMsgDOTAFantasyPlayerScoreDetailsRespo"
  "nse\022K\n\006result\030\001 \001(\01622.CMsgDOTAFantasyPla"
  "yerScoreDetailsResponse.EResult:\007SUCCESS"
  "\022H\n\004data\030\002 \003(\0132:.CMsgDOTAFantasyPlayerSc"
  "oreDetailsResponse.PlayerMatchData\032\374\001\n\017P"
  "layerMatchData\022\020\n\010match_id\030\001 \001(\004\022\021\n\tseri"
  "es_id\030\002 \001(\r\022\022\n\nseries_num\030\003 \001(\r\022\023\n\013serie"
  "s_type\030\004 \001(\r\022\023\n\013league_tier\030\005 \001(\r\022\021\n\tlea"
  "gue_id\030\006 \001(\r\022\030\n\020opposing_team_id\030\007 \001(\r\022\032"
  "\n\022opposing_team_logo\030\010 \001(\004\022\032\n\022opposing_t"
  "eam_name\030\t \001(\t\022\020\n\010owned_by\030\013 \001(\r\022\017\n\007benc"
  "hed\030\014 \001(\010\"C\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERR"
  "OR_UNSPECIFIED\020\001\022\024\n\020ERROR_NOT_MEMBER\020\002\"Z"
  "\n\035CMsgDOTAPassportVoteTeamGuess\022\021\n\tleagu"
  "e_id\030\001 \001(\r\022\021\n\twinner_id\030\002 \001(\r\022\023\n\013runneru"
  "p_id\030\003 \001(\r\"\221\001\n$CMsgDOTAPassportVoteGener"
  "icSelection\022V\n\017selection_index\030\001 \001(\0162\".D"
  "OTA_2013PassportSelectionIndices:\031PP13_S"
  "EL_ALLSTAR_PLAYER_0\022\021\n\tselection\030\002 \001(\r\"F"
  "\n\035CMsgDOTAPassportStampedPlayer\022\020\n\010steam"
  "_id\030\001 \001(\004\022\023\n\013stamp_level\030\002 \001(\r\";\n#CMsgDO"
  "TAPassportPlayerCardChallenge\022\024\n\014challen"
  "ge_id\030\001 \001(\r\"\214\002\n\024CMsgDOTAPassportVote\0222\n\n"
  "team_votes\030\001 \003(\0132\036.CMsgDOTAPassportVoteT"
  "eamGuess\022A\n\022generic_selections\030\002 \003(\0132%.C"
  "MsgDOTAPassportVoteGenericSelection\0227\n\017s"
  "tamped_players\030\003 \003(\0132\036.CMsgDOTAPassportS"
  "tampedPlayer\022D\n\026player_card_challenges\030\004"
  " \003(\0132$.CMsgDOTAPassportPlayerCardChallen"
  "ge\"P\n(CMsgClientToGCGetPlayerCardRosterR"
  "equest\022\021\n\tleague_id\030\001 \001(\r\022\021\n\ttimestamp\030\002"
  " \001(\r\"\262\002\n)CMsgClientToGCGetPlayerCardRost"
  "erResponse\022J\n\006result\030\001 \001(\01621.CMsgClientT"
  "oGCGetPlayerCardRosterResponse.Result:\007S"
  "UCCESS\022\033\n\023player_card_item_id\030\002 \003(\004\022\r\n\005s"
  "core\030\003 \001(\002\022\021\n\tfinalized\030\004 \001(\010\022\022\n\npercent"
  "ile\030\005 \001(\002\"f\n\006Result\022\013\n\007SUCCESS\020\000\022\025\n\021ERRO"
  "R_UNSPECIFIED\020\001\022\033\n\027ERROR_INVALID_LEAGUE_"
  "ID\020\002\022\033\n\027ERROR_INVALID_TIMESTAMP\020\003\"\215\001\n(CM"
  "sgClientToGCSetPlayerCardRosterRequest\022\021"
  "\n\tleague_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\014\n\004"
  "slot\030\003 \001(\r\022\033\n\023player_card_item_id\030\004 \001(\004\022"
  "\020\n\010event_id\030\005 \001(\r\"\356\002\n)CMsgClientToGCSetP"
  "layerCardRosterResponse\022J\n\006result\030\001 \001(\0162"
  "1.CMsgClientToGCSetPlayerCardRosterRespo"
  "nse.Result:\007SUCCESS\"\364\001\n\006Result\022\013\n\007SUCCES"
  "S\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\033\n\027ERROR_INVA"
  "LID_LEAGUE_ID\020\002\022\033\n\027ERROR_INVALID_TIMESTA"
  "MP\020\003\022\037\n\033ERROR_PLAYER_CARD_NOT_OWNED\020\004\022\026\n"
  "\022ERROR_INVALID_SLOT\020\005\022\032\n\026ERROR_FAILED_CA"
  "RD_INFO\020\006\022\033\n\027ERROR_ACCOUNT_DUPLICATE\020\007\022\032"
  "\n\026ERROR_LOCKED_TIMESTAMP\020\010\"\351\002\n\036CMsgDOTAF"
  "antasyDPCLeagueStatus\022@\n\014league_infos\030\001 "
  "\003(\0132*.CMsgDOTAFantasyDPCLeagueStatus.Lea"
  "gueInfo\032\302\001\n\nLeagueInfo\022\021\n\tleague_id\030\001 \001("
  "\r\022\023\n\013league_name\030\002 \001(\t\022\027\n\017start_timestam"
  "p\030\003 \001(\r\022\025\n\rend_timestamp\030\004 \001(\r\022\026\n\016day_ti"
  "mestamps\030\005 \003(\r\022D\n\006status\030\010 \001(\0162-.CMsgDOT"
  "AFantasyDPCLeagueStatus.ERosterStatus:\005U"
  "NSET\"@\n\rERosterStatus\022\t\n\005UNSET\020\000\022\013\n\007PART"
  "IAL\020\001\022\010\n\004FULL\020\002\022\r\n\tCONCLUDED\020\003\"\341\003\n\030CMsgD"
  "OTADPCSearchResults\0221\n\007players\030\001 \003(\0132 .C"
  "MsgDOTADPCSearchResults.Player\022-\n\005teams\030"
  "\002 \003(\0132\036.CMsgDOTADPCSearchResults.Team\0221\n"
  "\007leagues\030\003 \003(\0132 .CMsgDOTADPCSearchResult"
  "s.League\0325\n\006Player\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002"
  " \001(\t\022\021\n\treal_name\030\003 \001(\t\032-\n\004Team\022\n\n\002id\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\032\"\n\006League"
  "\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"\245\001\n\025ESearchRe"
  "sultsDesired\022#\n\037k_ESearchResultsDesired_"
  "Players\020\001\022!\n\035k_ESearchResultsDesired_Tea"
  "ms\020\002\022#\n\037k_ESearchResultsDesired_Leagues\020"
  "\004\022\037\n\033k_ESearchResultsDesired_All\020\007\"\203\001\n\037C"
  "MsgDOTADPCTeamFavoriteRankings\0224\n\005teams\030"
  "\001 \003(\0132%.CMsgDOTADPCTeamFavoriteRankings."
  "Team\032*\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\021\n\tfavorit"
  "es\030\002 \001(\r*\243\025\n!DOTA_2013PassportSelectionI"
  "ndices\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_0\020\000\022\035\n"
  "\031PP13_SEL_ALLSTAR_PLAYER_1\020\001\022\035\n\031PP13_SEL"
  "_ALLSTAR_PLAYER_2\020\002\022\035\n\031PP13_SEL_ALLSTAR_"
  "PLAYER_3\020\003\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_4\020"
  "\004\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_5\020\005\022\035\n\031PP13"
  "_SEL_ALLSTAR_PLAYER_6\020\006\022\035\n\031PP13_SEL_ALLS"
  "TAR_PLAYER_7\020\007\022\035\n\031PP13_SEL_ALLSTAR_PLAYE"
  "R_8\020\010\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_9\020\t\022\034\n\030"
  "PP13_SEL_QUALPRED_WEST_0\020\n\022\034\n\030PP13_SEL_Q"
  "UALPRED_WEST_1\020\013\022\034\n\030PP13_SEL_QUALPRED_WE"
  "ST_2\020\014\022\034\n\030PP13_SEL_QUALPRED_WEST_3\020\r\022\034\n\030"
  "PP13_SEL_QUALPRED_WEST_4\020\016\022\034\n\030PP13_SEL_Q"
  "UALPRED_WEST_5\020\017\022\034\n\030PP13_SEL_QUALPRED_WE"
  "ST_6\020\020\022\034\n\030PP13_SEL_QUALPRED_WEST_7\020\021\022\034\n\030"
  "PP13_SEL_QUALPRED_WEST_8\020\022\022\034\n\030PP13_SEL_Q"
  "UALPRED_WEST_9\020\023\022\035\n\031PP13_SEL_QUALPRED_WE"
  "ST_10\020\024\022\035\n\031PP13_SEL_QUALPRED_WEST_11\020\025\022\035"
  "\n\031PP13_SEL_QUALPRED_WEST_12\020\026\022\035\n\031PP13_SE"
  "L_QUALPRED_WEST_13\020\027\022\035\n\031PP13_SEL_QUALPRE"
  "D_WEST_14\020\030\022\034\n\030PP13_SEL_QUALPRED_EAST_0\020"
  "\031\022\034\n\030PP13_SEL_QUALPRED_EAST_1\020\032\022\034\n\030PP13_"
  "SEL_QUALPRED_EAST_2\020\033\022\034\n\030PP13_SEL_QUALPR"
  "ED_EAST_3\020\034\022\034\n\030PP13_SEL_QUALPRED_EAST_4\020"
  "\035\022\034\n\030PP13_SEL_QUALPRED_EAST_5\020\036\022\034\n\030PP13_"
  "SEL_QUALPRED_EAST_6\020\037\022\034\n\030PP13_SEL_QUALPR"
  "ED_EAST_7\020 \022\034\n\030PP13_SEL_QUALPRED_EAST_8\020"
  "!\022\034\n\030PP13_SEL_QUALPRED_EAST_9\020\"\022\035\n\031PP13_"
  "SEL_QUALPRED_EAST_10\020#\022\035\n\031PP13_SEL_QUALP"
  "RED_EAST_11\020$\022\035\n\031PP13_SEL_QUALPRED_EAST_"
  "12\020%\022\035\n\031PP13_SEL_QUALPRED_EAST_13\020&\022\035\n\031P"
  "P13_SEL_QUALPRED_EAST_14\020\'\022\031\n\025PP13_SEL_T"
  "EAMCUP_TEAM\020(\022\033\n\027PP13_SEL_TEAMCUP_PLAYER"
  "\020)\022\036\n\032PP13_SEL_TEAMCUP_TEAM_LOCK\020*\022 \n\034PP"
  "13_SEL_TEAMCUP_PLAYER_LOCK\020+\022\030\n\024PP13_SEL"
  "_EVENTPRED_0\020,\022\030\n\024PP13_SEL_EVENTPRED_1\020-"
  "\022\030\n\024PP13_SEL_EVENTPRED_2\020.\022\030\n\024PP13_SEL_E"
  "VENTPRED_3\020/\022\030\n\024PP13_SEL_EVENTPRED_4\0200\022\030"
  "\n\024PP13_SEL_EVENTPRED_5\0201\022\030\n\024PP13_SEL_EVE"
  "NTPRED_6\0202\022\030\n\024PP13_SEL_EVENTPRED_7\0203\022\030\n\024"
  "PP13_SEL_EVENTPRED_8\0204\022\030\n\024PP13_SEL_EVENT"
  "PRED_9\0205\022\031\n\025PP13_SEL_EVENTPRED_10\0206\022\031\n\025P"
  "P13_SEL_EVENTPRED_11\0207\022\031\n\025PP13_SEL_EVENT"
  "PRED_12\0208\022\031\n\025PP13_SEL_EVENTPRED_13\0209\022\031\n\025"
  "PP13_SEL_EVENTPRED_14\020:\022\031\n\025PP13_SEL_EVEN"
  "TPRED_15\020;\022\031\n\025PP13_SEL_EVENTPRED_16\020<\022\031\n"
  "\025PP13_SEL_EVENTPRED_17\020=\022\031\n\025PP13_SEL_EVE"
  "NTPRED_18\020>\022\031\n\025PP13_SEL_EVENTPRED_19\020\?\022\031"
  "\n\025PP13_SEL_EVENTPRED_20\020@\022\031\n\025PP13_SEL_EV"
  "ENTPRED_21\020A\022\031\n\025PP13_SEL_EVENTPRED_22\020B\022"
  "\031\n\025PP13_SEL_EVENTPRED_23\020C\022\031\n\025PP13_SEL_E"
  "VENTPRED_24\020D\022\031\n\025PP13_SEL_EVENTPRED_25\020E"
  "\022\031\n\025PP13_SEL_EVENTPRED_26\020F\022\031\n\025PP13_SEL_"
  "EVENTPRED_27\020G\022\031\n\025PP13_SEL_EVENTPRED_28\020"
  "H\022\031\n\025PP13_SEL_EVENTPRED_29\020I\022\031\n\025PP13_SEL"
  "_EVENTPRED_30\020J\022\031\n\025PP13_SEL_EVENTPRED_31"
  "\020K\022\031\n\025PP13_SEL_EVENTPRED_32\020L\022\031\n\025PP13_SE"
  "L_EVENTPRED_33\020M\022\031\n\025PP13_SEL_EVENTPRED_3"
  "4\020N\022\031\n\025PP13_SEL_EVENTPRED_35\020O\022\031\n\025PP13_S"
  "EL_EVENTPRED_36\020P\022\031\n\025PP13_SEL_EVENTPRED_"
  "37\020Q\022\031\n\025PP13_SEL_EVENTPRED_38\020R\022\031\n\025PP13_"
  "SEL_EVENTPRED_39\020S\022\031\n\025PP13_SEL_EVENTPRED"
  "_40\020T\022\031\n\025PP13_SEL_EVENTPRED_41\020U\022\031\n\025PP13"
  "_SEL_EVENTPRED_42\020V\022\031\n\025PP13_SEL_EVENTPRE"
  "D_43\020W\022\023\n\017PP13_SEL_SOLO_0\020X\022\023\n\017PP13_SEL_"
  "SOLO_1\020Y\022\023\n\017PP13_SEL_SOLO_2\020Z\022\023\n\017PP13_SE"
  "L_SOLO_3\020[\022\023\n\017PP13_SEL_SOLO_4\020\\\022\023\n\017PP13_"
  "SEL_SOLO_5\020]\022\023\n\017PP13_SEL_SOLO_6\020^\022\023\n\017PP1"
  "3_SEL_SOLO_7\020_B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto = {
  false, false, 20061, descriptor_table_protodef_dota_5fgcmessages_5fclient_5ffantasy_2eproto, "dota_gcmessages_client_fantasy.proto", 
  &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_deps, 1, 98,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5ffantasy_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[0];
}
bool CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::SUCCESS;
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_TOO_MANY_LEAGUES;
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_INVALID_TEAM_COUNT;
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_CREATION_DISABLED;
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MIN;
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MAX;
constexpr int CMsgDOTACreateFantasyLeagueResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[1];
}
bool CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeagueEditInfoResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[2];
}
bool CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_NOT_FOUND;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_BAD_PASSWORD;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_FULL;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_ALREADY_MEMBER;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_LOCKED;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeagueFindResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[3];
}
bool CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_BAD_LEAGUE_ID;
constexpr CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeagueInfoResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[4];
}
bool CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_BAD_LEAGUE_ID;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeagueMatchupsResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAEditFantasyTeamResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[5];
}
bool CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::SUCCESS;
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_INVALID_TEAM_INFO;
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NAME_ALREADY_TAKEN;
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MIN;
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MAX;
constexpr int CMsgDOTAEditFantasyTeamResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[6];
}
bool CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_OWNER_NOT_IN_LEAGUE;
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamScoreResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[7];
}
bool CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamStandingsResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[8];
}
bool CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::SUCCESS;
constexpr CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MIN;
constexpr CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyPlayerScoreResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[9];
}
bool CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::SUCCESS;
constexpr CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MIN;
constexpr CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyPlayerStandingsResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[10];
}
bool CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_SEASON_ID;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_LEAGUE_NAME;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_TEAM_NAME;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_TICKET;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeagueCreateResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[11];
}
bool CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_FANTASY_LEAGUE_ID;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_NAME;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FULL;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_ALREADY_MEMBER;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_PASSWORD;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_TICKET;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_LEAGUE_LOCKED;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamCreateResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[12];
}
bool CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[13];
}
bool CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_INVALID_FANTASY_LEAGUE;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_FANTASY_LEAGUE_NOT_DRAFTING;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_OWNER_NOT_IN_LEAGUE;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_NOT_OWNERS_TURN;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_INVALID;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_UNAVAILABLE;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_NO_VALID_SLOTS;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[14];
}
bool CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_OWNER_NOT_IN_LEAGUE;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOTS_INVALID;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOT_LOCKED;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamRosterSwapResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[15];
}
bool CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_OWNER_NOT_IN_LEAGUE;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_AVAILABLE;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_ON_TEAM;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_TRADE_ALREADY_PENDING;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[16];
}
bool CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamTradesResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[17];
}
bool CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_TRADE;
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamTradeCancelResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[18];
}
bool CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::SUCCESS;
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_OWNER_NOT_IN_LEAGUE;
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MIN;
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyTeamRosterResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[19];
}
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::SUCCESS;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MIN;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyMessagesResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[20];
}
bool CMsgDOTAFantasyMessagesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::SUCCESS;
constexpr CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MIN;
constexpr CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyMessagesResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[21];
}
bool CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::SUCCESS;
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NO_PERMISSION;
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_LEAGUE_LOCKED;
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NOT_A_MEMBER;
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MIN;
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyRemoveOwnerResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[22];
}
bool CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::SUCCESS;
constexpr CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MIN;
constexpr CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyScheduledMatchesResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[23];
}
bool CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::SUCCESS;
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_NOT_MEMBER;
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_LEAGUE_NOT_FOUND;
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_DRAFT_ACTIVE;
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MIN;
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyLeaveLeagueResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[24];
}
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::SUCCESS;
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_UNSPECIFIED;
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_NOT_MEMBER;
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MIN;
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MAX;
constexpr int CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[25];
}
bool CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::SUCCESS;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MIN;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MAX;
constexpr int CMsgClientToGCGetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[26];
}
bool CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::SUCCESS;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_PLAYER_CARD_NOT_OWNED;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_SLOT;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_FAILED_CARD_INFO;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_ACCOUNT_DUPLICATE;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_LOCKED_TIMESTAMP;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MIN;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MAX;
constexpr int CMsgClientToGCSetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[27];
}
bool CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::UNSET;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::PARTIAL;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::FULL;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::CONCLUDED;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_MIN;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_MAX;
constexpr int CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[28];
}
bool CMsgDOTADPCSearchResults_ESearchResultsDesired_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_Players;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_Teams;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_Leagues;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_All;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::ESearchResultsDesired_MIN;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::ESearchResultsDesired_MAX;
constexpr int CMsgDOTADPCSearchResults::ESearchResultsDesired_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[29];
}
bool DOTA_2013PassportSelectionIndices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgDOTAPlayerInfo_Results::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPlayerInfo_Results>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_placement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfo.Results)
}
CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results(const CMsgDOTAPlayerInfo_Results& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&earnings_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(earnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfo.Results)
}

void CMsgDOTAPlayerInfo_Results::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&earnings_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(earnings_));
}

CMsgDOTAPlayerInfo_Results::~CMsgDOTAPlayerInfo_Results() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfo.Results)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPlayerInfo_Results::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPlayerInfo_Results::ArenaDtor(void* object) {
  CMsgDOTAPlayerInfo_Results* _this = reinterpret_cast< CMsgDOTAPlayerInfo_Results* >(object);
  (void)_this;
}
void CMsgDOTAPlayerInfo_Results::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPlayerInfo_Results::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPlayerInfo_Results::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfo.Results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&earnings_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(earnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfo_Results::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 placement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_placement(&has_bits);
          placement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 earnings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_earnings(&has_bits);
          earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPlayerInfo_Results::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfo.Results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 placement = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_placement(), target);
  }

  // optional uint32 earnings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_earnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfo.Results)
  return target;
}

size_t CMsgDOTAPlayerInfo_Results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfo.Results)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 placement = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_placement());
    }

    // optional uint32 earnings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_earnings());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfo_Results::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPlayerInfo.Results)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfo_Results* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPlayerInfo_Results>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPlayerInfo.Results)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPlayerInfo.Results)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfo_Results::MergeFrom(const CMsgDOTAPlayerInfo_Results& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfo.Results)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      placement_ = from.placement_;
    }
    if (cached_has_bits & 0x00000004u) {
      earnings_ = from.earnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPlayerInfo_Results::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPlayerInfo.Results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfo_Results::CopyFrom(const CMsgDOTAPlayerInfo_Results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfo.Results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo_Results::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo_Results::InternalSwap(CMsgDOTAPlayerInfo_Results* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_Results, earnings_)
      + sizeof(CMsgDOTAPlayerInfo_Results::earnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_Results, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfo_Results::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPlayerInfo_AuditEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPlayerInfo_AuditEntry>()._has_bits_);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_url_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfo.AuditEntry)
}
CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry(const CMsgDOTAPlayerInfo_AuditEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_tag(), 
      GetArena());
  }
  team_url_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_url_logo()) {
    team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_url_logo(), 
      GetArena());
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfo.AuditEntry)
}

void CMsgDOTAPlayerInfo_AuditEntry::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_url_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(team_id_));
}

CMsgDOTAPlayerInfo_AuditEntry::~CMsgDOTAPlayerInfo_AuditEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfo.AuditEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPlayerInfo_AuditEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_url_logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAPlayerInfo_AuditEntry::ArenaDtor(void* object) {
  CMsgDOTAPlayerInfo_AuditEntry* _this = reinterpret_cast< CMsgDOTAPlayerInfo_AuditEntry* >(object);
  (void)_this;
}
void CMsgDOTAPlayerInfo_AuditEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPlayerInfo_AuditEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPlayerInfo_AuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfo.AuditEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_url_logo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfo_AuditEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_timestamp(&has_bits);
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.AuditEntry.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.AuditEntry.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_url_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_team_url_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPlayerInfo_AuditEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfo.AuditEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_timestamp(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_id(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.AuditEntry.team_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name(), target);
  }

  // optional string team_tag = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.AuditEntry.team_tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_team_tag(), target);
  }

  // optional string team_url_logo = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_url_logo().data(), static_cast<int>(this->_internal_team_url_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_team_url_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfo.AuditEntry)
  return target;
}

size_t CMsgDOTAPlayerInfo_AuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfo.AuditEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string team_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_url_logo = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_url_logo());
    }

    // optional uint32 start_timestamp = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_timestamp());
    }

    // optional uint32 end_timestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_timestamp());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfo_AuditEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPlayerInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfo_AuditEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPlayerInfo_AuditEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPlayerInfo.AuditEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPlayerInfo.AuditEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfo_AuditEntry::MergeFrom(const CMsgDOTAPlayerInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_url_logo(from._internal_team_url_logo());
    }
    if (cached_has_bits & 0x00000008u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPlayerInfo_AuditEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPlayerInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfo_AuditEntry::CopyFrom(const CMsgDOTAPlayerInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo_AuditEntry::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo_AuditEntry::InternalSwap(CMsgDOTAPlayerInfo_AuditEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_url_logo_.Swap(&other->team_url_logo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_AuditEntry, team_id_)
      + sizeof(CMsgDOTAPlayerInfo_AuditEntry::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_AuditEntry, start_timestamp_)>(
          reinterpret_cast<char*>(&start_timestamp_),
          reinterpret_cast<char*>(&other->start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfo_AuditEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPlayerInfo>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_role(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sponsor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_pro(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_team_url_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena),
  audit_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfo)
}
CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo(const CMsgDOTAPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      results_(from.results_),
      audit_entries_(from.audit_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_tag(), 
      GetArena());
  }
  sponsor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sponsor()) {
    sponsor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sponsor(), 
      GetArena());
  }
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_real_name()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArena());
  }
  team_url_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_url_logo()) {
    team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_url_logo(), 
      GetArena());
  }
  team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_abbreviation()) {
    team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_abbreviation(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_earnings_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(total_earnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfo)
}

void CMsgDOTAPlayerInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sponsor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_url_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_earnings_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(total_earnings_));
}

CMsgDOTAPlayerInfo::~CMsgDOTAPlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sponsor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_url_logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAPlayerInfo::ArenaDtor(void* object) {
  CMsgDOTAPlayerInfo* _this = reinterpret_cast< CMsgDOTAPlayerInfo* >(object);
  (void)_this;
}
void CMsgDOTAPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  audit_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      sponsor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      real_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      team_url_logo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_earnings_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(total_earnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Roles_IsValid(val))) {
            _internal_set_fantasy_role(static_cast<::Fantasy_Roles>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sponsor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sponsor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.sponsor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_locked = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_locked(&has_bits);
          is_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pro = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_pro(&has_bits);
          is_pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string real_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.real_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_earnings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_earnings(&has_bits);
          total_earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPlayerInfo.Results results = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string team_url_logo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_team_url_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_url_logo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_audit_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string team_abbreviation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_code(), target);
  }

  // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_fantasy_role(), target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id(), target);
  }

  // optional string team_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_team_name(), target);
  }

  // optional string team_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_tag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_team_tag(), target);
  }

  // optional string sponsor = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sponsor().data(), static_cast<int>(this->_internal_sponsor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.sponsor");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sponsor(), target);
  }

  // optional bool is_locked = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_locked(), target);
  }

  // optional bool is_pro = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_pro(), target);
  }

  // optional string real_name = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.real_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_real_name(), target);
  }

  // optional uint32 total_earnings = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_total_earnings(), target);
  }

  // repeated .CMsgDOTAPlayerInfo.Results results = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_results(i), target, stream);
  }

  // optional string team_url_logo = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_url_logo().data(), static_cast<int>(this->_internal_team_url_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_url_logo");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_team_url_logo(), target);
  }

  // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audit_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_audit_entries(i), target, stream);
  }

  // optional string team_abbreviation = 17;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_team_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfo)
  return target;
}

size_t CMsgDOTAPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAPlayerInfo.Results results = 14;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  total_size += 2UL * this->_internal_audit_entries_size();
  for (const auto& msg : this->audit_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string country_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string team_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string sponsor = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sponsor());
    }

    // optional string real_name = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional string team_url_logo = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_url_logo());
    }

    // optional string team_abbreviation = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fantasy_role());
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional bool is_locked = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_pro = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 total_earnings = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_earnings());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPlayerInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfo::MergeFrom(const CMsgDOTAPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  audit_entries_.MergeFrom(from.audit_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_sponsor(from._internal_sponsor());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_team_url_logo(from._internal_team_url_logo());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      fantasy_role_ = from.fantasy_role_;
    }
    if (cached_has_bits & 0x00000400u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_locked_ = from.is_locked_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_pro_ = from.is_pro_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_earnings_ = from.total_earnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfo::CopyFrom(const CMsgDOTAPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo::InternalSwap(CMsgDOTAPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  results_.InternalSwap(&other->results_);
  audit_entries_.InternalSwap(&other->audit_entries_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sponsor_.Swap(&other->sponsor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  real_name_.Swap(&other->real_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_url_logo_.Swap(&other->team_url_logo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_abbreviation_.Swap(&other->team_abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo, total_earnings_)
      + sizeof(CMsgDOTAPlayerInfo::total_earnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPlayerInfoList::_Internal {
 public:
};

CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfoList)
}
CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList(const CMsgDOTAPlayerInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_infos_(from.player_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfoList)
}

void CMsgDOTAPlayerInfoList::SharedCtor() {
}

CMsgDOTAPlayerInfoList::~CMsgDOTAPlayerInfoList() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPlayerInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPlayerInfoList::ArenaDtor(void* object) {
  CMsgDOTAPlayerInfoList* _this = reinterpret_cast< CMsgDOTAPlayerInfoList* >(object);
  (void)_this;
}
void CMsgDOTAPlayerInfoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPlayerInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPlayerInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAPlayerInfo player_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPlayerInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAPlayerInfo player_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfoList)
  return target;
}

size_t CMsgDOTAPlayerInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAPlayerInfo player_infos = 1;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPlayerInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPlayerInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPlayerInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPlayerInfoList)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfoList::MergeFrom(const CMsgDOTAPlayerInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_infos_.MergeFrom(from.player_infos_);
}

void CMsgDOTAPlayerInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPlayerInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfoList::CopyFrom(const CMsgDOTAPlayerInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfoList::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfoList::InternalSwap(CMsgDOTAPlayerInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_infos_.InternalSwap(&other->player_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCProfileInfo_PredictionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCProfileInfo_PredictionInfo>()._has_bits_);
  static void set_has_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCProfileInfo.PredictionInfo)
}
CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo(const CMsgDOTADPCProfileInfo_PredictionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&percent_, &from.percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_winnings_) -
    reinterpret_cast<char*>(&percent_)) + sizeof(shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCProfileInfo.PredictionInfo)
}

void CMsgDOTADPCProfileInfo_PredictionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&percent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shard_winnings_) -
    reinterpret_cast<char*>(&percent_)) + sizeof(shard_winnings_));
}

CMsgDOTADPCProfileInfo_PredictionInfo::~CMsgDOTADPCProfileInfo_PredictionInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCProfileInfo.PredictionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCProfileInfo_PredictionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCProfileInfo_PredictionInfo::ArenaDtor(void* object) {
  CMsgDOTADPCProfileInfo_PredictionInfo* _this = reinterpret_cast< CMsgDOTADPCProfileInfo_PredictionInfo* >(object);
  (void)_this;
}
void CMsgDOTADPCProfileInfo_PredictionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCProfileInfo_PredictionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCProfileInfo_PredictionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shard_winnings_) -
        reinterpret_cast<char*>(&percent_)) + sizeof(shard_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCProfileInfo_PredictionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_percent(&has_bits);
          percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shard_winnings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shard_winnings(&has_bits);
          shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCProfileInfo_PredictionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_percent(), target);
  }

  // optional int32 shard_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shard_winnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCProfileInfo.PredictionInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo_PredictionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 percent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_percent());
    }

    // optional int32 shard_winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_shard_winnings());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCProfileInfo_PredictionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCProfileInfo_PredictionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCProfileInfo_PredictionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCProfileInfo.PredictionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCProfileInfo.PredictionInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCProfileInfo_PredictionInfo::MergeFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      percent_ = from.percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      shard_winnings_ = from.shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCProfileInfo_PredictionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCProfileInfo_PredictionInfo::CopyFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo_PredictionInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo_PredictionInfo::InternalSwap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_PredictionInfo, shard_winnings_)
      + sizeof(CMsgDOTADPCProfileInfo_PredictionInfo::shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_PredictionInfo, percent_)>(
          reinterpret_cast<char*>(&percent_),
          reinterpret_cast<char*>(&other->percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCProfileInfo_PredictionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCProfileInfo_FantasyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCProfileInfo_FantasyInfo>()._has_bits_);
  static void set_has_top_90_finishes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_75_finishes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_50_finishes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCProfileInfo.FantasyInfo)
}
CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo(const CMsgDOTADPCProfileInfo_FantasyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top_90_finishes_, &from.top_90_finishes_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_winnings_) -
    reinterpret_cast<char*>(&top_90_finishes_)) + sizeof(shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCProfileInfo.FantasyInfo)
}

void CMsgDOTADPCProfileInfo_FantasyInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_90_finishes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shard_winnings_) -
    reinterpret_cast<char*>(&top_90_finishes_)) + sizeof(shard_winnings_));
}

CMsgDOTADPCProfileInfo_FantasyInfo::~CMsgDOTADPCProfileInfo_FantasyInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCProfileInfo.FantasyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCProfileInfo_FantasyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCProfileInfo_FantasyInfo::ArenaDtor(void* object) {
  CMsgDOTADPCProfileInfo_FantasyInfo* _this = reinterpret_cast< CMsgDOTADPCProfileInfo_FantasyInfo* >(object);
  (void)_this;
}
void CMsgDOTADPCProfileInfo_FantasyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCProfileInfo_FantasyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCProfileInfo_FantasyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&top_90_finishes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shard_winnings_) -
        reinterpret_cast<char*>(&top_90_finishes_)) + sizeof(shard_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCProfileInfo_FantasyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 top_90_finishes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_top_90_finishes(&has_bits);
          top_90_finishes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top_75_finishes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_75_finishes(&has_bits);
          top_75_finishes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top_50_finishes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_top_50_finishes(&has_bits);
          top_50_finishes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shard_winnings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_shard_winnings(&has_bits);
          shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCProfileInfo_FantasyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_90_finishes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_90_finishes(), target);
  }

  // optional uint32 top_75_finishes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_75_finishes(), target);
  }

  // optional uint32 top_50_finishes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_top_50_finishes(), target);
  }

  // optional uint32 shard_winnings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_shard_winnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCProfileInfo.FantasyInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo_FantasyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 top_90_finishes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_90_finishes());
    }

    // optional uint32 top_75_finishes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_75_finishes());
    }

    // optional uint32 top_50_finishes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_50_finishes());
    }

    // optional uint32 shard_winnings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shard_winnings());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCProfileInfo_FantasyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCProfileInfo_FantasyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCProfileInfo_FantasyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCProfileInfo.FantasyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCProfileInfo.FantasyInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCProfileInfo_FantasyInfo::MergeFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      top_90_finishes_ = from.top_90_finishes_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_75_finishes_ = from.top_75_finishes_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_50_finishes_ = from.top_50_finishes_;
    }
    if (cached_has_bits & 0x00000008u) {
      shard_winnings_ = from.shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCProfileInfo_FantasyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCProfileInfo_FantasyInfo::CopyFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo_FantasyInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo_FantasyInfo::InternalSwap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_FantasyInfo, shard_winnings_)
      + sizeof(CMsgDOTADPCProfileInfo_FantasyInfo::shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_FantasyInfo, top_90_finishes_)>(
          reinterpret_cast<char*>(&top_90_finishes_),
          reinterpret_cast<char*>(&other->top_90_finishes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCProfileInfo_FantasyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCProfileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCProfileInfo>()._has_bits_);
  static const ::CMsgDOTAPlayerInfo& player_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTADPCProfileInfo_PredictionInfo& prediction_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_prediction_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTADPCProfileInfo_FantasyInfo& fantasy_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_fantasy_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgDOTAPlayerInfo&
CMsgDOTADPCProfileInfo::_Internal::player_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->player_info_;
}
const ::CMsgDOTADPCProfileInfo_PredictionInfo&
CMsgDOTADPCProfileInfo::_Internal::prediction_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->prediction_info_;
}
const ::CMsgDOTADPCProfileInfo_FantasyInfo&
CMsgDOTADPCProfileInfo::_Internal::fantasy_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->fantasy_info_;
}
CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  disabled_notifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCProfileInfo)
}
CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo(const CMsgDOTADPCProfileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      disabled_notifications_(from.disabled_notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::CMsgDOTAPlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  if (from._internal_has_prediction_info()) {
    prediction_info_ = new ::CMsgDOTADPCProfileInfo_PredictionInfo(*from.prediction_info_);
  } else {
    prediction_info_ = nullptr;
  }
  if (from._internal_has_fantasy_info()) {
    fantasy_info_ = new ::CMsgDOTADPCProfileInfo_FantasyInfo(*from.fantasy_info_);
  } else {
    fantasy_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCProfileInfo)
}

void CMsgDOTADPCProfileInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_info_) -
    reinterpret_cast<char*>(&player_info_)) + sizeof(fantasy_info_));
}

CMsgDOTADPCProfileInfo::~CMsgDOTADPCProfileInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCProfileInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCProfileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
  if (this != internal_default_instance()) delete prediction_info_;
  if (this != internal_default_instance()) delete fantasy_info_;
}

void CMsgDOTADPCProfileInfo::ArenaDtor(void* object) {
  CMsgDOTADPCProfileInfo* _this = reinterpret_cast< CMsgDOTADPCProfileInfo* >(object);
  (void)_this;
}
void CMsgDOTADPCProfileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCProfileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCProfileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_notifications_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_info_ != nullptr);
      player_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prediction_info_ != nullptr);
      prediction_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fantasy_info_ != nullptr);
      fantasy_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCProfileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAPlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fantasy_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 disabled_notifications = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_disabled_notifications(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_disabled_notifications(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCProfileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCProfileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAPlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_info(this), target, stream);
  }

  // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prediction_info(this), target, stream);
  }

  // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fantasy_info(this), target, stream);
  }

  // repeated uint32 disabled_notifications = 4;
  for (int i = 0, n = this->_internal_disabled_notifications_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_disabled_notifications(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCProfileInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCProfileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 disabled_notifications = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->disabled_notifications_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_disabled_notifications_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgDOTAPlayerInfo player_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_info_);
    }

    // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_info_);
    }

    // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fantasy_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCProfileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCProfileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCProfileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCProfileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCProfileInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCProfileInfo::MergeFrom(const CMsgDOTADPCProfileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_notifications_.MergeFrom(from.disabled_notifications_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player_info()->::CMsgDOTAPlayerInfo::MergeFrom(from._internal_player_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prediction_info()->::CMsgDOTADPCProfileInfo_PredictionInfo::MergeFrom(from._internal_prediction_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fantasy_info()->::CMsgDOTADPCProfileInfo_FantasyInfo::MergeFrom(from._internal_fantasy_info());
    }
  }
}

void CMsgDOTADPCProfileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCProfileInfo::CopyFrom(const CMsgDOTADPCProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo::InternalSwap(CMsgDOTADPCProfileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disabled_notifications_.InternalSwap(&other->disabled_notifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo, fantasy_info_)
      + sizeof(CMsgDOTADPCProfileInfo::fantasy_info_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo, player_info_)>(
          reinterpret_cast<char*>(&player_info_),
          reinterpret_cast<char*>(&other->player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCProfileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeaderboards_RegionLeaderboard::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaderboards_RegionLeaderboard>()._has_bits_);
  static void set_has_division(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaderboards.RegionLeaderboard)
}
CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard(const CMsgDOTALeaderboards_RegionLeaderboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  division_ = from.division_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaderboards.RegionLeaderboard)
}

void CMsgDOTALeaderboards_RegionLeaderboard::SharedCtor() {
division_ = 0u;
}

CMsgDOTALeaderboards_RegionLeaderboard::~CMsgDOTALeaderboards_RegionLeaderboard() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaderboards.RegionLeaderboard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeaderboards_RegionLeaderboard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeaderboards_RegionLeaderboard::ArenaDtor(void* object) {
  CMsgDOTALeaderboards_RegionLeaderboard* _this = reinterpret_cast< CMsgDOTALeaderboards_RegionLeaderboard* >(object);
  (void)_this;
}
void CMsgDOTALeaderboards_RegionLeaderboard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeaderboards_RegionLeaderboard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeaderboards_RegionLeaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaderboards.RegionLeaderboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  division_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaderboards_RegionLeaderboard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 division = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_division(&has_bits);
          division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeaderboards_RegionLeaderboard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaderboards.RegionLeaderboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_division(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaderboards.RegionLeaderboard)
  return target;
}

size_t CMsgDOTALeaderboards_RegionLeaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaderboards.RegionLeaderboard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // optional uint32 division = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_division());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaderboards_RegionLeaderboard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeaderboards.RegionLeaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaderboards_RegionLeaderboard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeaderboards_RegionLeaderboard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeaderboards.RegionLeaderboard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeaderboards.RegionLeaderboard)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaderboards_RegionLeaderboard::MergeFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaderboards.RegionLeaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  if (from._internal_has_division()) {
    _internal_set_division(from._internal_division());
  }
}

void CMsgDOTALeaderboards_RegionLeaderboard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeaderboards.RegionLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaderboards_RegionLeaderboard::CopyFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaderboards.RegionLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaderboards_RegionLeaderboard::IsInitialized() const {
  return true;
}

void CMsgDOTALeaderboards_RegionLeaderboard::InternalSwap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  swap(division_, other->division_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaderboards_RegionLeaderboard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeaderboards::_Internal {
 public:
};

CMsgDOTALeaderboards::CMsgDOTALeaderboards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leaderboards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaderboards)
}
CMsgDOTALeaderboards::CMsgDOTALeaderboards(const CMsgDOTALeaderboards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leaderboards_(from.leaderboards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaderboards)
}

void CMsgDOTALeaderboards::SharedCtor() {
}

CMsgDOTALeaderboards::~CMsgDOTALeaderboards() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaderboards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeaderboards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeaderboards::ArenaDtor(void* object) {
  CMsgDOTALeaderboards* _this = reinterpret_cast< CMsgDOTALeaderboards* >(object);
  (void)_this;
}
void CMsgDOTALeaderboards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeaderboards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeaderboards::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaderboards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaderboards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaderboards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeaderboards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaderboards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaderboards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_leaderboards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaderboards)
  return target;
}

size_t CMsgDOTALeaderboards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaderboards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  total_size += 1UL * this->_internal_leaderboards_size();
  for (const auto& msg : this->leaderboards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaderboards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeaderboards)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaderboards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeaderboards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeaderboards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeaderboards)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaderboards::MergeFrom(const CMsgDOTALeaderboards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaderboards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leaderboards_.MergeFrom(from.leaderboards_);
}

void CMsgDOTALeaderboards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeaderboards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaderboards::CopyFrom(const CMsgDOTALeaderboards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaderboards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaderboards::IsInitialized() const {
  return true;
}

void CMsgDOTALeaderboards::InternalSwap(CMsgDOTALeaderboards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leaderboards_.InternalSwap(&other->leaderboards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaderboards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTACreateFantasyLeagueRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTACreateFantasyLeagueRequest>()._has_bits_);
  static void set_has_league_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selection_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACreateFantasyLeagueRequest)
}
CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest(const CMsgDOTACreateFantasyLeagueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_league_name()) {
    league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_league_name(), 
      GetArena());
  }
  ::memcpy(&league_logo_, &from.league_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_count_) -
    reinterpret_cast<char*>(&league_logo_)) + sizeof(team_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateFantasyLeagueRequest)
}

void CMsgDOTACreateFantasyLeagueRequest::SharedCtor() {
league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_count_) -
    reinterpret_cast<char*>(&league_logo_)) + sizeof(team_count_));
}

CMsgDOTACreateFantasyLeagueRequest::~CMsgDOTACreateFantasyLeagueRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateFantasyLeagueRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTACreateFantasyLeagueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  league_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTACreateFantasyLeagueRequest::ArenaDtor(void* object) {
  CMsgDOTACreateFantasyLeagueRequest* _this = reinterpret_cast< CMsgDOTACreateFantasyLeagueRequest* >(object);
  (void)_this;
}
void CMsgDOTACreateFantasyLeagueRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTACreateFantasyLeagueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTACreateFantasyLeagueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACreateFantasyLeagueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    league_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&league_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_count_) -
        reinterpret_cast<char*>(&league_logo_)) + sizeof(team_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACreateFantasyLeagueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string league_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_league_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTACreateFantasyLeagueRequest.league_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 league_logo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_logo(&has_bits);
          league_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Selection_Mode_IsValid(val))) {
            _internal_set_selection_mode(static_cast<::Fantasy_Selection_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 team_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_count(&has_bits);
          team_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTACreateFantasyLeagueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateFantasyLeagueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string league_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_league_name().data(), static_cast<int>(this->_internal_league_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateFantasyLeagueRequest.league_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_league_name(), target);
  }

  // optional uint64 league_logo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_league_logo(), target);
  }

  // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_selection_mode(), target);
  }

  // optional uint32 team_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateFantasyLeagueRequest)
  return target;
}

size_t CMsgDOTACreateFantasyLeagueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACreateFantasyLeagueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string league_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_league_name());
    }

    // optional uint64 league_logo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_league_logo());
    }

    // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_mode());
    }

    // optional uint32 team_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTACreateFantasyLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateFantasyLeagueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTACreateFantasyLeagueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTACreateFantasyLeagueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTACreateFantasyLeagueRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACreateFantasyLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_league_name(from._internal_league_name());
    }
    if (cached_has_bits & 0x00000002u) {
      league_logo_ = from.league_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      selection_mode_ = from.selection_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_count_ = from.team_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTACreateFantasyLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACreateFantasyLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueRequest::IsInitialized() const {
  return true;
}

void CMsgDOTACreateFantasyLeagueRequest::InternalSwap(CMsgDOTACreateFantasyLeagueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  league_name_.Swap(&other->league_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, team_count_)
      + sizeof(CMsgDOTACreateFantasyLeagueRequest::team_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, league_logo_)>(
          reinterpret_cast<char*>(&league_logo_),
          reinterpret_cast<char*>(&other->league_logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACreateFantasyLeagueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTACreateFantasyLeagueResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTACreateFantasyLeagueResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACreateFantasyLeagueResponse)
}
CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse(const CMsgDOTACreateFantasyLeagueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateFantasyLeagueResponse)
}

void CMsgDOTACreateFantasyLeagueResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTACreateFantasyLeagueResponse::~CMsgDOTACreateFantasyLeagueResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateFantasyLeagueResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTACreateFantasyLeagueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTACreateFantasyLeagueResponse::ArenaDtor(void* object) {
  CMsgDOTACreateFantasyLeagueResponse* _this = reinterpret_cast< CMsgDOTACreateFantasyLeagueResponse* >(object);
  (void)_this;
}
void CMsgDOTACreateFantasyLeagueResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTACreateFantasyLeagueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTACreateFantasyLeagueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACreateFantasyLeagueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACreateFantasyLeagueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTACreateFantasyLeagueResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTACreateFantasyLeagueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateFantasyLeagueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateFantasyLeagueResponse)
  return target;
}

size_t CMsgDOTACreateFantasyLeagueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACreateFantasyLeagueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTACreateFantasyLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateFantasyLeagueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTACreateFantasyLeagueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTACreateFantasyLeagueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTACreateFantasyLeagueResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACreateFantasyLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTACreateFantasyLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACreateFantasyLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueResponse::IsInitialized() const {
  return true;
}

void CMsgDOTACreateFantasyLeagueResponse::InternalSwap(CMsgDOTACreateFantasyLeagueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACreateFantasyLeagueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFantasyLeagueScoring::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFantasyLeagueScoring>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_xppm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stuns(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_roshan_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_multiplier_premium(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_multiplier_professional(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFantasyLeagueScoring)
}
CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring(const CMsgFantasyLeagueScoring& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiplier_professional_) -
    reinterpret_cast<char*>(&level_)) + sizeof(multiplier_professional_));
  // @@protoc_insertion_point(copy_constructor:CMsgFantasyLeagueScoring)
}

void CMsgFantasyLeagueScoring::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multiplier_professional_) -
    reinterpret_cast<char*>(&level_)) + sizeof(multiplier_professional_));
}

CMsgFantasyLeagueScoring::~CMsgFantasyLeagueScoring() {
  // @@protoc_insertion_point(destructor:CMsgFantasyLeagueScoring)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFantasyLeagueScoring::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFantasyLeagueScoring::ArenaDtor(void* object) {
  CMsgFantasyLeagueScoring* _this = reinterpret_cast< CMsgFantasyLeagueScoring* >(object);
  (void)_this;
}
void CMsgFantasyLeagueScoring::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFantasyLeagueScoring::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFantasyLeagueScoring::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFantasyLeagueScoring)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xppm_) -
        reinterpret_cast<char*>(&level_)) + sizeof(xppm_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&stuns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multiplier_professional_) -
        reinterpret_cast<char*>(&stuns_)) + sizeof(multiplier_professional_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFantasyLeagueScoring::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float deaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float assists = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float last_hits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_last_hits(&has_bits);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float denies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_denies(&has_bits);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gpm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_gpm(&has_bits);
          gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xppm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_xppm(&has_bits);
          xppm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stuns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_stuns(&has_bits);
          stuns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float healing = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_healing(&has_bits);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tower_kills = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_tower_kills(&has_bits);
          tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roshan_kills = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_roshan_kills(&has_bits);
          roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float multiplier_premium = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_multiplier_premium(&has_bits);
          multiplier_premium_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float multiplier_professional = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_multiplier_professional(&has_bits);
          multiplier_professional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFantasyLeagueScoring::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFantasyLeagueScoring)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_level(), target);
  }

  // optional float kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_kills(), target);
  }

  // optional float deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_deaths(), target);
  }

  // optional float assists = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_assists(), target);
  }

  // optional float last_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_last_hits(), target);
  }

  // optional float denies = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_denies(), target);
  }

  // optional float gpm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_gpm(), target);
  }

  // optional float xppm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_xppm(), target);
  }

  // optional float stuns = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_stuns(), target);
  }

  // optional float healing = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_healing(), target);
  }

  // optional float tower_kills = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_tower_kills(), target);
  }

  // optional float roshan_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_roshan_kills(), target);
  }

  // optional float multiplier_premium = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_multiplier_premium(), target);
  }

  // optional float multiplier_professional = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_multiplier_professional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFantasyLeagueScoring)
  return target;
}

size_t CMsgFantasyLeagueScoring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFantasyLeagueScoring)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float deaths = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float assists = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float denies = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float gpm = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float xppm = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float stuns = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float healing = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float multiplier_premium = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float multiplier_professional = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFantasyLeagueScoring::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFantasyLeagueScoring)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFantasyLeagueScoring* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFantasyLeagueScoring>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFantasyLeagueScoring)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFantasyLeagueScoring)
    MergeFrom(*source);
  }
}

void CMsgFantasyLeagueScoring::MergeFrom(const CMsgFantasyLeagueScoring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFantasyLeagueScoring)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000040u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      xppm_ = from.xppm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      stuns_ = from.stuns_;
    }
    if (cached_has_bits & 0x00000200u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000400u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000800u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00001000u) {
      multiplier_premium_ = from.multiplier_premium_;
    }
    if (cached_has_bits & 0x00002000u) {
      multiplier_professional_ = from.multiplier_professional_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFantasyLeagueScoring::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFantasyLeagueScoring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFantasyLeagueScoring::CopyFrom(const CMsgFantasyLeagueScoring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFantasyLeagueScoring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFantasyLeagueScoring::IsInitialized() const {
  return true;
}

void CMsgFantasyLeagueScoring::InternalSwap(CMsgFantasyLeagueScoring* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFantasyLeagueScoring, multiplier_professional_)
      + sizeof(CMsgFantasyLeagueScoring::multiplier_professional_)
      - PROTOBUF_FIELD_OFFSET(CMsgFantasyLeagueScoring, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFantasyLeagueScoring::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueInfo_OwnerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueInfo_OwnerInfo>()._has_bits_);
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left_league(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_account_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}
CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_account_id_(from.player_account_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_account_id_, &from.owner_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_league_) -
    reinterpret_cast<char*>(&owner_account_id_)) + sizeof(left_league_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_league_) -
    reinterpret_cast<char*>(&owner_account_id_)) + sizeof(left_league_));
}

CMsgDOTAFantasyLeagueInfo_OwnerInfo::~CMsgDOTAFantasyLeagueInfo_OwnerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueInfo_OwnerInfo* _this = reinterpret_cast< CMsgDOTAFantasyLeagueInfo_OwnerInfo* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_account_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&owner_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&left_league_) -
        reinterpret_cast<char*>(&owner_account_id_)) + sizeof(left_league_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueInfo_OwnerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_league = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_left_league(&has_bits);
          left_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 player_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_account_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueInfo_OwnerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_account_id(), target);
  }

  // optional bool left_league = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left_league(), target);
  }

  // repeated uint32 player_account_id = 3;
  for (int i = 0, n = this->_internal_player_account_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_account_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfo_OwnerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_account_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->player_account_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_account_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 owner_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional bool left_league = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfo_OwnerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfo_OwnerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_id_.MergeFrom(from.player_account_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_league_ = from.left_league_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_account_id_.InternalSwap(&other->player_account_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, left_league_)
      + sizeof(CMsgDOTAFantasyLeagueInfo_OwnerInfo::left_league_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, owner_account_id_)>(
          reinterpret_cast<char*>(&owner_account_id_),
          reinterpret_cast<char*>(&other->owner_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueInfo_OwnerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueInfo>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_commissioner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fantasy_league_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgFantasyLeagueScoring& scoring(const CMsgDOTAFantasyLeagueInfo* msg);
  static void set_has_scoring(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_draft_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_draft_pick_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_season_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_season_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_veto_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_acquisitions(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_slot_1(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_slot_2(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_slot_3(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_slot_4(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_slot_5(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_bench_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_time_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgFantasyLeagueScoring&
CMsgDOTAFantasyLeagueInfo::_Internal::scoring(const CMsgDOTAFantasyLeagueInfo* msg) {
  return *msg->scoring_;
}
CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owner_info_(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueInfo)
}
CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo(const CMsgDOTAFantasyLeagueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      owner_info_(from.owner_info_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_league_name()) {
    fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fantasy_league_name(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  if (from._internal_has_scoring()) {
    scoring_ = new ::CMsgFantasyLeagueScoring(*from.scoring_);
  } else {
    scoring_ = nullptr;
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfo)
}

void CMsgDOTAFantasyLeagueInfo::SharedCtor() {
fantasy_league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scoring_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&scoring_)) + sizeof(season_));
}

CMsgDOTAFantasyLeagueInfo::~CMsgDOTAFantasyLeagueInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fantasy_league_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scoring_;
}

void CMsgDOTAFantasyLeagueInfo::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueInfo* _this = reinterpret_cast< CMsgDOTAFantasyLeagueInfo* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_info_.Clear();
  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scoring_ != nullptr);
      scoring_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logo_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(logo_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&draft_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_2_) -
        reinterpret_cast<char*>(&draft_time_)) + sizeof(slot_2_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&slot_3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_) -
        reinterpret_cast<char*>(&slot_3_)) + sizeof(season_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 commissioner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_commissioner_account_id(&has_bits);
          commissioner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fantasy_league_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fantasy_league_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Selection_Mode_IsValid(val))) {
            _internal_set_selection_mode(static_cast<::Fantasy_Selection_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 team_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_count(&has_bits);
          team_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgFantasyLeagueScoring scoring = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 draft_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_draft_time(&has_bits);
          draft_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 draft_pick_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_draft_pick_time(&has_bits);
          draft_pick_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_start = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_season_start(&has_bits);
          season_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_season_length(&has_bits);
          season_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 veto_votes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_veto_votes(&has_bits);
          veto_votes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 acquisitions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_acquisitions(&has_bits);
          acquisitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_1 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_slot_1(&has_bits);
          slot_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_slot_2(&has_bits);
          slot_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_3 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_slot_3(&has_bits);
          slot_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_4 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_slot_4(&has_bits);
          slot_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_5 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_slot_5(&has_bits);
          slot_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bench_slots = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_bench_slots(&has_bits);
          bench_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_owner_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 players = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_players(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<208>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_players(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_zone = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_time_zone(&has_bits);
          time_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueInfo.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 commissioner_account_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_commissioner_account_id(), target);
  }

  // optional string fantasy_league_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_league_name().data(), static_cast<int>(this->_internal_fantasy_league_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fantasy_league_name(), target);
  }

  // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_selection_mode(), target);
  }

  // optional uint32 team_count = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_count(), target);
  }

  // optional uint64 logo = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_logo(), target);
  }

  // optional .CMsgFantasyLeagueScoring scoring = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scoring(this), target, stream);
  }

  // optional uint32 draft_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_draft_time(), target);
  }

  // optional uint32 draft_pick_time = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_draft_pick_time(), target);
  }

  // optional uint32 season_start = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_season_start(), target);
  }

  // optional uint32 season_length = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_season_length(), target);
  }

  // optional uint32 veto_votes = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_veto_votes(), target);
  }

  // optional uint32 acquisitions = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_acquisitions(), target);
  }

  // optional uint32 slot_1 = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_slot_1(), target);
  }

  // optional uint32 slot_2 = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_slot_2(), target);
  }

  // optional uint32 slot_3 = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_slot_3(), target);
  }

  // optional uint32 slot_4 = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_slot_4(), target);
  }

  // optional uint32 slot_5 = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_slot_5(), target);
  }

  // optional uint32 bench_slots = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_bench_slots(), target);
  }

  // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_owner_info(i), target, stream);
  }

  // repeated uint32 players = 26;
  for (int i = 0, n = this->_internal_players_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_players(i), target);
  }

  // optional uint32 time_zone = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_time_zone(), target);
  }

  // optional uint32 season = 28;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_season(), target);
  }

  // optional string password = 29;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueInfo.password");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfo)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  total_size += 2UL * this->_internal_owner_info_size();
  for (const auto& msg : this->owner_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 players = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->players_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_players_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string fantasy_league_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_league_name());
    }

    // optional string password = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional .CMsgFantasyLeagueScoring scoring = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scoring_);
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 commissioner_account_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_commissioner_account_id());
    }

    // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_mode());
    }

    // optional uint32 team_count = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_count());
    }

    // optional uint64 logo = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 draft_time = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_draft_time());
    }

    // optional uint32 draft_pick_time = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_draft_pick_time());
    }

    // optional uint32 season_start = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_start());
    }

    // optional uint32 season_length = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_length());
    }

    // optional uint32 veto_votes = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_veto_votes());
    }

    // optional uint32 acquisitions = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_acquisitions());
    }

    // optional uint32 slot_1 = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_1());
    }

    // optional uint32 slot_2 = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_2());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional uint32 slot_3 = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_3());
    }

    // optional uint32 slot_4 = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_4());
    }

    // optional uint32 slot_5 = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_5());
    }

    // optional uint32 bench_slots = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bench_slots());
    }

    // optional uint32 time_zone = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_zone());
    }

    // optional uint32 season = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_info_.MergeFrom(from.owner_info_);
  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fantasy_league_name(from._internal_fantasy_league_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_scoring()->::CMsgFantasyLeagueScoring::MergeFrom(from._internal_scoring());
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      commissioner_account_id_ = from.commissioner_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_mode_ = from.selection_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_count_ = from.team_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      logo_ = from.logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      draft_time_ = from.draft_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      draft_pick_time_ = from.draft_pick_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      season_start_ = from.season_start_;
    }
    if (cached_has_bits & 0x00000800u) {
      season_length_ = from.season_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      veto_votes_ = from.veto_votes_;
    }
    if (cached_has_bits & 0x00002000u) {
      acquisitions_ = from.acquisitions_;
    }
    if (cached_has_bits & 0x00004000u) {
      slot_1_ = from.slot_1_;
    }
    if (cached_has_bits & 0x00008000u) {
      slot_2_ = from.slot_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      slot_3_ = from.slot_3_;
    }
    if (cached_has_bits & 0x00020000u) {
      slot_4_ = from.slot_4_;
    }
    if (cached_has_bits & 0x00040000u) {
      slot_5_ = from.slot_5_;
    }
    if (cached_has_bits & 0x00080000u) {
      bench_slots_ = from.bench_slots_;
    }
    if (cached_has_bits & 0x00100000u) {
      time_zone_ = from.time_zone_;
    }
    if (cached_has_bits & 0x00200000u) {
      season_ = from.season_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  owner_info_.InternalSwap(&other->owner_info_);
  players_.InternalSwap(&other->players_);
  fantasy_league_name_.Swap(&other->fantasy_league_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, season_)
      + sizeof(CMsgDOTAFantasyLeagueInfo::season_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, scoring_)>(
          reinterpret_cast<char*>(&scoring_),
          reinterpret_cast<char*>(&other->scoring_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueEditInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueEditInfoRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTAFantasyLeagueInfo& edit_info(const CMsgDOTAFantasyLeagueEditInfoRequest* msg);
  static void set_has_edit_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTAFantasyLeagueInfo&
CMsgDOTAFantasyLeagueEditInfoRequest::_Internal::edit_info(const CMsgDOTAFantasyLeagueEditInfoRequest* msg) {
  return *msg->edit_info_;
}
CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueEditInfoRequest)
}
CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest(const CMsgDOTAFantasyLeagueEditInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_edit_info()) {
    edit_info_ = new ::CMsgDOTAFantasyLeagueInfo(*from.edit_info_);
  } else {
    edit_info_ = nullptr;
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInfoRequest)
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edit_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&edit_info_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueEditInfoRequest::~CMsgDOTAFantasyLeagueEditInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete edit_info_;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueEditInfoRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueEditInfoRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueEditInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueEditInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(edit_info_ != nullptr);
    edit_info_->Clear();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueEditInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edit_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueEditInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edit_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInfoRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edit_info_);
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueEditInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueEditInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_edit_info()->::CMsgDOTAFantasyLeagueInfo::MergeFrom(from._internal_edit_info());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, fantasy_league_id_)
      + sizeof(CMsgDOTAFantasyLeagueEditInfoRequest::fantasy_league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, edit_info_)>(
          reinterpret_cast<char*>(&edit_info_),
          reinterpret_cast<char*>(&other->edit_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueEditInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueEditInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueEditInfoResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueEditInfoResponse)
}
CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse(const CMsgDOTAFantasyLeagueEditInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInfoResponse)
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyLeagueEditInfoResponse::~CMsgDOTAFantasyLeagueEditInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueEditInfoResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueEditInfoResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeagueEditInfoResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueEditInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueEditInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueEditInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueEditInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeagueEditInfoResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueEditInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueEditInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueEditInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueEditInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueFindRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueFindRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueFindRequest)
}
CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest(const CMsgDOTAFantasyLeagueFindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueFindRequest)
}

void CMsgDOTAFantasyLeagueFindRequest::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueFindRequest::~CMsgDOTAFantasyLeagueFindRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueFindRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueFindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueFindRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueFindRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueFindRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueFindRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueFindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueFindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueFindRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmpty();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueFindRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueFindRequest.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueFindRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueFindRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueFindRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueFindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueFindRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueFindRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueFindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueFindRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueFindRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueFindRequest::InternalSwap(CMsgDOTAFantasyLeagueFindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueFindRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueFindResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueFindResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fantasy_league_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commissioner_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueFindResponse)
}
CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse(const CMsgDOTAFantasyLeagueFindResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_league_name()) {
    fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fantasy_league_name(), 
      GetArena());
  }
  commissioner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commissioner_name()) {
    commissioner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commissioner_name(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueFindResponse)
}

void CMsgDOTAFantasyLeagueFindResponse::SharedCtor() {
fantasy_league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commissioner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CMsgDOTAFantasyLeagueFindResponse::~CMsgDOTAFantasyLeagueFindResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueFindResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueFindResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fantasy_league_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commissioner_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueFindResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueFindResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeagueFindResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueFindResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueFindResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueFindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueFindResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      commissioner_name_.ClearNonDefaultToEmpty();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueFindResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeagueFindResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string fantasy_league_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fantasy_league_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string commissioner_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_commissioner_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueFindResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueFindResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_league_name().data(), static_cast<int>(this->_internal_fantasy_league_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fantasy_league_name(), target);
  }

  // optional string commissioner_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commissioner_name().data(), static_cast<int>(this->_internal_commissioner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_commissioner_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueFindResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueFindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueFindResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string fantasy_league_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_league_name());
    }

    // optional string commissioner_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_commissioner_name());
    }

    // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueFindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueFindResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueFindResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueFindResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueFindResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueFindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fantasy_league_name(from._internal_fantasy_league_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_commissioner_name(from._internal_commissioner_name());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueFindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueFindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueFindResponse::InternalSwap(CMsgDOTAFantasyLeagueFindResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_league_name_.Swap(&other->fantasy_league_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commissioner_name_.Swap(&other->commissioner_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueFindResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueInfoRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueInfoRequest)
}
CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest(const CMsgDOTAFantasyLeagueInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfoRequest)
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedCtor() {
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueInfoRequest::~CMsgDOTAFantasyLeagueInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueInfoRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueInfoRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueInfoRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfoRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fantasy_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_league_id()) {
    _internal_set_fantasy_league_id(from._internal_fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueInfoResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueInfoResponse)
}
CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse(const CMsgDOTAFantasyLeagueInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfoResponse)
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyLeagueInfoResponse::~CMsgDOTAFantasyLeagueInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueInfoResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueInfoResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeagueInfoResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeagueInfoResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueMatchupsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueMatchupsRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueMatchupsRequest)
}
CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest(const CMsgDOTAFantasyLeagueMatchupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsRequest)
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedCtor() {
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueMatchupsRequest::~CMsgDOTAFantasyLeagueMatchupsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueMatchupsRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueMatchupsRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueMatchupsRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueMatchupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueMatchupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueMatchupsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueMatchupsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fantasy_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueMatchupsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueMatchupsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_league_id()) {
    _internal_set_fantasy_league_id(from._internal_fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::InternalSwap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueMatchupsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>()._has_bits_);
  static void set_has_owner_account_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_account_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}
CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_account_id_1_, &from.owner_account_id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_2_) -
    reinterpret_cast<char*>(&owner_account_id_1_)) + sizeof(score_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_account_id_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_2_) -
    reinterpret_cast<char*>(&owner_account_id_1_)) + sizeof(score_2_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::~CMsgDOTAFantasyLeagueMatchupsResponse_Matchup() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* _this = reinterpret_cast< CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&owner_account_id_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_2_) -
        reinterpret_cast<char*>(&owner_account_id_1_)) + sizeof(score_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_account_id_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_account_id_1(&has_bits);
          owner_account_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_account_id_2(&has_bits);
          owner_account_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_score_1(&has_bits);
          score_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float score_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_score_2(&has_bits);
          score_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id_2(), target);
  }

  // optional float score_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score_1(), target);
  }

  // optional float score_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_score_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 owner_account_id_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id_2());
    }

    // optional float score_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float score_2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_1_ = from.owner_account_id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_1_ = from.score_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_2_ = from.score_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_2_)
      + sizeof(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::score_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_1_)>(
          reinterpret_cast<char*>(&owner_account_id_1_),
          reinterpret_cast<char*>(&other->owner_account_id_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matchup_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matchup_(from.matchup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::~CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* _this = reinterpret_cast< CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matchup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matchup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matchup(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_time(), target);
  }

  // optional uint32 end_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  total_size += 1UL * this->_internal_matchup_size();
  for (const auto& msg : this->matchup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 start_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 end_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchup_.MergeFrom(from.matchup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matchup_.InternalSwap(&other->matchup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, end_time_)
      + sizeof(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::end_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueMatchupsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueMatchupsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weekly_matchups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueMatchupsResponse)
}
CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse(const CMsgDOTAFantasyLeagueMatchupsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      weekly_matchups_(from.weekly_matchups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsResponse)
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueMatchupsResponse::~CMsgDOTAFantasyLeagueMatchupsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueMatchupsResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueMatchupsResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeagueMatchupsResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueMatchupsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueMatchupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weekly_matchups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_league_id_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueMatchupsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeagueMatchupsResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weekly_matchups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueMatchupsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fantasy_league_id(), target);
  }

  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weekly_matchups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_weekly_matchups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  total_size += 1UL * this->_internal_weekly_matchups_size();
  for (const auto& msg : this->weekly_matchups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueMatchupsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueMatchupsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weekly_matchups_.MergeFrom(from.weekly_matchups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weekly_matchups_.InternalSwap(&other->weekly_matchups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, fantasy_league_id_)
      + sizeof(CMsgDOTAFantasyLeagueMatchupsResponse::fantasy_league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueMatchupsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAEditFantasyTeamRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAEditFantasyTeamRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAEditFantasyTeamRequest)
}
CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest(const CMsgDOTAEditFantasyTeamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_logo_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditFantasyTeamRequest)
}

void CMsgDOTAEditFantasyTeamRequest::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_logo_));
}

CMsgDOTAEditFantasyTeamRequest::~CMsgDOTAEditFantasyTeamRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditFantasyTeamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAEditFantasyTeamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAEditFantasyTeamRequest::ArenaDtor(void* object) {
  CMsgDOTAEditFantasyTeamRequest* _this = reinterpret_cast< CMsgDOTAEditFantasyTeamRequest* >(object);
  (void)_this;
}
void CMsgDOTAEditFantasyTeamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAEditFantasyTeamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAEditFantasyTeamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAEditFantasyTeamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_logo_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAEditFantasyTeamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_index(&has_bits);
          team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAEditFantasyTeamRequest.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAEditFantasyTeamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditFantasyTeamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_index(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditFantasyTeamRequest.team_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_name(), target);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_team_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditFantasyTeamRequest)
  return target;
}

size_t CMsgDOTAEditFantasyTeamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAEditFantasyTeamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index());
    }

    // optional uint64 team_logo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_logo());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAEditFantasyTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditFantasyTeamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAEditFantasyTeamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAEditFantasyTeamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAEditFantasyTeamRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAEditFantasyTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_logo_ = from.team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAEditFantasyTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAEditFantasyTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAEditFantasyTeamRequest::InternalSwap(CMsgDOTAEditFantasyTeamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, team_logo_)
      + sizeof(CMsgDOTAEditFantasyTeamRequest::team_logo_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAEditFantasyTeamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAEditFantasyTeamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAEditFantasyTeamResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAEditFantasyTeamResponse)
}
CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse(const CMsgDOTAEditFantasyTeamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditFantasyTeamResponse)
}

void CMsgDOTAEditFantasyTeamResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAEditFantasyTeamResponse::~CMsgDOTAEditFantasyTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditFantasyTeamResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAEditFantasyTeamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAEditFantasyTeamResponse::ArenaDtor(void* object) {
  CMsgDOTAEditFantasyTeamResponse* _this = reinterpret_cast< CMsgDOTAEditFantasyTeamResponse* >(object);
  (void)_this;
}
void CMsgDOTAEditFantasyTeamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAEditFantasyTeamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAEditFantasyTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAEditFantasyTeamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAEditFantasyTeamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAEditFantasyTeamResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAEditFantasyTeamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditFantasyTeamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditFantasyTeamResponse)
  return target;
}

size_t CMsgDOTAEditFantasyTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAEditFantasyTeamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAEditFantasyTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditFantasyTeamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAEditFantasyTeamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAEditFantasyTeamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAEditFantasyTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAEditFantasyTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAEditFantasyTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAEditFantasyTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAEditFantasyTeamResponse::InternalSwap(CMsgDOTAEditFantasyTeamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAEditFantasyTeamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}
CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedCtor() {
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::~CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* _this = reinterpret_cast< CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fantasy_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_league_id()) {
    _internal_set_fantasy_league_id(from._internal_fantasy_league_id());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>()._has_bits_);
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}
CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_account_id_ = from.owner_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedCtor() {
owner_account_id_ = 0u;
}

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::~CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* _this = reinterpret_cast< CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 owner_account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner_account_id()) {
    _internal_set_owner_account_id(from._internal_owner_account_id());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_account_id_, other->owner_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamInfoResponse::_Internal {
 public:
};

CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamInfoResponse)
}
CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse(const CMsgDOTAFantasyTeamInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfoResponse)
}

void CMsgDOTAFantasyTeamInfoResponse::SharedCtor() {
}

CMsgDOTAFantasyTeamInfoResponse::~CMsgDOTAFantasyTeamInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamInfoResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamInfoResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamInfoResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyTeamInfo results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyTeamInfo results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyTeamInfo results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoResponse::InternalSwap(CMsgDOTAFantasyTeamInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamInfo>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fantasy_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  current_roster_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamInfo)
}
CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo(const CMsgDOTAFantasyTeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      current_roster_(from.current_roster_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(losses_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfo)
}

void CMsgDOTAFantasyTeamInfo::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(losses_));
}

CMsgDOTAFantasyTeamInfo::~CMsgDOTAFantasyTeamInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamInfo::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamInfo* _this = reinterpret_cast< CMsgDOTAFantasyTeamInfo* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_roster_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&losses_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_team_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fantasy_team_index(&has_bits);
          fantasy_team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyTeamInfo.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_losses(&has_bits);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 current_roster = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_current_roster(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_current_roster(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fantasy_team_index(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamInfo.team_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_team_logo(), target);
  }

  // optional uint32 wins = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_wins(), target);
  }

  // optional uint32 losses = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_losses(), target);
  }

  // repeated uint32 current_roster = 8;
  for (int i = 0, n = this->_internal_current_roster_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_current_roster(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfo)
  return target;
}

size_t CMsgDOTAFantasyTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 current_roster = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->current_roster_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_current_roster_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string team_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_team_index());
    }

    // optional uint32 wins = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional uint64 team_logo = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_logo());
    }

    // optional uint32 losses = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const CMsgDOTAFantasyTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_roster_.MergeFrom(from.current_roster_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      losses_ = from.losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const CMsgDOTAFantasyTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfo::InternalSwap(CMsgDOTAFantasyTeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  current_roster_.InternalSwap(&other->current_roster_);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, losses_)
      + sizeof(CMsgDOTAFantasyTeamInfo::losses_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamScoreRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamScoreRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filter_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filter_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_include_bench(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamScoreRequest)
}
CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest(const CMsgDOTAFantasyTeamScoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_bench_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(include_bench_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamScoreRequest)
}

void CMsgDOTAFantasyTeamScoreRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_bench_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(include_bench_));
}

CMsgDOTAFantasyTeamScoreRequest::~CMsgDOTAFantasyTeamScoreRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamScoreRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamScoreRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamScoreRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamScoreRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamScoreRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamScoreRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamScoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_bench_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(include_bench_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamScoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_team_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fantasy_team_index(&has_bits);
          fantasy_team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 filter_match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filter_match_id(&has_bits);
          filter_match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filter_start_time(&has_bits);
          filter_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_filter_end_time(&has_bits);
          filter_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_bench = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_include_bench(&has_bits);
          include_bench_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamScoreRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fantasy_team_index(), target);
  }

  // optional uint64 filter_match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_filter_match_id(), target);
  }

  // optional uint32 filter_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_filter_end_time(), target);
  }

  // optional bool include_bench = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_include_bench(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamScoreRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamScoreRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint64 filter_match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_filter_match_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_team_index());
    }

    // optional uint32 filter_start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_start_time());
    }

    // optional uint32 filter_end_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_end_time());
    }

    // optional bool include_bench = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamScoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamScoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamScoreRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      include_bench_ = from.include_bench_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreRequest::InternalSwap(CMsgDOTAFantasyTeamScoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, include_bench_)
      + sizeof(CMsgDOTAFantasyTeamScoreRequest::include_bench_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamScoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}
CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(score_));
}

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::~CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* _this = reinterpret_cast< CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional float score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, score_)
      + sizeof(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamScoreResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamScoreResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_team_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fantasy_player_score_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamScoreResponse)
}
CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse(const CMsgDOTAFantasyTeamScoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fantasy_player_score_(from.fantasy_player_score_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_score_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamScoreResponse)
}

void CMsgDOTAFantasyTeamScoreResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_score_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_score_));
}

CMsgDOTAFantasyTeamScoreResponse::~CMsgDOTAFantasyTeamScoreResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamScoreResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamScoreResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamScoreResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamScoreResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamScoreResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamScoreResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamScoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamScoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_player_score_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_team_score_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamScoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamScoreResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float fantasy_team_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fantasy_team_score(&has_bits);
          fantasy_team_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fantasy_player_score(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamScoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamScoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional float fantasy_team_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fantasy_team_score(), target);
  }

  // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fantasy_player_score_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fantasy_player_score(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamScoreResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamScoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  total_size += 1UL * this->_internal_fantasy_player_score_size();
  for (const auto& msg : this->fantasy_player_score_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional float fantasy_team_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamScoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamScoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fantasy_player_score_.MergeFrom(from.fantasy_player_score_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_score_ = from.fantasy_team_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreResponse::InternalSwap(CMsgDOTAFantasyTeamScoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_player_score_.InternalSwap(&other->fantasy_player_score_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, fantasy_team_score_)
      + sizeof(CMsgDOTAFantasyTeamScoreResponse::fantasy_team_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamScoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamStandingsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamStandingsRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filter_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filter_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filter_last_match(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filter_in_hall(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamStandingsRequest)
}
CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest(const CMsgDOTAFantasyTeamStandingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_in_hall_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_in_hall_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamStandingsRequest)
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_in_hall_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_in_hall_));
}

CMsgDOTAFantasyTeamStandingsRequest::~CMsgDOTAFantasyTeamStandingsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamStandingsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamStandingsRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamStandingsRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamStandingsRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamStandingsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamStandingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamStandingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamStandingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_in_hall_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_in_hall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamStandingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_filter_start_time(&has_bits);
          filter_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filter_end_time(&has_bits);
          filter_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 filter_match_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filter_match_id(&has_bits);
          filter_match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_last_match = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_filter_last_match(&has_bits);
          filter_last_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_in_hall = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_filter_in_hall(&has_bits);
          filter_in_hall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamStandingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamStandingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_filter_last_match(), target);
  }

  // optional bool filter_in_hall = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_filter_in_hall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamStandingsRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamStandingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 filter_start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool filter_in_hall = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamStandingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamStandingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamStandingsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_last_match_ = from.filter_last_match_;
    }
    if (cached_has_bits & 0x00000040u) {
      filter_in_hall_ = from.filter_in_hall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsRequest::InternalSwap(CMsgDOTAFantasyTeamStandingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_in_hall_)
      + sizeof(CMsgDOTAFantasyTeamStandingsRequest::filter_in_hall_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamStandingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fantasy_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fantasy_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_owner_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_score_against(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}
CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_owner_name()) {
    owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_name(), 
      GetArena());
  }
  fantasy_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_team_name()) {
    fantasy_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fantasy_team_name(), 
      GetArena());
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&streak_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(streak_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedCtor() {
owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fantasy_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&streak_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(streak_));
}

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::~CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasy_team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* _this = reinterpret_cast< CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      owner_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_against_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(score_against_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streak_) -
        reinterpret_cast<char*>(&wins_)) + sizeof(streak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_team_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fantasy_team_index(&has_bits);
          fantasy_team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fantasy_team_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fantasy_team_logo(&has_bits);
          fantasy_team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string owner_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_owner_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fantasy_team_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_fantasy_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float score_against = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_score_against(&has_bits);
          score_against_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_losses(&has_bits);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 streak = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_streak(&has_bits);
          streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fantasy_team_index(), target);
  }

  // optional uint64 fantasy_team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_fantasy_team_logo(), target);
  }

  // optional string owner_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_owner_name().data(), static_cast<int>(this->_internal_owner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_owner_name(), target);
  }

  // optional string fantasy_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_team_name().data(), static_cast<int>(this->_internal_fantasy_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fantasy_team_name(), target);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_score(), target);
  }

  // optional float score_against = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_score_against(), target);
  }

  // optional uint32 wins = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_wins(), target);
  }

  // optional uint32 losses = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_losses(), target);
  }

  // optional int32 streak = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_streak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string owner_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_owner_name());
    }

    // optional string fantasy_team_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint64 fantasy_team_logo = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fantasy_team_logo());
    }

    // optional uint32 fantasy_team_index = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_team_index());
    }

    // optional float score = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float score_against = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 wins = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional uint32 losses = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

    // optional int32 streak = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_streak());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_owner_name(from._internal_owner_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fantasy_team_name(from._internal_fantasy_team_name());
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fantasy_team_logo_ = from.fantasy_team_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      score_against_ = from.score_against_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000200u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000400u) {
      streak_ = from.streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  owner_name_.Swap(&other->owner_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fantasy_team_name_.Swap(&other->fantasy_team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, streak_)
      + sizeof(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::streak_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamStandingsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamStandingsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamStandingsResponse)
}
CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse(const CMsgDOTAFantasyTeamStandingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      team_scores_(from.team_scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamStandingsResponse)
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyTeamStandingsResponse::~CMsgDOTAFantasyTeamStandingsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamStandingsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamStandingsResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamStandingsResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamStandingsResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamStandingsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamStandingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamStandingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamStandingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_scores_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamStandingsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamStandingsResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamStandingsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamStandingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_scores_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_team_scores(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamStandingsResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamStandingsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  total_size += 1UL * this->_internal_team_scores_size();
  for (const auto& msg : this->team_scores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamStandingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamStandingsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamStandingsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_scores_.MergeFrom(from.team_scores_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_scores_.InternalSwap(&other->team_scores_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamStandingsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerScoreRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerScoreRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filter_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filter_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filter_last_match(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerScoreRequest)
}
CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest(const CMsgDOTAFantasyPlayerScoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreRequest)
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
}

CMsgDOTAFantasyPlayerScoreRequest::~CMsgDOTAFantasyPlayerScoreRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerScoreRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerScoreRequest* _this = reinterpret_cast< CMsgDOTAFantasyPlayerScoreRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerScoreRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerScoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_last_match_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerScoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_filter_start_time(&has_bits);
          filter_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filter_end_time(&has_bits);
          filter_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 filter_match_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filter_match_id(&has_bits);
          filter_match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_last_match = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_filter_last_match(&has_bits);
          filter_last_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerScoreRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_account_id(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_filter_last_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerScoreRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

    // optional uint32 filter_start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerScoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerScoreRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_last_match_ = from.filter_last_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_last_match_)
      + sizeof(CMsgDOTAFantasyPlayerScoreRequest::filter_last_match_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerScoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerScoreResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerScoreResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerScoreResponse)
}
CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse(const CMsgDOTAFantasyPlayerScoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&result_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreResponse)
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&result_)) + sizeof(score_));
}

CMsgDOTAFantasyPlayerScoreResponse::~CMsgDOTAFantasyPlayerScoreResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerScoreResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerScoreResponse* _this = reinterpret_cast< CMsgDOTAFantasyPlayerScoreResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerScoreResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerScoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerScoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&result_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerScoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyPlayerScoreResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyPlayerScoreResponse.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerScoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_account_id(), target);
  }

  // optional string player_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerScoreResponse.player_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_player_name(), target);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerScoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string player_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 player_account_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

    // optional float score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerScoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, score_)
      + sizeof(CMsgDOTAFantasyPlayerScoreResponse::score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerScoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerStandingsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerStandingsRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filter_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filter_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filter_last_match(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerStandingsRequest)
}
CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest(const CMsgDOTAFantasyPlayerStandingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStandingsRequest)
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
}

CMsgDOTAFantasyPlayerStandingsRequest::~CMsgDOTAFantasyPlayerStandingsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStandingsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerStandingsRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerStandingsRequest* _this = reinterpret_cast< CMsgDOTAFantasyPlayerStandingsRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerStandingsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerStandingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerStandingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerStandingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_last_match_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerStandingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filter_start_time(&has_bits);
          filter_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filter_end_time(&has_bits);
          filter_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 filter_match_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_filter_match_id(&has_bits);
          filter_match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_last_match = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_filter_last_match(&has_bits);
          filter_last_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerStandingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStandingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_role(), target);
  }

  // optional uint32 filter_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_filter_match_id(), target);
  }

  // optional bool filter_last_match = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_filter_last_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStandingsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerStandingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 role = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role());
    }

    // optional uint32 filter_start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_start_time());
    }

    // optional uint64 filter_match_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_filter_match_id());
    }

    // optional uint32 filter_end_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_end_time());
    }

    // optional bool filter_last_match = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStandingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerStandingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerStandingsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      filter_last_match_ = from.filter_last_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsRequest::InternalSwap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_last_match_)
      + sizeof(CMsgDOTAFantasyPlayerStandingsRequest::filter_last_match_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerStandingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>()._has_bits_);
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}
CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  ::memcpy(&player_account_id_, &from.player_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&player_account_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&player_account_id_)) + sizeof(score_));
}

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::~CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* _this = reinterpret_cast< CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&player_account_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 player_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

    // optional float score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, score_)
      + sizeof(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_account_id_)>(
          reinterpret_cast<char*>(&player_account_id_),
          reinterpret_cast<char*>(&other->player_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerStandingsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerStandingsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerStandingsResponse)
}
CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse(const CMsgDOTAFantasyPlayerStandingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_scores_(from.player_scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&result_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStandingsResponse)
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&result_)) + sizeof(role_));
}

CMsgDOTAFantasyPlayerStandingsResponse::~CMsgDOTAFantasyPlayerStandingsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStandingsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerStandingsResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerStandingsResponse* _this = reinterpret_cast< CMsgDOTAFantasyPlayerStandingsResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerStandingsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerStandingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerStandingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerStandingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_scores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_) -
        reinterpret_cast<char*>(&result_)) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerStandingsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyPlayerStandingsResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerStandingsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStandingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_role(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_scores_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_player_scores(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStandingsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerStandingsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  total_size += 1UL * this->_internal_player_scores_size();
  for (const auto& msg : this->player_scores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 role = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStandingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerStandingsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerStandingsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_scores_.MergeFrom(from.player_scores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_scores_.InternalSwap(&other->player_scores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, role_)
      + sizeof(CMsgDOTAFantasyPlayerStandingsResponse::role_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerStandingsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueCreateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueCreateRequest>()._has_bits_);
  static void set_has_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fantasy_league_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ticket_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueCreateRequest)
}
CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest(const CMsgDOTAFantasyLeagueCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_league_name()) {
    fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fantasy_league_name(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(season_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueCreateRequest)
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedCtor() {
fantasy_league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&season_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(season_id_));
}

CMsgDOTAFantasyLeagueCreateRequest::~CMsgDOTAFantasyLeagueCreateRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueCreateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fantasy_league_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueCreateRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueCreateRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueCreateRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_id_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(season_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 season_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_season_id(&has_bits);
          season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fantasy_league_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fantasy_league_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueCreateRequest.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueCreateRequest.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ticket_item_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ticket_item_id(&has_bits);
          ticket_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueCreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_season_id(), target);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_league_name().data(), static_cast<int>(this->_internal_fantasy_league_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fantasy_league_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.team_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name(), target);
  }

  // optional uint64 logo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_logo(), target);
  }

  // optional uint64 ticket_item_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ticket_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueCreateRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueCreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string fantasy_league_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_league_name());
    }

    // optional string password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string team_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional uint64 logo = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

    // optional uint64 ticket_item_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ticket_item_id());
    }

    // optional uint32 season_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueCreateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueCreateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueCreateRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fantasy_league_name(from._internal_fantasy_league_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000008u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      ticket_item_id_ = from.ticket_item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      season_id_ = from.season_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueCreateRequest::InternalSwap(CMsgDOTAFantasyLeagueCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_league_name_.Swap(&other->fantasy_league_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, season_id_)
      + sizeof(CMsgDOTAFantasyLeagueCreateRequest::season_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, logo_)>(
          reinterpret_cast<char*>(&logo_),
          reinterpret_cast<char*>(&other->logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueCreateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueCreateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueCreateResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueCreateResponse)
}
CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse(const CMsgDOTAFantasyLeagueCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueCreateResponse)
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueCreateResponse::~CMsgDOTAFantasyLeagueCreateResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueCreateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueCreateResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueCreateResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeagueCreateResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueCreateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_league_id_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueCreateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeagueCreateResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueCreateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueCreateResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueCreateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueCreateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueCreateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueCreateResponse::InternalSwap(CMsgDOTAFantasyLeagueCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, fantasy_league_id_)
      + sizeof(CMsgDOTAFantasyLeagueCreateResponse::fantasy_league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueCreateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamCreateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamCreateRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamCreateRequest)
}
CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest(const CMsgDOTAFantasyTeamCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamCreateRequest)
}

void CMsgDOTAFantasyTeamCreateRequest::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyTeamCreateRequest::~CMsgDOTAFantasyTeamCreateRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamCreateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamCreateRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamCreateRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamCreateRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_league_id_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyTeamCreateRequest.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyTeamCreateRequest.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ticket_item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ticket_item_id(&has_bits);
          ticket_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamCreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamCreateRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamCreateRequest.team_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_name(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_logo(), target);
  }

  // optional uint64 ticket_item_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ticket_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamCreateRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamCreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string password = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string team_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

    // optional uint64 ticket_item_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ticket_item_id());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamCreateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamCreateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamCreateRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000004u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      ticket_item_id_ = from.ticket_item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamCreateRequest::InternalSwap(CMsgDOTAFantasyTeamCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, fantasy_league_id_)
      + sizeof(CMsgDOTAFantasyTeamCreateRequest::fantasy_league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, logo_)>(
          reinterpret_cast<char*>(&logo_),
          reinterpret_cast<char*>(&other->logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamCreateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamCreateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamCreateResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamCreateResponse)
}
CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse(const CMsgDOTAFantasyTeamCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamCreateResponse)
}

void CMsgDOTAFantasyTeamCreateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_index_));
}

CMsgDOTAFantasyTeamCreateResponse::~CMsgDOTAFantasyTeamCreateResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamCreateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamCreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamCreateResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamCreateResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamCreateResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamCreateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_team_index_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamCreateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamCreateResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_team_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fantasy_team_index(&has_bits);
          fantasy_team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamCreateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fantasy_team_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamCreateResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamCreateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 fantasy_team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_team_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamCreateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamCreateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamCreateResponse::InternalSwap(CMsgDOTAFantasyTeamCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, fantasy_team_index_)
      + sizeof(CMsgDOTAFantasyTeamCreateResponse::fantasy_team_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamCreateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}
CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invited_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(invited_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invited_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(invited_));
}

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::~CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* _this = reinterpret_cast< CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invited_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(invited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool invited = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_invited(&has_bits);
          invited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool invited = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_invited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool invited = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      invited_ = from.invited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, invited_)
      + sizeof(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::invited_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueEditInvitesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueEditInvitesRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  invite_change_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueEditInvitesRequest)
}
CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest(const CMsgDOTAFantasyLeagueEditInvitesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      invite_change_(from.invite_change_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInvitesRequest)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueEditInvitesRequest::~CMsgDOTAFantasyLeagueEditInvitesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInvitesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueEditInvitesRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueEditInvitesRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invite_change_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmpty();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueEditInvitesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyLeagueEditInvitesRequest.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invite_change(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueEditInvitesRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invite_change_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_invite_change(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInvitesRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  total_size += 1UL * this->_internal_invite_change_size();
  for (const auto& msg : this->invite_change_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInvitesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueEditInvitesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueEditInvitesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invite_change_.MergeFrom(from.invite_change_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_change_.InternalSwap(&other->invite_change_);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueEditInvitesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueEditInvitesResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueEditInvitesResponse)
}
CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse(const CMsgDOTAFantasyLeagueEditInvitesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInvitesResponse)
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyLeagueEditInvitesResponse::~CMsgDOTAFantasyLeagueEditInvitesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInvitesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueEditInvitesResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeagueEditInvitesResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueEditInvitesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueEditInvitesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInvitesResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInvitesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueEditInvitesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueEditInvitesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueEditInvitesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueDraftStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueDraftStatusRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueDraftStatusRequest)
}
CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest(const CMsgDOTAFantasyLeagueDraftStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftStatusRequest)
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedCtor() {
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueDraftStatusRequest::~CMsgDOTAFantasyLeagueDraftStatusRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueDraftStatusRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueDraftStatusRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueDraftStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueDraftStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftStatusRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fantasy_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueDraftStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueDraftStatusRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_league_id()) {
    _internal_set_fantasy_league_id(from._internal_fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatusRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueDraftStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueDraftStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueDraftStatus>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pending_resume(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  draft_order_(arena),
  available_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueDraftStatus)
}
CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus(const CMsgDOTAFantasyLeagueDraftStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      draft_order_(from.draft_order_),
      available_players_(from.available_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftStatus)
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(completed_));
}

CMsgDOTAFantasyLeagueDraftStatus::~CMsgDOTAFantasyLeagueDraftStatus() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueDraftStatus::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueDraftStatus* _this = reinterpret_cast< CMsgDOTAFantasyLeagueDraftStatus* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueDraftStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueDraftStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueDraftStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueDraftStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  draft_order_.Clear();
  available_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueDraftStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 draft_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_draft_order(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_draft_order(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_pick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_current_pick(&has_bits);
          current_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_remaining = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_remaining(&has_bits);
          time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pending_resume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pending_resume(&has_bits);
          pending_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 available_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_available_players(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_available_players(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueDraftStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // repeated uint32 draft_order = 2;
  for (int i = 0, n = this->_internal_draft_order_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_draft_order(i), target);
  }

  // optional uint32 current_pick = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_pick(), target);
  }

  // optional uint32 time_remaining = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_remaining(), target);
  }

  // optional bool pending_resume = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pending_resume(), target);
  }

  // optional bool completed = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_completed(), target);
  }

  // repeated uint32 available_players = 7;
  for (int i = 0, n = this->_internal_available_players_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_available_players(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftStatus)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueDraftStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 draft_order = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->draft_order_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_draft_order_size());
    total_size += data_size;
  }

  // repeated uint32 available_players = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->available_players_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_available_players_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 current_pick = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_pick());
    }

    // optional uint32 time_remaining = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_remaining());
    }

    // optional bool pending_resume = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool completed = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueDraftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueDraftStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueDraftStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueDraftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  draft_order_.MergeFrom(from.draft_order_);
  available_players_.MergeFrom(from.available_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_pick_ = from.current_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_remaining_ = from.time_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      pending_resume_ = from.pending_resume_;
    }
    if (cached_has_bits & 0x00000010u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueDraftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueDraftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatus::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftStatus::InternalSwap(CMsgDOTAFantasyLeagueDraftStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  draft_order_.InternalSwap(&other->draft_order_);
  available_players_.InternalSwap(&other->available_players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, completed_)
      + sizeof(CMsgDOTAFantasyLeagueDraftStatus::completed_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueDraftStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueDraftPlayerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueDraftPlayerRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueDraftPlayerRequest)
}
CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(player_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(player_account_id_));
}

CMsgDOTAFantasyLeagueDraftPlayerRequest::~CMsgDOTAFantasyLeagueDraftPlayerRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueDraftPlayerRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeagueDraftPlayerRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_account_id_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(player_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueDraftPlayerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_index(&has_bits);
          team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueDraftPlayerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_index(), target);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index());
    }

    // optional uint32 player_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftPlayerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftPlayerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueDraftPlayerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueDraftPlayerRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_account_id_ = from.player_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, player_account_id_)
      + sizeof(CMsgDOTAFantasyLeagueDraftPlayerRequest::player_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueDraftPlayerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeagueDraftPlayerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeagueDraftPlayerResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeagueDraftPlayerResponse)
}
CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyLeagueDraftPlayerResponse::~CMsgDOTAFantasyLeagueDraftPlayerResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeagueDraftPlayerResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeagueDraftPlayerResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeagueDraftPlayerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeagueDraftPlayerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftPlayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftPlayerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftPlayerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeagueDraftPlayerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeagueDraftPlayerResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeagueDraftPlayerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamRosterSwapRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamRosterSwapRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slot_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_slot_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamRosterSwapRequest)
}
CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest(const CMsgDOTAFantasyTeamRosterSwapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(slot_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterSwapRequest)
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(slot_2_));
}

CMsgDOTAFantasyTeamRosterSwapRequest::~CMsgDOTAFantasyTeamRosterSwapRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterSwapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamRosterSwapRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamRosterSwapRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamRosterSwapRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamRosterSwapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamRosterSwapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_2_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(slot_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamRosterSwapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_index(&has_bits);
          team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_slot_1(&has_bits);
          slot_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_slot_2(&has_bits);
          slot_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamRosterSwapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_index(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional uint32 slot_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_slot_1(), target);
  }

  // optional uint32 slot_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_slot_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterSwapRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterSwapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 slot_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_1());
    }

    // optional uint32 slot_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterSwapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterSwapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamRosterSwapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamRosterSwapRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_1_ = from.slot_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      slot_2_ = from.slot_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::InternalSwap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, slot_2_)
      + sizeof(CMsgDOTAFantasyTeamRosterSwapRequest::slot_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamRosterSwapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamRosterSwapResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamRosterSwapResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamRosterSwapResponse)
}
CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse(const CMsgDOTAFantasyTeamRosterSwapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterSwapResponse)
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyTeamRosterSwapResponse::~CMsgDOTAFantasyTeamRosterSwapResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterSwapResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamRosterSwapResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamRosterSwapResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamRosterSwapResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamRosterSwapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamRosterSwapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamRosterSwapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamRosterSwapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamRosterSwapResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamRosterSwapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterSwapResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterSwapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterSwapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterSwapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamRosterSwapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamRosterSwapResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::InternalSwap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamRosterSwapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamRosterAddDropRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamRosterAddDropRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_add_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drop_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamRosterAddDropRequest)
}
CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest(const CMsgDOTAFantasyTeamRosterAddDropRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(drop_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterAddDropRequest)
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drop_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(drop_account_id_));
}

CMsgDOTAFantasyTeamRosterAddDropRequest::~CMsgDOTAFantasyTeamRosterAddDropRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterAddDropRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamRosterAddDropRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamRosterAddDropRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drop_account_id_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(drop_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamRosterAddDropRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_index(&has_bits);
          team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 add_account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_add_account_id(&has_bits);
          add_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drop_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_drop_account_id(&has_bits);
          drop_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamRosterAddDropRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_index(), target);
  }

  // optional uint32 add_account_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_add_account_id(), target);
  }

  // optional uint32 drop_account_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_drop_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterAddDropRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterAddDropRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index());
    }

    // optional uint32 add_account_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_add_account_id());
    }

    // optional uint32 drop_account_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drop_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterAddDropRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterAddDropRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamRosterAddDropRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamRosterAddDropRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      add_account_id_ = from.add_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      drop_account_id_ = from.drop_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, drop_account_id_)
      + sizeof(CMsgDOTAFantasyTeamRosterAddDropRequest::drop_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamRosterAddDropRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamRosterAddDropResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamRosterAddDropResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamRosterAddDropResponse)
}
CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse(const CMsgDOTAFantasyTeamRosterAddDropResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterAddDropResponse)
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyTeamRosterAddDropResponse::~CMsgDOTAFantasyTeamRosterAddDropResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterAddDropResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamRosterAddDropResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamRosterAddDropResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamRosterAddDropResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamRosterAddDropResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterAddDropResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterAddDropResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterAddDropResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterAddDropResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamRosterAddDropResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamRosterAddDropResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamRosterAddDropResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamTradesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamTradesRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamTradesRequest)
}
CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest(const CMsgDOTAFantasyTeamTradesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradesRequest)
}

void CMsgDOTAFantasyTeamTradesRequest::SharedCtor() {
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyTeamTradesRequest::~CMsgDOTAFantasyTeamTradesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamTradesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamTradesRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamTradesRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamTradesRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamTradesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamTradesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamTradesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamTradesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamTradesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradesRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamTradesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fantasy_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamTradesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamTradesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_league_id()) {
    _internal_set_fantasy_league_id(from._internal_fantasy_league_id());
  }
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesRequest::InternalSwap(CMsgDOTAFantasyTeamTradesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamTradesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamTradesResponse_Trade::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamTradesResponse_Trade>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_account_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner_account_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_account_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_account_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamTradesResponse.Trade)
}
CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade(const CMsgDOTAFantasyTeamTradesResponse_Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradesResponse.Trade)
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
}

CMsgDOTAFantasyTeamTradesResponse_Trade::~CMsgDOTAFantasyTeamTradesResponse_Trade() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradesResponse.Trade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamTradesResponse_Trade* _this = reinterpret_cast< CMsgDOTAFantasyTeamTradesResponse_Trade* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamTradesResponse_Trade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_account_id_1(&has_bits);
          owner_account_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_owner_account_id_2(&has_bits);
          owner_account_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_player_account_id_1(&has_bits);
          player_account_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_player_account_id_2(&has_bits);
          player_account_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamTradesResponse_Trade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 owner_account_id_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_account_id_2(), target);
  }

  // optional uint32 player_account_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_player_account_id_1(), target);
  }

  // optional uint32 player_account_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_player_account_id_2(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradesResponse.Trade)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesResponse_Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 owner_account_id_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id_2());
    }

    // optional uint32 player_account_id_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id_1());
    }

    // optional uint32 player_account_id_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id_2());
    }

    // optional uint32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesResponse_Trade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradesResponse_Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamTradesResponse.Trade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamTradesResponse.Trade)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_1_ = from.owner_account_id_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_account_id_1_ = from.player_account_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      player_account_id_2_ = from.player_account_id_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse_Trade::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::InternalSwap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, status_)
      + sizeof(CMsgDOTAFantasyTeamTradesResponse_Trade::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamTradesResponse_Trade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamTradesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamTradesResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamTradesResponse)
}
CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse(const CMsgDOTAFantasyTeamTradesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradesResponse)
}

void CMsgDOTAFantasyTeamTradesResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyTeamTradesResponse::~CMsgDOTAFantasyTeamTradesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamTradesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamTradesResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamTradesResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamTradesResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamTradesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamTradesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamTradesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamTradesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamTradesResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamTradesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradesResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamTradesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamTradesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamTradesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesResponse::InternalSwap(CMsgDOTAFantasyTeamTradesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trades_.InternalSwap(&other->trades_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamTradesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamTradeCancelRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamTradeCancelRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_index_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner_account_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_index_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamTradeCancelRequest)
}
CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest(const CMsgDOTAFantasyTeamTradeCancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_index_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradeCancelRequest)
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_index_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_2_));
}

CMsgDOTAFantasyTeamTradeCancelRequest::~CMsgDOTAFantasyTeamTradeCancelRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradeCancelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamTradeCancelRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamTradeCancelRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamTradeCancelRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamTradeCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamTradeCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_index_2_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamTradeCancelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_index_1(&has_bits);
          team_index_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_owner_account_id_2(&has_bits);
          owner_account_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_index_2(&has_bits);
          team_index_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamTradeCancelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 team_index_1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_index_1(), target);
  }

  // optional uint32 owner_account_id_2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_owner_account_id_2(), target);
  }

  // optional uint32 team_index_2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_index_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradeCancelRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamTradeCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 team_index_1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index_1());
    }

    // optional uint32 owner_account_id_2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id_2());
    }

    // optional uint32 team_index_2 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradeCancelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradeCancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamTradeCancelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamTradeCancelRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_1_ = from.team_index_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_index_2_ = from.team_index_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::InternalSwap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, team_index_2_)
      + sizeof(CMsgDOTAFantasyTeamTradeCancelRequest::team_index_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamTradeCancelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamTradeCancelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamTradeCancelResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamTradeCancelResponse)
}
CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse(const CMsgDOTAFantasyTeamTradeCancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradeCancelResponse)
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyTeamTradeCancelResponse::~CMsgDOTAFantasyTeamTradeCancelResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradeCancelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamTradeCancelResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamTradeCancelResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamTradeCancelResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamTradeCancelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamTradeCancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamTradeCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamTradeCancelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamTradeCancelResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamTradeCancelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradeCancelResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamTradeCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradeCancelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradeCancelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamTradeCancelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamTradeCancelResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::InternalSwap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamTradeCancelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamRosterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamRosterRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamRosterRequest)
}
CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest(const CMsgDOTAFantasyTeamRosterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterRequest)
}

void CMsgDOTAFantasyTeamRosterRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(timestamp_));
}

CMsgDOTAFantasyTeamRosterRequest::~CMsgDOTAFantasyTeamRosterRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamRosterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamRosterRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamRosterRequest* _this = reinterpret_cast< CMsgDOTAFantasyTeamRosterRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamRosterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamRosterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamRosterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamRosterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_index(&has_bits);
          team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamRosterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_index(), target);
  }

  // optional uint32 owner_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_account_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamRosterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index());
    }

    // optional uint32 owner_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamRosterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterRequest::InternalSwap(CMsgDOTAFantasyTeamRosterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, timestamp_)
      + sizeof(CMsgDOTAFantasyTeamRosterRequest::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamRosterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyTeamRosterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyTeamRosterResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_account_ids_(arena),
  player_locked_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyTeamRosterResponse)
}
CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse(const CMsgDOTAFantasyTeamRosterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_account_ids_(from.player_account_ids_),
      player_locked_(from.player_locked_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterResponse)
}

void CMsgDOTAFantasyTeamRosterResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyTeamRosterResponse::~CMsgDOTAFantasyTeamRosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyTeamRosterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyTeamRosterResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyTeamRosterResponse* _this = reinterpret_cast< CMsgDOTAFantasyTeamRosterResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyTeamRosterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyTeamRosterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyTeamRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyTeamRosterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_account_ids_.Clear();
  player_locked_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyTeamRosterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyTeamRosterResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 player_account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool player_locked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_locked(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_player_locked(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyTeamRosterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0, n = this->_internal_player_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_account_ids(i), target);
  }

  // repeated bool player_locked = 3;
  for (int i = 0, n = this->_internal_player_locked_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_player_locked(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyTeamRosterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_account_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->player_account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_account_ids_size());
    total_size += data_size;
  }

  // repeated bool player_locked = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_player_locked_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_locked_size());
    total_size += data_size;
  }

  // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyTeamRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyTeamRosterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyTeamRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyTeamRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_ids_.MergeFrom(from.player_account_ids_);
  player_locked_.MergeFrom(from.player_locked_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyTeamRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyTeamRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterResponse::InternalSwap(CMsgDOTAFantasyTeamRosterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_account_ids_.InternalSwap(&other->player_account_ids_);
  player_locked_.InternalSwap(&other->player_locked_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyTeamRosterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerHisoricalStatsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerHisoricalStatsRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}
CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedCtor() {
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyPlayerHisoricalStatsRequest::~CMsgDOTAFantasyPlayerHisoricalStatsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerHisoricalStatsRequest* _this = reinterpret_cast< CMsgDOTAFantasyPlayerHisoricalStatsRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerHisoricalStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerHisoricalStatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fantasy_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_league_id()) {
    _internal_set_fantasy_league_id(from._internal_fantasy_league_id());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerHisoricalStatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>()._has_bits_);
  static void set_has_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_levels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_xppm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_stuns(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_roshan_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&matches_, &from.matches_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&matches_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matches_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&matches_)) + sizeof(score_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* _this = reinterpret_cast< CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&matches_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpm_) -
        reinterpret_cast<char*>(&matches_)) + sizeof(gpm_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&xppm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&xppm_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_matches(&has_bits);
          matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_levels(&has_bits);
          levels_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float last_hits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_last_hits(&has_bits);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float denies = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_denies(&has_bits);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gpm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_gpm(&has_bits);
          gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xppm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_xppm(&has_bits);
          xppm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stuns = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_stuns(&has_bits);
          stuns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float healing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_healing(&has_bits);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tower_kills = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_tower_kills(&has_bits);
          tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roshan_kills = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_roshan_kills(&has_bits);
          roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float score = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matches = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_matches(), target);
  }

  // optional float levels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_levels(), target);
  }

  // optional float kills = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_kills(), target);
  }

  // optional float deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_deaths(), target);
  }

  // optional float assists = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_assists(), target);
  }

  // optional float last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_last_hits(), target);
  }

  // optional float denies = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_denies(), target);
  }

  // optional float gpm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_gpm(), target);
  }

  // optional float xppm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_xppm(), target);
  }

  // optional float stuns = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_stuns(), target);
  }

  // optional float healing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_healing(), target);
  }

  // optional float tower_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_tower_kills(), target);
  }

  // optional float roshan_kills = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_roshan_kills(), target);
  }

  // optional float score = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 matches = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matches());
    }

    // optional float levels = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float kills = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float assists = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float denies = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float gpm = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float xppm = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float stuns = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float healing = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float score = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      matches_ = from.matches_;
    }
    if (cached_has_bits & 0x00000002u) {
      levels_ = from.levels_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000040u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000080u) {
      gpm_ = from.gpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      xppm_ = from.xppm_;
    }
    if (cached_has_bits & 0x00000200u) {
      stuns_ = from.stuns_;
    }
    if (cached_has_bits & 0x00000400u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000800u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00001000u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, score_)
      + sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, matches_)>(
          reinterpret_cast<char*>(&matches_),
          reinterpret_cast<char*>(&other->matches_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& stats_premium(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg);
  static void set_has_stats_premium(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& stats_professional(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg);
  static void set_has_stats_professional(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_Internal::stats_premium(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
  return *msg->stats_premium_;
}
const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_Internal::stats_professional(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
  return *msg->stats_professional_;
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats_premium()) {
    stats_premium_ = new ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(*from.stats_premium_);
  } else {
    stats_premium_ = nullptr;
  }
  if (from._internal_has_stats_professional()) {
    stats_professional_ = new ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(*from.stats_professional_);
  } else {
    stats_professional_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weeks_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(weeks_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stats_premium_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weeks_) -
    reinterpret_cast<char*>(&stats_premium_)) + sizeof(weeks_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_premium_;
  if (this != internal_default_instance()) delete stats_professional_;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* _this = reinterpret_cast< CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_premium_ != nullptr);
      stats_premium_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_professional_ != nullptr);
      stats_professional_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weeks_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(weeks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weeks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_weeks(&has_bits);
          weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_premium(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_professional(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 weeks = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weeks(), target);
  }

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stats_premium(this), target, stream);
  }

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stats_professional(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_premium_);
    }

    // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_professional_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 weeks = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weeks());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stats_premium()->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from._internal_stats_premium());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stats_professional()->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from._internal_stats_professional());
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      weeks_ = from.weeks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, weeks_)
      + sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::weeks_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_premium_)>(
          reinterpret_cast<char*>(&stats_premium_),
          reinterpret_cast<char*>(&other->stats_premium_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerHisoricalStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerHisoricalStatsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse::~CMsgDOTAFantasyPlayerHisoricalStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse* _this = reinterpret_cast< CMsgDOTAFantasyPlayerHisoricalStatsResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerHisoricalStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyMessageAdd::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyMessageAdd>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyMessageAdd)
}
CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd(const CMsgDOTAFantasyMessageAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessageAdd)
}

void CMsgDOTAFantasyMessageAdd::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyMessageAdd::~CMsgDOTAFantasyMessageAdd() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessageAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyMessageAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyMessageAdd::ArenaDtor(void* object) {
  CMsgDOTAFantasyMessageAdd* _this = reinterpret_cast< CMsgDOTAFantasyMessageAdd* >(object);
  (void)_this;
}
void CMsgDOTAFantasyMessageAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyMessageAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyMessageAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyMessageAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyMessageAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyMessageAdd.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyMessageAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessageAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyMessageAdd.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessageAdd)
  return target;
}

size_t CMsgDOTAFantasyMessageAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyMessageAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyMessageAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessageAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyMessageAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyMessageAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyMessageAdd)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const CMsgDOTAFantasyMessageAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyMessageAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyMessageAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const CMsgDOTAFantasyMessageAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyMessageAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessageAdd::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessageAdd::InternalSwap(CMsgDOTAFantasyMessageAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyMessageAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyMessagesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyMessagesRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyMessagesRequest)
}
CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest(const CMsgDOTAFantasyMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_message_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_message_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessagesRequest)
}

void CMsgDOTAFantasyMessagesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_message_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_message_));
}

CMsgDOTAFantasyMessagesRequest::~CMsgDOTAFantasyMessagesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessagesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyMessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyMessagesRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyMessagesRequest* _this = reinterpret_cast< CMsgDOTAFantasyMessagesRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyMessagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyMessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_message_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyMessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_message(&has_bits);
          start_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_message(&has_bits);
          end_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyMessagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 start_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_message(), target);
  }

  // optional uint32 end_message = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessagesRequest)
  return target;
}

size_t CMsgDOTAFantasyMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyMessagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 start_message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_message());
    }

    // optional uint32 end_message = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_message());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyMessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyMessagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyMessagesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const CMsgDOTAFantasyMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_message_ = from.start_message_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_message_ = from.end_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const CMsgDOTAFantasyMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesRequest::InternalSwap(CMsgDOTAFantasyMessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, end_message_)
      + sizeof(CMsgDOTAFantasyMessagesRequest::end_message_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyMessagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyMessagesResponse_Message::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyMessagesResponse_Message>()._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_author_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyMessagesResponse.Message)
}
CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message(const CMsgDOTAFantasyMessagesResponse_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessagesResponse.Message)
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(time_));
}

CMsgDOTAFantasyMessagesResponse_Message::~CMsgDOTAFantasyMessagesResponse_Message() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessagesResponse.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyMessagesResponse_Message::ArenaDtor(void* object) {
  CMsgDOTAFantasyMessagesResponse_Message* _this = reinterpret_cast< CMsgDOTAFantasyMessagesResponse_Message* >(object);
  (void)_this;
}
void CMsgDOTAFantasyMessagesResponse_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyMessagesResponse_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyMessagesResponse_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyMessagesResponse.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyMessagesResponse_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_id(&has_bits);
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyMessagesResponse.Message.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 author_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_author_account_id(&has_bits);
          author_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyMessagesResponse_Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessagesResponse.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyMessagesResponse.Message.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional uint32 author_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_author_account_id(), target);
  }

  // optional uint32 time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessagesResponse.Message)
  return target;
}

size_t CMsgDOTAFantasyMessagesResponse_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyMessagesResponse.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 message_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id());
    }

    // optional uint32 author_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_author_account_id());
    }

    // optional uint32 time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyMessagesResponse.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesResponse_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyMessagesResponse_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyMessagesResponse.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyMessagesResponse.Message)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyMessagesResponse.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      author_account_id_ = from.author_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyMessagesResponse.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyMessagesResponse.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse_Message::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesResponse_Message::InternalSwap(CMsgDOTAFantasyMessagesResponse_Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, time_)
      + sizeof(CMsgDOTAFantasyMessagesResponse_Message::time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, message_id_)>(
          reinterpret_cast<char*>(&message_id_),
          reinterpret_cast<char*>(&other->message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyMessagesResponse_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyMessagesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyMessagesResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_total_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyMessagesResponse)
}
CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse(const CMsgDOTAFantasyMessagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_total_messages_) -
    reinterpret_cast<char*>(&result_)) + sizeof(num_total_messages_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessagesResponse)
}

void CMsgDOTAFantasyMessagesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_total_messages_) -
    reinterpret_cast<char*>(&result_)) + sizeof(num_total_messages_));
}

CMsgDOTAFantasyMessagesResponse::~CMsgDOTAFantasyMessagesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessagesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyMessagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyMessagesResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyMessagesResponse* _this = reinterpret_cast< CMsgDOTAFantasyMessagesResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyMessagesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyMessagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_total_messages_) -
        reinterpret_cast<char*>(&result_)) + sizeof(num_total_messages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyMessagesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyMessagesResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 num_total_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_total_messages(&has_bits);
          num_total_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyMessagesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_messages(i), target, stream);
  }

  // optional uint32 num_total_messages = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_total_messages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessagesResponse)
  return target;
}

size_t CMsgDOTAFantasyMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyMessagesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 num_total_messages = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_total_messages());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyMessagesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyMessagesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyMessagesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const CMsgDOTAFantasyMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_total_messages_ = from.num_total_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const CMsgDOTAFantasyMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesResponse::InternalSwap(CMsgDOTAFantasyMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, num_total_messages_)
      + sizeof(CMsgDOTAFantasyMessagesResponse::num_total_messages_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyMessagesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyRemoveOwner::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyRemoveOwner>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyRemoveOwner)
}
CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner(const CMsgDOTAFantasyRemoveOwner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyRemoveOwner)
}

void CMsgDOTAFantasyRemoveOwner::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_));
}

CMsgDOTAFantasyRemoveOwner::~CMsgDOTAFantasyRemoveOwner() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyRemoveOwner)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyRemoveOwner::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyRemoveOwner::ArenaDtor(void* object) {
  CMsgDOTAFantasyRemoveOwner* _this = reinterpret_cast< CMsgDOTAFantasyRemoveOwner* >(object);
  (void)_this;
}
void CMsgDOTAFantasyRemoveOwner::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyRemoveOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyRemoveOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyRemoveOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_index_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyRemoveOwner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_index(&has_bits);
          team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyRemoveOwner::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyRemoveOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id(), target);
  }

  // optional uint32 team_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyRemoveOwner)
  return target;
}

size_t CMsgDOTAFantasyRemoveOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyRemoveOwner)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint32 team_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyRemoveOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyRemoveOwner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyRemoveOwner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyRemoveOwner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyRemoveOwner)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const CMsgDOTAFantasyRemoveOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyRemoveOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_index_ = from.team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyRemoveOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const CMsgDOTAFantasyRemoveOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyRemoveOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwner::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyRemoveOwner::InternalSwap(CMsgDOTAFantasyRemoveOwner* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, team_index_)
      + sizeof(CMsgDOTAFantasyRemoveOwner::team_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyRemoveOwner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyRemoveOwnerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyRemoveOwnerResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyRemoveOwnerResponse)
}
CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse(const CMsgDOTAFantasyRemoveOwnerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyRemoveOwnerResponse)
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyRemoveOwnerResponse::~CMsgDOTAFantasyRemoveOwnerResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyRemoveOwnerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyRemoveOwnerResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyRemoveOwnerResponse* _this = reinterpret_cast< CMsgDOTAFantasyRemoveOwnerResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyRemoveOwnerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyRemoveOwnerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyRemoveOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyRemoveOwnerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyRemoveOwnerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyRemoveOwnerResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyRemoveOwnerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyRemoveOwnerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyRemoveOwnerResponse)
  return target;
}

size_t CMsgDOTAFantasyRemoveOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyRemoveOwnerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyRemoveOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyRemoveOwnerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyRemoveOwnerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyRemoveOwnerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyRemoveOwnerResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyRemoveOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyRemoveOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyRemoveOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwnerResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyRemoveOwnerResponse::InternalSwap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyRemoveOwnerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyScheduledMatchesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyScheduledMatchesRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyScheduledMatchesRequest)
}
CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest(const CMsgDOTAFantasyScheduledMatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyScheduledMatchesRequest)
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedCtor() {
fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyScheduledMatchesRequest::~CMsgDOTAFantasyScheduledMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyScheduledMatchesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyScheduledMatchesRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyScheduledMatchesRequest* _this = reinterpret_cast< CMsgDOTAFantasyScheduledMatchesRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyScheduledMatchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyScheduledMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyScheduledMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyScheduledMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyScheduledMatchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyScheduledMatchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyScheduledMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyScheduledMatchesRequest)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyScheduledMatchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fantasy_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyScheduledMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyScheduledMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyScheduledMatchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyScheduledMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyScheduledMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_league_id()) {
    _internal_set_fantasy_league_id(from._internal_fantasy_league_id());
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyScheduledMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyScheduledMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesRequest::InternalSwap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyScheduledMatchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_ids_(arena),
  league_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      team_ids_(from.team_ids_),
      league_ids_(from.league_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedCtor() {
timestamp_ = 0u;
}

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::~CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::ArenaDtor(void* object) {
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* _this = reinterpret_cast< CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* >(object);
  (void)_this;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ids_.Clear();
  league_ids_.Clear();
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 team_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_team_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_team_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 league_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_league_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_league_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->_internal_team_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_ids(i), target);
  }

  // repeated uint32 league_ids = 3;
  for (int i = 0, n = this->_internal_league_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_ids_size());
    total_size += data_size;
  }

  // repeated uint32 league_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->league_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_league_ids_size());
    total_size += data_size;
  }

  // optional uint32 timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  league_ids_.MergeFrom(from.league_ids_);
  if (from._internal_has_timestamp()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_ids_.InternalSwap(&other->team_ids_);
  league_ids_.InternalSwap(&other->league_ids_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyScheduledMatchesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyScheduledMatchesResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scheduled_match_days_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyScheduledMatchesResponse)
}
CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse(const CMsgDOTAFantasyScheduledMatchesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      scheduled_match_days_(from.scheduled_match_days_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyScheduledMatchesResponse)
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyScheduledMatchesResponse::~CMsgDOTAFantasyScheduledMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyScheduledMatchesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyScheduledMatchesResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyScheduledMatchesResponse* _this = reinterpret_cast< CMsgDOTAFantasyScheduledMatchesResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyScheduledMatchesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyScheduledMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyScheduledMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyScheduledMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduled_match_days_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyScheduledMatchesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyScheduledMatchesResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scheduled_match_days(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyScheduledMatchesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyScheduledMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scheduled_match_days_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_scheduled_match_days(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyScheduledMatchesResponse)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyScheduledMatchesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  total_size += 1UL * this->_internal_scheduled_match_days_size();
  for (const auto& msg : this->scheduled_match_days_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyScheduledMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyScheduledMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyScheduledMatchesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyScheduledMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyScheduledMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduled_match_days_.MergeFrom(from.scheduled_match_days_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyScheduledMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyScheduledMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scheduled_match_days_.InternalSwap(&other->scheduled_match_days_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyScheduledMatchesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeaveLeagueRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeaveLeagueRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_team_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeaveLeagueRequest)
}
CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest(const CMsgDOTAFantasyLeaveLeagueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(fantasy_team_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeaveLeagueRequest)
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(fantasy_team_index_));
}

CMsgDOTAFantasyLeaveLeagueRequest::~CMsgDOTAFantasyLeaveLeagueRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeaveLeagueRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeaveLeagueRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeaveLeagueRequest* _this = reinterpret_cast< CMsgDOTAFantasyLeaveLeagueRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeaveLeagueRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeaveLeagueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeaveLeagueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeaveLeagueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_team_index_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(fantasy_team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeaveLeagueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_team_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fantasy_team_index(&has_bits);
          fantasy_team_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeaveLeagueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeaveLeagueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fantasy_team_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeaveLeagueRequest)
  return target;
}

size_t CMsgDOTAFantasyLeaveLeagueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeaveLeagueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 fantasy_team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_team_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeaveLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeaveLeagueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeaveLeagueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeaveLeagueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeaveLeagueRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeaveLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeaveLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeaveLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeaveLeagueRequest::InternalSwap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, fantasy_team_index_)
      + sizeof(CMsgDOTAFantasyLeaveLeagueRequest::fantasy_team_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeaveLeagueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyLeaveLeagueResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyLeaveLeagueResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLeaveLeagueResponse)
}
CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse(const CMsgDOTAFantasyLeaveLeagueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeaveLeagueResponse)
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyLeaveLeagueResponse::~CMsgDOTAFantasyLeaveLeagueResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeaveLeagueResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyLeaveLeagueResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyLeaveLeagueResponse* _this = reinterpret_cast< CMsgDOTAFantasyLeaveLeagueResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyLeaveLeagueResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyLeaveLeagueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyLeaveLeagueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLeaveLeagueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLeaveLeagueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyLeaveLeagueResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyLeaveLeagueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeaveLeagueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeaveLeagueResponse)
  return target;
}

size_t CMsgDOTAFantasyLeaveLeagueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLeaveLeagueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyLeaveLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeaveLeagueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyLeaveLeagueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyLeaveLeagueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyLeaveLeagueResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLeaveLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyLeaveLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLeaveLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeaveLeagueResponse::InternalSwap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLeaveLeagueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerScoreDetailsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerScoreDetailsRequest>()._has_bits_);
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerScoreDetailsRequest)
}
CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fantasy_league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_time_));
}

CMsgDOTAFantasyPlayerScoreDetailsRequest::~CMsgDOTAFantasyPlayerScoreDetailsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerScoreDetailsRequest* _this = reinterpret_cast< CMsgDOTAFantasyPlayerScoreDetailsRequest* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerScoreDetailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerScoreDetailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_account_id(), target);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_time(), target);
  }

  // optional uint32 end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

    // optional uint32 start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 end_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreDetailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerScoreDetailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerScoreDetailsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, end_time_)
      + sizeof(CMsgDOTAFantasyPlayerScoreDetailsRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, fantasy_league_id_)>(
          reinterpret_cast<char*>(&fantasy_league_id_),
          reinterpret_cast<char*>(&other->fantasy_league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerScoreDetailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_series_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_league_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_opposing_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_opposing_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_opposing_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owned_by(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_benched(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}
CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opposing_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opposing_team_name()) {
    opposing_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opposing_team_name(), 
      GetArena());
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&benched_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(benched_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedCtor() {
opposing_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&benched_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(benched_));
}

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::~CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  opposing_team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* _this = reinterpret_cast< CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    opposing_team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opposing_team_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(opposing_team_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&opposing_team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&benched_) -
        reinterpret_cast<char*>(&opposing_team_logo_)) + sizeof(benched_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_series_num(&has_bits);
          series_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_series_type(&has_bits);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_tier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_league_tier(&has_bits);
          league_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 opposing_team_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_opposing_team_id(&has_bits);
          opposing_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 opposing_team_logo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_opposing_team_logo(&has_bits);
          opposing_team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string opposing_team_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_opposing_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owned_by = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_owned_by(&has_bits);
          owned_by_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool benched = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_benched(&has_bits);
          benched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 series_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_series_id(), target);
  }

  // optional uint32 series_num = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_series_num(), target);
  }

  // optional uint32 series_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_series_type(), target);
  }

  // optional uint32 league_tier = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_league_tier(), target);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_league_id(), target);
  }

  // optional uint32 opposing_team_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_opposing_team_id(), target);
  }

  // optional uint64 opposing_team_logo = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_opposing_team_logo(), target);
  }

  // optional string opposing_team_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_opposing_team_name().data(), static_cast<int>(this->_internal_opposing_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_opposing_team_name(), target);
  }

  // optional uint32 owned_by = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_owned_by(), target);
  }

  // optional bool benched = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_benched(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string opposing_team_name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_opposing_team_name());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 series_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 series_num = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_num());
    }

    // optional uint32 series_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 league_tier = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_tier());
    }

    // optional uint32 league_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 opposing_team_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_opposing_team_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 opposing_team_logo = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_opposing_team_logo());
    }

    // optional uint32 owned_by = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owned_by());
    }

    // optional bool benched = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_opposing_team_name(from._internal_opposing_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      series_num_ = from.series_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_tier_ = from.league_tier_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      opposing_team_id_ = from.opposing_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      opposing_team_logo_ = from.opposing_team_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      owned_by_ = from.owned_by_;
    }
    if (cached_has_bits & 0x00000400u) {
      benched_ = from.benched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opposing_team_name_.Swap(&other->opposing_team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, benched_)
      + sizeof(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::benched_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerScoreDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerScoreDetailsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse)
}
CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAFantasyPlayerScoreDetailsResponse::~CMsgDOTAFantasyPlayerScoreDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerScoreDetailsResponse* _this = reinterpret_cast< CMsgDOTAFantasyPlayerScoreDetailsResponse* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerScoreDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerScoreDetailsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerScoreDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPassportVoteTeamGuess::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportVoteTeamGuess>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_runnerup_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportVoteTeamGuess)
}
CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&runnerup_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(runnerup_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVoteTeamGuess)
}

void CMsgDOTAPassportVoteTeamGuess::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&runnerup_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(runnerup_id_));
}

CMsgDOTAPassportVoteTeamGuess::~CMsgDOTAPassportVoteTeamGuess() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVoteTeamGuess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPassportVoteTeamGuess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPassportVoteTeamGuess::ArenaDtor(void* object) {
  CMsgDOTAPassportVoteTeamGuess* _this = reinterpret_cast< CMsgDOTAPassportVoteTeamGuess* >(object);
  (void)_this;
}
void CMsgDOTAPassportVoteTeamGuess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPassportVoteTeamGuess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPassportVoteTeamGuess::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportVoteTeamGuess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&runnerup_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(runnerup_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportVoteTeamGuess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_winner_id(&has_bits);
          winner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 runnerup_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_runnerup_id(&has_bits);
          runnerup_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPassportVoteTeamGuess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVoteTeamGuess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 winner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_winner_id(), target);
  }

  // optional uint32 runnerup_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_runnerup_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVoteTeamGuess)
  return target;
}

size_t CMsgDOTAPassportVoteTeamGuess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportVoteTeamGuess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 winner_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winner_id());
    }

    // optional uint32 runnerup_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_runnerup_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPassportVoteTeamGuess)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVoteTeamGuess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPassportVoteTeamGuess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPassportVoteTeamGuess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPassportVoteTeamGuess)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportVoteTeamGuess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_id_ = from.winner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      runnerup_id_ = from.runnerup_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPassportVoteTeamGuess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportVoteTeamGuess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteTeamGuess::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteTeamGuess::InternalSwap(CMsgDOTAPassportVoteTeamGuess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, runnerup_id_)
      + sizeof(CMsgDOTAPassportVoteTeamGuess::runnerup_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportVoteTeamGuess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPassportVoteGenericSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportVoteGenericSelection>()._has_bits_);
  static void set_has_selection_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportVoteGenericSelection)
}
CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&selection_index_, &from.selection_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&selection_) -
    reinterpret_cast<char*>(&selection_index_)) + sizeof(selection_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVoteGenericSelection)
}

void CMsgDOTAPassportVoteGenericSelection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&selection_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_) -
    reinterpret_cast<char*>(&selection_index_)) + sizeof(selection_));
}

CMsgDOTAPassportVoteGenericSelection::~CMsgDOTAPassportVoteGenericSelection() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVoteGenericSelection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPassportVoteGenericSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPassportVoteGenericSelection::ArenaDtor(void* object) {
  CMsgDOTAPassportVoteGenericSelection* _this = reinterpret_cast< CMsgDOTAPassportVoteGenericSelection* >(object);
  (void)_this;
}
void CMsgDOTAPassportVoteGenericSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPassportVoteGenericSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPassportVoteGenericSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportVoteGenericSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&selection_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_) -
        reinterpret_cast<char*>(&selection_index_)) + sizeof(selection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportVoteGenericSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_2013PassportSelectionIndices_IsValid(val))) {
            _internal_set_selection_index(static_cast<::DOTA_2013PassportSelectionIndices>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_selection(&has_bits);
          selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPassportVoteGenericSelection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVoteGenericSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_selection_index(), target);
  }

  // optional uint32 selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVoteGenericSelection)
  return target;
}

size_t CMsgDOTAPassportVoteGenericSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportVoteGenericSelection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_index());
    }

    // optional uint32 selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selection());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPassportVoteGenericSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVoteGenericSelection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPassportVoteGenericSelection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPassportVoteGenericSelection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPassportVoteGenericSelection)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportVoteGenericSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      selection_index_ = from.selection_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      selection_ = from.selection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPassportVoteGenericSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportVoteGenericSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteGenericSelection::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteGenericSelection::InternalSwap(CMsgDOTAPassportVoteGenericSelection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, selection_)
      + sizeof(CMsgDOTAPassportVoteGenericSelection::selection_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, selection_index_)>(
          reinterpret_cast<char*>(&selection_index_),
          reinterpret_cast<char*>(&other->selection_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportVoteGenericSelection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPassportStampedPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportStampedPlayer>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stamp_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportStampedPlayer)
}
CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stamp_level_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(stamp_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportStampedPlayer)
}

void CMsgDOTAPassportStampedPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stamp_level_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(stamp_level_));
}

CMsgDOTAPassportStampedPlayer::~CMsgDOTAPassportStampedPlayer() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportStampedPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPassportStampedPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPassportStampedPlayer::ArenaDtor(void* object) {
  CMsgDOTAPassportStampedPlayer* _this = reinterpret_cast< CMsgDOTAPassportStampedPlayer* >(object);
  (void)_this;
}
void CMsgDOTAPassportStampedPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPassportStampedPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPassportStampedPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportStampedPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stamp_level_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(stamp_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportStampedPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stamp_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stamp_level(&has_bits);
          stamp_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPassportStampedPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportStampedPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 stamp_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stamp_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportStampedPlayer)
  return target;
}

size_t CMsgDOTAPassportStampedPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportStampedPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steam_id());
    }

    // optional uint32 stamp_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stamp_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPassportStampedPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportStampedPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPassportStampedPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPassportStampedPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPassportStampedPlayer)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const CMsgDOTAPassportStampedPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportStampedPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_level_ = from.stamp_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPassportStampedPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const CMsgDOTAPassportStampedPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportStampedPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportStampedPlayer::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportStampedPlayer::InternalSwap(CMsgDOTAPassportStampedPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, stamp_level_)
      + sizeof(CMsgDOTAPassportStampedPlayer::stamp_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportStampedPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPassportPlayerCardChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportPlayerCardChallenge>()._has_bits_);
  static void set_has_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportPlayerCardChallenge)
}
CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(const CMsgDOTAPassportPlayerCardChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  challenge_id_ = from.challenge_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportPlayerCardChallenge)
}

void CMsgDOTAPassportPlayerCardChallenge::SharedCtor() {
challenge_id_ = 0u;
}

CMsgDOTAPassportPlayerCardChallenge::~CMsgDOTAPassportPlayerCardChallenge() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportPlayerCardChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPassportPlayerCardChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPassportPlayerCardChallenge::ArenaDtor(void* object) {
  CMsgDOTAPassportPlayerCardChallenge* _this = reinterpret_cast< CMsgDOTAPassportPlayerCardChallenge* >(object);
  (void)_this;
}
void CMsgDOTAPassportPlayerCardChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPassportPlayerCardChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPassportPlayerCardChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportPlayerCardChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportPlayerCardChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 challenge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_challenge_id(&has_bits);
          challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPassportPlayerCardChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportPlayerCardChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 challenge_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenge_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportPlayerCardChallenge)
  return target;
}

size_t CMsgDOTAPassportPlayerCardChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportPlayerCardChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 challenge_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_challenge_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPassportPlayerCardChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportPlayerCardChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPassportPlayerCardChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPassportPlayerCardChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPassportPlayerCardChallenge)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportPlayerCardChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_challenge_id()) {
    _internal_set_challenge_id(from._internal_challenge_id());
  }
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPassportPlayerCardChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportPlayerCardChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportPlayerCardChallenge::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportPlayerCardChallenge::InternalSwap(CMsgDOTAPassportPlayerCardChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(challenge_id_, other->challenge_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportPlayerCardChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAPassportVote::_Internal {
 public:
};

CMsgDOTAPassportVote::CMsgDOTAPassportVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_votes_(arena),
  generic_selections_(arena),
  stamped_players_(arena),
  player_card_challenges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportVote)
}
CMsgDOTAPassportVote::CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      team_votes_(from.team_votes_),
      generic_selections_(from.generic_selections_),
      stamped_players_(from.stamped_players_),
      player_card_challenges_(from.player_card_challenges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVote)
}

void CMsgDOTAPassportVote::SharedCtor() {
}

CMsgDOTAPassportVote::~CMsgDOTAPassportVote() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAPassportVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAPassportVote::ArenaDtor(void* object) {
  CMsgDOTAPassportVote* _this = reinterpret_cast< CMsgDOTAPassportVote* >(object);
  (void)_this;
}
void CMsgDOTAPassportVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAPassportVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAPassportVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_votes_.Clear();
  generic_selections_.Clear();
  stamped_players_.Clear();
  player_card_challenges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generic_selections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stamped_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_card_challenges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAPassportVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_team_votes(i), target, stream);
  }

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_generic_selections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_generic_selections(i), target, stream);
  }

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stamped_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stamped_players(i), target, stream);
  }

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_card_challenges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_player_card_challenges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVote)
  return target;
}

size_t CMsgDOTAPassportVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  total_size += 1UL * this->_internal_team_votes_size();
  for (const auto& msg : this->team_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  total_size += 1UL * this->_internal_generic_selections_size();
  for (const auto& msg : this->generic_selections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  total_size += 1UL * this->_internal_stamped_players_size();
  for (const auto& msg : this->stamped_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  total_size += 1UL * this->_internal_player_card_challenges_size();
  for (const auto& msg : this->player_card_challenges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAPassportVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAPassportVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAPassportVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAPassportVote)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVote::MergeFrom(const CMsgDOTAPassportVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_votes_.MergeFrom(from.team_votes_);
  generic_selections_.MergeFrom(from.generic_selections_);
  stamped_players_.MergeFrom(from.stamped_players_);
  player_card_challenges_.MergeFrom(from.player_card_challenges_);
}

void CMsgDOTAPassportVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAPassportVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVote::CopyFrom(const CMsgDOTAPassportVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVote::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVote::InternalSwap(CMsgDOTAPassportVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  team_votes_.InternalSwap(&other->team_votes_);
  generic_selections_.InternalSwap(&other->generic_selections_);
  stamped_players_.InternalSwap(&other->stamped_players_);
  player_card_challenges_.InternalSwap(&other->player_card_challenges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCGetPlayerCardRosterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetPlayerCardRosterRequest>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetPlayerCardRosterRequest)
}
CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(const CMsgClientToGCGetPlayerCardRosterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetPlayerCardRosterRequest)
}

void CMsgClientToGCGetPlayerCardRosterRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
}

CMsgClientToGCGetPlayerCardRosterRequest::~CMsgClientToGCGetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetPlayerCardRosterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCGetPlayerCardRosterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCGetPlayerCardRosterRequest::ArenaDtor(void* object) {
  CMsgClientToGCGetPlayerCardRosterRequest* _this = reinterpret_cast< CMsgClientToGCGetPlayerCardRosterRequest* >(object);
  (void)_this;
}
void CMsgClientToGCGetPlayerCardRosterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetPlayerCardRosterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetPlayerCardRosterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetPlayerCardRosterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCGetPlayerCardRosterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetPlayerCardRosterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetPlayerCardRosterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetPlayerCardRosterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetPlayerCardRosterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCGetPlayerCardRosterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCGetPlayerCardRosterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCGetPlayerCardRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetPlayerCardRosterRequest::MergeFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetPlayerCardRosterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterRequest, timestamp_)
      + sizeof(CMsgClientToGCGetPlayerCardRosterRequest::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterRequest, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetPlayerCardRosterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCGetPlayerCardRosterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetPlayerCardRosterResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_card_item_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetPlayerCardRosterResponse)
}
CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(const CMsgClientToGCGetPlayerCardRosterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_card_item_id_(from.player_card_item_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&result_)) + sizeof(percentile_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetPlayerCardRosterResponse)
}

void CMsgClientToGCGetPlayerCardRosterResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&result_)) + sizeof(percentile_));
}

CMsgClientToGCGetPlayerCardRosterResponse::~CMsgClientToGCGetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetPlayerCardRosterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCGetPlayerCardRosterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCGetPlayerCardRosterResponse::ArenaDtor(void* object) {
  CMsgClientToGCGetPlayerCardRosterResponse* _this = reinterpret_cast< CMsgClientToGCGetPlayerCardRosterResponse* >(object);
  (void)_this;
}
void CMsgClientToGCGetPlayerCardRosterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetPlayerCardRosterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetPlayerCardRosterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_card_item_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&percentile_) -
        reinterpret_cast<char*>(&result_)) + sizeof(percentile_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetPlayerCardRosterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCGetPlayerCardRosterResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint64 player_card_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_card_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_player_card_item_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool finalized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_finalized(&has_bits);
          finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float percentile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_percentile(&has_bits);
          percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCGetPlayerCardRosterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetPlayerCardRosterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated uint64 player_card_item_id = 2;
  for (int i = 0, n = this->_internal_player_card_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_card_item_id(i), target);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  // optional bool finalized = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_finalized(), target);
  }

  // optional float percentile = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetPlayerCardRosterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_card_item_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->player_card_item_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_card_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional float score = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool finalized = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float percentile = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetPlayerCardRosterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetPlayerCardRosterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCGetPlayerCardRosterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCGetPlayerCardRosterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCGetPlayerCardRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetPlayerCardRosterResponse::MergeFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_item_id_.MergeFrom(from.player_card_item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      finalized_ = from.finalized_;
    }
    if (cached_has_bits & 0x00000008u) {
      percentile_ = from.percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetPlayerCardRosterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_card_item_id_.InternalSwap(&other->player_card_item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, percentile_)
      + sizeof(CMsgClientToGCGetPlayerCardRosterResponse::percentile_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetPlayerCardRosterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCSetPlayerCardRosterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetPlayerCardRosterRequest>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_card_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetPlayerCardRosterRequest)
}
CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(const CMsgClientToGCSetPlayerCardRosterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetPlayerCardRosterRequest)
}

void CMsgClientToGCSetPlayerCardRosterRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(event_id_));
}

CMsgClientToGCSetPlayerCardRosterRequest::~CMsgClientToGCSetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetPlayerCardRosterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCSetPlayerCardRosterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCSetPlayerCardRosterRequest::ArenaDtor(void* object) {
  CMsgClientToGCSetPlayerCardRosterRequest* _this = reinterpret_cast< CMsgClientToGCSetPlayerCardRosterRequest* >(object);
  (void)_this;
}
void CMsgClientToGCSetPlayerCardRosterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSetPlayerCardRosterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetPlayerCardRosterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetPlayerCardRosterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 player_card_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_player_card_item_id(&has_bits);
          player_card_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCSetPlayerCardRosterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetPlayerCardRosterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot(), target);
  }

  // optional uint64 player_card_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_player_card_item_id(), target);
  }

  // optional uint32 event_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetPlayerCardRosterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint64 player_card_item_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_player_card_item_id());
    }

    // optional uint32 slot = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

    // optional uint32 event_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSetPlayerCardRosterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCSetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetPlayerCardRosterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCSetPlayerCardRosterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCSetPlayerCardRosterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCSetPlayerCardRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetPlayerCardRosterRequest::MergeFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_card_item_id_ = from.player_card_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCSetPlayerCardRosterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCSetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, event_id_)
      + sizeof(CMsgClientToGCSetPlayerCardRosterRequest::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetPlayerCardRosterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCSetPlayerCardRosterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetPlayerCardRosterResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetPlayerCardRosterResponse)
}
CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(const CMsgClientToGCSetPlayerCardRosterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetPlayerCardRosterResponse)
}

void CMsgClientToGCSetPlayerCardRosterResponse::SharedCtor() {
result_ = 0;
}

CMsgClientToGCSetPlayerCardRosterResponse::~CMsgClientToGCSetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetPlayerCardRosterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCSetPlayerCardRosterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCSetPlayerCardRosterResponse::ArenaDtor(void* object) {
  CMsgClientToGCSetPlayerCardRosterResponse* _this = reinterpret_cast< CMsgClientToGCSetPlayerCardRosterResponse* >(object);
  (void)_this;
}
void CMsgClientToGCSetPlayerCardRosterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSetPlayerCardRosterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetPlayerCardRosterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetPlayerCardRosterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCSetPlayerCardRosterResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCSetPlayerCardRosterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetPlayerCardRosterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetPlayerCardRosterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSetPlayerCardRosterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCSetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetPlayerCardRosterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCSetPlayerCardRosterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCSetPlayerCardRosterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCSetPlayerCardRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetPlayerCardRosterResponse::MergeFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgClientToGCSetPlayerCardRosterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCSetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetPlayerCardRosterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  day_timestamps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
}
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      day_timestamps_(from.day_timestamps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_league_name()) {
    league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_league_name(), 
      GetArena());
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SharedCtor() {
league_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
}

CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::~CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  league_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::ArenaDtor(void* object) {
  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* _this = reinterpret_cast< CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* >(object);
  (void)_this;
}
void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  day_timestamps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    league_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string league_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_league_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_end_timestamp(&has_bits);
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 day_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_day_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_day_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(val))) {
            _internal_set_status(static_cast<::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional string league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_league_name().data(), static_cast<int>(this->_internal_league_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_league_name(), target);
  }

  // optional uint32 start_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_end_timestamp(), target);
  }

  // repeated uint32 day_timestamps = 5;
  for (int i = 0, n = this->_internal_day_timestamps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_day_timestamps(i), target);
  }

  // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  return target;
}

size_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 day_timestamps = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->day_timestamps_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_day_timestamps_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string league_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_league_name());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 start_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_timestamp());
    }

    // optional uint32 end_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_timestamp());
    }

    // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergeFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  day_timestamps_.MergeFrom(from.day_timestamps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_league_name(from._internal_league_name());
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::InternalSwap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  day_timestamps_.InternalSwap(&other->day_timestamps_);
  league_name_.Swap(&other->league_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, status_)
      + sizeof(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyDPCLeagueStatus::_Internal {
 public:
};

CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  league_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyDPCLeagueStatus)
}
CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus(const CMsgDOTAFantasyDPCLeagueStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      league_infos_(from.league_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyDPCLeagueStatus)
}

void CMsgDOTAFantasyDPCLeagueStatus::SharedCtor() {
}

CMsgDOTAFantasyDPCLeagueStatus::~CMsgDOTAFantasyDPCLeagueStatus() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyDPCLeagueStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyDPCLeagueStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyDPCLeagueStatus::ArenaDtor(void* object) {
  CMsgDOTAFantasyDPCLeagueStatus* _this = reinterpret_cast< CMsgDOTAFantasyDPCLeagueStatus* >(object);
  (void)_this;
}
void CMsgDOTAFantasyDPCLeagueStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyDPCLeagueStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyDPCLeagueStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyDPCLeagueStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  league_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyDPCLeagueStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_league_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyDPCLeagueStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyDPCLeagueStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_league_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_league_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyDPCLeagueStatus)
  return target;
}

size_t CMsgDOTAFantasyDPCLeagueStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyDPCLeagueStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  total_size += 1UL * this->_internal_league_infos_size();
  for (const auto& msg : this->league_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyDPCLeagueStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyDPCLeagueStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyDPCLeagueStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyDPCLeagueStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyDPCLeagueStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyDPCLeagueStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyDPCLeagueStatus::MergeFrom(const CMsgDOTAFantasyDPCLeagueStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyDPCLeagueStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  league_infos_.MergeFrom(from.league_infos_);
}

void CMsgDOTAFantasyDPCLeagueStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyDPCLeagueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyDPCLeagueStatus::CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyDPCLeagueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyDPCLeagueStatus::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyDPCLeagueStatus::InternalSwap(CMsgDOTAFantasyDPCLeagueStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  league_infos_.InternalSwap(&other->league_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyDPCLeagueStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSearchResults_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSearchResults_Player>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCSearchResults_Player::CMsgDOTADPCSearchResults_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults.Player)
}
CMsgDOTADPCSearchResults_Player::CMsgDOTADPCSearchResults_Player(const CMsgDOTADPCSearchResults_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_real_name()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults.Player)
}

void CMsgDOTADPCSearchResults_Player::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CMsgDOTADPCSearchResults_Player::~CMsgDOTADPCSearchResults_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSearchResults_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTADPCSearchResults_Player::ArenaDtor(void* object) {
  CMsgDOTADPCSearchResults_Player* _this = reinterpret_cast< CMsgDOTADPCSearchResults_Player* >(object);
  (void)_this;
}
void CMsgDOTADPCSearchResults_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSearchResults_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      real_name_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Player.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string real_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Player.real_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSearchResults_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Player.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string real_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Player.real_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults.Player)
  return target;
}

size_t CMsgDOTADPCSearchResults_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string real_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSearchResults_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSearchResults.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSearchResults_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSearchResults_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSearchResults.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSearchResults.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSearchResults_Player::MergeFrom(const CMsgDOTADPCSearchResults_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSearchResults_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSearchResults.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSearchResults_Player::CopyFrom(const CMsgDOTADPCSearchResults_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults_Player::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults_Player::InternalSwap(CMsgDOTADPCSearchResults_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  real_name_.Swap(&other->real_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSearchResults_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSearchResults_Team>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCSearchResults_Team::CMsgDOTADPCSearchResults_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults.Team)
}
CMsgDOTADPCSearchResults_Team::CMsgDOTADPCSearchResults_Team(const CMsgDOTADPCSearchResults_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults.Team)
}

void CMsgDOTADPCSearchResults_Team::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CMsgDOTADPCSearchResults_Team::~CMsgDOTADPCSearchResults_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSearchResults_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTADPCSearchResults_Team::ArenaDtor(void* object) {
  CMsgDOTADPCSearchResults_Team* _this = reinterpret_cast< CMsgDOTADPCSearchResults_Team* >(object);
  (void)_this;
}
void CMsgDOTADPCSearchResults_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSearchResults_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Team.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Team.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSearchResults_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Team.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Team.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults.Team)
  return target;
}

size_t CMsgDOTADPCSearchResults_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSearchResults_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSearchResults.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSearchResults_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSearchResults_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSearchResults.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSearchResults.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSearchResults_Team::MergeFrom(const CMsgDOTADPCSearchResults_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSearchResults_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSearchResults.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSearchResults_Team::CopyFrom(const CMsgDOTADPCSearchResults_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults_Team::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults_Team::InternalSwap(CMsgDOTADPCSearchResults_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSearchResults_League::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSearchResults_League>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTADPCSearchResults_League::CMsgDOTADPCSearchResults_League(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults.League)
}
CMsgDOTADPCSearchResults_League::CMsgDOTADPCSearchResults_League(const CMsgDOTADPCSearchResults_League& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults.League)
}

void CMsgDOTADPCSearchResults_League::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CMsgDOTADPCSearchResults_League::~CMsgDOTADPCSearchResults_League() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults.League)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSearchResults_League::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTADPCSearchResults_League::ArenaDtor(void* object) {
  CMsgDOTADPCSearchResults_League* _this = reinterpret_cast< CMsgDOTADPCSearchResults_League* >(object);
  (void)_this;
}
void CMsgDOTADPCSearchResults_League::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSearchResults_League::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults_League::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults.League)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults_League::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSearchResults.League.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSearchResults_League::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults.League)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.League.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults.League)
  return target;
}

size_t CMsgDOTADPCSearchResults_League::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults.League)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSearchResults_League::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSearchResults.League)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSearchResults_League* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSearchResults_League>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSearchResults.League)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSearchResults.League)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSearchResults_League::MergeFrom(const CMsgDOTADPCSearchResults_League& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults.League)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSearchResults_League::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSearchResults.League)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSearchResults_League::CopyFrom(const CMsgDOTADPCSearchResults_League& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults.League)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults_League::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults_League::InternalSwap(CMsgDOTADPCSearchResults_League* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults_League::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSearchResults::_Internal {
 public:
};

CMsgDOTADPCSearchResults::CMsgDOTADPCSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  teams_(arena),
  leagues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults)
}
CMsgDOTADPCSearchResults::CMsgDOTADPCSearchResults(const CMsgDOTADPCSearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_),
      teams_(from.teams_),
      leagues_(from.leagues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults)
}

void CMsgDOTADPCSearchResults::SharedCtor() {
}

CMsgDOTADPCSearchResults::~CMsgDOTADPCSearchResults() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCSearchResults::ArenaDtor(void* object) {
  CMsgDOTADPCSearchResults* _this = reinterpret_cast< CMsgDOTADPCSearchResults* >(object);
  (void)_this;
}
void CMsgDOTADPCSearchResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSearchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  teams_.Clear();
  leagues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTADPCSearchResults.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leagues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSearchResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSearchResults.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teams(i), target, stream);
  }

  // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leagues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leagues(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults)
  return target;
}

size_t CMsgDOTADPCSearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSearchResults.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
  total_size += 1UL * this->_internal_leagues_size();
  for (const auto& msg : this->leagues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSearchResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSearchResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSearchResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSearchResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSearchResults)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSearchResults::MergeFrom(const CMsgDOTADPCSearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  teams_.MergeFrom(from.teams_);
  leagues_.MergeFrom(from.leagues_);
}

void CMsgDOTADPCSearchResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSearchResults::CopyFrom(const CMsgDOTADPCSearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults::InternalSwap(CMsgDOTADPCSearchResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  teams_.InternalSwap(&other->teams_);
  leagues_.InternalSwap(&other->leagues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCTeamFavoriteRankings_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCTeamFavoriteRankings_Team>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_favorites(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCTeamFavoriteRankings_Team::CMsgDOTADPCTeamFavoriteRankings_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCTeamFavoriteRankings.Team)
}
CMsgDOTADPCTeamFavoriteRankings_Team::CMsgDOTADPCTeamFavoriteRankings_Team(const CMsgDOTADPCTeamFavoriteRankings_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&favorites_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(favorites_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCTeamFavoriteRankings.Team)
}

void CMsgDOTADPCTeamFavoriteRankings_Team::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&favorites_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(favorites_));
}

CMsgDOTADPCTeamFavoriteRankings_Team::~CMsgDOTADPCTeamFavoriteRankings_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCTeamFavoriteRankings.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCTeamFavoriteRankings_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCTeamFavoriteRankings_Team::ArenaDtor(void* object) {
  CMsgDOTADPCTeamFavoriteRankings_Team* _this = reinterpret_cast< CMsgDOTADPCTeamFavoriteRankings_Team* >(object);
  (void)_this;
}
void CMsgDOTADPCTeamFavoriteRankings_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCTeamFavoriteRankings_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCTeamFavoriteRankings_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&favorites_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(favorites_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCTeamFavoriteRankings_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 favorites = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_favorites(&has_bits);
          favorites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCTeamFavoriteRankings_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 favorites = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_favorites(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCTeamFavoriteRankings.Team)
  return target;
}

size_t CMsgDOTADPCTeamFavoriteRankings_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 favorites = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_favorites());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCTeamFavoriteRankings_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCTeamFavoriteRankings_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCTeamFavoriteRankings_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCTeamFavoriteRankings.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCTeamFavoriteRankings.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCTeamFavoriteRankings_Team::MergeFrom(const CMsgDOTADPCTeamFavoriteRankings_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      favorites_ = from.favorites_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCTeamFavoriteRankings_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCTeamFavoriteRankings_Team::CopyFrom(const CMsgDOTADPCTeamFavoriteRankings_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCTeamFavoriteRankings_Team::IsInitialized() const {
  return true;
}

void CMsgDOTADPCTeamFavoriteRankings_Team::InternalSwap(CMsgDOTADPCTeamFavoriteRankings_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCTeamFavoriteRankings_Team, favorites_)
      + sizeof(CMsgDOTADPCTeamFavoriteRankings_Team::favorites_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCTeamFavoriteRankings_Team, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCTeamFavoriteRankings_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCTeamFavoriteRankings::_Internal {
 public:
};

CMsgDOTADPCTeamFavoriteRankings::CMsgDOTADPCTeamFavoriteRankings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCTeamFavoriteRankings)
}
CMsgDOTADPCTeamFavoriteRankings::CMsgDOTADPCTeamFavoriteRankings(const CMsgDOTADPCTeamFavoriteRankings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCTeamFavoriteRankings)
}

void CMsgDOTADPCTeamFavoriteRankings::SharedCtor() {
}

CMsgDOTADPCTeamFavoriteRankings::~CMsgDOTADPCTeamFavoriteRankings() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCTeamFavoriteRankings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCTeamFavoriteRankings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCTeamFavoriteRankings::ArenaDtor(void* object) {
  CMsgDOTADPCTeamFavoriteRankings* _this = reinterpret_cast< CMsgDOTADPCTeamFavoriteRankings* >(object);
  (void)_this;
}
void CMsgDOTADPCTeamFavoriteRankings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCTeamFavoriteRankings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCTeamFavoriteRankings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCTeamFavoriteRankings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCTeamFavoriteRankings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCTeamFavoriteRankings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCTeamFavoriteRankings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCTeamFavoriteRankings)
  return target;
}

size_t CMsgDOTADPCTeamFavoriteRankings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCTeamFavoriteRankings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCTeamFavoriteRankings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCTeamFavoriteRankings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCTeamFavoriteRankings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCTeamFavoriteRankings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCTeamFavoriteRankings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCTeamFavoriteRankings)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCTeamFavoriteRankings::MergeFrom(const CMsgDOTADPCTeamFavoriteRankings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCTeamFavoriteRankings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
}

void CMsgDOTADPCTeamFavoriteRankings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCTeamFavoriteRankings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCTeamFavoriteRankings::CopyFrom(const CMsgDOTADPCTeamFavoriteRankings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCTeamFavoriteRankings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCTeamFavoriteRankings::IsInitialized() const {
  return true;
}

void CMsgDOTADPCTeamFavoriteRankings::InternalSwap(CMsgDOTADPCTeamFavoriteRankings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCTeamFavoriteRankings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfo_Results* Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfo_Results >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfo_Results >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfo_AuditEntry* Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfo_AuditEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfo_AuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfo* Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfoList* Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCProfileInfo_PredictionInfo* Arena::CreateMaybeMessage< ::CMsgDOTADPCProfileInfo_PredictionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCProfileInfo_PredictionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCProfileInfo_FantasyInfo* Arena::CreateMaybeMessage< ::CMsgDOTADPCProfileInfo_FantasyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCProfileInfo_FantasyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCProfileInfo* Arena::CreateMaybeMessage< ::CMsgDOTADPCProfileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaderboards_RegionLeaderboard* Arena::CreateMaybeMessage< ::CMsgDOTALeaderboards_RegionLeaderboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaderboards_RegionLeaderboard >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaderboards* Arena::CreateMaybeMessage< ::CMsgDOTALeaderboards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaderboards >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACreateFantasyLeagueRequest* Arena::CreateMaybeMessage< ::CMsgDOTACreateFantasyLeagueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACreateFantasyLeagueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACreateFantasyLeagueResponse* Arena::CreateMaybeMessage< ::CMsgDOTACreateFantasyLeagueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACreateFantasyLeagueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFantasyLeagueScoring* Arena::CreateMaybeMessage< ::CMsgFantasyLeagueScoring >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFantasyLeagueScoring >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueInfo* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueEditInfoRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueEditInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueEditInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueEditInfoResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueEditInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueEditInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueFindRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueFindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueFindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueFindResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueFindResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueFindResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueInfoRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueInfoResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueMatchupsRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueMatchupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueMatchupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueMatchupsResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueMatchupsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueMatchupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAEditFantasyTeamRequest* Arena::CreateMaybeMessage< ::CMsgDOTAEditFantasyTeamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAEditFantasyTeamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAEditFantasyTeamResponse* Arena::CreateMaybeMessage< ::CMsgDOTAEditFantasyTeamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAEditFantasyTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamInfoResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamInfo* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamScoreRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamScoreRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamScoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamScoreResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamScoreResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamScoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamStandingsRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamStandingsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamStandingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamStandingsResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamStandingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamStandingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerScoreRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerScoreRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerScoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerScoreResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerScoreResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerScoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerStandingsRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerStandingsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerStandingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerStandingsResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerStandingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerStandingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueCreateRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueCreateResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamCreateRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamCreateResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueEditInvitesRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueEditInvitesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueEditInvitesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueEditInvitesResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueEditInvitesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueEditInvitesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueDraftStatusRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueDraftStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueDraftStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueDraftStatus* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueDraftStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueDraftStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueDraftPlayerRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueDraftPlayerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueDraftPlayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeagueDraftPlayerResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeagueDraftPlayerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeagueDraftPlayerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamRosterSwapRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamRosterSwapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamRosterSwapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamRosterSwapResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamRosterSwapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamRosterSwapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamRosterAddDropRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamRosterAddDropRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamRosterAddDropRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamRosterAddDropResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamRosterAddDropResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamRosterAddDropResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamTradesRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamTradesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamTradesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamTradesResponse_Trade* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamTradesResponse_Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamTradesResponse_Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamTradesResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamTradesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamTradesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamTradeCancelRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamTradeCancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamTradeCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamTradeCancelResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamTradeCancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamTradeCancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamRosterRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamRosterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyTeamRosterResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyTeamRosterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyTeamRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerHisoricalStatsRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerHisoricalStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerHisoricalStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerHisoricalStatsResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyMessageAdd* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyMessageAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyMessageAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyMessagesRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyMessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyMessagesResponse_Message* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyMessagesResponse_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyMessagesResponse_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyMessagesResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyMessagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyRemoveOwner* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyRemoveOwner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyRemoveOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyRemoveOwnerResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyRemoveOwnerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyRemoveOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyScheduledMatchesRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyScheduledMatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyScheduledMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyScheduledMatchesResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyScheduledMatchesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyScheduledMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeaveLeagueRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeaveLeagueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeaveLeagueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLeaveLeagueResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLeaveLeagueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLeaveLeagueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerScoreDetailsRequest* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerScoreDetailsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerScoreDetailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerScoreDetailsResponse* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerScoreDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerScoreDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportVoteTeamGuess* Arena::CreateMaybeMessage< ::CMsgDOTAPassportVoteTeamGuess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportVoteTeamGuess >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportVoteGenericSelection* Arena::CreateMaybeMessage< ::CMsgDOTAPassportVoteGenericSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportVoteGenericSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportStampedPlayer* Arena::CreateMaybeMessage< ::CMsgDOTAPassportStampedPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportStampedPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportPlayerCardChallenge* Arena::CreateMaybeMessage< ::CMsgDOTAPassportPlayerCardChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportPlayerCardChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportVote* Arena::CreateMaybeMessage< ::CMsgDOTAPassportVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportVote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetPlayerCardRosterRequest* Arena::CreateMaybeMessage< ::CMsgClientToGCGetPlayerCardRosterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetPlayerCardRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetPlayerCardRosterResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCGetPlayerCardRosterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetPlayerCardRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetPlayerCardRosterRequest* Arena::CreateMaybeMessage< ::CMsgClientToGCSetPlayerCardRosterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetPlayerCardRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetPlayerCardRosterResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCSetPlayerCardRosterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetPlayerCardRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyDPCLeagueStatus* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyDPCLeagueStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyDPCLeagueStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults_Player* Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults_Team* Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults_League* Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults_League >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults_League >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults* Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCTeamFavoriteRankings_Team* Arena::CreateMaybeMessage< ::CMsgDOTADPCTeamFavoriteRankings_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCTeamFavoriteRankings_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCTeamFavoriteRankings* Arena::CreateMaybeMessage< ::CMsgDOTADPCTeamFavoriteRankings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCTeamFavoriteRankings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
