// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkbasetypes.proto

#include "networkbasetypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgVector::CMsgVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct CMsgVectorDefaultTypeInternal {
  constexpr CMsgVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVectorDefaultTypeInternal() {}
  union {
    CMsgVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVectorDefaultTypeInternal _CMsgVector_default_instance_;
constexpr CMsgVector2D::CMsgVector2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct CMsgVector2DDefaultTypeInternal {
  constexpr CMsgVector2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVector2DDefaultTypeInternal() {}
  union {
    CMsgVector2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVector2DDefaultTypeInternal _CMsgVector2D_default_instance_;
constexpr CMsgQAngle::CMsgQAngle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct CMsgQAngleDefaultTypeInternal {
  constexpr CMsgQAngleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQAngleDefaultTypeInternal() {}
  union {
    CMsgQAngle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQAngleDefaultTypeInternal _CMsgQAngle_default_instance_;
constexpr CMsgRGBA::CMsgRGBA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0)
  , a_(0){}
struct CMsgRGBADefaultTypeInternal {
  constexpr CMsgRGBADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRGBADefaultTypeInternal() {}
  union {
    CMsgRGBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRGBADefaultTypeInternal _CMsgRGBA_default_instance_;
constexpr CMsgPlayerInfo::CMsgPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xuid_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0))
  , userid_(0)
  , fakeplayer_(false)
  , ishltv_(false){}
struct CMsgPlayerInfoDefaultTypeInternal {
  constexpr CMsgPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerInfoDefaultTypeInternal() {}
  union {
    CMsgPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerInfoDefaultTypeInternal _CMsgPlayerInfo_default_instance_;
constexpr CEntityMsg::CEntityMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_entity_(0u){}
struct CEntityMsgDefaultTypeInternal {
  constexpr CEntityMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEntityMsgDefaultTypeInternal() {}
  union {
    CEntityMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEntityMsgDefaultTypeInternal _CEntityMsg_default_instance_;
constexpr CMsg_CVars_CVar::CMsg_CVars_CVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsg_CVars_CVarDefaultTypeInternal {
  constexpr CMsg_CVars_CVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsg_CVars_CVarDefaultTypeInternal() {}
  union {
    CMsg_CVars_CVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsg_CVars_CVarDefaultTypeInternal _CMsg_CVars_CVar_default_instance_;
constexpr CMsg_CVars::CMsg_CVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cvars_(){}
struct CMsg_CVarsDefaultTypeInternal {
  constexpr CMsg_CVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsg_CVarsDefaultTypeInternal() {}
  union {
    CMsg_CVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsg_CVarsDefaultTypeInternal _CMsg_CVars_default_instance_;
constexpr CNETMsg_NOP::CNETMsg_NOP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CNETMsg_NOPDefaultTypeInternal {
  constexpr CNETMsg_NOPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_NOPDefaultTypeInternal() {}
  union {
    CNETMsg_NOP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_NOPDefaultTypeInternal _CNETMsg_NOP_default_instance_;
constexpr CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_(0){}
struct CNETMsg_SplitScreenUserDefaultTypeInternal {
  constexpr CNETMsg_SplitScreenUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SplitScreenUserDefaultTypeInternal() {}
  union {
    CNETMsg_SplitScreenUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SplitScreenUserDefaultTypeInternal _CNETMsg_SplitScreenUser_default_instance_;
constexpr CNETMsg_Disconnect::CNETMsg_Disconnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(0)
{}
struct CNETMsg_DisconnectDefaultTypeInternal {
  constexpr CNETMsg_DisconnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_DisconnectDefaultTypeInternal() {}
  union {
    CNETMsg_Disconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_DisconnectDefaultTypeInternal _CNETMsg_Disconnect_default_instance_;
constexpr CNETMsg_Tick::CNETMsg_Tick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tick_(0u)
  , host_frametime_(0u)
  , host_frametime_std_deviation_(0u)
  , host_computationtime_(0u)
  , host_computationtime_std_deviation_(0u)
  , host_framestarttime_std_deviation_(0u)
  , host_loss_(0u)
  , host_unfiltered_frametime_(0u){}
struct CNETMsg_TickDefaultTypeInternal {
  constexpr CNETMsg_TickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_TickDefaultTypeInternal() {}
  union {
    CNETMsg_Tick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_TickDefaultTypeInternal _CNETMsg_Tick_default_instance_;
constexpr CNETMsg_StringCmd::CNETMsg_StringCmd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CNETMsg_StringCmdDefaultTypeInternal {
  constexpr CNETMsg_StringCmdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_StringCmdDefaultTypeInternal() {}
  union {
    CNETMsg_StringCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_StringCmdDefaultTypeInternal _CNETMsg_StringCmd_default_instance_;
constexpr CNETMsg_SetConVar::CNETMsg_SetConVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convars_(nullptr){}
struct CNETMsg_SetConVarDefaultTypeInternal {
  constexpr CNETMsg_SetConVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SetConVarDefaultTypeInternal() {}
  union {
    CNETMsg_SetConVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SetConVarDefaultTypeInternal _CNETMsg_SetConVar_default_instance_;
constexpr CNETMsg_SignonState::CNETMsg_SignonState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_networkids_()
  , map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addons_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signon_state_(0)

  , spawn_count_(0u)
  , num_server_players_(0u){}
struct CNETMsg_SignonStateDefaultTypeInternal {
  constexpr CNETMsg_SignonStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SignonStateDefaultTypeInternal() {}
  union {
    CNETMsg_SignonState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SignonStateDefaultTypeInternal _CNETMsg_SignonState_default_instance_;
constexpr CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , val_float_(0)
  , val_long_(0)
  , val_short_(0)
  , val_byte_(0)
  , val_bool_(false)
  , val_uint64_(PROTOBUF_ULONGLONG(0)){}
struct CSVCMsg_GameEvent_key_tDefaultTypeInternal {
  constexpr CSVCMsg_GameEvent_key_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsg_GameEvent_key_tDefaultTypeInternal() {}
  union {
    CSVCMsg_GameEvent_key_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsg_GameEvent_key_tDefaultTypeInternal _CSVCMsg_GameEvent_key_t_default_instance_;
constexpr CSVCMsg_GameEvent::CSVCMsg_GameEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eventid_(0){}
struct CSVCMsg_GameEventDefaultTypeInternal {
  constexpr CSVCMsg_GameEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsg_GameEventDefaultTypeInternal() {}
  union {
    CSVCMsg_GameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsg_GameEventDefaultTypeInternal _CSVCMsg_GameEvent_default_instance_;
constexpr CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(nullptr)
  , tick_(0){}
struct CSVCMsgList_GameEvents_event_tDefaultTypeInternal {
  constexpr CSVCMsgList_GameEvents_event_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsgList_GameEvents_event_tDefaultTypeInternal() {}
  union {
    CSVCMsgList_GameEvents_event_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsgList_GameEvents_event_tDefaultTypeInternal _CSVCMsgList_GameEvents_event_t_default_instance_;
constexpr CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct CSVCMsgList_GameEventsDefaultTypeInternal {
  constexpr CSVCMsgList_GameEventsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsgList_GameEventsDefaultTypeInternal() {}
  union {
    CSVCMsgList_GameEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsgList_GameEventsDefaultTypeInternal _CSVCMsgList_GameEvents_default_instance_;
constexpr CSVCMsg_UserMessage::CSVCMsg_UserMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_type_(0){}
struct CSVCMsg_UserMessageDefaultTypeInternal {
  constexpr CSVCMsg_UserMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsg_UserMessageDefaultTypeInternal() {}
  union {
    CSVCMsg_UserMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsg_UserMessageDefaultTypeInternal _CSVCMsg_UserMessage_default_instance_;
constexpr CSVCMsgList_UserMessages_usermsg_t::CSVCMsgList_UserMessages_usermsg_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(nullptr)
  , tick_(0){}
struct CSVCMsgList_UserMessages_usermsg_tDefaultTypeInternal {
  constexpr CSVCMsgList_UserMessages_usermsg_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsgList_UserMessages_usermsg_tDefaultTypeInternal() {}
  union {
    CSVCMsgList_UserMessages_usermsg_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsgList_UserMessages_usermsg_tDefaultTypeInternal _CSVCMsgList_UserMessages_usermsg_t_default_instance_;
constexpr CSVCMsgList_UserMessages::CSVCMsgList_UserMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usermsgs_(){}
struct CSVCMsgList_UserMessagesDefaultTypeInternal {
  constexpr CSVCMsgList_UserMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsgList_UserMessagesDefaultTypeInternal() {}
  union {
    CSVCMsgList_UserMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsgList_UserMessagesDefaultTypeInternal _CSVCMsgList_UserMessages_default_instance_;
constexpr CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entitylumpname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entityfiltername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spawngroupmanifest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localnamefixup_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parentnamefixup_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , savegamefilename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , world_offset_pos_(nullptr)
  , world_offset_angle_(nullptr)
  , spawngrouphandle_(0u)
  , spawngroupownerhandle_(0u)
  , flags_(0u)
  , tickcount_(0)
  , manifestloadpriority_(0)
  , worldgroupid_(0u)
  , manifestincomplete_(false)
  , leveltransition_(false)
  , creationsequence_(0u)
  , spawngroupparenthandle_(0u){}
struct CNETMsg_SpawnGroup_LoadDefaultTypeInternal {
  constexpr CNETMsg_SpawnGroup_LoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_LoadDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_Load _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SpawnGroup_LoadDefaultTypeInternal _CNETMsg_SpawnGroup_Load_default_instance_;
constexpr CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spawngroupmanifest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spawngrouphandle_(0u)
  , manifestincomplete_(false){}
struct CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal {
  constexpr CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_ManifestUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal _CNETMsg_SpawnGroup_ManifestUpdate_default_instance_;
constexpr CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spawngrouphandle_(0u)
  , tickcount_(0)
  , creationsequence_(0u){}
struct CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal {
  constexpr CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_SetCreationTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal _CNETMsg_SpawnGroup_SetCreationTick_default_instance_;
constexpr CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spawngrouphandle_(0u)
  , flags_(0u)
  , tickcount_(0){}
struct CNETMsg_SpawnGroup_UnloadDefaultTypeInternal {
  constexpr CNETMsg_SpawnGroup_UnloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_UnloadDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_Unload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SpawnGroup_UnloadDefaultTypeInternal _CNETMsg_SpawnGroup_Unload_default_instance_;
constexpr CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spawngrouphandle_(0u){}
struct CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal {
  constexpr CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_LoadCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal _CNETMsg_SpawnGroup_LoadCompleted_default_instance_;
constexpr CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , savegamename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s1_mapname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gamemode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previouslevel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , landmarkname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_multiplayer_(false)
  , is_loadsavegame_(false)
  , is_background_map_(false)
  , is_headless_(false)
  , min_client_limit_(0u)
  , max_client_limit_(0u)
  , max_clients_(0u)
  , tick_interval_(0u)
  , is_localonly_(false)
  , no_steam_server_(false)
  , is_transition_(false){}
struct CSVCMsg_GameSessionConfigurationDefaultTypeInternal {
  constexpr CSVCMsg_GameSessionConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSVCMsg_GameSessionConfigurationDefaultTypeInternal() {}
  union {
    CSVCMsg_GameSessionConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSVCMsg_GameSessionConfigurationDefaultTypeInternal _CSVCMsg_GameSessionConfiguration_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_networkbasetypes_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_networkbasetypes_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_networkbasetypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_networkbasetypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVector, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, r_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, g_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, b_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, a_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, xuid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, fakeplayer_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, ishltv_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CEntityMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEntityMsg, target_entity_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, name_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, cvars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_NOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SplitScreenUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SplitScreenUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SplitScreenUser, slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Disconnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Disconnect, reason_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, tick_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, host_frametime_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, host_frametime_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, host_computationtime_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, host_computationtime_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, host_framestarttime_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, host_loss_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, host_unfiltered_frametime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, command_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, convars_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, signon_state_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, spawn_count_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, num_server_players_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, players_networkids_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, map_name_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, addons_),
  2,
  3,
  4,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, type_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_string_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_float_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_long_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_short_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_byte_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_bool_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_uint64_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, eventid_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, keys_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, tick_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, event_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents, events_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_UserMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_UserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_UserMessage, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_UserMessage, msg_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_UserMessages_usermsg_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_UserMessages_usermsg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_UserMessages_usermsg_t, tick_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_UserMessages_usermsg_t, msg_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_UserMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_UserMessages, usermsgs_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, worldname_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, entitylumpname_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, entityfiltername_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, spawngroupownerhandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, world_offset_pos_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, world_offset_angle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, spawngroupmanifest_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, flags_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, tickcount_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, manifestincomplete_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, localnamefixup_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, parentnamefixup_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, manifestloadpriority_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, worldgroupid_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, creationsequence_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, savegamefilename_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, spawngroupparenthandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, leveltransition_),
  0,
  1,
  2,
  9,
  10,
  7,
  8,
  3,
  11,
  12,
  15,
  4,
  5,
  13,
  14,
  17,
  6,
  18,
  16,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, spawngroupmanifest_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, manifestincomplete_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, tickcount_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, creationsequence_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, flags_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, tickcount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_LoadCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_LoadCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_LoadCompleted, spawngrouphandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, is_multiplayer_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, is_loadsavegame_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, is_background_map_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, is_headless_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, min_client_limit_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, max_client_limit_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, max_clients_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, tick_interval_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, hostname_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, savegamename_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, s1_mapname_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, gamemode_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, server_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, data_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, is_localonly_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, no_steam_server_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, is_transition_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, previouslevel_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, landmarkname_),
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  16,
  17,
  18,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgVector)},
  { 11, 18, sizeof(::CMsgVector2D)},
  { 20, 28, sizeof(::CMsgQAngle)},
  { 31, 40, sizeof(::CMsgRGBA)},
  { 44, 55, sizeof(::CMsgPlayerInfo)},
  { 61, 67, sizeof(::CEntityMsg)},
  { 68, 75, sizeof(::CMsg_CVars_CVar)},
  { 77, -1, sizeof(::CMsg_CVars)},
  { 83, -1, sizeof(::CNETMsg_NOP)},
  { 88, 94, sizeof(::CNETMsg_SplitScreenUser)},
  { 95, 101, sizeof(::CNETMsg_Disconnect)},
  { 102, 115, sizeof(::CNETMsg_Tick)},
  { 123, 129, sizeof(::CNETMsg_StringCmd)},
  { 130, 136, sizeof(::CNETMsg_SetConVar)},
  { 137, 148, sizeof(::CNETMsg_SignonState)},
  { 154, 167, sizeof(::CSVCMsg_GameEvent_key_t)},
  { 175, 183, sizeof(::CSVCMsg_GameEvent)},
  { 186, 193, sizeof(::CSVCMsgList_GameEvents_event_t)},
  { 195, -1, sizeof(::CSVCMsgList_GameEvents)},
  { 201, 208, sizeof(::CSVCMsg_UserMessage)},
  { 210, 217, sizeof(::CSVCMsgList_UserMessages_usermsg_t)},
  { 219, -1, sizeof(::CSVCMsgList_UserMessages)},
  { 225, 249, sizeof(::CNETMsg_SpawnGroup_Load)},
  { 268, 276, sizeof(::CNETMsg_SpawnGroup_ManifestUpdate)},
  { 279, 287, sizeof(::CNETMsg_SpawnGroup_SetCreationTick)},
  { 290, 298, sizeof(::CNETMsg_SpawnGroup_Unload)},
  { 301, 307, sizeof(::CNETMsg_SpawnGroup_LoadCompleted)},
  { 308, 332, sizeof(::CSVCMsg_GameSessionConfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVector2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRGBA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEntityMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsg_CVars_CVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsg_CVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_NOP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SplitScreenUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_Disconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_Tick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_StringCmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SetConVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SignonState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsg_GameEvent_key_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsg_GameEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsgList_GameEvents_event_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsgList_GameEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsg_UserMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsgList_UserMessages_usermsg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsgList_UserMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SpawnGroup_Load_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SpawnGroup_ManifestUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SpawnGroup_SetCreationTick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SpawnGroup_Unload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SpawnGroup_LoadCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSVCMsg_GameSessionConfiguration_default_instance_),
};

const char descriptor_table_protodef_networkbasetypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026networkbasetypes.proto\032\030network_connec"
  "tion.proto\"-\n\nCMsgVector\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
  "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"$\n\014CMsgVector2D\022\t\n\001x\030\001"
  " \001(\002\022\t\n\001y\030\002 \001(\002\"-\n\nCMsgQAngle\022\t\n\001x\030\001 \001(\002"
  "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"6\n\010CMsgRGBA\022\t\n\001r\030"
  "\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001(\005\022\t\n\001a\030\004 \001(\005\"q"
  "\n\016CMsgPlayerInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004xuid\030\002"
  " \001(\006\022\016\n\006userid\030\003 \001(\005\022\017\n\007steamid\030\004 \001(\006\022\022\n"
  "\nfakeplayer\030\005 \001(\010\022\016\n\006ishltv\030\006 \001(\010\"#\n\nCEn"
  "tityMsg\022\025\n\rtarget_entity\030\001 \001(\r\"R\n\nCMsg_C"
  "Vars\022\037\n\005cvars\030\001 \003(\0132\020.CMsg_CVars.CVar\032#\n"
  "\004CVar\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\r\n\013CN"
  "ETMsg_NOP\"\'\n\027CNETMsg_SplitScreenUser\022\014\n\004"
  "slot\030\001 \001(\005\"^\n\022CNETMsg_Disconnect\022H\n\006reas"
  "on\030\002 \001(\0162\034.ENetworkDisconnectionReason:\032"
  "NETWORK_DISCONNECT_INVALID\"\205\002\n\014CNETMsg_T"
  "ick\022\014\n\004tick\030\001 \001(\r\022\026\n\016host_frametime\030\002 \001("
  "\r\022$\n\034host_frametime_std_deviation\030\003 \001(\r\022"
  "\034\n\024host_computationtime\030\004 \001(\r\022*\n\"host_co"
  "mputationtime_std_deviation\030\005 \001(\r\022)\n!hos"
  "t_framestarttime_std_deviation\030\006 \001(\r\022\021\n\t"
  "host_loss\030\007 \001(\r\022!\n\031host_unfiltered_frame"
  "time\030\010 \001(\r\"$\n\021CNETMsg_StringCmd\022\017\n\007comma"
  "nd\030\001 \001(\t\"1\n\021CNETMsg_SetConVar\022\034\n\007convars"
  "\030\001 \001(\0132\013.CMsg_CVars\"\274\001\n\023CNETMsg_SignonSt"
  "ate\0226\n\014signon_state\030\001 \001(\0162\016.SignonState_"
  "t:\020SIGNONSTATE_NONE\022\023\n\013spawn_count\030\002 \001(\r"
  "\022\032\n\022num_server_players\030\003 \001(\r\022\032\n\022players_"
  "networkids\030\004 \003(\t\022\020\n\010map_name\030\005 \001(\t\022\016\n\006ad"
  "dons\030\006 \001(\t\"\374\001\n\021CSVCMsg_GameEvent\022\022\n\neven"
  "t_name\030\001 \001(\t\022\017\n\007eventid\030\002 \001(\005\022&\n\004keys\030\003 "
  "\003(\0132\030.CSVCMsg_GameEvent.key_t\032\231\001\n\005key_t\022"
  "\014\n\004type\030\001 \001(\005\022\022\n\nval_string\030\002 \001(\t\022\021\n\tval"
  "_float\030\003 \001(\002\022\020\n\010val_long\030\004 \001(\005\022\021\n\tval_sh"
  "ort\030\005 \001(\005\022\020\n\010val_byte\030\006 \001(\005\022\020\n\010val_bool\030"
  "\007 \001(\010\022\022\n\nval_uint64\030\010 \001(\004\"\205\001\n\026CSVCMsgLis"
  "t_GameEvents\022/\n\006events\030\001 \003(\0132\037.CSVCMsgLi"
  "st_GameEvents.event_t\032:\n\007event_t\022\014\n\004tick"
  "\030\001 \001(\005\022!\n\005event\030\002 \001(\0132\022.CSVCMsg_GameEven"
  "t\"9\n\023CSVCMsg_UserMessage\022\020\n\010msg_type\030\001 \001"
  "(\005\022\020\n\010msg_data\030\002 \001(\014\"\217\001\n\030CSVCMsgList_Use"
  "rMessages\0225\n\010usermsgs\030\001 \003(\0132#.CSVCMsgLis"
  "t_UserMessages.usermsg_t\032<\n\tusermsg_t\022\014\n"
  "\004tick\030\001 \001(\005\022!\n\003msg\030\002 \001(\0132\024.CSVCMsg_UserM"
  "essage\"\223\004\n\027CNETMsg_SpawnGroup_Load\022\021\n\two"
  "rldname\030\001 \001(\t\022\026\n\016entitylumpname\030\002 \001(\t\022\030\n"
  "\020entityfiltername\030\003 \001(\t\022\030\n\020spawngrouphan"
  "dle\030\004 \001(\r\022\035\n\025spawngroupownerhandle\030\005 \001(\r"
  "\022%\n\020world_offset_pos\030\006 \001(\0132\013.CMsgVector\022"
  "\'\n\022world_offset_angle\030\007 \001(\0132\013.CMsgQAngle"
  "\022\032\n\022spawngroupmanifest\030\010 \001(\014\022\r\n\005flags\030\t "
  "\001(\r\022\021\n\ttickcount\030\n \001(\005\022\032\n\022manifestincomp"
  "lete\030\013 \001(\010\022\026\n\016localnamefixup\030\014 \001(\t\022\027\n\017pa"
  "rentnamefixup\030\r \001(\t\022\034\n\024manifestloadprior"
  "ity\030\016 \001(\005\022\024\n\014worldgroupid\030\017 \001(\r\022\030\n\020creat"
  "ionsequence\030\020 \001(\r\022\030\n\020savegamefilename\030\021 "
  "\001(\t\022\036\n\026spawngroupparenthandle\030\022 \001(\r\022\027\n\017l"
  "eveltransition\030\023 \001(\010\"u\n!CNETMsg_SpawnGro"
  "up_ManifestUpdate\022\030\n\020spawngrouphandle\030\001 "
  "\001(\r\022\032\n\022spawngroupmanifest\030\002 \001(\014\022\032\n\022manif"
  "estincomplete\030\003 \001(\010\"k\n\"CNETMsg_SpawnGrou"
  "p_SetCreationTick\022\030\n\020spawngrouphandle\030\001 "
  "\001(\r\022\021\n\ttickcount\030\002 \001(\005\022\030\n\020creationsequen"
  "ce\030\003 \001(\r\"W\n\031CNETMsg_SpawnGroup_Unload\022\030\n"
  "\020spawngrouphandle\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022\021"
  "\n\ttickcount\030\003 \001(\005\"<\n CNETMsg_SpawnGroup_"
  "LoadCompleted\022\030\n\020spawngrouphandle\030\001 \001(\r\""
  "\315\003\n CSVCMsg_GameSessionConfiguration\022\026\n\016"
  "is_multiplayer\030\001 \001(\010\022\027\n\017is_loadsavegame\030"
  "\002 \001(\010\022\031\n\021is_background_map\030\003 \001(\010\022\023\n\013is_h"
  "eadless\030\004 \001(\010\022\030\n\020min_client_limit\030\005 \001(\r\022"
  "\030\n\020max_client_limit\030\006 \001(\r\022\023\n\013max_clients"
  "\030\007 \001(\r\022\025\n\rtick_interval\030\010 \001(\007\022\020\n\010hostnam"
  "e\030\t \001(\t\022\024\n\014savegamename\030\n \001(\t\022\022\n\ns1_mapn"
  "ame\030\013 \001(\t\022\020\n\010gamemode\030\014 \001(\t\022\031\n\021server_ip"
  "_address\030\r \001(\t\022\014\n\004data\030\016 \001(\014\022\024\n\014is_local"
  "only\030\017 \001(\010\022\027\n\017no_steam_server\030\023 \001(\010\022\025\n\ri"
  "s_transition\030\020 \001(\010\022\025\n\rpreviouslevel\030\021 \001("
  "\t\022\024\n\014landmarkname\030\022 \001(\t*\324\001\n\rSignonState_"
  "t\022\024\n\020SIGNONSTATE_NONE\020\000\022\031\n\025SIGNONSTATE_C"
  "HALLENGE\020\001\022\031\n\025SIGNONSTATE_CONNECTED\020\002\022\023\n"
  "\017SIGNONSTATE_NEW\020\003\022\030\n\024SIGNONSTATE_PRESPA"
  "WN\020\004\022\025\n\021SIGNONSTATE_SPAWN\020\005\022\024\n\020SIGNONSTA"
  "TE_FULL\020\006\022\033\n\027SIGNONSTATE_CHANGELEVEL\020\007*\256"
  "\002\n\014NET_Messages\022\013\n\007net_NOP\020\000\022\022\n\016net_Disc"
  "onnect\020\001\022\027\n\023net_SplitScreenUser\020\003\022\014\n\010net"
  "_Tick\020\004\022\021\n\rnet_StringCmd\020\005\022\021\n\rnet_SetCon"
  "Var\020\006\022\023\n\017net_SignonState\020\007\022\027\n\023net_SpawnG"
  "roup_Load\020\010\022!\n\035net_SpawnGroup_ManifestUp"
  "date\020\t\022\"\n\036net_SpawnGroup_SetCreationTick"
  "\020\013\022\031\n\025net_SpawnGroup_Unload\020\014\022 \n\034net_Spa"
  "wnGroup_LoadCompleted\020\r*\314\002\n\021SpawnGroupFl"
  "ags_t\022\'\n#SPAWN_GROUP_LOAD_ENTITIES_FROM_"
  "SAVE\020\001\022#\n\037SPAWN_GROUP_DONT_SPAWN_ENTITIE"
  "S\020\002\022!\n\035SPAWN_GROUP_SYNCHRONOUS_SPAWN\020\004\022&"
  "\n\"SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP\020\010\022+"
  "\n\'SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIE"
  "S\020\020\022\"\n\036SPAWN_GROUP_BLOCK_UNTIL_LOADED\020@\022"
  "$\n\037SPAWN_GROUP_LOAD_STREAMING_DATA\020\200\001\022\'\n"
  "\"SPAWN_GROUP_CREATE_NEW_SCENE_WORLD\020\200\002B\003"
  "\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_networkbasetypes_2eproto_deps[1] = {
  &::descriptor_table_network_5fconnection_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_networkbasetypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_networkbasetypes_2eproto = {
  false, false, 4003, descriptor_table_protodef_networkbasetypes_2eproto, "networkbasetypes.proto", 
  &descriptor_table_networkbasetypes_2eproto_once, descriptor_table_networkbasetypes_2eproto_deps, 1, 28,
  schemas, file_default_instances, TableStruct_networkbasetypes_2eproto::offsets,
  file_level_metadata_networkbasetypes_2eproto, file_level_enum_descriptors_networkbasetypes_2eproto, file_level_service_descriptors_networkbasetypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_networkbasetypes_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkbasetypes_2eproto);
  return descriptor_table_networkbasetypes_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_networkbasetypes_2eproto(&descriptor_table_networkbasetypes_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignonState_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkbasetypes_2eproto);
  return file_level_enum_descriptors_networkbasetypes_2eproto[0];
}
bool SignonState_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NET_Messages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkbasetypes_2eproto);
  return file_level_enum_descriptors_networkbasetypes_2eproto[1];
}
bool NET_Messages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpawnGroupFlags_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkbasetypes_2eproto);
  return file_level_enum_descriptors_networkbasetypes_2eproto[2];
}
bool SpawnGroupFlags_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgVector::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVector>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgVector::CMsgVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVector)
}
CMsgVector::CMsgVector(const CMsgVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector)
}

void CMsgVector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

CMsgVector::~CMsgVector() {
  // @@protoc_insertion_point(destructor:CMsgVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgVector::ArenaDtor(void* object) {
  CMsgVector* _this = reinterpret_cast< CMsgVector* >(object);
  (void)_this;
}
void CMsgVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVector::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector)
  return target;
}

size_t CMsgVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVector)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVector)
    MergeFrom(*source);
  }
}

void CMsgVector::MergeFrom(const CMsgVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector::CopyFrom(const CMsgVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector::IsInitialized() const {
  return true;
}

void CMsgVector::InternalSwap(CMsgVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVector, z_)
      + sizeof(CMsgVector::z_)
      - PROTOBUF_FIELD_OFFSET(CMsgVector, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgVector2D::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVector2D>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgVector2D::CMsgVector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVector2D)
}
CMsgVector2D::CMsgVector2D(const CMsgVector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector2D)
}

void CMsgVector2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CMsgVector2D::~CMsgVector2D() {
  // @@protoc_insertion_point(destructor:CMsgVector2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgVector2D::ArenaDtor(void* object) {
  CMsgVector2D* _this = reinterpret_cast< CMsgVector2D* >(object);
  (void)_this;
}
void CMsgVector2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVector2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVector2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVector2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector2D)
  return target;
}

size_t CMsgVector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVector2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVector2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVector2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVector2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVector2D)
    MergeFrom(*source);
  }
}

void CMsgVector2D::MergeFrom(const CMsgVector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVector2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector2D::CopyFrom(const CMsgVector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector2D::IsInitialized() const {
  return true;
}

void CMsgVector2D::InternalSwap(CMsgVector2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVector2D, y_)
      + sizeof(CMsgVector2D::y_)
      - PROTOBUF_FIELD_OFFSET(CMsgVector2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVector2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgQAngle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQAngle>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgQAngle::CMsgQAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQAngle)
}
CMsgQAngle::CMsgQAngle(const CMsgQAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CMsgQAngle)
}

void CMsgQAngle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

CMsgQAngle::~CMsgQAngle() {
  // @@protoc_insertion_point(destructor:CMsgQAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgQAngle::ArenaDtor(void* object) {
  CMsgQAngle* _this = reinterpret_cast< CMsgQAngle* >(object);
  (void)_this;
}
void CMsgQAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQAngle)
  return target;
}

size_t CMsgQAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQAngle)
    MergeFrom(*source);
  }
}

void CMsgQAngle::MergeFrom(const CMsgQAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQAngle::CopyFrom(const CMsgQAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQAngle::IsInitialized() const {
  return true;
}

void CMsgQAngle::InternalSwap(CMsgQAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQAngle, z_)
      + sizeof(CMsgQAngle::z_)
      - PROTOBUF_FIELD_OFFSET(CMsgQAngle, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRGBA::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRGBA>()._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgRGBA::CMsgRGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRGBA)
}
CMsgRGBA::CMsgRGBA(const CMsgRGBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:CMsgRGBA)
}

void CMsgRGBA::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

CMsgRGBA::~CMsgRGBA() {
  // @@protoc_insertion_point(destructor:CMsgRGBA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRGBA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRGBA::ArenaDtor(void* object) {
  CMsgRGBA* _this = reinterpret_cast< CMsgRGBA* >(object);
  (void)_this;
}
void CMsgRGBA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRGBA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRGBA::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRGBA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a_) -
        reinterpret_cast<char*>(&r_)) + sizeof(a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRGBA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRGBA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRGBA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  // optional int32 a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRGBA)
  return target;
}

size_t CMsgRGBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRGBA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 r = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_r());
    }

    // optional int32 g = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_g());
    }

    // optional int32 b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_b());
    }

    // optional int32 a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRGBA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRGBA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRGBA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRGBA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRGBA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRGBA)
    MergeFrom(*source);
  }
}

void CMsgRGBA::MergeFrom(const CMsgRGBA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRGBA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRGBA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRGBA::CopyFrom(const CMsgRGBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRGBA::IsInitialized() const {
  return true;
}

void CMsgRGBA::InternalSwap(CMsgRGBA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRGBA, a_)
      + sizeof(CMsgRGBA::a_)
      - PROTOBUF_FIELD_OFFSET(CMsgRGBA, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRGBA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fakeplayer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ishltv(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgPlayerInfo::CMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerInfo)
}
CMsgPlayerInfo::CMsgPlayerInfo(const CMsgPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&xuid_, &from.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ishltv_) -
    reinterpret_cast<char*>(&xuid_)) + sizeof(ishltv_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerInfo)
}

void CMsgPlayerInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&xuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ishltv_) -
    reinterpret_cast<char*>(&xuid_)) + sizeof(ishltv_));
}

CMsgPlayerInfo::~CMsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPlayerInfo::ArenaDtor(void* object) {
  CMsgPlayerInfo* _this = reinterpret_cast< CMsgPlayerInfo* >(object);
  (void)_this;
}
void CMsgPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ishltv_) -
        reinterpret_cast<char*>(&xuid_)) + sizeof(ishltv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPlayerInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 xuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_xuid(&has_bits);
          xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool fakeplayer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fakeplayer(&has_bits);
          fakeplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ishltv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ishltv(&has_bits);
          ishltv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional fixed64 xuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_xuid(), target);
  }

  // optional int32 userid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_userid(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid(), target);
  }

  // optional bool fakeplayer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fakeplayer(), target);
  }

  // optional bool ishltv = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ishltv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerInfo)
  return target;
}

size_t CMsgPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 xuid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 userid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

    // optional bool fakeplayer = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool ishltv = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerInfo)
    MergeFrom(*source);
  }
}

void CMsgPlayerInfo::MergeFrom(const CMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      xuid_ = from.xuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000010u) {
      fakeplayer_ = from.fakeplayer_;
    }
    if (cached_has_bits & 0x00000020u) {
      ishltv_ = from.ishltv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerInfo::CopyFrom(const CMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerInfo::IsInitialized() const {
  return true;
}

void CMsgPlayerInfo::InternalSwap(CMsgPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerInfo, ishltv_)
      + sizeof(CMsgPlayerInfo::ishltv_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerInfo, xuid_)>(
          reinterpret_cast<char*>(&xuid_),
          reinterpret_cast<char*>(&other->xuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEntityMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMsg>()._has_bits_);
  static void set_has_target_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CEntityMsg::CEntityMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEntityMsg)
}
CEntityMsg::CEntityMsg(const CEntityMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_entity_ = from.target_entity_;
  // @@protoc_insertion_point(copy_constructor:CEntityMsg)
}

void CEntityMsg::SharedCtor() {
target_entity_ = 0u;
}

CEntityMsg::~CEntityMsg() {
  // @@protoc_insertion_point(destructor:CEntityMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEntityMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CEntityMsg::ArenaDtor(void* object) {
  CEntityMsg* _this = reinterpret_cast< CEntityMsg* >(object);
  (void)_this;
}
void CEntityMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEntityMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEntityMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_entity_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_entity(&has_bits);
          target_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEntityMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_entity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMsg)
  return target;
}

size_t CEntityMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 target_entity = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target_entity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEntityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEntityMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEntityMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEntityMsg)
    MergeFrom(*source);
  }
}

void CEntityMsg::MergeFrom(const CEntityMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEntityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_entity()) {
    _internal_set_target_entity(from._internal_target_entity());
  }
}

void CEntityMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEntityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMsg::CopyFrom(const CEntityMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMsg::IsInitialized() const {
  return true;
}

void CEntityMsg::InternalSwap(CEntityMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_entity_, other->target_entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsg_CVars_CVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsg_CVars_CVar>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsg_CVars_CVar::CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars.CVar)
}
CMsg_CVars_CVar::CMsg_CVars_CVar(const CMsg_CVars_CVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars.CVar)
}

void CMsg_CVars_CVar::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsg_CVars_CVar::~CMsg_CVars_CVar() {
  // @@protoc_insertion_point(destructor:CMsg_CVars.CVar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsg_CVars_CVar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsg_CVars_CVar::ArenaDtor(void* object) {
  CMsg_CVars_CVar* _this = reinterpret_cast< CMsg_CVars_CVar* >(object);
  (void)_this;
}
void CMsg_CVars_CVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsg_CVars_CVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsg_CVars_CVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars.CVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars_CVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsg_CVars.CVar.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsg_CVars.CVar.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsg_CVars_CVar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars.CVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars.CVar)
  return target;
}

size_t CMsg_CVars_CVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars.CVar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsg_CVars_CVar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars_CVar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsg_CVars_CVar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars.CVar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars.CVar)
    MergeFrom(*source);
  }
}

void CMsg_CVars_CVar::MergeFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CMsg_CVars_CVar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars_CVar::CopyFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars_CVar::IsInitialized() const {
  return true;
}

void CMsg_CVars_CVar::InternalSwap(CMsg_CVars_CVar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars_CVar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsg_CVars::_Internal {
 public:
};

CMsg_CVars::CMsg_CVars(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cvars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars)
}
CMsg_CVars::CMsg_CVars(const CMsg_CVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cvars_(from.cvars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars)
}

void CMsg_CVars::SharedCtor() {
}

CMsg_CVars::~CMsg_CVars() {
  // @@protoc_insertion_point(destructor:CMsg_CVars)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsg_CVars::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsg_CVars::ArenaDtor(void* object) {
  CMsg_CVars* _this = reinterpret_cast< CMsg_CVars* >(object);
  (void)_this;
}
void CMsg_CVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsg_CVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsg_CVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cvars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsg_CVars.CVar cvars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cvars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsg_CVars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cvars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cvars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars)
  return target;
}

size_t CMsg_CVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  total_size += 1UL * this->_internal_cvars_size();
  for (const auto& msg : this->cvars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsg_CVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsg_CVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars)
    MergeFrom(*source);
  }
}

void CMsg_CVars::MergeFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cvars_.MergeFrom(from.cvars_);
}

void CMsg_CVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars::CopyFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars::IsInitialized() const {
  return true;
}

void CMsg_CVars::InternalSwap(CMsg_CVars* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cvars_.InternalSwap(&other->cvars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_NOP::_Internal {
 public:
};

CNETMsg_NOP::CNETMsg_NOP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_NOP)
}
CNETMsg_NOP::CNETMsg_NOP(const CNETMsg_NOP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_NOP)
}

void CNETMsg_NOP::SharedCtor() {
}

CNETMsg_NOP::~CNETMsg_NOP() {
  // @@protoc_insertion_point(destructor:CNETMsg_NOP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_NOP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CNETMsg_NOP::ArenaDtor(void* object) {
  CNETMsg_NOP* _this = reinterpret_cast< CNETMsg_NOP* >(object);
  (void)_this;
}
void CNETMsg_NOP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_NOP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_NOP::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_NOP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_NOP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_NOP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_NOP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_NOP)
  return target;
}

size_t CNETMsg_NOP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_NOP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_NOP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_NOP)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_NOP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_NOP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_NOP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_NOP)
    MergeFrom(*source);
  }
}

void CNETMsg_NOP::MergeFrom(const CNETMsg_NOP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_NOP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CNETMsg_NOP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_NOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_NOP::CopyFrom(const CNETMsg_NOP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_NOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_NOP::IsInitialized() const {
  return true;
}

void CNETMsg_NOP::InternalSwap(CNETMsg_NOP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_NOP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SplitScreenUser::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SplitScreenUser>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SplitScreenUser)
}
CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(const CNETMsg_SplitScreenUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SplitScreenUser)
}

void CNETMsg_SplitScreenUser::SharedCtor() {
slot_ = 0;
}

CNETMsg_SplitScreenUser::~CNETMsg_SplitScreenUser() {
  // @@protoc_insertion_point(destructor:CNETMsg_SplitScreenUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SplitScreenUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CNETMsg_SplitScreenUser::ArenaDtor(void* object) {
  CNETMsg_SplitScreenUser* _this = reinterpret_cast< CNETMsg_SplitScreenUser* >(object);
  (void)_this;
}
void CNETMsg_SplitScreenUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SplitScreenUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SplitScreenUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SplitScreenUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SplitScreenUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SplitScreenUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SplitScreenUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SplitScreenUser)
  return target;
}

size_t CNETMsg_SplitScreenUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SplitScreenUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 slot = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SplitScreenUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SplitScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SplitScreenUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SplitScreenUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SplitScreenUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SplitScreenUser)
    MergeFrom(*source);
  }
}

void CNETMsg_SplitScreenUser::MergeFrom(const CNETMsg_SplitScreenUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SplitScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _internal_set_slot(from._internal_slot());
  }
}

void CNETMsg_SplitScreenUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SplitScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SplitScreenUser::CopyFrom(const CNETMsg_SplitScreenUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SplitScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SplitScreenUser::IsInitialized() const {
  return true;
}

void CNETMsg_SplitScreenUser::InternalSwap(CNETMsg_SplitScreenUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SplitScreenUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_Disconnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_Disconnect>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_Disconnect::CNETMsg_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_Disconnect)
}
CNETMsg_Disconnect::CNETMsg_Disconnect(const CNETMsg_Disconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Disconnect)
}

void CNETMsg_Disconnect::SharedCtor() {
reason_ = 0;
}

CNETMsg_Disconnect::~CNETMsg_Disconnect() {
  // @@protoc_insertion_point(destructor:CNETMsg_Disconnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_Disconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CNETMsg_Disconnect::ArenaDtor(void* object) {
  CNETMsg_Disconnect* _this = reinterpret_cast< CNETMsg_Disconnect* >(object);
  (void)_this;
}
void CNETMsg_Disconnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_Disconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_Disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_Disconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_Disconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENetworkDisconnectionReason_IsValid(val))) {
            _internal_set_reason(static_cast<::ENetworkDisconnectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_Disconnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Disconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Disconnect)
  return target;
}

size_t CNETMsg_Disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_Disconnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_Disconnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_Disconnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_Disconnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_Disconnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_Disconnect)
    MergeFrom(*source);
  }
}

void CNETMsg_Disconnect::MergeFrom(const CNETMsg_Disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
}

void CNETMsg_Disconnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Disconnect::CopyFrom(const CNETMsg_Disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Disconnect::IsInitialized() const {
  return true;
}

void CNETMsg_Disconnect::InternalSwap(CNETMsg_Disconnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_Disconnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_Tick::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_Tick>()._has_bits_);
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_frametime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host_frametime_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host_computationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_host_computationtime_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_host_framestarttime_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_host_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_host_unfiltered_frametime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CNETMsg_Tick::CNETMsg_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_Tick)
}
CNETMsg_Tick::CNETMsg_Tick(const CNETMsg_Tick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tick_, &from.tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_unfiltered_frametime_) -
    reinterpret_cast<char*>(&tick_)) + sizeof(host_unfiltered_frametime_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Tick)
}

void CNETMsg_Tick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tick_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&host_unfiltered_frametime_) -
    reinterpret_cast<char*>(&tick_)) + sizeof(host_unfiltered_frametime_));
}

CNETMsg_Tick::~CNETMsg_Tick() {
  // @@protoc_insertion_point(destructor:CNETMsg_Tick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_Tick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CNETMsg_Tick::ArenaDtor(void* object) {
  CNETMsg_Tick* _this = reinterpret_cast< CNETMsg_Tick* >(object);
  (void)_this;
}
void CNETMsg_Tick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_Tick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_Tick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&host_unfiltered_frametime_) -
        reinterpret_cast<char*>(&tick_)) + sizeof(host_unfiltered_frametime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_Tick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tick(&has_bits);
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_frametime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_host_frametime(&has_bits);
          host_frametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_frametime_std_deviation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_host_frametime_std_deviation(&has_bits);
          host_frametime_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_computationtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_host_computationtime(&has_bits);
          host_computationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_computationtime_std_deviation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_host_computationtime_std_deviation(&has_bits);
          host_computationtime_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_framestarttime_std_deviation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_host_framestarttime_std_deviation(&has_bits);
          host_framestarttime_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_loss = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_host_loss(&has_bits);
          host_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_unfiltered_frametime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_host_unfiltered_frametime(&has_bits);
          host_unfiltered_frametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_Tick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Tick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tick(), target);
  }

  // optional uint32 host_frametime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_host_frametime(), target);
  }

  // optional uint32 host_frametime_std_deviation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_host_frametime_std_deviation(), target);
  }

  // optional uint32 host_computationtime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_host_computationtime(), target);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_host_computationtime_std_deviation(), target);
  }

  // optional uint32 host_framestarttime_std_deviation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_host_framestarttime_std_deviation(), target);
  }

  // optional uint32 host_loss = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_host_loss(), target);
  }

  // optional uint32 host_unfiltered_frametime = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_host_unfiltered_frametime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Tick)
  return target;
}

size_t CNETMsg_Tick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_Tick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tick = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tick());
    }

    // optional uint32 host_frametime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_frametime());
    }

    // optional uint32 host_frametime_std_deviation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_frametime_std_deviation());
    }

    // optional uint32 host_computationtime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_computationtime());
    }

    // optional uint32 host_computationtime_std_deviation = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_computationtime_std_deviation());
    }

    // optional uint32 host_framestarttime_std_deviation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_framestarttime_std_deviation());
    }

    // optional uint32 host_loss = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_loss());
    }

    // optional uint32 host_unfiltered_frametime = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_unfiltered_frametime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_Tick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_Tick)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_Tick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_Tick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_Tick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_Tick)
    MergeFrom(*source);
  }
}

void CNETMsg_Tick::MergeFrom(const CNETMsg_Tick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_Tick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000002u) {
      host_frametime_ = from.host_frametime_;
    }
    if (cached_has_bits & 0x00000004u) {
      host_frametime_std_deviation_ = from.host_frametime_std_deviation_;
    }
    if (cached_has_bits & 0x00000008u) {
      host_computationtime_ = from.host_computationtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      host_computationtime_std_deviation_ = from.host_computationtime_std_deviation_;
    }
    if (cached_has_bits & 0x00000020u) {
      host_framestarttime_std_deviation_ = from.host_framestarttime_std_deviation_;
    }
    if (cached_has_bits & 0x00000040u) {
      host_loss_ = from.host_loss_;
    }
    if (cached_has_bits & 0x00000080u) {
      host_unfiltered_frametime_ = from.host_unfiltered_frametime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_Tick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Tick::CopyFrom(const CNETMsg_Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Tick::IsInitialized() const {
  return true;
}

void CNETMsg_Tick::InternalSwap(CNETMsg_Tick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_Tick, host_unfiltered_frametime_)
      + sizeof(CNETMsg_Tick::host_unfiltered_frametime_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_Tick, tick_)>(
          reinterpret_cast<char*>(&tick_),
          reinterpret_cast<char*>(&other->tick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_Tick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_StringCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_StringCmd>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_StringCmd::CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_StringCmd)
}
CNETMsg_StringCmd::CNETMsg_StringCmd(const CNETMsg_StringCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_StringCmd)
}

void CNETMsg_StringCmd::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CNETMsg_StringCmd::~CNETMsg_StringCmd() {
  // @@protoc_insertion_point(destructor:CNETMsg_StringCmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_StringCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_StringCmd::ArenaDtor(void* object) {
  CNETMsg_StringCmd* _this = reinterpret_cast< CNETMsg_StringCmd* >(object);
  (void)_this;
}
void CNETMsg_StringCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_StringCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_StringCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_StringCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_StringCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_StringCmd.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_StringCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_StringCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_StringCmd)
  return target;
}

size_t CNETMsg_StringCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_StringCmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_StringCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_StringCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_StringCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_StringCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_StringCmd)
    MergeFrom(*source);
  }
}

void CNETMsg_StringCmd::MergeFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_set_command(from._internal_command());
  }
}

void CNETMsg_StringCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_StringCmd::CopyFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_StringCmd::IsInitialized() const {
  return true;
}

void CNETMsg_StringCmd::InternalSwap(CNETMsg_StringCmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_StringCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SetConVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SetConVar>()._has_bits_);
  static const ::CMsg_CVars& convars(const CNETMsg_SetConVar* msg);
  static void set_has_convars(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsg_CVars&
CNETMsg_SetConVar::_Internal::convars(const CNETMsg_SetConVar* msg) {
  return *msg->convars_;
}
CNETMsg_SetConVar::CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SetConVar)
}
CNETMsg_SetConVar::CNETMsg_SetConVar(const CNETMsg_SetConVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_convars()) {
    convars_ = new ::CMsg_CVars(*from.convars_);
  } else {
    convars_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SetConVar)
}

void CNETMsg_SetConVar::SharedCtor() {
convars_ = nullptr;
}

CNETMsg_SetConVar::~CNETMsg_SetConVar() {
  // @@protoc_insertion_point(destructor:CNETMsg_SetConVar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SetConVar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete convars_;
}

void CNETMsg_SetConVar::ArenaDtor(void* object) {
  CNETMsg_SetConVar* _this = reinterpret_cast< CNETMsg_SetConVar* >(object);
  (void)_this;
}
void CNETMsg_SetConVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SetConVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SetConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SetConVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(convars_ != nullptr);
    convars_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SetConVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsg_CVars convars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convars(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SetConVar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SetConVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::convars(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SetConVar)
  return target;
}

size_t CNETMsg_SetConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SetConVar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsg_CVars convars = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convars_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SetConVar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SetConVar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SetConVar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SetConVar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SetConVar)
    MergeFrom(*source);
  }
}

void CNETMsg_SetConVar::MergeFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_convars()) {
    _internal_mutable_convars()->::CMsg_CVars::MergeFrom(from._internal_convars());
  }
}

void CNETMsg_SetConVar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SetConVar::CopyFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SetConVar::IsInitialized() const {
  return true;
}

void CNETMsg_SetConVar::InternalSwap(CNETMsg_SetConVar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(convars_, other->convars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SetConVar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SignonState::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SignonState>()._has_bits_);
  static void set_has_signon_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spawn_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_server_players(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addons(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CNETMsg_SignonState::CNETMsg_SignonState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_networkids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SignonState)
}
CNETMsg_SignonState::CNETMsg_SignonState(const CNETMsg_SignonState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_networkids_(from.players_networkids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_name()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArena());
  }
  addons_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addons()) {
    addons_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addons(), 
      GetArena());
  }
  ::memcpy(&signon_state_, &from.signon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_server_players_) -
    reinterpret_cast<char*>(&signon_state_)) + sizeof(num_server_players_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SignonState)
}

void CNETMsg_SignonState::SharedCtor() {
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
addons_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signon_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_server_players_) -
    reinterpret_cast<char*>(&signon_state_)) + sizeof(num_server_players_));
}

CNETMsg_SignonState::~CNETMsg_SignonState() {
  // @@protoc_insertion_point(destructor:CNETMsg_SignonState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SignonState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addons_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_SignonState::ArenaDtor(void* object) {
  CNETMsg_SignonState* _this = reinterpret_cast< CNETMsg_SignonState* >(object);
  (void)_this;
}
void CNETMsg_SignonState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SignonState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SignonState::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SignonState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_networkids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      addons_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&signon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_server_players_) -
        reinterpret_cast<char*>(&signon_state_)) + sizeof(num_server_players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SignonState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SignonState_t_IsValid(val))) {
            _internal_set_signon_state(static_cast<::SignonState_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 spawn_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_spawn_count(&has_bits);
          spawn_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_server_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_server_players(&has_bits);
          num_server_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string players_networkids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_players_networkids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SignonState.players_networkids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string map_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SignonState.map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string addons = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_addons();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SignonState.addons");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SignonState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SignonState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_signon_state(), target);
  }

  // optional uint32 spawn_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_spawn_count(), target);
  }

  // optional uint32 num_server_players = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_server_players(), target);
  }

  // repeated string players_networkids = 4;
  for (int i = 0, n = this->_internal_players_networkids_size(); i < n; i++) {
    const auto& s = this->_internal_players_networkids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.players_networkids");
    target = stream->WriteString(4, s, target);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.map_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_map_name(), target);
  }

  // optional string addons = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addons().data(), static_cast<int>(this->_internal_addons().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.addons");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_addons(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SignonState)
  return target;
}

size_t CNETMsg_SignonState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SignonState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string players_networkids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(players_networkids_.size());
  for (int i = 0, n = players_networkids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      players_networkids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string map_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional string addons = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addons());
    }

    // optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signon_state());
    }

    // optional uint32 spawn_count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawn_count());
    }

    // optional uint32 num_server_players = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_server_players());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SignonState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SignonState)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SignonState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SignonState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SignonState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SignonState)
    MergeFrom(*source);
  }
}

void CNETMsg_SignonState::MergeFrom(const CNETMsg_SignonState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SignonState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_networkids_.MergeFrom(from.players_networkids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_addons(from._internal_addons());
    }
    if (cached_has_bits & 0x00000004u) {
      signon_state_ = from.signon_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      spawn_count_ = from.spawn_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_server_players_ = from.num_server_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_SignonState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SignonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SignonState::CopyFrom(const CNETMsg_SignonState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SignonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SignonState::IsInitialized() const {
  return true;
}

void CNETMsg_SignonState::InternalSwap(CNETMsg_SignonState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_networkids_.InternalSwap(&other->players_networkids_);
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addons_.Swap(&other->addons_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SignonState, num_server_players_)
      + sizeof(CNETMsg_SignonState::num_server_players_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SignonState, signon_state_)>(
          reinterpret_cast<char*>(&signon_state_),
          reinterpret_cast<char*>(&other->signon_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SignonState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsg_GameEvent_key_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsg_GameEvent_key_t>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val_long(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val_short(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_val_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_val_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_val_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsg_GameEvent.key_t)
}
CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val_string()) {
    val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val_string(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent.key_t)
}

void CSVCMsg_GameEvent_key_t::SharedCtor() {
val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
}

CSVCMsg_GameEvent_key_t::~CSVCMsg_GameEvent_key_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent.key_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsg_GameEvent_key_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  val_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEvent_key_t::ArenaDtor(void* object) {
  CSVCMsg_GameEvent_key_t* _this = reinterpret_cast< CSVCMsg_GameEvent_key_t* >(object);
  (void)_this;
}
void CSVCMsg_GameEvent_key_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsg_GameEvent_key_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsg_GameEvent_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent.key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_uint64_) -
        reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsg_GameEvent_key_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string val_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameEvent.key_t.val_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float val_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_val_float(&has_bits);
          val_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 val_long = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_val_long(&has_bits);
          val_long_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 val_short = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_val_short(&has_bits);
          val_short_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 val_byte = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_val_byte(&has_bits);
          val_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool val_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_val_bool(&has_bits);
          val_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 val_uint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_val_uint64(&has_bits);
          val_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsg_GameEvent_key_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent.key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val_string().data(), static_cast<int>(this->_internal_val_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.key_t.val_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val_string(), target);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_val_float(), target);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_val_long(), target);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_val_uint64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent.key_t)
  return target;
}

size_t CSVCMsg_GameEvent_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent.key_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string val_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_val_string());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional float val_float = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_long());
    }

    // optional int32 val_short = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_short());
    }

    // optional int32 val_byte = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_byte());
    }

    // optional bool val_bool = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 val_uint64 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_val_uint64());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEvent_key_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsg_GameEvent_key_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEvent.key_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEvent.key_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const CSVCMsg_GameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_val_string(from._internal_val_string());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_float_ = from.val_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      val_long_ = from.val_long_;
    }
    if (cached_has_bits & 0x00000010u) {
      val_short_ = from.val_short_;
    }
    if (cached_has_bits & 0x00000020u) {
      val_byte_ = from.val_byte_;
    }
    if (cached_has_bits & 0x00000040u) {
      val_bool_ = from.val_bool_;
    }
    if (cached_has_bits & 0x00000080u) {
      val_uint64_ = from.val_uint64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const CSVCMsg_GameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent_key_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent_key_t::InternalSwap(CSVCMsg_GameEvent_key_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_string_.Swap(&other->val_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_uint64_)
      + sizeof(CSVCMsg_GameEvent_key_t::val_uint64_)
      - PROTOBUF_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsg_GameEvent_key_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsg_GameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsg_GameEvent>()._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSVCMsg_GameEvent::CSVCMsg_GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsg_GameEvent)
}
CSVCMsg_GameEvent::CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_name()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArena());
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent)
}

void CSVCMsg_GameEvent::SharedCtor() {
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
eventid_ = 0;
}

CSVCMsg_GameEvent::~CSVCMsg_GameEvent() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsg_GameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEvent::ArenaDtor(void* object) {
  CSVCMsg_GameEvent* _this = reinterpret_cast< CSVCMsg_GameEvent* >(object);
  (void)_this;
}
void CSVCMsg_GameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsg_GameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsg_GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_name_.ClearNonDefaultToEmpty();
  }
  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsg_GameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameEvent.event_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eventid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSVCMsg_GameEvent.key_t keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsg_GameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent)
  return target;
}

size_t CSVCMsg_GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional int32 eventid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eventid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsg_GameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsg_GameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEvent)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent::MergeFrom(const CSVCMsg_GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_GameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent::CopyFrom(const CSVCMsg_GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent::InternalSwap(CSVCMsg_GameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsg_GameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsgList_GameEvents_event_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsgList_GameEvents_event_t>()._has_bits_);
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSVCMsg_GameEvent& event(const CSVCMsgList_GameEvents_event_t* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSVCMsg_GameEvent&
CSVCMsgList_GameEvents_event_t::_Internal::event(const CSVCMsgList_GameEvents_event_t* msg) {
  return *msg->event_;
}
CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsgList_GameEvents.event_t)
}
CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(const CSVCMsgList_GameEvents_event_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::CSVCMsg_GameEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  tick_ = from.tick_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_GameEvents.event_t)
}

void CSVCMsgList_GameEvents_event_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&event_)) + sizeof(tick_));
}

CSVCMsgList_GameEvents_event_t::~CSVCMsgList_GameEvents_event_t() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_GameEvents.event_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsgList_GameEvents_event_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete event_;
}

void CSVCMsgList_GameEvents_event_t::ArenaDtor(void* object) {
  CSVCMsgList_GameEvents_event_t* _this = reinterpret_cast< CSVCMsgList_GameEvents_event_t* >(object);
  (void)_this;
}
void CSVCMsgList_GameEvents_event_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsgList_GameEvents_event_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsgList_GameEvents_event_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsgList_GameEvents.event_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_ != nullptr);
    event_->Clear();
  }
  tick_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsgList_GameEvents_event_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tick(&has_bits);
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSVCMsg_GameEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsgList_GameEvents_event_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_GameEvents.event_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tick = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tick(), target);
  }

  // optional .CSVCMsg_GameEvent event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_GameEvents.event_t)
  return target;
}

size_t CSVCMsgList_GameEvents_event_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsgList_GameEvents.event_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSVCMsg_GameEvent event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_);
    }

    // optional int32 tick = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tick());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsgList_GameEvents_event_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsgList_GameEvents.event_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsgList_GameEvents_event_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsgList_GameEvents_event_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsgList_GameEvents.event_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsgList_GameEvents.event_t)
    MergeFrom(*source);
  }
}

void CSVCMsgList_GameEvents_event_t::MergeFrom(const CSVCMsgList_GameEvents_event_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsgList_GameEvents.event_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_event()->::CSVCMsg_GameEvent::MergeFrom(from._internal_event());
    }
    if (cached_has_bits & 0x00000002u) {
      tick_ = from.tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsgList_GameEvents_event_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsgList_GameEvents.event_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents_event_t::CopyFrom(const CSVCMsgList_GameEvents_event_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsgList_GameEvents.event_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents_event_t::IsInitialized() const {
  return true;
}

void CSVCMsgList_GameEvents_event_t::InternalSwap(CSVCMsgList_GameEvents_event_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, tick_)
      + sizeof(CSVCMsgList_GameEvents_event_t::tick_)
      - PROTOBUF_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, event_)>(
          reinterpret_cast<char*>(&event_),
          reinterpret_cast<char*>(&other->event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsgList_GameEvents_event_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsgList_GameEvents::_Internal {
 public:
};

CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsgList_GameEvents)
}
CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(const CSVCMsgList_GameEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_GameEvents)
}

void CSVCMsgList_GameEvents::SharedCtor() {
}

CSVCMsgList_GameEvents::~CSVCMsgList_GameEvents() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_GameEvents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsgList_GameEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSVCMsgList_GameEvents::ArenaDtor(void* object) {
  CSVCMsgList_GameEvents* _this = reinterpret_cast< CSVCMsgList_GameEvents* >(object);
  (void)_this;
}
void CSVCMsgList_GameEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsgList_GameEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsgList_GameEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsgList_GameEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsgList_GameEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSVCMsgList_GameEvents.event_t events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsgList_GameEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_GameEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_GameEvents)
  return target;
}

size_t CSVCMsgList_GameEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsgList_GameEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsgList_GameEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsgList_GameEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsgList_GameEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsgList_GameEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsgList_GameEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsgList_GameEvents)
    MergeFrom(*source);
  }
}

void CSVCMsgList_GameEvents::MergeFrom(const CSVCMsgList_GameEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsgList_GameEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void CSVCMsgList_GameEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsgList_GameEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents::CopyFrom(const CSVCMsgList_GameEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsgList_GameEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents::IsInitialized() const {
  return true;
}

void CSVCMsgList_GameEvents::InternalSwap(CSVCMsgList_GameEvents* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsgList_GameEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsg_UserMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsg_UserMessage>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSVCMsg_UserMessage::CSVCMsg_UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsg_UserMessage)
}
CSVCMsg_UserMessage::CSVCMsg_UserMessage(const CSVCMsg_UserMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg_data()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArena());
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_UserMessage)
}

void CSVCMsg_UserMessage::SharedCtor() {
msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_type_ = 0;
}

CSVCMsg_UserMessage::~CSVCMsg_UserMessage() {
  // @@protoc_insertion_point(destructor:CSVCMsg_UserMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsg_UserMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_UserMessage::ArenaDtor(void* object) {
  CSVCMsg_UserMessage* _this = reinterpret_cast< CSVCMsg_UserMessage* >(object);
  (void)_this;
}
void CSVCMsg_UserMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsg_UserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsg_UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_UserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_data_.ClearNonDefaultToEmpty();
  }
  msg_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsg_UserMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes msg_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsg_UserMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_UserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional bytes msg_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_UserMessage)
  return target;
}

size_t CSVCMsg_UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_UserMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes msg_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_msg_data());
    }

    // optional int32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_msg_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsg_UserMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_UserMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsg_UserMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_UserMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_UserMessage)
    MergeFrom(*source);
  }
}

void CSVCMsg_UserMessage::MergeFrom(const CSVCMsg_UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg_data(from._internal_msg_data());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_UserMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_UserMessage::CopyFrom(const CSVCMsg_UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_UserMessage::IsInitialized() const {
  return true;
}

void CSVCMsg_UserMessage::InternalSwap(CSVCMsg_UserMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsg_UserMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsgList_UserMessages_usermsg_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsgList_UserMessages_usermsg_t>()._has_bits_);
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSVCMsg_UserMessage& msg(const CSVCMsgList_UserMessages_usermsg_t* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSVCMsg_UserMessage&
CSVCMsgList_UserMessages_usermsg_t::_Internal::msg(const CSVCMsgList_UserMessages_usermsg_t* msg) {
  return *msg->msg_;
}
CSVCMsgList_UserMessages_usermsg_t::CSVCMsgList_UserMessages_usermsg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsgList_UserMessages.usermsg_t)
}
CSVCMsgList_UserMessages_usermsg_t::CSVCMsgList_UserMessages_usermsg_t(const CSVCMsgList_UserMessages_usermsg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::CSVCMsg_UserMessage(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  tick_ = from.tick_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_UserMessages.usermsg_t)
}

void CSVCMsgList_UserMessages_usermsg_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&msg_)) + sizeof(tick_));
}

CSVCMsgList_UserMessages_usermsg_t::~CSVCMsgList_UserMessages_usermsg_t() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_UserMessages.usermsg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsgList_UserMessages_usermsg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void CSVCMsgList_UserMessages_usermsg_t::ArenaDtor(void* object) {
  CSVCMsgList_UserMessages_usermsg_t* _this = reinterpret_cast< CSVCMsgList_UserMessages_usermsg_t* >(object);
  (void)_this;
}
void CSVCMsgList_UserMessages_usermsg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsgList_UserMessages_usermsg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsgList_UserMessages_usermsg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsgList_UserMessages.usermsg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != nullptr);
    msg_->Clear();
  }
  tick_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsgList_UserMessages_usermsg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tick(&has_bits);
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSVCMsg_UserMessage msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsgList_UserMessages_usermsg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_UserMessages.usermsg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tick = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tick(), target);
  }

  // optional .CSVCMsg_UserMessage msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_UserMessages.usermsg_t)
  return target;
}

size_t CSVCMsgList_UserMessages_usermsg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsgList_UserMessages.usermsg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSVCMsg_UserMessage msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_);
    }

    // optional int32 tick = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tick());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsgList_UserMessages_usermsg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsgList_UserMessages.usermsg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsgList_UserMessages_usermsg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsgList_UserMessages_usermsg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsgList_UserMessages.usermsg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsgList_UserMessages.usermsg_t)
    MergeFrom(*source);
  }
}

void CSVCMsgList_UserMessages_usermsg_t::MergeFrom(const CSVCMsgList_UserMessages_usermsg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsgList_UserMessages.usermsg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_msg()->::CSVCMsg_UserMessage::MergeFrom(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      tick_ = from.tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsgList_UserMessages_usermsg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsgList_UserMessages.usermsg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages_usermsg_t::CopyFrom(const CSVCMsgList_UserMessages_usermsg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsgList_UserMessages.usermsg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_UserMessages_usermsg_t::IsInitialized() const {
  return true;
}

void CSVCMsgList_UserMessages_usermsg_t::InternalSwap(CSVCMsgList_UserMessages_usermsg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, tick_)
      + sizeof(CSVCMsgList_UserMessages_usermsg_t::tick_)
      - PROTOBUF_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, msg_)>(
          reinterpret_cast<char*>(&msg_),
          reinterpret_cast<char*>(&other->msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsgList_UserMessages_usermsg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsgList_UserMessages::_Internal {
 public:
};

CSVCMsgList_UserMessages::CSVCMsgList_UserMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  usermsgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsgList_UserMessages)
}
CSVCMsgList_UserMessages::CSVCMsgList_UserMessages(const CSVCMsgList_UserMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usermsgs_(from.usermsgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_UserMessages)
}

void CSVCMsgList_UserMessages::SharedCtor() {
}

CSVCMsgList_UserMessages::~CSVCMsgList_UserMessages() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_UserMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsgList_UserMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSVCMsgList_UserMessages::ArenaDtor(void* object) {
  CSVCMsgList_UserMessages* _this = reinterpret_cast< CSVCMsgList_UserMessages* >(object);
  (void)_this;
}
void CSVCMsgList_UserMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsgList_UserMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsgList_UserMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsgList_UserMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usermsgs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsgList_UserMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usermsgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsgList_UserMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_UserMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usermsgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_usermsgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_UserMessages)
  return target;
}

size_t CSVCMsgList_UserMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsgList_UserMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  total_size += 1UL * this->_internal_usermsgs_size();
  for (const auto& msg : this->usermsgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsgList_UserMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsgList_UserMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsgList_UserMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsgList_UserMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsgList_UserMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsgList_UserMessages)
    MergeFrom(*source);
  }
}

void CSVCMsgList_UserMessages::MergeFrom(const CSVCMsgList_UserMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsgList_UserMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usermsgs_.MergeFrom(from.usermsgs_);
}

void CSVCMsgList_UserMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsgList_UserMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages::CopyFrom(const CSVCMsgList_UserMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsgList_UserMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_UserMessages::IsInitialized() const {
  return true;
}

void CSVCMsgList_UserMessages::InternalSwap(CSVCMsgList_UserMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usermsgs_.InternalSwap(&other->usermsgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsgList_UserMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SpawnGroup_Load::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_Load>()._has_bits_);
  static void set_has_worldname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entitylumpname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entityfiltername(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spawngroupownerhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgVector& world_offset_pos(const CNETMsg_SpawnGroup_Load* msg);
  static void set_has_world_offset_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgQAngle& world_offset_angle(const CNETMsg_SpawnGroup_Load* msg);
  static void set_has_world_offset_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_spawngroupmanifest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tickcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_manifestincomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_localnamefixup(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parentnamefixup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_manifestloadpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_worldgroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_creationsequence(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_savegamefilename(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_spawngroupparenthandle(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_leveltransition(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::CMsgVector&
CNETMsg_SpawnGroup_Load::_Internal::world_offset_pos(const CNETMsg_SpawnGroup_Load* msg) {
  return *msg->world_offset_pos_;
}
const ::CMsgQAngle&
CNETMsg_SpawnGroup_Load::_Internal::world_offset_angle(const CNETMsg_SpawnGroup_Load* msg) {
  return *msg->world_offset_angle_;
}
CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_Load)
}
CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load(const CNETMsg_SpawnGroup_Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_worldname()) {
    worldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldname(), 
      GetArena());
  }
  entitylumpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entitylumpname()) {
    entitylumpname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entitylumpname(), 
      GetArena());
  }
  entityfiltername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entityfiltername()) {
    entityfiltername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entityfiltername(), 
      GetArena());
  }
  spawngroupmanifest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spawngroupmanifest()) {
    spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spawngroupmanifest(), 
      GetArena());
  }
  localnamefixup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localnamefixup()) {
    localnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localnamefixup(), 
      GetArena());
  }
  parentnamefixup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parentnamefixup()) {
    parentnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parentnamefixup(), 
      GetArena());
  }
  savegamefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_savegamefilename()) {
    savegamefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_savegamefilename(), 
      GetArena());
  }
  if (from._internal_has_world_offset_pos()) {
    world_offset_pos_ = new ::CMsgVector(*from.world_offset_pos_);
  } else {
    world_offset_pos_ = nullptr;
  }
  if (from._internal_has_world_offset_angle()) {
    world_offset_angle_ = new ::CMsgQAngle(*from.world_offset_angle_);
  } else {
    world_offset_angle_ = nullptr;
  }
  ::memcpy(&spawngrouphandle_, &from.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&spawngroupparenthandle_) -
    reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(spawngroupparenthandle_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_Load)
}

void CNETMsg_SpawnGroup_Load::SharedCtor() {
worldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entitylumpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entityfiltername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spawngroupmanifest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
localnamefixup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parentnamefixup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
savegamefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&world_offset_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spawngroupparenthandle_) -
    reinterpret_cast<char*>(&world_offset_pos_)) + sizeof(spawngroupparenthandle_));
}

CNETMsg_SpawnGroup_Load::~CNETMsg_SpawnGroup_Load() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_Load)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SpawnGroup_Load::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  worldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entitylumpname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entityfiltername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spawngroupmanifest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localnamefixup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentnamefixup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  savegamefilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete world_offset_pos_;
  if (this != internal_default_instance()) delete world_offset_angle_;
}

void CNETMsg_SpawnGroup_Load::ArenaDtor(void* object) {
  CNETMsg_SpawnGroup_Load* _this = reinterpret_cast< CNETMsg_SpawnGroup_Load* >(object);
  (void)_this;
}
void CNETMsg_SpawnGroup_Load::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SpawnGroup_Load::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_Load::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      worldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      entitylumpname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      entityfiltername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      spawngroupmanifest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      localnamefixup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      parentnamefixup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      savegamefilename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(world_offset_pos_ != nullptr);
      world_offset_pos_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(world_offset_angle_ != nullptr);
    world_offset_angle_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manifestincomplete_) -
        reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(manifestincomplete_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&leveltransition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spawngroupparenthandle_) -
        reinterpret_cast<char*>(&leveltransition_)) + sizeof(spawngroupparenthandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_Load::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string worldname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_worldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.worldname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string entitylumpname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entitylumpname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.entitylumpname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string entityfiltername = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_entityfiltername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.entityfiltername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spawngrouphandle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spawngroupownerhandle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_spawngroupownerhandle(&has_bits);
          spawngroupownerhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector world_offset_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_offset_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgQAngle world_offset_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_offset_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes spawngroupmanifest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_spawngroupmanifest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tickcount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tickcount(&has_bits);
          tickcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manifestincomplete = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_manifestincomplete(&has_bits);
          manifestincomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string localnamefixup = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_localnamefixup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.localnamefixup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string parentnamefixup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_parentnamefixup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.parentnamefixup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 manifestloadpriority = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_manifestloadpriority(&has_bits);
          manifestloadpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 worldgroupid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_worldgroupid(&has_bits);
          worldgroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creationsequence = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_creationsequence(&has_bits);
          creationsequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string savegamefilename = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_savegamefilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.savegamefilename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spawngroupparenthandle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_spawngroupparenthandle(&has_bits);
          spawngroupparenthandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool leveltransition = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_leveltransition(&has_bits);
          leveltransition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SpawnGroup_Load::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string worldname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_worldname().data(), static_cast<int>(this->_internal_worldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.worldname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worldname(), target);
  }

  // optional string entitylumpname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entitylumpname().data(), static_cast<int>(this->_internal_entitylumpname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.entitylumpname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entitylumpname(), target);
  }

  // optional string entityfiltername = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entityfiltername().data(), static_cast<int>(this->_internal_entityfiltername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.entityfiltername");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entityfiltername(), target);
  }

  // optional uint32 spawngrouphandle = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_spawngrouphandle(), target);
  }

  // optional uint32 spawngroupownerhandle = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_spawngroupownerhandle(), target);
  }

  // optional .CMsgVector world_offset_pos = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::world_offset_pos(this), target, stream);
  }

  // optional .CMsgQAngle world_offset_angle = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::world_offset_angle(this), target, stream);
  }

  // optional bytes spawngroupmanifest = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_spawngroupmanifest(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  // optional int32 tickcount = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_tickcount(), target);
  }

  // optional bool manifestincomplete = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_manifestincomplete(), target);
  }

  // optional string localnamefixup = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localnamefixup().data(), static_cast<int>(this->_internal_localnamefixup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.localnamefixup");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_localnamefixup(), target);
  }

  // optional string parentnamefixup = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentnamefixup().data(), static_cast<int>(this->_internal_parentnamefixup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.parentnamefixup");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_parentnamefixup(), target);
  }

  // optional int32 manifestloadpriority = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_manifestloadpriority(), target);
  }

  // optional uint32 worldgroupid = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_worldgroupid(), target);
  }

  // optional uint32 creationsequence = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_creationsequence(), target);
  }

  // optional string savegamefilename = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_savegamefilename().data(), static_cast<int>(this->_internal_savegamefilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.savegamefilename");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_savegamefilename(), target);
  }

  // optional uint32 spawngroupparenthandle = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_spawngroupparenthandle(), target);
  }

  // optional bool leveltransition = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_leveltransition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_Load)
  return target;
}

size_t CNETMsg_SpawnGroup_Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_Load)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string worldname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_worldname());
    }

    // optional string entitylumpname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entitylumpname());
    }

    // optional string entityfiltername = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entityfiltername());
    }

    // optional bytes spawngroupmanifest = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_spawngroupmanifest());
    }

    // optional string localnamefixup = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localnamefixup());
    }

    // optional string parentnamefixup = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentnamefixup());
    }

    // optional string savegamefilename = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_savegamefilename());
    }

    // optional .CMsgVector world_offset_pos = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_offset_pos_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgQAngle world_offset_angle = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_offset_angle_);
    }

    // optional uint32 spawngrouphandle = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawngrouphandle());
    }

    // optional uint32 spawngroupownerhandle = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawngroupownerhandle());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional int32 tickcount = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tickcount());
    }

    // optional int32 manifestloadpriority = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_manifestloadpriority());
    }

    // optional uint32 worldgroupid = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_worldgroupid());
    }

    // optional bool manifestincomplete = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool leveltransition = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 creationsequence = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creationsequence());
    }

    // optional uint32 spawngroupparenthandle = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawngroupparenthandle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SpawnGroup_Load::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SpawnGroup_Load)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_Load* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SpawnGroup_Load>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SpawnGroup_Load)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SpawnGroup_Load)
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_Load::MergeFrom(const CNETMsg_SpawnGroup_Load& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_Load)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_worldname(from._internal_worldname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_entitylumpname(from._internal_entitylumpname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_entityfiltername(from._internal_entityfiltername());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_spawngroupmanifest(from._internal_spawngroupmanifest());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_localnamefixup(from._internal_localnamefixup());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_parentnamefixup(from._internal_parentnamefixup());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_savegamefilename(from._internal_savegamefilename());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_world_offset_pos()->::CMsgVector::MergeFrom(from._internal_world_offset_pos());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_world_offset_angle()->::CMsgQAngle::MergeFrom(from._internal_world_offset_angle());
    }
    if (cached_has_bits & 0x00000200u) {
      spawngrouphandle_ = from.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000400u) {
      spawngroupownerhandle_ = from.spawngroupownerhandle_;
    }
    if (cached_has_bits & 0x00000800u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00001000u) {
      tickcount_ = from.tickcount_;
    }
    if (cached_has_bits & 0x00002000u) {
      manifestloadpriority_ = from.manifestloadpriority_;
    }
    if (cached_has_bits & 0x00004000u) {
      worldgroupid_ = from.worldgroupid_;
    }
    if (cached_has_bits & 0x00008000u) {
      manifestincomplete_ = from.manifestincomplete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      leveltransition_ = from.leveltransition_;
    }
    if (cached_has_bits & 0x00020000u) {
      creationsequence_ = from.creationsequence_;
    }
    if (cached_has_bits & 0x00040000u) {
      spawngroupparenthandle_ = from.spawngroupparenthandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_SpawnGroup_Load::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SpawnGroup_Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_Load::CopyFrom(const CNETMsg_SpawnGroup_Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_Load::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_Load::InternalSwap(CNETMsg_SpawnGroup_Load* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  worldname_.Swap(&other->worldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entitylumpname_.Swap(&other->entitylumpname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entityfiltername_.Swap(&other->entityfiltername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spawngroupmanifest_.Swap(&other->spawngroupmanifest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  localnamefixup_.Swap(&other->localnamefixup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parentnamefixup_.Swap(&other->parentnamefixup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  savegamefilename_.Swap(&other->savegamefilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, spawngroupparenthandle_)
      + sizeof(CNETMsg_SpawnGroup_Load::spawngroupparenthandle_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, world_offset_pos_)>(
          reinterpret_cast<char*>(&world_offset_pos_),
          reinterpret_cast<char*>(&other->world_offset_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_Load::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SpawnGroup_ManifestUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_ManifestUpdate>()._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spawngroupmanifest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manifestincomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_ManifestUpdate)
}
CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate(const CNETMsg_SpawnGroup_ManifestUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spawngroupmanifest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spawngroupmanifest()) {
    spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spawngroupmanifest(), 
      GetArena());
  }
  ::memcpy(&spawngrouphandle_, &from.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&manifestincomplete_) -
    reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(manifestincomplete_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_ManifestUpdate)
}

void CNETMsg_SpawnGroup_ManifestUpdate::SharedCtor() {
spawngroupmanifest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spawngrouphandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&manifestincomplete_) -
    reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(manifestincomplete_));
}

CNETMsg_SpawnGroup_ManifestUpdate::~CNETMsg_SpawnGroup_ManifestUpdate() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_ManifestUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SpawnGroup_ManifestUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  spawngroupmanifest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_SpawnGroup_ManifestUpdate::ArenaDtor(void* object) {
  CNETMsg_SpawnGroup_ManifestUpdate* _this = reinterpret_cast< CNETMsg_SpawnGroup_ManifestUpdate* >(object);
  (void)_this;
}
void CNETMsg_SpawnGroup_ManifestUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SpawnGroup_ManifestUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_ManifestUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_ManifestUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    spawngroupmanifest_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manifestincomplete_) -
        reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(manifestincomplete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_ManifestUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes spawngroupmanifest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_spawngroupmanifest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manifestincomplete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_manifestincomplete(&has_bits);
          manifestincomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SpawnGroup_ManifestUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_ManifestUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  // optional bytes spawngroupmanifest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_spawngroupmanifest(), target);
  }

  // optional bool manifestincomplete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_manifestincomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_ManifestUpdate)
  return target;
}

size_t CNETMsg_SpawnGroup_ManifestUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_ManifestUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes spawngroupmanifest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_spawngroupmanifest());
    }

    // optional uint32 spawngrouphandle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawngrouphandle());
    }

    // optional bool manifestincomplete = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SpawnGroup_ManifestUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SpawnGroup_ManifestUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_ManifestUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SpawnGroup_ManifestUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SpawnGroup_ManifestUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SpawnGroup_ManifestUpdate)
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_ManifestUpdate::MergeFrom(const CNETMsg_SpawnGroup_ManifestUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_ManifestUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_spawngroupmanifest(from._internal_spawngroupmanifest());
    }
    if (cached_has_bits & 0x00000002u) {
      spawngrouphandle_ = from.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      manifestincomplete_ = from.manifestincomplete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_SpawnGroup_ManifestUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SpawnGroup_ManifestUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_ManifestUpdate::CopyFrom(const CNETMsg_SpawnGroup_ManifestUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_ManifestUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_ManifestUpdate::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_ManifestUpdate::InternalSwap(CNETMsg_SpawnGroup_ManifestUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  spawngroupmanifest_.Swap(&other->spawngroupmanifest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, manifestincomplete_)
      + sizeof(CNETMsg_SpawnGroup_ManifestUpdate::manifestincomplete_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, spawngrouphandle_)>(
          reinterpret_cast<char*>(&spawngrouphandle_),
          reinterpret_cast<char*>(&other->spawngrouphandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_ManifestUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SpawnGroup_SetCreationTick::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_SetCreationTick>()._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tickcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creationsequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_SetCreationTick)
}
CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick(const CNETMsg_SpawnGroup_SetCreationTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&spawngrouphandle_, &from.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&creationsequence_) -
    reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(creationsequence_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_SetCreationTick)
}

void CNETMsg_SpawnGroup_SetCreationTick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spawngrouphandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&creationsequence_) -
    reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(creationsequence_));
}

CNETMsg_SpawnGroup_SetCreationTick::~CNETMsg_SpawnGroup_SetCreationTick() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_SetCreationTick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SpawnGroup_SetCreationTick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CNETMsg_SpawnGroup_SetCreationTick::ArenaDtor(void* object) {
  CNETMsg_SpawnGroup_SetCreationTick* _this = reinterpret_cast< CNETMsg_SpawnGroup_SetCreationTick* >(object);
  (void)_this;
}
void CNETMsg_SpawnGroup_SetCreationTick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SpawnGroup_SetCreationTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_SetCreationTick::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_SetCreationTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creationsequence_) -
        reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(creationsequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_SetCreationTick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tickcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tickcount(&has_bits);
          tickcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creationsequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_creationsequence(&has_bits);
          creationsequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SpawnGroup_SetCreationTick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_SetCreationTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  // optional int32 tickcount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tickcount(), target);
  }

  // optional uint32 creationsequence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_creationsequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_SetCreationTick)
  return target;
}

size_t CNETMsg_SpawnGroup_SetCreationTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_SetCreationTick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 spawngrouphandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawngrouphandle());
    }

    // optional int32 tickcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tickcount());
    }

    // optional uint32 creationsequence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creationsequence());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SpawnGroup_SetCreationTick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SpawnGroup_SetCreationTick)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_SetCreationTick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SpawnGroup_SetCreationTick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SpawnGroup_SetCreationTick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SpawnGroup_SetCreationTick)
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_SetCreationTick::MergeFrom(const CNETMsg_SpawnGroup_SetCreationTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_SetCreationTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      spawngrouphandle_ = from.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      tickcount_ = from.tickcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      creationsequence_ = from.creationsequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_SpawnGroup_SetCreationTick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SpawnGroup_SetCreationTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_SetCreationTick::CopyFrom(const CNETMsg_SpawnGroup_SetCreationTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_SetCreationTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_SetCreationTick::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_SetCreationTick::InternalSwap(CNETMsg_SpawnGroup_SetCreationTick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, creationsequence_)
      + sizeof(CNETMsg_SpawnGroup_SetCreationTick::creationsequence_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, spawngrouphandle_)>(
          reinterpret_cast<char*>(&spawngrouphandle_),
          reinterpret_cast<char*>(&other->spawngrouphandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_SetCreationTick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SpawnGroup_Unload::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_Unload>()._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tickcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_Unload)
}
CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload(const CNETMsg_SpawnGroup_Unload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&spawngrouphandle_, &from.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&tickcount_) -
    reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(tickcount_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_Unload)
}

void CNETMsg_SpawnGroup_Unload::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spawngrouphandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tickcount_) -
    reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(tickcount_));
}

CNETMsg_SpawnGroup_Unload::~CNETMsg_SpawnGroup_Unload() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_Unload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SpawnGroup_Unload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CNETMsg_SpawnGroup_Unload::ArenaDtor(void* object) {
  CNETMsg_SpawnGroup_Unload* _this = reinterpret_cast< CNETMsg_SpawnGroup_Unload* >(object);
  (void)_this;
}
void CNETMsg_SpawnGroup_Unload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SpawnGroup_Unload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_Unload::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_Unload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tickcount_) -
        reinterpret_cast<char*>(&spawngrouphandle_)) + sizeof(tickcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_Unload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tickcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tickcount(&has_bits);
          tickcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SpawnGroup_Unload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_Unload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional int32 tickcount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tickcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_Unload)
  return target;
}

size_t CNETMsg_SpawnGroup_Unload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_Unload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 spawngrouphandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawngrouphandle());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional int32 tickcount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tickcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SpawnGroup_Unload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SpawnGroup_Unload)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_Unload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SpawnGroup_Unload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SpawnGroup_Unload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SpawnGroup_Unload)
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_Unload::MergeFrom(const CNETMsg_SpawnGroup_Unload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_Unload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      spawngrouphandle_ = from.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      tickcount_ = from.tickcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_SpawnGroup_Unload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SpawnGroup_Unload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_Unload::CopyFrom(const CNETMsg_SpawnGroup_Unload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_Unload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_Unload::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_Unload::InternalSwap(CNETMsg_SpawnGroup_Unload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, tickcount_)
      + sizeof(CNETMsg_SpawnGroup_Unload::tickcount_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, spawngrouphandle_)>(
          reinterpret_cast<char*>(&spawngrouphandle_),
          reinterpret_cast<char*>(&other->spawngrouphandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_Unload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SpawnGroup_LoadCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_LoadCompleted>()._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_LoadCompleted)
}
CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted(const CNETMsg_SpawnGroup_LoadCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spawngrouphandle_ = from.spawngrouphandle_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_LoadCompleted)
}

void CNETMsg_SpawnGroup_LoadCompleted::SharedCtor() {
spawngrouphandle_ = 0u;
}

CNETMsg_SpawnGroup_LoadCompleted::~CNETMsg_SpawnGroup_LoadCompleted() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_LoadCompleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SpawnGroup_LoadCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CNETMsg_SpawnGroup_LoadCompleted::ArenaDtor(void* object) {
  CNETMsg_SpawnGroup_LoadCompleted* _this = reinterpret_cast< CNETMsg_SpawnGroup_LoadCompleted* >(object);
  (void)_this;
}
void CNETMsg_SpawnGroup_LoadCompleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SpawnGroup_LoadCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_LoadCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_LoadCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spawngrouphandle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_LoadCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SpawnGroup_LoadCompleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_LoadCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_LoadCompleted)
  return target;
}

size_t CNETMsg_SpawnGroup_LoadCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_LoadCompleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 spawngrouphandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spawngrouphandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SpawnGroup_LoadCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SpawnGroup_LoadCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_LoadCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SpawnGroup_LoadCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SpawnGroup_LoadCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SpawnGroup_LoadCompleted)
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_LoadCompleted::MergeFrom(const CNETMsg_SpawnGroup_LoadCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_LoadCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spawngrouphandle()) {
    _internal_set_spawngrouphandle(from._internal_spawngrouphandle());
  }
}

void CNETMsg_SpawnGroup_LoadCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SpawnGroup_LoadCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_LoadCompleted::CopyFrom(const CNETMsg_SpawnGroup_LoadCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_LoadCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_LoadCompleted::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_LoadCompleted::InternalSwap(CNETMsg_SpawnGroup_LoadCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spawngrouphandle_, other->spawngrouphandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_LoadCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVCMsg_GameSessionConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsg_GameSessionConfiguration>()._has_bits_);
  static void set_has_is_multiplayer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_loadsavegame(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_background_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_headless(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_min_client_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_client_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tick_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_savegamename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_s1_mapname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_localonly(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_no_steam_server(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_previouslevel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_landmarkname(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSVCMsg_GameSessionConfiguration)
}
CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration(const CSVCMsg_GameSessionConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArena());
  }
  savegamename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_savegamename()) {
    savegamename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_savegamename(), 
      GetArena());
  }
  s1_mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s1_mapname()) {
    s1_mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s1_mapname(), 
      GetArena());
  }
  gamemode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamemode()) {
    gamemode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamemode(), 
      GetArena());
  }
  server_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_ip_address()) {
    server_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_ip_address(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  previouslevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_previouslevel()) {
    previouslevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previouslevel(), 
      GetArena());
  }
  landmarkname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_landmarkname()) {
    landmarkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_landmarkname(), 
      GetArena());
  }
  ::memcpy(&is_multiplayer_, &from.is_multiplayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_transition_) -
    reinterpret_cast<char*>(&is_multiplayer_)) + sizeof(is_transition_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameSessionConfiguration)
}

void CSVCMsg_GameSessionConfiguration::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
savegamename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
s1_mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gamemode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previouslevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
landmarkname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_multiplayer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_transition_) -
    reinterpret_cast<char*>(&is_multiplayer_)) + sizeof(is_transition_));
}

CSVCMsg_GameSessionConfiguration::~CSVCMsg_GameSessionConfiguration() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameSessionConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVCMsg_GameSessionConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  savegamename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s1_mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamemode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previouslevel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  landmarkname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameSessionConfiguration::ArenaDtor(void* object) {
  CSVCMsg_GameSessionConfiguration* _this = reinterpret_cast< CSVCMsg_GameSessionConfiguration* >(object);
  (void)_this;
}
void CSVCMsg_GameSessionConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVCMsg_GameSessionConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSVCMsg_GameSessionConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameSessionConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      savegamename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      s1_mapname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      gamemode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      server_ip_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      previouslevel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      landmarkname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_multiplayer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tick_interval_) -
        reinterpret_cast<char*>(&is_multiplayer_)) + sizeof(tick_interval_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&is_localonly_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_transition_) -
        reinterpret_cast<char*>(&is_localonly_)) + sizeof(is_transition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsg_GameSessionConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_multiplayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_multiplayer(&has_bits);
          is_multiplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_loadsavegame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_loadsavegame(&has_bits);
          is_loadsavegame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_background_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_background_map(&has_bits);
          is_background_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_headless = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_headless(&has_bits);
          is_headless_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_client_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_min_client_limit(&has_bits);
          min_client_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_client_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_client_limit(&has_bits);
          max_client_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_clients = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_clients(&has_bits);
          max_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 tick_interval = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_tick_interval(&has_bits);
          tick_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string hostname = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string savegamename = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_savegamename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.savegamename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string s1_mapname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_s1_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.s1_mapname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gamemode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_gamemode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.gamemode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_ip_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_server_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.server_ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_localonly = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_localonly(&has_bits);
          is_localonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_transition = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_transition(&has_bits);
          is_transition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string previouslevel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_previouslevel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.previouslevel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string landmarkname = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_landmarkname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.landmarkname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_steam_server = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_no_steam_server(&has_bits);
          no_steam_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVCMsg_GameSessionConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameSessionConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_multiplayer = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_multiplayer(), target);
  }

  // optional bool is_loadsavegame = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_loadsavegame(), target);
  }

  // optional bool is_background_map = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_background_map(), target);
  }

  // optional bool is_headless = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_headless(), target);
  }

  // optional uint32 min_client_limit = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_min_client_limit(), target);
  }

  // optional uint32 max_client_limit = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_client_limit(), target);
  }

  // optional uint32 max_clients = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_clients(), target);
  }

  // optional fixed32 tick_interval = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_tick_interval(), target);
  }

  // optional string hostname = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.hostname");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_hostname(), target);
  }

  // optional string savegamename = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_savegamename().data(), static_cast<int>(this->_internal_savegamename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.savegamename");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_savegamename(), target);
  }

  // optional string s1_mapname = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s1_mapname().data(), static_cast<int>(this->_internal_s1_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.s1_mapname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_s1_mapname(), target);
  }

  // optional string gamemode = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamemode().data(), static_cast<int>(this->_internal_gamemode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.gamemode");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_gamemode(), target);
  }

  // optional string server_ip_address = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_ip_address().data(), static_cast<int>(this->_internal_server_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.server_ip_address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_server_ip_address(), target);
  }

  // optional bytes data = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_data(), target);
  }

  // optional bool is_localonly = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_localonly(), target);
  }

  // optional bool is_transition = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_transition(), target);
  }

  // optional string previouslevel = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_previouslevel().data(), static_cast<int>(this->_internal_previouslevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.previouslevel");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_previouslevel(), target);
  }

  // optional string landmarkname = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_landmarkname().data(), static_cast<int>(this->_internal_landmarkname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.landmarkname");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_landmarkname(), target);
  }

  // optional bool no_steam_server = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_no_steam_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameSessionConfiguration)
  return target;
}

size_t CSVCMsg_GameSessionConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameSessionConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string hostname = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional string savegamename = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_savegamename());
    }

    // optional string s1_mapname = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s1_mapname());
    }

    // optional string gamemode = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamemode());
    }

    // optional string server_ip_address = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_ip_address());
    }

    // optional bytes data = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional string previouslevel = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previouslevel());
    }

    // optional string landmarkname = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_landmarkname());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_multiplayer = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_loadsavegame = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_background_map = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_headless = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 min_client_limit = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_client_limit());
    }

    // optional uint32 max_client_limit = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_client_limit());
    }

    // optional uint32 max_clients = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_clients());
    }

    // optional fixed32 tick_interval = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool is_localonly = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool no_steam_server = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool is_transition = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVCMsg_GameSessionConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameSessionConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameSessionConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVCMsg_GameSessionConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameSessionConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameSessionConfiguration)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameSessionConfiguration::MergeFrom(const CSVCMsg_GameSessionConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameSessionConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_savegamename(from._internal_savegamename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_s1_mapname(from._internal_s1_mapname());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_gamemode(from._internal_gamemode());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_server_ip_address(from._internal_server_ip_address());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_previouslevel(from._internal_previouslevel());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_landmarkname(from._internal_landmarkname());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_multiplayer_ = from.is_multiplayer_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_loadsavegame_ = from.is_loadsavegame_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_background_map_ = from.is_background_map_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_headless_ = from.is_headless_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_client_limit_ = from.min_client_limit_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_client_limit_ = from.max_client_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_clients_ = from.max_clients_;
    }
    if (cached_has_bits & 0x00008000u) {
      tick_interval_ = from.tick_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      is_localonly_ = from.is_localonly_;
    }
    if (cached_has_bits & 0x00020000u) {
      no_steam_server_ = from.no_steam_server_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_transition_ = from.is_transition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_GameSessionConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameSessionConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameSessionConfiguration::CopyFrom(const CSVCMsg_GameSessionConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameSessionConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameSessionConfiguration::IsInitialized() const {
  return true;
}

void CSVCMsg_GameSessionConfiguration::InternalSwap(CSVCMsg_GameSessionConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  savegamename_.Swap(&other->savegamename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s1_mapname_.Swap(&other->s1_mapname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamemode_.Swap(&other->gamemode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_ip_address_.Swap(&other->server_ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previouslevel_.Swap(&other->previouslevel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  landmarkname_.Swap(&other->landmarkname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, is_transition_)
      + sizeof(CSVCMsg_GameSessionConfiguration::is_transition_)
      - PROTOBUF_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, is_multiplayer_)>(
          reinterpret_cast<char*>(&is_multiplayer_),
          reinterpret_cast<char*>(&other->is_multiplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsg_GameSessionConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgVector* Arena::CreateMaybeMessage< ::CMsgVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVector >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVector2D* Arena::CreateMaybeMessage< ::CMsgVector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQAngle* Arena::CreateMaybeMessage< ::CMsgQAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRGBA* Arena::CreateMaybeMessage< ::CMsgRGBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRGBA >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerInfo* Arena::CreateMaybeMessage< ::CMsgPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMsg* Arena::CreateMaybeMessage< ::CEntityMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars_CVar* Arena::CreateMaybeMessage< ::CMsg_CVars_CVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars_CVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars* Arena::CreateMaybeMessage< ::CMsg_CVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_NOP* Arena::CreateMaybeMessage< ::CNETMsg_NOP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_NOP >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SplitScreenUser* Arena::CreateMaybeMessage< ::CNETMsg_SplitScreenUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SplitScreenUser >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_Disconnect* Arena::CreateMaybeMessage< ::CNETMsg_Disconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_Disconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_Tick* Arena::CreateMaybeMessage< ::CNETMsg_Tick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_Tick >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_StringCmd* Arena::CreateMaybeMessage< ::CNETMsg_StringCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_StringCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SetConVar* Arena::CreateMaybeMessage< ::CNETMsg_SetConVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SetConVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SignonState* Arena::CreateMaybeMessage< ::CNETMsg_SignonState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SignonState >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsg_GameEvent_key_t* Arena::CreateMaybeMessage< ::CSVCMsg_GameEvent_key_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsg_GameEvent_key_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsg_GameEvent* Arena::CreateMaybeMessage< ::CSVCMsg_GameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsg_GameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsgList_GameEvents_event_t* Arena::CreateMaybeMessage< ::CSVCMsgList_GameEvents_event_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsgList_GameEvents_event_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsgList_GameEvents* Arena::CreateMaybeMessage< ::CSVCMsgList_GameEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsgList_GameEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsg_UserMessage* Arena::CreateMaybeMessage< ::CSVCMsg_UserMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsg_UserMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsgList_UserMessages_usermsg_t* Arena::CreateMaybeMessage< ::CSVCMsgList_UserMessages_usermsg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsgList_UserMessages_usermsg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsgList_UserMessages* Arena::CreateMaybeMessage< ::CSVCMsgList_UserMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsgList_UserMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_Load* Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_Load >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_Load >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_ManifestUpdate* Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_ManifestUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_ManifestUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_SetCreationTick* Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_SetCreationTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_SetCreationTick >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_Unload* Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_Unload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_Unload >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_LoadCompleted* Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_LoadCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_LoadCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsg_GameSessionConfiguration* Arena::CreateMaybeMessage< ::CSVCMsg_GameSessionConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsg_GameSessionConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
