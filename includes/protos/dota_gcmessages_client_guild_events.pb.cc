// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_guild_events.proto

#include "dota_gcmessages_client_guild_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgGuildContract::CMsgGuildContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(PROTOBUF_ULONGLONG(0))
  , challenge_instance_id_(0u)
  , challenge_parameter_(0u)
  , challenge_timestamp_(0u)
  , assigned_account_id_(0u)
  , contract_flags_(0u){}
struct CMsgGuildContractDefaultTypeInternal {
  constexpr CMsgGuildContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildContractDefaultTypeInternal() {}
  union {
    CMsgGuildContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildContractDefaultTypeInternal _CMsgGuildContract_default_instance_;
constexpr CMsgGuildContractSlot::CMsgGuildContractSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_(nullptr){}
struct CMsgGuildContractSlotDefaultTypeInternal {
  constexpr CMsgGuildContractSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildContractSlotDefaultTypeInternal() {}
  union {
    CMsgGuildContractSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildContractSlotDefaultTypeInternal _CMsgGuildContractSlot_default_instance_;
constexpr CMsgAccountGuildEventData::CMsgAccountGuildEventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_slots_()
  , guild_points_(0u)
  , contracts_refreshed_timestamp_(0u)
  , completed_challenge_count_(0u)
  , challenges_refresh_timestamp_(0u)
  , guild_weekly_percentile_(0u)
  , guild_weekly_last_timestamp_(0u)
  , last_weekly_claim_time_(0u)
  , guild_current_percentile_(0u){}
struct CMsgAccountGuildEventDataDefaultTypeInternal {
  constexpr CMsgAccountGuildEventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAccountGuildEventDataDefaultTypeInternal() {}
  union {
    CMsgAccountGuildEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAccountGuildEventDataDefaultTypeInternal _CMsgAccountGuildEventData_default_instance_;
constexpr CMsgGuildActiveContracts::CMsgGuildActiveContracts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contracts_()
  , contracts_refreshed_timestamp_(0u){}
struct CMsgGuildActiveContractsDefaultTypeInternal {
  constexpr CMsgGuildActiveContractsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildActiveContractsDefaultTypeInternal() {}
  union {
    CMsgGuildActiveContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildActiveContractsDefaultTypeInternal _CMsgGuildActiveContracts_default_instance_;
constexpr CMsgGuildChallenge::CMsgGuildChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : challenge_instance_id_(0u)
  , challenge_parameter_(0u)
  , challenge_timestamp_(0u)
  , challenge_progress_(0u)
  , challenge_flags_(0u){}
struct CMsgGuildChallengeDefaultTypeInternal {
  constexpr CMsgGuildChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildChallengeDefaultTypeInternal() {}
  union {
    CMsgGuildChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildChallengeDefaultTypeInternal _CMsgGuildChallenge_default_instance_;
constexpr CMsgGuildEventMember::CMsgGuildEventMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , guild_points_earned_(0u){}
struct CMsgGuildEventMemberDefaultTypeInternal {
  constexpr CMsgGuildEventMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildEventMemberDefaultTypeInternal() {}
  union {
    CMsgGuildEventMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildEventMemberDefaultTypeInternal _CMsgGuildEventMember_default_instance_;
constexpr CMsgClientToGCRequestAccountGuildEventData::CMsgClientToGCRequestAccountGuildEventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)
{}
struct CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal {
  constexpr CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestAccountGuildEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal _CMsgClientToGCRequestAccountGuildEventData_default_instance_;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse::CMsgClientToGCRequestAccountGuildEventDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_data_(nullptr)
  , result_(0)

  , event_id_(0)
{}
struct CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal {
  constexpr CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestAccountGuildEventDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal _CMsgClientToGCRequestAccountGuildEventDataResponse_default_instance_;
constexpr CMsgGCToClientAccountGuildEventDataUpdated::CMsgGCToClientAccountGuildEventDataUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_event_data_(nullptr)
  , guild_id_(0u)
  , event_id_(0)

  , update_flags_(0u)
  , contracts_updated_(false){}
struct CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal {
  constexpr CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientAccountGuildEventDataUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal _CMsgGCToClientAccountGuildEventDataUpdated_default_instance_;
constexpr CMsgClientToGCRequestActiveGuildContracts::CMsgClientToGCRequestActiveGuildContracts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)
{}
struct CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal {
  constexpr CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal _CMsgClientToGCRequestActiveGuildContracts_default_instance_;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse::CMsgClientToGCRequestActiveGuildContractsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_contracts_(nullptr)
  , active_challenges_(nullptr)
  , result_(0)
{}
struct CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal {
  constexpr CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildContractsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal _CMsgClientToGCRequestActiveGuildContractsResponse_default_instance_;
constexpr CMsgGCToClientActiveGuildContractsUpdated::CMsgGCToClientActiveGuildContractsUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)
{}
struct CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal {
  constexpr CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientActiveGuildContractsUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal _CMsgGCToClientActiveGuildContractsUpdated_default_instance_;
constexpr CMsgClientToGCSelectGuildContract::CMsgClientToGCSelectGuildContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)

  , contract_id_(PROTOBUF_ULONGLONG(0))
  , contract_slot_(0u){}
struct CMsgClientToGCSelectGuildContractDefaultTypeInternal {
  constexpr CMsgClientToGCSelectGuildContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSelectGuildContractDefaultTypeInternal() {}
  union {
    CMsgClientToGCSelectGuildContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSelectGuildContractDefaultTypeInternal _CMsgClientToGCSelectGuildContract_default_instance_;
constexpr CMsgClientToGCSelectGuildContractResponse::CMsgClientToGCSelectGuildContractResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal {
  constexpr CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCSelectGuildContractResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal _CMsgClientToGCSelectGuildContractResponse_default_instance_;
constexpr CMsgClientToGCRequestActiveGuildChallenge::CMsgClientToGCRequestActiveGuildChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)
{}
struct CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal {
  constexpr CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal _CMsgClientToGCRequestActiveGuildChallenge_default_instance_;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse::CMsgClientToGCRequestActiveGuildChallengeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_challenge_(nullptr)
  , result_(0)
{}
struct CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal {
  constexpr CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildChallengeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal _CMsgClientToGCRequestActiveGuildChallengeResponse_default_instance_;
constexpr CMsgGCToClientActiveGuildChallengeUpdated::CMsgGCToClientActiveGuildChallengeUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_challenge_(nullptr)
  , guild_id_(0u)
  , event_id_(0)
{}
struct CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal {
  constexpr CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientActiveGuildChallengeUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal _CMsgGCToClientActiveGuildChallengeUpdated_default_instance_;
constexpr CMsgClientToGCRequestGuildEventMembers::CMsgClientToGCRequestGuildEventMembers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)
{}
struct CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal {
  constexpr CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestGuildEventMembers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal _CMsgClientToGCRequestGuildEventMembers_default_instance_;
constexpr CMsgClientToGCRequestGuildEventMembersResponse::CMsgClientToGCRequestGuildEventMembersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , result_(0)
{}
struct CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal {
  constexpr CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestGuildEventMembersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal _CMsgClientToGCRequestGuildEventMembersResponse_default_instance_;
constexpr CMsgGuildLeaderboardCombinedResponse_Entry::CMsgGuildLeaderboardCombinedResponse_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , r_(0u)
  , c_(0u)
  , w_(0u)
  , p_(0u){}
struct CMsgGuildLeaderboardCombinedResponse_EntryDefaultTypeInternal {
  constexpr CMsgGuildLeaderboardCombinedResponse_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildLeaderboardCombinedResponse_EntryDefaultTypeInternal() {}
  union {
    CMsgGuildLeaderboardCombinedResponse_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildLeaderboardCombinedResponse_EntryDefaultTypeInternal _CMsgGuildLeaderboardCombinedResponse_Entry_default_instance_;
constexpr CMsgGuildLeaderboardCombinedResponse::CMsgGuildLeaderboardCombinedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , event_id_(0)

  , region_(0u)
  , last_updated_(0u){}
struct CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal {
  constexpr CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal() {}
  union {
    CMsgGuildLeaderboardCombinedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal _CMsgGuildLeaderboardCombinedResponse_default_instance_;
constexpr CMsgGuildLeaderboardCombinedResponseV2::CMsgGuildLeaderboardCombinedResponseV2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_()
  , _id_cached_byte_size_()
  , r_()
  , _r_cached_byte_size_()
  , c_()
  , _c_cached_byte_size_()
  , w_()
  , _w_cached_byte_size_()
  , p_()
  , _p_cached_byte_size_()
  , event_id_(0)

  , region_(0u)
  , last_updated_(0u){}
struct CMsgGuildLeaderboardCombinedResponseV2DefaultTypeInternal {
  constexpr CMsgGuildLeaderboardCombinedResponseV2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGuildLeaderboardCombinedResponseV2DefaultTypeInternal() {}
  union {
    CMsgGuildLeaderboardCombinedResponseV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGuildLeaderboardCombinedResponseV2DefaultTypeInternal _CMsgGuildLeaderboardCombinedResponseV2_default_instance_;
constexpr CMsgClientToGCClaimLeaderboardRewards::CMsgClientToGCClaimLeaderboardRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)
{}
struct CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal {
  constexpr CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal() {}
  union {
    CMsgClientToGCClaimLeaderboardRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal _CMsgClientToGCClaimLeaderboardRewards_default_instance_;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse::CMsgClientToGCClaimLeaderboardRewardsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)

  , event_points_(0u){}
struct CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal {
  constexpr CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCClaimLeaderboardRewardsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal _CMsgClientToGCClaimLeaderboardRewardsResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, contract_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, assigned_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, contract_flags_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContractSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContractSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContractSlot, contract_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, guild_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, contracts_refreshed_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, contract_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, completed_challenge_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, challenges_refresh_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, guild_weekly_percentile_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, guild_weekly_last_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, last_weekly_claim_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, guild_current_percentile_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, contracts_refreshed_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, contracts_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, challenge_progress_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, challenge_flags_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, guild_points_earned_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, event_data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, update_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, guild_event_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, contracts_updated_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, active_contracts_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, active_challenges_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, contract_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, contract_slot_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContractResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContractResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContractResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, active_challenge_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, active_challenge_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, members_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse_Entry, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse_Entry, r_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse_Entry, c_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse_Entry, w_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse_Entry, p_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, last_updated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, entries_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, last_updated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, r_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, c_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, w_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponseV2, p_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, event_points_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::CMsgGuildContract)},
  { 17, 23, sizeof(::CMsgGuildContractSlot)},
  { 24, 38, sizeof(::CMsgAccountGuildEventData)},
  { 47, 54, sizeof(::CMsgGuildActiveContracts)},
  { 56, 66, sizeof(::CMsgGuildChallenge)},
  { 71, 78, sizeof(::CMsgGuildEventMember)},
  { 80, 87, sizeof(::CMsgClientToGCRequestAccountGuildEventData)},
  { 89, 97, sizeof(::CMsgClientToGCRequestAccountGuildEventDataResponse)},
  { 100, 110, sizeof(::CMsgGCToClientAccountGuildEventDataUpdated)},
  { 115, 122, sizeof(::CMsgClientToGCRequestActiveGuildContracts)},
  { 124, 132, sizeof(::CMsgClientToGCRequestActiveGuildContractsResponse)},
  { 135, 142, sizeof(::CMsgGCToClientActiveGuildContractsUpdated)},
  { 144, 153, sizeof(::CMsgClientToGCSelectGuildContract)},
  { 157, 163, sizeof(::CMsgClientToGCSelectGuildContractResponse)},
  { 164, 171, sizeof(::CMsgClientToGCRequestActiveGuildChallenge)},
  { 173, 180, sizeof(::CMsgClientToGCRequestActiveGuildChallengeResponse)},
  { 182, 190, sizeof(::CMsgGCToClientActiveGuildChallengeUpdated)},
  { 193, 200, sizeof(::CMsgClientToGCRequestGuildEventMembers)},
  { 202, 209, sizeof(::CMsgClientToGCRequestGuildEventMembersResponse)},
  { 211, 221, sizeof(::CMsgGuildLeaderboardCombinedResponse_Entry)},
  { 226, 235, sizeof(::CMsgGuildLeaderboardCombinedResponse)},
  { 239, 252, sizeof(::CMsgGuildLeaderboardCombinedResponseV2)},
  { 260, 267, sizeof(::CMsgClientToGCClaimLeaderboardRewards)},
  { 269, 276, sizeof(::CMsgClientToGCClaimLeaderboardRewardsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildContractSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAccountGuildEventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildActiveContracts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildEventMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestAccountGuildEventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestAccountGuildEventDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientAccountGuildEventDataUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestActiveGuildContracts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestActiveGuildContractsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientActiveGuildContractsUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSelectGuildContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSelectGuildContractResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestActiveGuildChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestActiveGuildChallengeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientActiveGuildChallengeUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestGuildEventMembers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestGuildEventMembersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildLeaderboardCombinedResponse_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildLeaderboardCombinedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGuildLeaderboardCombinedResponseV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCClaimLeaderboardRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCClaimLeaderboardRewardsResponse_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)dota_gcmessages_client_guild_events.pr"
  "oto\032\027dota_shared_enums.proto\"\266\001\n\021CMsgGui"
  "ldContract\022\023\n\013contract_id\030\001 \001(\004\022\035\n\025chall"
  "enge_instance_id\030\002 \001(\r\022\033\n\023challenge_para"
  "meter\030\003 \001(\r\022\033\n\023challenge_timestamp\030\004 \001(\r"
  "\022\033\n\023assigned_account_id\030\005 \001(\r\022\026\n\016contrac"
  "t_flags\030\006 \001(\r\"=\n\025CMsgGuildContractSlot\022$"
  "\n\010contract\030\001 \001(\0132\022.CMsgGuildContract\"\331\002\n"
  "\031CMsgAccountGuildEventData\022\024\n\014guild_poin"
  "ts\030\001 \001(\r\022%\n\035contracts_refreshed_timestam"
  "p\030\002 \001(\r\022.\n\016contract_slots\030\003 \003(\0132\026.CMsgGu"
  "ildContractSlot\022!\n\031completed_challenge_c"
  "ount\030\004 \001(\r\022$\n\034challenges_refresh_timesta"
  "mp\030\005 \001(\r\022\037\n\027guild_weekly_percentile\030\006 \001("
  "\r\022#\n\033guild_weekly_last_timestamp\030\007 \001(\r\022\036"
  "\n\026last_weekly_claim_time\030\010 \001(\r\022 \n\030guild_"
  "current_percentile\030\t \001(\r\"h\n\030CMsgGuildAct"
  "iveContracts\022%\n\035contracts_refreshed_time"
  "stamp\030\001 \001(\r\022%\n\tcontracts\030\002 \003(\0132\022.CMsgGui"
  "ldContract\"\242\001\n\022CMsgGuildChallenge\022\035\n\025cha"
  "llenge_instance_id\030\001 \001(\r\022\033\n\023challenge_pa"
  "rameter\030\002 \001(\r\022\033\n\023challenge_timestamp\030\003 \001"
  "(\r\022\032\n\022challenge_progress\030\004 \001(\r\022\027\n\017challe"
  "nge_flags\030\005 \001(\r\"G\n\024CMsgGuildEventMember\022"
  "\022\n\naccount_id\030\001 \001(\r\022\033\n\023guild_points_earn"
  "ed\030\002 \001(\r\"h\n*CMsgClientToGCRequestAccount"
  "GuildEventData\022\020\n\010guild_id\030\001 \001(\r\022(\n\010even"
  "t_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"\252\003\n2C"
  "MsgClientToGCRequestAccountGuildEventDat"
  "aResponse\022_\n\006result\030\001 \001(\0162=.CMsgClientTo"
  "GCRequestAccountGuildEventDataResponse.E"
  "Response:\020k_eInternalError\022(\n\010event_id\030\002"
  " \001(\0162\007.EEvent:\rEVENT_ID_NONE\022.\n\nevent_da"
  "ta\030\003 \001(\0132\032.CMsgAccountGuildEventData\"\270\001\n"
  "\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eS"
  "uccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020"
  "\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023"
  "\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n"
  "\024k_eInvalidGuildEvent\020\010\"\317\001\n*CMsgGCToClie"
  "ntAccountGuildEventDataUpdated\022\020\n\010guild_"
  "id\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVE"
  "NT_ID_NONE\022\024\n\014update_flags\030\003 \001(\r\0224\n\020guil"
  "d_event_data\030\004 \001(\0132\032.CMsgAccountGuildEve"
  "ntData\022\031\n\021contracts_updated\030\005 \001(\010\"g\n)CMs"
  "gClientToGCRequestActiveGuildContracts\022\020"
  "\n\010guild_id\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEv"
  "ent:\rEVENT_ID_NONE\"\263\003\n1CMsgClientToGCReq"
  "uestActiveGuildContractsResponse\022^\n\006resu"
  "lt\030\001 \001(\0162<.CMsgClientToGCRequestActiveGu"
  "ildContractsResponse.EResponse:\020k_eInter"
  "nalError\0223\n\020active_contracts\030\002 \001(\0132\031.CMs"
  "gGuildActiveContracts\022.\n\021active_challeng"
  "es\030\003 \001(\0132\023.CMsgGuildChallenge\"\270\001\n\tERespo"
  "nse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess\020"
  "\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_"
  "eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023\n\017k_eIn"
  "validGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n\024k_eInv"
  "alidGuildEvent\020\010\"g\n)CMsgGCToClientActive"
  "GuildContractsUpdated\022\020\n\010guild_id\030\001 \001(\r\022"
  "(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NON"
  "E\"\213\001\n!CMsgClientToGCSelectGuildContract\022"
  "\020\n\010guild_id\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EE"
  "vent:\rEVENT_ID_NONE\022\023\n\013contract_id\030\003 \001(\004"
  "\022\025\n\rcontract_slot\030\004 \001(\r\"\374\003\n)CMsgClientTo"
  "GCSelectGuildContractResponse\022V\n\006result\030"
  "\001 \001(\01624.CMsgClientToGCSelectGuildContrac"
  "tResponse.EResponse:\020k_eInternalError\"\366\002"
  "\n\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_e"
  "Success\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled"
  "\020\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022"
  "\023\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030"
  "\n\024k_eInvalidGuildEvent\020\010\022\030\n\024k_eInvalidCo"
  "ntractID\020\t\022\026\n\022k_eAlreadyAssigned\020\n\022\032\n\026k_"
  "eInvalidContractSlot\020\013\022\031\n\025k_eContractSlo"
  "tLocked\020\014\022\033\n\027k_eContractSlotCooldown\020\r\022\030"
  "\n\024k_eContractDuplicate\020\016\022\034\n\030k_eContractS"
  "lotTimeError\020\017\"g\n)CMsgClientToGCRequestA"
  "ctiveGuildChallenge\022\020\n\010guild_id\030\001 \001(\r\022(\n"
  "\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\""
  "\375\002\n1CMsgClientToGCRequestActiveGuildChal"
  "lengeResponse\022^\n\006result\030\001 \001(\0162<.CMsgClie"
  "ntToGCRequestActiveGuildChallengeRespons"
  "e.EResponse:\020k_eInternalError\022-\n\020active_"
  "challenge\030\002 \001(\0132\023.CMsgGuildChallenge\"\270\001\n"
  "\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eS"
  "uccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020"
  "\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023"
  "\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n"
  "\024k_eInvalidGuildEvent\020\010\"\226\001\n)CMsgGCToClie"
  "ntActiveGuildChallengeUpdated\022\020\n\010guild_i"
  "d\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVEN"
  "T_ID_NONE\022-\n\020active_challenge\030\003 \001(\0132\023.CM"
  "sgGuildChallenge\"d\n&CMsgClientToGCReques"
  "tGuildEventMembers\022\020\n\010guild_id\030\001 \001(\r\022(\n\010"
  "event_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"\360"
  "\002\n.CMsgClientToGCRequestGuildEventMember"
  "sResponse\022[\n\006result\030\001 \001(\01629.CMsgClientTo"
  "GCRequestGuildEventMembersResponse.EResp"
  "onse:\020k_eInternalError\022&\n\007members\030\002 \003(\0132"
  "\025.CMsgGuildEventMember\"\270\001\n\tEResponse\022\024\n\020"
  "k_eInternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_"
  "eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeou"
  "t\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023\n\017k_eInvalidGu"
  "ild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n\024k_eInvalidGui"
  "ldEvent\020\010\"\365\001\n$CMsgGuildLeaderboardCombin"
  "edResponse\022(\n\010event_id\030\001 \001(\0162\007.EEvent:\rE"
  "VENT_ID_NONE\022\016\n\006region\030\002 \001(\r\022\024\n\014last_upd"
  "ated\030\003 \001(\r\022<\n\007entries\030\004 \003(\0132+.CMsgGuildL"
  "eaderboardCombinedResponse.Entry\032\?\n\005Entr"
  "y\022\n\n\002id\030\001 \001(\r\022\t\n\001r\030\002 \001(\r\022\t\n\001c\030\003 \001(\r\022\t\n\001w"
  "\030\004 \001(\r\022\t\n\001p\030\005 \001(\r\"\304\001\n&CMsgGuildLeaderboa"
  "rdCombinedResponseV2\022(\n\010event_id\030\001 \001(\0162\007"
  ".EEvent:\rEVENT_ID_NONE\022\016\n\006region\030\002 \001(\r\022\024"
  "\n\014last_updated\030\003 \001(\r\022\016\n\002id\030\004 \003(\rB\002\020\001\022\r\n\001"
  "r\030\005 \003(\rB\002\020\001\022\r\n\001c\030\006 \003(\rB\002\020\001\022\r\n\001w\030\007 \003(\rB\002\020"
  "\001\022\r\n\001p\030\010 \003(\rB\002\020\001\"c\n%CMsgClientToGCClaimL"
  "eaderboardRewards\022\020\n\010guild_id\030\001 \001(\r\022(\n\010e"
  "vent_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"\212\003"
  "\n-CMsgClientToGCClaimLeaderboardRewardsR"
  "esponse\022Z\n\006result\030\001 \001(\01628.CMsgClientToGC"
  "ClaimLeaderboardRewardsResponse.ERespons"
  "e:\020k_eInternalError\022\024\n\014event_points\030\002 \001("
  "\r\"\346\001\n\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n"
  "\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisa"
  "bled\020\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEven"
  "t\020\005\022\023\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember"
  "\020\007\022\030\n\024k_eInvalidGuildEvent\020\010\022\025\n\021k_eDoesN"
  "otQualify\020\t\022\025\n\021k_eAlreadyClaimed\020\n*\263\003\n\026E"
  "GuildEventAuditAction\022$\n k_EGuildEventAu"
  "ditAction_Invalid\020\000\022%\n!k_EGuildEventAudi"
  "tAction_DevGrant\020\001\022-\n)k_EGuildEventAudit"
  "Action_CompleteContract\020\002\022.\n*k_EGuildEve"
  "ntAuditAction_CompleteChallenge\020\003\0221\n-k_E"
  "GuildEventAuditAction_CompleteMatch_Winn"
  "er\020\004\022.\n*k_EGuildEventAuditAction_Challen"
  "geProgress\020\005\0220\n,k_EGuildEventAuditAction"
  "_CompleteMatch_Loser\020\006\022.\n*k_EGuildEventA"
  "uditAction_WeeklyLeaderboard\020\007\022(\n$k_EGui"
  "ldEventAuditAction_ManualGrant\020\010B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto = {
  false, false, 5559, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto, "dota_gcmessages_client_guild_events.proto", 
  &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_deps, 1, 24,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[0];
}
bool CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInternalError;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eSuccess;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eDisabled;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eTimeout;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eNotMember;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestAccountGuildEventDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestActiveGuildContractsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[1];
}
bool CMsgClientToGCRequestActiveGuildContractsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInternalError;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eSuccess;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eDisabled;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eTimeout;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eNotMember;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestActiveGuildContractsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSelectGuildContractResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[2];
}
bool CMsgClientToGCSelectGuildContractResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInternalError;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eSuccess;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eTooBusy;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eDisabled;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eTimeout;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidEvent;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidGuild;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eNotMember;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidContractID;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eAlreadyAssigned;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidContractSlot;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractSlotLocked;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractSlotCooldown;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractDuplicate;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractSlotTimeError;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::EResponse_MIN;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::EResponse_MAX;
constexpr int CMsgClientToGCSelectGuildContractResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[3];
}
bool CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInternalError;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eSuccess;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eDisabled;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eTimeout;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eNotMember;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestActiveGuildChallengeResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestGuildEventMembersResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[4];
}
bool CMsgClientToGCRequestGuildEventMembersResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInternalError;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eSuccess;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eDisabled;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eTimeout;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eNotMember;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestGuildEventMembersResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[5];
}
bool CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInternalError;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eSuccess;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eTooBusy;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eDisabled;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eTimeout;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInvalidEvent;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInvalidGuild;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eNotMember;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eDoesNotQualify;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eAlreadyClaimed;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::EResponse_MIN;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::EResponse_MAX;
constexpr int CMsgClientToGCClaimLeaderboardRewardsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGuildEventAuditAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[6];
}
bool EGuildEventAuditAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgGuildContract::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildContract>()._has_bits_);
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assigned_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contract_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGuildContract::CMsgGuildContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildContract)
}
CMsgGuildContract::CMsgGuildContract(const CMsgGuildContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&contract_id_, &from.contract_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_flags_) -
    reinterpret_cast<char*>(&contract_id_)) + sizeof(contract_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildContract)
}

void CMsgGuildContract::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contract_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contract_flags_) -
    reinterpret_cast<char*>(&contract_id_)) + sizeof(contract_flags_));
}

CMsgGuildContract::~CMsgGuildContract() {
  // @@protoc_insertion_point(destructor:CMsgGuildContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGuildContract::ArenaDtor(void* object) {
  CMsgGuildContract* _this = reinterpret_cast< CMsgGuildContract* >(object);
  (void)_this;
}
void CMsgGuildContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildContract::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&contract_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contract_flags_) -
        reinterpret_cast<char*>(&contract_id_)) + sizeof(contract_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_contract_id(&has_bits);
          contract_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assigned_account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_assigned_account_id(&has_bits);
          assigned_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contract_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_contract_flags(&has_bits);
          contract_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 contract_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_contract_id(), target);
  }

  // optional uint32 challenge_instance_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 assigned_account_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assigned_account_id(), target);
  }

  // optional uint32 contract_flags = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_contract_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildContract)
  return target;
}

size_t CMsgGuildContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 contract_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_contract_id());
    }

    // optional uint32 challenge_instance_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_timestamp());
    }

    // optional uint32 assigned_account_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assigned_account_id());
    }

    // optional uint32 contract_flags = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contract_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildContract)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildContract)
    MergeFrom(*source);
  }
}

void CMsgGuildContract::MergeFrom(const CMsgGuildContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_id_ = from.contract_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_timestamp_ = from.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      assigned_account_id_ = from.assigned_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      contract_flags_ = from.contract_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGuildContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildContract::CopyFrom(const CMsgGuildContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildContract::IsInitialized() const {
  return true;
}

void CMsgGuildContract::InternalSwap(CMsgGuildContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildContract, contract_flags_)
      + sizeof(CMsgGuildContract::contract_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildContract, contract_id_)>(
          reinterpret_cast<char*>(&contract_id_),
          reinterpret_cast<char*>(&other->contract_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGuildContractSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildContractSlot>()._has_bits_);
  static const ::CMsgGuildContract& contract(const CMsgGuildContractSlot* msg);
  static void set_has_contract(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGuildContract&
CMsgGuildContractSlot::_Internal::contract(const CMsgGuildContractSlot* msg) {
  return *msg->contract_;
}
CMsgGuildContractSlot::CMsgGuildContractSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildContractSlot)
}
CMsgGuildContractSlot::CMsgGuildContractSlot(const CMsgGuildContractSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contract()) {
    contract_ = new ::CMsgGuildContract(*from.contract_);
  } else {
    contract_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGuildContractSlot)
}

void CMsgGuildContractSlot::SharedCtor() {
contract_ = nullptr;
}

CMsgGuildContractSlot::~CMsgGuildContractSlot() {
  // @@protoc_insertion_point(destructor:CMsgGuildContractSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildContractSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete contract_;
}

void CMsgGuildContractSlot::ArenaDtor(void* object) {
  CMsgGuildContractSlot* _this = reinterpret_cast< CMsgGuildContractSlot* >(object);
  (void)_this;
}
void CMsgGuildContractSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildContractSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildContractSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildContractSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(contract_ != nullptr);
    contract_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildContractSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgGuildContract contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildContractSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildContractSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGuildContract contract = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::contract(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildContractSlot)
  return target;
}

size_t CMsgGuildContractSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildContractSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGuildContract contract = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contract_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildContractSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildContractSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildContractSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildContractSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildContractSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildContractSlot)
    MergeFrom(*source);
  }
}

void CMsgGuildContractSlot::MergeFrom(const CMsgGuildContractSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildContractSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contract()) {
    _internal_mutable_contract()->::CMsgGuildContract::MergeFrom(from._internal_contract());
  }
}

void CMsgGuildContractSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildContractSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildContractSlot::CopyFrom(const CMsgGuildContractSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildContractSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildContractSlot::IsInitialized() const {
  return true;
}

void CMsgGuildContractSlot::InternalSwap(CMsgGuildContractSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contract_, other->contract_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildContractSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAccountGuildEventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAccountGuildEventData>()._has_bits_);
  static void set_has_guild_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contracts_refreshed_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_completed_challenge_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenges_refresh_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guild_weekly_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guild_weekly_last_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_weekly_claim_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_guild_current_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgAccountGuildEventData::CMsgAccountGuildEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contract_slots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAccountGuildEventData)
}
CMsgAccountGuildEventData::CMsgAccountGuildEventData(const CMsgAccountGuildEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contract_slots_(from.contract_slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_points_, &from.guild_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&guild_current_percentile_) -
    reinterpret_cast<char*>(&guild_points_)) + sizeof(guild_current_percentile_));
  // @@protoc_insertion_point(copy_constructor:CMsgAccountGuildEventData)
}

void CMsgAccountGuildEventData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_points_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guild_current_percentile_) -
    reinterpret_cast<char*>(&guild_points_)) + sizeof(guild_current_percentile_));
}

CMsgAccountGuildEventData::~CMsgAccountGuildEventData() {
  // @@protoc_insertion_point(destructor:CMsgAccountGuildEventData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAccountGuildEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAccountGuildEventData::ArenaDtor(void* object) {
  CMsgAccountGuildEventData* _this = reinterpret_cast< CMsgAccountGuildEventData* >(object);
  (void)_this;
}
void CMsgAccountGuildEventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAccountGuildEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAccountGuildEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAccountGuildEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&guild_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guild_current_percentile_) -
        reinterpret_cast<char*>(&guild_points_)) + sizeof(guild_current_percentile_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAccountGuildEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_points(&has_bits);
          guild_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contracts_refreshed_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_contracts_refreshed_timestamp(&has_bits);
          contracts_refreshed_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGuildContractSlot contract_slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 completed_challenge_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_completed_challenge_count(&has_bits);
          completed_challenge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenges_refresh_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenges_refresh_timestamp(&has_bits);
          challenges_refresh_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_percentile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_guild_weekly_percentile(&has_bits);
          guild_weekly_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_last_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_guild_weekly_last_timestamp(&has_bits);
          guild_weekly_last_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_weekly_claim_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_last_weekly_claim_time(&has_bits);
          last_weekly_claim_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_current_percentile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_guild_current_percentile(&has_bits);
          guild_current_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAccountGuildEventData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAccountGuildEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_points(), target);
  }

  // optional uint32 contracts_refreshed_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_contracts_refreshed_timestamp(), target);
  }

  // repeated .CMsgGuildContractSlot contract_slots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contract_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_contract_slots(i), target, stream);
  }

  // optional uint32 completed_challenge_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_completed_challenge_count(), target);
  }

  // optional uint32 challenges_refresh_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenges_refresh_timestamp(), target);
  }

  // optional uint32 guild_weekly_percentile = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_guild_weekly_percentile(), target);
  }

  // optional uint32 guild_weekly_last_timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_guild_weekly_last_timestamp(), target);
  }

  // optional uint32 last_weekly_claim_time = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_weekly_claim_time(), target);
  }

  // optional uint32 guild_current_percentile = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_guild_current_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAccountGuildEventData)
  return target;
}

size_t CMsgAccountGuildEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAccountGuildEventData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGuildContractSlot contract_slots = 3;
  total_size += 1UL * this->_internal_contract_slots_size();
  for (const auto& msg : this->contract_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 guild_points = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_points());
    }

    // optional uint32 contracts_refreshed_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contracts_refreshed_timestamp());
    }

    // optional uint32 completed_challenge_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_completed_challenge_count());
    }

    // optional uint32 challenges_refresh_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenges_refresh_timestamp());
    }

    // optional uint32 guild_weekly_percentile = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_weekly_percentile());
    }

    // optional uint32 guild_weekly_last_timestamp = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_weekly_last_timestamp());
    }

    // optional uint32 last_weekly_claim_time = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_weekly_claim_time());
    }

    // optional uint32 guild_current_percentile = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_current_percentile());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAccountGuildEventData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAccountGuildEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAccountGuildEventData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAccountGuildEventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAccountGuildEventData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAccountGuildEventData)
    MergeFrom(*source);
  }
}

void CMsgAccountGuildEventData::MergeFrom(const CMsgAccountGuildEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAccountGuildEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contract_slots_.MergeFrom(from.contract_slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      guild_points_ = from.guild_points_;
    }
    if (cached_has_bits & 0x00000002u) {
      contracts_refreshed_timestamp_ = from.contracts_refreshed_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      completed_challenge_count_ = from.completed_challenge_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenges_refresh_timestamp_ = from.challenges_refresh_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      guild_weekly_percentile_ = from.guild_weekly_percentile_;
    }
    if (cached_has_bits & 0x00000020u) {
      guild_weekly_last_timestamp_ = from.guild_weekly_last_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_weekly_claim_time_ = from.last_weekly_claim_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      guild_current_percentile_ = from.guild_current_percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAccountGuildEventData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAccountGuildEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAccountGuildEventData::CopyFrom(const CMsgAccountGuildEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAccountGuildEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAccountGuildEventData::IsInitialized() const {
  return true;
}

void CMsgAccountGuildEventData::InternalSwap(CMsgAccountGuildEventData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_slots_.InternalSwap(&other->contract_slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAccountGuildEventData, guild_current_percentile_)
      + sizeof(CMsgAccountGuildEventData::guild_current_percentile_)
      - PROTOBUF_FIELD_OFFSET(CMsgAccountGuildEventData, guild_points_)>(
          reinterpret_cast<char*>(&guild_points_),
          reinterpret_cast<char*>(&other->guild_points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAccountGuildEventData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGuildActiveContracts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildActiveContracts>()._has_bits_);
  static void set_has_contracts_refreshed_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGuildActiveContracts::CMsgGuildActiveContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildActiveContracts)
}
CMsgGuildActiveContracts::CMsgGuildActiveContracts(const CMsgGuildActiveContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contracts_(from.contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contracts_refreshed_timestamp_ = from.contracts_refreshed_timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgGuildActiveContracts)
}

void CMsgGuildActiveContracts::SharedCtor() {
contracts_refreshed_timestamp_ = 0u;
}

CMsgGuildActiveContracts::~CMsgGuildActiveContracts() {
  // @@protoc_insertion_point(destructor:CMsgGuildActiveContracts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildActiveContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGuildActiveContracts::ArenaDtor(void* object) {
  CMsgGuildActiveContracts* _this = reinterpret_cast< CMsgGuildActiveContracts* >(object);
  (void)_this;
}
void CMsgGuildActiveContracts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildActiveContracts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildActiveContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildActiveContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contracts_.Clear();
  contracts_refreshed_timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildActiveContracts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 contracts_refreshed_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_contracts_refreshed_timestamp(&has_bits);
          contracts_refreshed_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGuildContract contracts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildActiveContracts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildActiveContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 contracts_refreshed_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_contracts_refreshed_timestamp(), target);
  }

  // repeated .CMsgGuildContract contracts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_contracts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildActiveContracts)
  return target;
}

size_t CMsgGuildActiveContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildActiveContracts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGuildContract contracts = 2;
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 contracts_refreshed_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contracts_refreshed_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildActiveContracts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildActiveContracts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildActiveContracts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildActiveContracts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildActiveContracts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildActiveContracts)
    MergeFrom(*source);
  }
}

void CMsgGuildActiveContracts::MergeFrom(const CMsgGuildActiveContracts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildActiveContracts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contracts_.MergeFrom(from.contracts_);
  if (from._internal_has_contracts_refreshed_timestamp()) {
    _internal_set_contracts_refreshed_timestamp(from._internal_contracts_refreshed_timestamp());
  }
}

void CMsgGuildActiveContracts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildActiveContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildActiveContracts::CopyFrom(const CMsgGuildActiveContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildActiveContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildActiveContracts::IsInitialized() const {
  return true;
}

void CMsgGuildActiveContracts::InternalSwap(CMsgGuildActiveContracts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contracts_.InternalSwap(&other->contracts_);
  swap(contracts_refreshed_timestamp_, other->contracts_refreshed_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildActiveContracts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGuildChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildChallenge>()._has_bits_);
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGuildChallenge::CMsgGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildChallenge)
}
CMsgGuildChallenge::CMsgGuildChallenge(const CMsgGuildChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&challenge_instance_id_, &from.challenge_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_flags_) -
    reinterpret_cast<char*>(&challenge_instance_id_)) + sizeof(challenge_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildChallenge)
}

void CMsgGuildChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&challenge_instance_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_flags_) -
    reinterpret_cast<char*>(&challenge_instance_id_)) + sizeof(challenge_flags_));
}

CMsgGuildChallenge::~CMsgGuildChallenge() {
  // @@protoc_insertion_point(destructor:CMsgGuildChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGuildChallenge::ArenaDtor(void* object) {
  CMsgGuildChallenge* _this = reinterpret_cast< CMsgGuildChallenge* >(object);
  (void)_this;
}
void CMsgGuildChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&challenge_instance_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_flags_) -
        reinterpret_cast<char*>(&challenge_instance_id_)) + sizeof(challenge_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 challenge_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_progress(&has_bits);
          challenge_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_flags(&has_bits);
          challenge_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 challenge_instance_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 challenge_progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_progress(), target);
  }

  // optional uint32 challenge_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildChallenge)
  return target;
}

size_t CMsgGuildChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 challenge_instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_timestamp());
    }

    // optional uint32 challenge_progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_progress());
    }

    // optional uint32 challenge_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildChallenge)
    MergeFrom(*source);
  }
}

void CMsgGuildChallenge::MergeFrom(const CMsgGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_timestamp_ = from.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_progress_ = from.challenge_progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_flags_ = from.challenge_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGuildChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildChallenge::CopyFrom(const CMsgGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildChallenge::IsInitialized() const {
  return true;
}

void CMsgGuildChallenge::InternalSwap(CMsgGuildChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildChallenge, challenge_flags_)
      + sizeof(CMsgGuildChallenge::challenge_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildChallenge, challenge_instance_id_)>(
          reinterpret_cast<char*>(&challenge_instance_id_),
          reinterpret_cast<char*>(&other->challenge_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGuildEventMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildEventMember>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guild_points_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGuildEventMember::CMsgGuildEventMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildEventMember)
}
CMsgGuildEventMember::CMsgGuildEventMember(const CMsgGuildEventMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&guild_points_earned_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(guild_points_earned_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildEventMember)
}

void CMsgGuildEventMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guild_points_earned_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(guild_points_earned_));
}

CMsgGuildEventMember::~CMsgGuildEventMember() {
  // @@protoc_insertion_point(destructor:CMsgGuildEventMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildEventMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGuildEventMember::ArenaDtor(void* object) {
  CMsgGuildEventMember* _this = reinterpret_cast< CMsgGuildEventMember* >(object);
  (void)_this;
}
void CMsgGuildEventMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildEventMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildEventMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildEventMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guild_points_earned_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(guild_points_earned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildEventMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_points_earned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guild_points_earned(&has_bits);
          guild_points_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildEventMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildEventMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 guild_points_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_points_earned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildEventMember)
  return target;
}

size_t CMsgGuildEventMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildEventMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 guild_points_earned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_points_earned());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildEventMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildEventMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildEventMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildEventMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildEventMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildEventMember)
    MergeFrom(*source);
  }
}

void CMsgGuildEventMember::MergeFrom(const CMsgGuildEventMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildEventMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      guild_points_earned_ = from.guild_points_earned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGuildEventMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildEventMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildEventMember::CopyFrom(const CMsgGuildEventMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildEventMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildEventMember::IsInitialized() const {
  return true;
}

void CMsgGuildEventMember::InternalSwap(CMsgGuildEventMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildEventMember, guild_points_earned_)
      + sizeof(CMsgGuildEventMember::guild_points_earned_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildEventMember, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildEventMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestAccountGuildEventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestAccountGuildEventData>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestAccountGuildEventData::CMsgClientToGCRequestAccountGuildEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestAccountGuildEventData)
}
CMsgClientToGCRequestAccountGuildEventData::CMsgClientToGCRequestAccountGuildEventData(const CMsgClientToGCRequestAccountGuildEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestAccountGuildEventData)
}

void CMsgClientToGCRequestAccountGuildEventData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
}

CMsgClientToGCRequestAccountGuildEventData::~CMsgClientToGCRequestAccountGuildEventData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestAccountGuildEventData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestAccountGuildEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRequestAccountGuildEventData::ArenaDtor(void* object) {
  CMsgClientToGCRequestAccountGuildEventData* _this = reinterpret_cast< CMsgClientToGCRequestAccountGuildEventData* >(object);
  (void)_this;
}
void CMsgClientToGCRequestAccountGuildEventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestAccountGuildEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestAccountGuildEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestAccountGuildEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestAccountGuildEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestAccountGuildEventData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestAccountGuildEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestAccountGuildEventData)
  return target;
}

size_t CMsgClientToGCRequestAccountGuildEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestAccountGuildEventData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestAccountGuildEventData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestAccountGuildEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestAccountGuildEventData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestAccountGuildEventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestAccountGuildEventData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestAccountGuildEventData)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestAccountGuildEventData::MergeFrom(const CMsgClientToGCRequestAccountGuildEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestAccountGuildEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRequestAccountGuildEventData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestAccountGuildEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestAccountGuildEventData::CopyFrom(const CMsgClientToGCRequestAccountGuildEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestAccountGuildEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestAccountGuildEventData::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestAccountGuildEventData::InternalSwap(CMsgClientToGCRequestAccountGuildEventData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventData, event_id_)
      + sizeof(CMsgClientToGCRequestAccountGuildEventData::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventData, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestAccountGuildEventData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestAccountGuildEventDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestAccountGuildEventDataResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgAccountGuildEventData& event_data(const CMsgClientToGCRequestAccountGuildEventDataResponse* msg);
  static void set_has_event_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgAccountGuildEventData&
CMsgClientToGCRequestAccountGuildEventDataResponse::_Internal::event_data(const CMsgClientToGCRequestAccountGuildEventDataResponse* msg) {
  return *msg->event_data_;
}
CMsgClientToGCRequestAccountGuildEventDataResponse::CMsgClientToGCRequestAccountGuildEventDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestAccountGuildEventDataResponse)
}
CMsgClientToGCRequestAccountGuildEventDataResponse::CMsgClientToGCRequestAccountGuildEventDataResponse(const CMsgClientToGCRequestAccountGuildEventDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event_data()) {
    event_data_ = new ::CMsgAccountGuildEventData(*from.event_data_);
  } else {
    event_data_ = nullptr;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestAccountGuildEventDataResponse)
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&event_data_)) + sizeof(event_id_));
}

CMsgClientToGCRequestAccountGuildEventDataResponse::~CMsgClientToGCRequestAccountGuildEventDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestAccountGuildEventDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete event_data_;
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::ArenaDtor(void* object) {
  CMsgClientToGCRequestAccountGuildEventDataResponse* _this = reinterpret_cast< CMsgClientToGCRequestAccountGuildEventDataResponse* >(object);
  (void)_this;
}
void CMsgClientToGCRequestAccountGuildEventDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestAccountGuildEventDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_data_ != nullptr);
    event_data_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&result_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestAccountGuildEventDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestAccountGuildEventDataResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgAccountGuildEventData event_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestAccountGuildEventDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCRequestAccountGuildEventDataResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional .CMsgAccountGuildEventData event_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::event_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestAccountGuildEventDataResponse)
  return target;
}

size_t CMsgClientToGCRequestAccountGuildEventDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgAccountGuildEventData event_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_data_);
    }

    // optional .CMsgClientToGCRequestAccountGuildEventDataResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestAccountGuildEventDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestAccountGuildEventDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestAccountGuildEventDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestAccountGuildEventDataResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::MergeFrom(const CMsgClientToGCRequestAccountGuildEventDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_event_data()->::CMsgAccountGuildEventData::MergeFrom(from._internal_event_data());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::CopyFrom(const CMsgClientToGCRequestAccountGuildEventDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestAccountGuildEventDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::InternalSwap(CMsgClientToGCRequestAccountGuildEventDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventDataResponse, event_id_)
      + sizeof(CMsgClientToGCRequestAccountGuildEventDataResponse::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventDataResponse, event_data_)>(
          reinterpret_cast<char*>(&event_data_),
          reinterpret_cast<char*>(&other->event_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestAccountGuildEventDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientAccountGuildEventDataUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientAccountGuildEventDataUpdated>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_update_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgAccountGuildEventData& guild_event_data(const CMsgGCToClientAccountGuildEventDataUpdated* msg);
  static void set_has_guild_event_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contracts_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgAccountGuildEventData&
CMsgGCToClientAccountGuildEventDataUpdated::_Internal::guild_event_data(const CMsgGCToClientAccountGuildEventDataUpdated* msg) {
  return *msg->guild_event_data_;
}
CMsgGCToClientAccountGuildEventDataUpdated::CMsgGCToClientAccountGuildEventDataUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientAccountGuildEventDataUpdated)
}
CMsgGCToClientAccountGuildEventDataUpdated::CMsgGCToClientAccountGuildEventDataUpdated(const CMsgGCToClientAccountGuildEventDataUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guild_event_data()) {
    guild_event_data_ = new ::CMsgAccountGuildEventData(*from.guild_event_data_);
  } else {
    guild_event_data_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contracts_updated_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(contracts_updated_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientAccountGuildEventDataUpdated)
}

void CMsgGCToClientAccountGuildEventDataUpdated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_event_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contracts_updated_) -
    reinterpret_cast<char*>(&guild_event_data_)) + sizeof(contracts_updated_));
}

CMsgGCToClientAccountGuildEventDataUpdated::~CMsgGCToClientAccountGuildEventDataUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientAccountGuildEventDataUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientAccountGuildEventDataUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete guild_event_data_;
}

void CMsgGCToClientAccountGuildEventDataUpdated::ArenaDtor(void* object) {
  CMsgGCToClientAccountGuildEventDataUpdated* _this = reinterpret_cast< CMsgGCToClientAccountGuildEventDataUpdated* >(object);
  (void)_this;
}
void CMsgGCToClientAccountGuildEventDataUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientAccountGuildEventDataUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientAccountGuildEventDataUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientAccountGuildEventDataUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guild_event_data_ != nullptr);
    guild_event_data_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contracts_updated_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(contracts_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientAccountGuildEventDataUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 update_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_update_flags(&has_bits);
          update_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgAccountGuildEventData guild_event_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_event_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_updated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_contracts_updated(&has_bits);
          contracts_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientAccountGuildEventDataUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientAccountGuildEventDataUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 update_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_update_flags(), target);
  }

  // optional .CMsgAccountGuildEventData guild_event_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::guild_event_data(this), target, stream);
  }

  // optional bool contracts_updated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_contracts_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientAccountGuildEventDataUpdated)
  return target;
}

size_t CMsgGCToClientAccountGuildEventDataUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientAccountGuildEventDataUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgAccountGuildEventData guild_event_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guild_event_data_);
    }

    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 update_flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_update_flags());
    }

    // optional bool contracts_updated = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientAccountGuildEventDataUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientAccountGuildEventDataUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientAccountGuildEventDataUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientAccountGuildEventDataUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientAccountGuildEventDataUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientAccountGuildEventDataUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCToClientAccountGuildEventDataUpdated::MergeFrom(const CMsgGCToClientAccountGuildEventDataUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientAccountGuildEventDataUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_guild_event_data()->::CMsgAccountGuildEventData::MergeFrom(from._internal_guild_event_data());
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      update_flags_ = from.update_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      contracts_updated_ = from.contracts_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientAccountGuildEventDataUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientAccountGuildEventDataUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientAccountGuildEventDataUpdated::CopyFrom(const CMsgGCToClientAccountGuildEventDataUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientAccountGuildEventDataUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientAccountGuildEventDataUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientAccountGuildEventDataUpdated::InternalSwap(CMsgGCToClientAccountGuildEventDataUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientAccountGuildEventDataUpdated, contracts_updated_)
      + sizeof(CMsgGCToClientAccountGuildEventDataUpdated::contracts_updated_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientAccountGuildEventDataUpdated, guild_event_data_)>(
          reinterpret_cast<char*>(&guild_event_data_),
          reinterpret_cast<char*>(&other->guild_event_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientAccountGuildEventDataUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestActiveGuildContracts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildContracts>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestActiveGuildContracts::CMsgClientToGCRequestActiveGuildContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildContracts)
}
CMsgClientToGCRequestActiveGuildContracts::CMsgClientToGCRequestActiveGuildContracts(const CMsgClientToGCRequestActiveGuildContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildContracts)
}

void CMsgClientToGCRequestActiveGuildContracts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
}

CMsgClientToGCRequestActiveGuildContracts::~CMsgClientToGCRequestActiveGuildContracts() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildContracts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestActiveGuildContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRequestActiveGuildContracts::ArenaDtor(void* object) {
  CMsgClientToGCRequestActiveGuildContracts* _this = reinterpret_cast< CMsgClientToGCRequestActiveGuildContracts* >(object);
  (void)_this;
}
void CMsgClientToGCRequestActiveGuildContracts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestActiveGuildContracts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildContracts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestActiveGuildContracts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildContracts)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildContracts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestActiveGuildContracts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestActiveGuildContracts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestActiveGuildContracts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestActiveGuildContracts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestActiveGuildContracts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestActiveGuildContracts)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestActiveGuildContracts::MergeFrom(const CMsgClientToGCRequestActiveGuildContracts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildContracts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRequestActiveGuildContracts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestActiveGuildContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestActiveGuildContracts::CopyFrom(const CMsgClientToGCRequestActiveGuildContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildContracts::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildContracts::InternalSwap(CMsgClientToGCRequestActiveGuildContracts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContracts, event_id_)
      + sizeof(CMsgClientToGCRequestActiveGuildContracts::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContracts, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildContracts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestActiveGuildContractsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildContractsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgGuildActiveContracts& active_contracts(const CMsgClientToGCRequestActiveGuildContractsResponse* msg);
  static void set_has_active_contracts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGuildChallenge& active_challenges(const CMsgClientToGCRequestActiveGuildContractsResponse* msg);
  static void set_has_active_challenges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgGuildActiveContracts&
CMsgClientToGCRequestActiveGuildContractsResponse::_Internal::active_contracts(const CMsgClientToGCRequestActiveGuildContractsResponse* msg) {
  return *msg->active_contracts_;
}
const ::CMsgGuildChallenge&
CMsgClientToGCRequestActiveGuildContractsResponse::_Internal::active_challenges(const CMsgClientToGCRequestActiveGuildContractsResponse* msg) {
  return *msg->active_challenges_;
}
CMsgClientToGCRequestActiveGuildContractsResponse::CMsgClientToGCRequestActiveGuildContractsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildContractsResponse)
}
CMsgClientToGCRequestActiveGuildContractsResponse::CMsgClientToGCRequestActiveGuildContractsResponse(const CMsgClientToGCRequestActiveGuildContractsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_active_contracts()) {
    active_contracts_ = new ::CMsgGuildActiveContracts(*from.active_contracts_);
  } else {
    active_contracts_ = nullptr;
  }
  if (from._internal_has_active_challenges()) {
    active_challenges_ = new ::CMsgGuildChallenge(*from.active_challenges_);
  } else {
    active_challenges_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildContractsResponse)
}

void CMsgClientToGCRequestActiveGuildContractsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&active_contracts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&active_contracts_)) + sizeof(result_));
}

CMsgClientToGCRequestActiveGuildContractsResponse::~CMsgClientToGCRequestActiveGuildContractsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildContractsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestActiveGuildContractsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete active_contracts_;
  if (this != internal_default_instance()) delete active_challenges_;
}

void CMsgClientToGCRequestActiveGuildContractsResponse::ArenaDtor(void* object) {
  CMsgClientToGCRequestActiveGuildContractsResponse* _this = reinterpret_cast< CMsgClientToGCRequestActiveGuildContractsResponse* >(object);
  (void)_this;
}
void CMsgClientToGCRequestActiveGuildContractsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestActiveGuildContractsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildContractsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(active_contracts_ != nullptr);
      active_contracts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(active_challenges_ != nullptr);
      active_challenges_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildContractsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestActiveGuildContractsResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestActiveGuildContractsResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestActiveGuildContractsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgGuildActiveContracts active_contracts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_contracts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGuildChallenge active_challenges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_challenges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestActiveGuildContractsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCRequestActiveGuildContractsResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .CMsgGuildActiveContracts active_contracts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::active_contracts(this), target, stream);
  }

  // optional .CMsgGuildChallenge active_challenges = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::active_challenges(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildContractsResponse)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildContractsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgGuildActiveContracts active_contracts = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_contracts_);
    }

    // optional .CMsgGuildChallenge active_challenges = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_challenges_);
    }

    // optional .CMsgClientToGCRequestActiveGuildContractsResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestActiveGuildContractsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestActiveGuildContractsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestActiveGuildContractsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestActiveGuildContractsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestActiveGuildContractsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestActiveGuildContractsResponse::MergeFrom(const CMsgClientToGCRequestActiveGuildContractsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_active_contracts()->::CMsgGuildActiveContracts::MergeFrom(from._internal_active_contracts());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_active_challenges()->::CMsgGuildChallenge::MergeFrom(from._internal_active_challenges());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRequestActiveGuildContractsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestActiveGuildContractsResponse::CopyFrom(const CMsgClientToGCRequestActiveGuildContractsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildContractsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildContractsResponse::InternalSwap(CMsgClientToGCRequestActiveGuildContractsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContractsResponse, result_)
      + sizeof(CMsgClientToGCRequestActiveGuildContractsResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContractsResponse, active_contracts_)>(
          reinterpret_cast<char*>(&active_contracts_),
          reinterpret_cast<char*>(&other->active_contracts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildContractsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientActiveGuildContractsUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientActiveGuildContractsUpdated>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientActiveGuildContractsUpdated::CMsgGCToClientActiveGuildContractsUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientActiveGuildContractsUpdated)
}
CMsgGCToClientActiveGuildContractsUpdated::CMsgGCToClientActiveGuildContractsUpdated(const CMsgGCToClientActiveGuildContractsUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientActiveGuildContractsUpdated)
}

void CMsgGCToClientActiveGuildContractsUpdated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
}

CMsgGCToClientActiveGuildContractsUpdated::~CMsgGCToClientActiveGuildContractsUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientActiveGuildContractsUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientActiveGuildContractsUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientActiveGuildContractsUpdated::ArenaDtor(void* object) {
  CMsgGCToClientActiveGuildContractsUpdated* _this = reinterpret_cast< CMsgGCToClientActiveGuildContractsUpdated* >(object);
  (void)_this;
}
void CMsgGCToClientActiveGuildContractsUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientActiveGuildContractsUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientActiveGuildContractsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientActiveGuildContractsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientActiveGuildContractsUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientActiveGuildContractsUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientActiveGuildContractsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientActiveGuildContractsUpdated)
  return target;
}

size_t CMsgGCToClientActiveGuildContractsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientActiveGuildContractsUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientActiveGuildContractsUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientActiveGuildContractsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientActiveGuildContractsUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientActiveGuildContractsUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientActiveGuildContractsUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientActiveGuildContractsUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCToClientActiveGuildContractsUpdated::MergeFrom(const CMsgGCToClientActiveGuildContractsUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientActiveGuildContractsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientActiveGuildContractsUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientActiveGuildContractsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientActiveGuildContractsUpdated::CopyFrom(const CMsgGCToClientActiveGuildContractsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientActiveGuildContractsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientActiveGuildContractsUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientActiveGuildContractsUpdated::InternalSwap(CMsgGCToClientActiveGuildContractsUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildContractsUpdated, event_id_)
      + sizeof(CMsgGCToClientActiveGuildContractsUpdated::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildContractsUpdated, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientActiveGuildContractsUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCSelectGuildContract::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSelectGuildContract>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCSelectGuildContract::CMsgClientToGCSelectGuildContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSelectGuildContract)
}
CMsgClientToGCSelectGuildContract::CMsgClientToGCSelectGuildContract(const CMsgClientToGCSelectGuildContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_slot_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(contract_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSelectGuildContract)
}

void CMsgClientToGCSelectGuildContract::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contract_slot_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(contract_slot_));
}

CMsgClientToGCSelectGuildContract::~CMsgClientToGCSelectGuildContract() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSelectGuildContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCSelectGuildContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCSelectGuildContract::ArenaDtor(void* object) {
  CMsgClientToGCSelectGuildContract* _this = reinterpret_cast< CMsgClientToGCSelectGuildContract* >(object);
  (void)_this;
}
void CMsgClientToGCSelectGuildContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSelectGuildContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSelectGuildContract::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSelectGuildContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contract_slot_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(contract_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSelectGuildContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 contract_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contract_id(&has_bits);
          contract_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contract_slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_contract_slot(&has_bits);
          contract_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCSelectGuildContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSelectGuildContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint64 contract_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_contract_id(), target);
  }

  // optional uint32 contract_slot = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_contract_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSelectGuildContract)
  return target;
}

size_t CMsgClientToGCSelectGuildContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSelectGuildContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint64 contract_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_contract_id());
    }

    // optional uint32 contract_slot = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contract_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSelectGuildContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCSelectGuildContract)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSelectGuildContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCSelectGuildContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCSelectGuildContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCSelectGuildContract)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSelectGuildContract::MergeFrom(const CMsgClientToGCSelectGuildContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSelectGuildContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      contract_id_ = from.contract_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      contract_slot_ = from.contract_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCSelectGuildContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCSelectGuildContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSelectGuildContract::CopyFrom(const CMsgClientToGCSelectGuildContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSelectGuildContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSelectGuildContract::IsInitialized() const {
  return true;
}

void CMsgClientToGCSelectGuildContract::InternalSwap(CMsgClientToGCSelectGuildContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSelectGuildContract, contract_slot_)
      + sizeof(CMsgClientToGCSelectGuildContract::contract_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSelectGuildContract, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSelectGuildContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCSelectGuildContractResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSelectGuildContractResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCSelectGuildContractResponse::CMsgClientToGCSelectGuildContractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSelectGuildContractResponse)
}
CMsgClientToGCSelectGuildContractResponse::CMsgClientToGCSelectGuildContractResponse(const CMsgClientToGCSelectGuildContractResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSelectGuildContractResponse)
}

void CMsgClientToGCSelectGuildContractResponse::SharedCtor() {
result_ = 0;
}

CMsgClientToGCSelectGuildContractResponse::~CMsgClientToGCSelectGuildContractResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSelectGuildContractResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCSelectGuildContractResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCSelectGuildContractResponse::ArenaDtor(void* object) {
  CMsgClientToGCSelectGuildContractResponse* _this = reinterpret_cast< CMsgClientToGCSelectGuildContractResponse* >(object);
  (void)_this;
}
void CMsgClientToGCSelectGuildContractResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSelectGuildContractResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSelectGuildContractResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSelectGuildContractResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSelectGuildContractResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCSelectGuildContractResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCSelectGuildContractResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCSelectGuildContractResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCSelectGuildContractResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSelectGuildContractResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCSelectGuildContractResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSelectGuildContractResponse)
  return target;
}

size_t CMsgClientToGCSelectGuildContractResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSelectGuildContractResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCSelectGuildContractResponse.EResponse result = 1 [default = k_eInternalError];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSelectGuildContractResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCSelectGuildContractResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSelectGuildContractResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCSelectGuildContractResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCSelectGuildContractResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCSelectGuildContractResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSelectGuildContractResponse::MergeFrom(const CMsgClientToGCSelectGuildContractResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSelectGuildContractResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgClientToGCSelectGuildContractResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCSelectGuildContractResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSelectGuildContractResponse::CopyFrom(const CMsgClientToGCSelectGuildContractResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSelectGuildContractResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSelectGuildContractResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSelectGuildContractResponse::InternalSwap(CMsgClientToGCSelectGuildContractResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSelectGuildContractResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestActiveGuildChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildChallenge>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestActiveGuildChallenge::CMsgClientToGCRequestActiveGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildChallenge)
}
CMsgClientToGCRequestActiveGuildChallenge::CMsgClientToGCRequestActiveGuildChallenge(const CMsgClientToGCRequestActiveGuildChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildChallenge)
}

void CMsgClientToGCRequestActiveGuildChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
}

CMsgClientToGCRequestActiveGuildChallenge::~CMsgClientToGCRequestActiveGuildChallenge() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestActiveGuildChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRequestActiveGuildChallenge::ArenaDtor(void* object) {
  CMsgClientToGCRequestActiveGuildChallenge* _this = reinterpret_cast< CMsgClientToGCRequestActiveGuildChallenge* >(object);
  (void)_this;
}
void CMsgClientToGCRequestActiveGuildChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestActiveGuildChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestActiveGuildChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildChallenge)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestActiveGuildChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestActiveGuildChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestActiveGuildChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestActiveGuildChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestActiveGuildChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestActiveGuildChallenge)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestActiveGuildChallenge::MergeFrom(const CMsgClientToGCRequestActiveGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRequestActiveGuildChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestActiveGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestActiveGuildChallenge::CopyFrom(const CMsgClientToGCRequestActiveGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildChallenge::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildChallenge::InternalSwap(CMsgClientToGCRequestActiveGuildChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallenge, event_id_)
      + sizeof(CMsgClientToGCRequestActiveGuildChallenge::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallenge, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestActiveGuildChallengeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildChallengeResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGuildChallenge& active_challenge(const CMsgClientToGCRequestActiveGuildChallengeResponse* msg);
  static void set_has_active_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGuildChallenge&
CMsgClientToGCRequestActiveGuildChallengeResponse::_Internal::active_challenge(const CMsgClientToGCRequestActiveGuildChallengeResponse* msg) {
  return *msg->active_challenge_;
}
CMsgClientToGCRequestActiveGuildChallengeResponse::CMsgClientToGCRequestActiveGuildChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildChallengeResponse)
}
CMsgClientToGCRequestActiveGuildChallengeResponse::CMsgClientToGCRequestActiveGuildChallengeResponse(const CMsgClientToGCRequestActiveGuildChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_active_challenge()) {
    active_challenge_ = new ::CMsgGuildChallenge(*from.active_challenge_);
  } else {
    active_challenge_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildChallengeResponse)
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&active_challenge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&active_challenge_)) + sizeof(result_));
}

CMsgClientToGCRequestActiveGuildChallengeResponse::~CMsgClientToGCRequestActiveGuildChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildChallengeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete active_challenge_;
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::ArenaDtor(void* object) {
  CMsgClientToGCRequestActiveGuildChallengeResponse* _this = reinterpret_cast< CMsgClientToGCRequestActiveGuildChallengeResponse* >(object);
  (void)_this;
}
void CMsgClientToGCRequestActiveGuildChallengeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestActiveGuildChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(active_challenge_ != nullptr);
    active_challenge_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildChallengeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestActiveGuildChallengeResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgGuildChallenge active_challenge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_challenge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestActiveGuildChallengeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCRequestActiveGuildChallengeResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .CMsgGuildChallenge active_challenge = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::active_challenge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildChallengeResponse)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGuildChallenge active_challenge = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_challenge_);
    }

    // optional .CMsgClientToGCRequestActiveGuildChallengeResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestActiveGuildChallengeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestActiveGuildChallengeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestActiveGuildChallengeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestActiveGuildChallengeResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::MergeFrom(const CMsgClientToGCRequestActiveGuildChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_active_challenge()->::CMsgGuildChallenge::MergeFrom(from._internal_active_challenge());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::CopyFrom(const CMsgClientToGCRequestActiveGuildChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::InternalSwap(CMsgClientToGCRequestActiveGuildChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallengeResponse, result_)
      + sizeof(CMsgClientToGCRequestActiveGuildChallengeResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallengeResponse, active_challenge_)>(
          reinterpret_cast<char*>(&active_challenge_),
          reinterpret_cast<char*>(&other->active_challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildChallengeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientActiveGuildChallengeUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientActiveGuildChallengeUpdated>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgGuildChallenge& active_challenge(const CMsgGCToClientActiveGuildChallengeUpdated* msg);
  static void set_has_active_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGuildChallenge&
CMsgGCToClientActiveGuildChallengeUpdated::_Internal::active_challenge(const CMsgGCToClientActiveGuildChallengeUpdated* msg) {
  return *msg->active_challenge_;
}
CMsgGCToClientActiveGuildChallengeUpdated::CMsgGCToClientActiveGuildChallengeUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientActiveGuildChallengeUpdated)
}
CMsgGCToClientActiveGuildChallengeUpdated::CMsgGCToClientActiveGuildChallengeUpdated(const CMsgGCToClientActiveGuildChallengeUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_active_challenge()) {
    active_challenge_ = new ::CMsgGuildChallenge(*from.active_challenge_);
  } else {
    active_challenge_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientActiveGuildChallengeUpdated)
}

void CMsgGCToClientActiveGuildChallengeUpdated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&active_challenge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&active_challenge_)) + sizeof(event_id_));
}

CMsgGCToClientActiveGuildChallengeUpdated::~CMsgGCToClientActiveGuildChallengeUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientActiveGuildChallengeUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientActiveGuildChallengeUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete active_challenge_;
}

void CMsgGCToClientActiveGuildChallengeUpdated::ArenaDtor(void* object) {
  CMsgGCToClientActiveGuildChallengeUpdated* _this = reinterpret_cast< CMsgGCToClientActiveGuildChallengeUpdated* >(object);
  (void)_this;
}
void CMsgGCToClientActiveGuildChallengeUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientActiveGuildChallengeUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientActiveGuildChallengeUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientActiveGuildChallengeUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(active_challenge_ != nullptr);
    active_challenge_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientActiveGuildChallengeUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgGuildChallenge active_challenge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_challenge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientActiveGuildChallengeUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientActiveGuildChallengeUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional .CMsgGuildChallenge active_challenge = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::active_challenge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientActiveGuildChallengeUpdated)
  return target;
}

size_t CMsgGCToClientActiveGuildChallengeUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientActiveGuildChallengeUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgGuildChallenge active_challenge = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_challenge_);
    }

    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientActiveGuildChallengeUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientActiveGuildChallengeUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientActiveGuildChallengeUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientActiveGuildChallengeUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientActiveGuildChallengeUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientActiveGuildChallengeUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCToClientActiveGuildChallengeUpdated::MergeFrom(const CMsgGCToClientActiveGuildChallengeUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientActiveGuildChallengeUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_active_challenge()->::CMsgGuildChallenge::MergeFrom(from._internal_active_challenge());
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientActiveGuildChallengeUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientActiveGuildChallengeUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientActiveGuildChallengeUpdated::CopyFrom(const CMsgGCToClientActiveGuildChallengeUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientActiveGuildChallengeUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientActiveGuildChallengeUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientActiveGuildChallengeUpdated::InternalSwap(CMsgGCToClientActiveGuildChallengeUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildChallengeUpdated, event_id_)
      + sizeof(CMsgGCToClientActiveGuildChallengeUpdated::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildChallengeUpdated, active_challenge_)>(
          reinterpret_cast<char*>(&active_challenge_),
          reinterpret_cast<char*>(&other->active_challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientActiveGuildChallengeUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestGuildEventMembers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestGuildEventMembers>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestGuildEventMembers::CMsgClientToGCRequestGuildEventMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestGuildEventMembers)
}
CMsgClientToGCRequestGuildEventMembers::CMsgClientToGCRequestGuildEventMembers(const CMsgClientToGCRequestGuildEventMembers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestGuildEventMembers)
}

void CMsgClientToGCRequestGuildEventMembers::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
}

CMsgClientToGCRequestGuildEventMembers::~CMsgClientToGCRequestGuildEventMembers() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestGuildEventMembers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestGuildEventMembers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRequestGuildEventMembers::ArenaDtor(void* object) {
  CMsgClientToGCRequestGuildEventMembers* _this = reinterpret_cast< CMsgClientToGCRequestGuildEventMembers* >(object);
  (void)_this;
}
void CMsgClientToGCRequestGuildEventMembers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestGuildEventMembers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestGuildEventMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestGuildEventMembers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestGuildEventMembers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestGuildEventMembers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestGuildEventMembers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestGuildEventMembers)
  return target;
}

size_t CMsgClientToGCRequestGuildEventMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestGuildEventMembers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestGuildEventMembers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestGuildEventMembers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestGuildEventMembers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestGuildEventMembers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestGuildEventMembers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestGuildEventMembers)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestGuildEventMembers::MergeFrom(const CMsgClientToGCRequestGuildEventMembers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestGuildEventMembers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRequestGuildEventMembers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestGuildEventMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestGuildEventMembers::CopyFrom(const CMsgClientToGCRequestGuildEventMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestGuildEventMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestGuildEventMembers::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestGuildEventMembers::InternalSwap(CMsgClientToGCRequestGuildEventMembers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestGuildEventMembers, event_id_)
      + sizeof(CMsgClientToGCRequestGuildEventMembers::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestGuildEventMembers, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestGuildEventMembers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRequestGuildEventMembersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestGuildEventMembersResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRequestGuildEventMembersResponse::CMsgClientToGCRequestGuildEventMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestGuildEventMembersResponse)
}
CMsgClientToGCRequestGuildEventMembersResponse::CMsgClientToGCRequestGuildEventMembersResponse(const CMsgClientToGCRequestGuildEventMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestGuildEventMembersResponse)
}

void CMsgClientToGCRequestGuildEventMembersResponse::SharedCtor() {
result_ = 0;
}

CMsgClientToGCRequestGuildEventMembersResponse::~CMsgClientToGCRequestGuildEventMembersResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestGuildEventMembersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRequestGuildEventMembersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRequestGuildEventMembersResponse::ArenaDtor(void* object) {
  CMsgClientToGCRequestGuildEventMembersResponse* _this = reinterpret_cast< CMsgClientToGCRequestGuildEventMembersResponse* >(object);
  (void)_this;
}
void CMsgClientToGCRequestGuildEventMembersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestGuildEventMembersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestGuildEventMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestGuildEventMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestGuildEventMembersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestGuildEventMembersResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestGuildEventMembersResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestGuildEventMembersResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGuildEventMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRequestGuildEventMembersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestGuildEventMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCRequestGuildEventMembersResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgGuildEventMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestGuildEventMembersResponse)
  return target;
}

size_t CMsgClientToGCRequestGuildEventMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestGuildEventMembersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGuildEventMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgClientToGCRequestGuildEventMembersResponse.EResponse result = 1 [default = k_eInternalError];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestGuildEventMembersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRequestGuildEventMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestGuildEventMembersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRequestGuildEventMembersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRequestGuildEventMembersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRequestGuildEventMembersResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestGuildEventMembersResponse::MergeFrom(const CMsgClientToGCRequestGuildEventMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestGuildEventMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgClientToGCRequestGuildEventMembersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRequestGuildEventMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestGuildEventMembersResponse::CopyFrom(const CMsgClientToGCRequestGuildEventMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestGuildEventMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestGuildEventMembersResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestGuildEventMembersResponse::InternalSwap(CMsgClientToGCRequestGuildEventMembersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestGuildEventMembersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGuildLeaderboardCombinedResponse_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildLeaderboardCombinedResponse_Entry>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGuildLeaderboardCombinedResponse_Entry::CMsgGuildLeaderboardCombinedResponse_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildLeaderboardCombinedResponse.Entry)
}
CMsgGuildLeaderboardCombinedResponse_Entry::CMsgGuildLeaderboardCombinedResponse_Entry(const CMsgGuildLeaderboardCombinedResponse_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_) -
    reinterpret_cast<char*>(&id_)) + sizeof(p_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildLeaderboardCombinedResponse.Entry)
}

void CMsgGuildLeaderboardCombinedResponse_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p_) -
    reinterpret_cast<char*>(&id_)) + sizeof(p_));
}

CMsgGuildLeaderboardCombinedResponse_Entry::~CMsgGuildLeaderboardCombinedResponse_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGuildLeaderboardCombinedResponse.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildLeaderboardCombinedResponse_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGuildLeaderboardCombinedResponse_Entry::ArenaDtor(void* object) {
  CMsgGuildLeaderboardCombinedResponse_Entry* _this = reinterpret_cast< CMsgGuildLeaderboardCombinedResponse_Entry* >(object);
  (void)_this;
}
void CMsgGuildLeaderboardCombinedResponse_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildLeaderboardCombinedResponse_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildLeaderboardCombinedResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildLeaderboardCombinedResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p_) -
        reinterpret_cast<char*>(&id_)) + sizeof(p_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildLeaderboardCombinedResponse_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 p = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_p(&has_bits);
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildLeaderboardCombinedResponse_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildLeaderboardCombinedResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 r = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_r(), target);
  }

  // optional uint32 c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_c(), target);
  }

  // optional uint32 w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_w(), target);
  }

  // optional uint32 p = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_p(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildLeaderboardCombinedResponse.Entry)
  return target;
}

size_t CMsgGuildLeaderboardCombinedResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildLeaderboardCombinedResponse.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 r = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_r());
    }

    // optional uint32 c = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_c());
    }

    // optional uint32 w = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_w());
    }

    // optional uint32 p = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_p());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildLeaderboardCombinedResponse_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildLeaderboardCombinedResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildLeaderboardCombinedResponse_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildLeaderboardCombinedResponse_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildLeaderboardCombinedResponse.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildLeaderboardCombinedResponse.Entry)
    MergeFrom(*source);
  }
}

void CMsgGuildLeaderboardCombinedResponse_Entry::MergeFrom(const CMsgGuildLeaderboardCombinedResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildLeaderboardCombinedResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000004u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000010u) {
      p_ = from.p_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGuildLeaderboardCombinedResponse_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildLeaderboardCombinedResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildLeaderboardCombinedResponse_Entry::CopyFrom(const CMsgGuildLeaderboardCombinedResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildLeaderboardCombinedResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildLeaderboardCombinedResponse_Entry::IsInitialized() const {
  return true;
}

void CMsgGuildLeaderboardCombinedResponse_Entry::InternalSwap(CMsgGuildLeaderboardCombinedResponse_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponse_Entry, p_)
      + sizeof(CMsgGuildLeaderboardCombinedResponse_Entry::p_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponse_Entry, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildLeaderboardCombinedResponse_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGuildLeaderboardCombinedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildLeaderboardCombinedResponse>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGuildLeaderboardCombinedResponse::CMsgGuildLeaderboardCombinedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildLeaderboardCombinedResponse)
}
CMsgGuildLeaderboardCombinedResponse::CMsgGuildLeaderboardCombinedResponse(const CMsgGuildLeaderboardCombinedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(last_updated_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildLeaderboardCombinedResponse)
}

void CMsgGuildLeaderboardCombinedResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(last_updated_));
}

CMsgGuildLeaderboardCombinedResponse::~CMsgGuildLeaderboardCombinedResponse() {
  // @@protoc_insertion_point(destructor:CMsgGuildLeaderboardCombinedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildLeaderboardCombinedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGuildLeaderboardCombinedResponse::ArenaDtor(void* object) {
  CMsgGuildLeaderboardCombinedResponse* _this = reinterpret_cast< CMsgGuildLeaderboardCombinedResponse* >(object);
  (void)_this;
}
void CMsgGuildLeaderboardCombinedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildLeaderboardCombinedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildLeaderboardCombinedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildLeaderboardCombinedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_updated_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(last_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildLeaderboardCombinedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_updated(&has_bits);
          last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGuildLeaderboardCombinedResponse.Entry entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildLeaderboardCombinedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildLeaderboardCombinedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_region(), target);
  }

  // optional uint32 last_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_updated(), target);
  }

  // repeated .CMsgGuildLeaderboardCombinedResponse.Entry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildLeaderboardCombinedResponse)
  return target;
}

size_t CMsgGuildLeaderboardCombinedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildLeaderboardCombinedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGuildLeaderboardCombinedResponse.Entry entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 region = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

    // optional uint32 last_updated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_updated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildLeaderboardCombinedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildLeaderboardCombinedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildLeaderboardCombinedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildLeaderboardCombinedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildLeaderboardCombinedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildLeaderboardCombinedResponse)
    MergeFrom(*source);
  }
}

void CMsgGuildLeaderboardCombinedResponse::MergeFrom(const CMsgGuildLeaderboardCombinedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildLeaderboardCombinedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_updated_ = from.last_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGuildLeaderboardCombinedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildLeaderboardCombinedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildLeaderboardCombinedResponse::CopyFrom(const CMsgGuildLeaderboardCombinedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildLeaderboardCombinedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildLeaderboardCombinedResponse::IsInitialized() const {
  return true;
}

void CMsgGuildLeaderboardCombinedResponse::InternalSwap(CMsgGuildLeaderboardCombinedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponse, last_updated_)
      + sizeof(CMsgGuildLeaderboardCombinedResponse::last_updated_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponse, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildLeaderboardCombinedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGuildLeaderboardCombinedResponseV2::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildLeaderboardCombinedResponseV2>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGuildLeaderboardCombinedResponseV2::CMsgGuildLeaderboardCombinedResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_(arena),
  r_(arena),
  c_(arena),
  w_(arena),
  p_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildLeaderboardCombinedResponseV2)
}
CMsgGuildLeaderboardCombinedResponseV2::CMsgGuildLeaderboardCombinedResponseV2(const CMsgGuildLeaderboardCombinedResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      id_(from.id_),
      r_(from.r_),
      c_(from.c_),
      w_(from.w_),
      p_(from.p_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(last_updated_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildLeaderboardCombinedResponseV2)
}

void CMsgGuildLeaderboardCombinedResponseV2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(last_updated_));
}

CMsgGuildLeaderboardCombinedResponseV2::~CMsgGuildLeaderboardCombinedResponseV2() {
  // @@protoc_insertion_point(destructor:CMsgGuildLeaderboardCombinedResponseV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGuildLeaderboardCombinedResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGuildLeaderboardCombinedResponseV2::ArenaDtor(void* object) {
  CMsgGuildLeaderboardCombinedResponseV2* _this = reinterpret_cast< CMsgGuildLeaderboardCombinedResponseV2* >(object);
  (void)_this;
}
void CMsgGuildLeaderboardCombinedResponseV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGuildLeaderboardCombinedResponseV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGuildLeaderboardCombinedResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildLeaderboardCombinedResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  r_.Clear();
  c_.Clear();
  w_.Clear();
  p_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_updated_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(last_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildLeaderboardCombinedResponseV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_updated(&has_bits);
          last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 id = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 r = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_r(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_r(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 c = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_c(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_c(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 w = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_w(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_w(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 p = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_p(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGuildLeaderboardCombinedResponseV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildLeaderboardCombinedResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_region(), target);
  }

  // optional uint32 last_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_updated(), target);
  }

  // repeated uint32 id = 4 [packed = true];
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_id(), byte_size, target);
    }
  }

  // repeated uint32 r = 5 [packed = true];
  {
    int byte_size = _r_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_r(), byte_size, target);
    }
  }

  // repeated uint32 c = 6 [packed = true];
  {
    int byte_size = _c_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_c(), byte_size, target);
    }
  }

  // repeated uint32 w = 7 [packed = true];
  {
    int byte_size = _w_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_w(), byte_size, target);
    }
  }

  // repeated uint32 p = 8 [packed = true];
  {
    int byte_size = _p_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_p(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildLeaderboardCombinedResponseV2)
  return target;
}

size_t CMsgGuildLeaderboardCombinedResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildLeaderboardCombinedResponseV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 r = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->r_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _r_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 c = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->c_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _c_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 w = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->w_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _w_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 p = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->p_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _p_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 region = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

    // optional uint32 last_updated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_updated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildLeaderboardCombinedResponseV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGuildLeaderboardCombinedResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildLeaderboardCombinedResponseV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGuildLeaderboardCombinedResponseV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGuildLeaderboardCombinedResponseV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGuildLeaderboardCombinedResponseV2)
    MergeFrom(*source);
  }
}

void CMsgGuildLeaderboardCombinedResponseV2::MergeFrom(const CMsgGuildLeaderboardCombinedResponseV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildLeaderboardCombinedResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  r_.MergeFrom(from.r_);
  c_.MergeFrom(from.c_);
  w_.MergeFrom(from.w_);
  p_.MergeFrom(from.p_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_updated_ = from.last_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGuildLeaderboardCombinedResponseV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGuildLeaderboardCombinedResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildLeaderboardCombinedResponseV2::CopyFrom(const CMsgGuildLeaderboardCombinedResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildLeaderboardCombinedResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildLeaderboardCombinedResponseV2::IsInitialized() const {
  return true;
}

void CMsgGuildLeaderboardCombinedResponseV2::InternalSwap(CMsgGuildLeaderboardCombinedResponseV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.InternalSwap(&other->id_);
  r_.InternalSwap(&other->r_);
  c_.InternalSwap(&other->c_);
  w_.InternalSwap(&other->w_);
  p_.InternalSwap(&other->p_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponseV2, last_updated_)
      + sizeof(CMsgGuildLeaderboardCombinedResponseV2::last_updated_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponseV2, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildLeaderboardCombinedResponseV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCClaimLeaderboardRewards::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCClaimLeaderboardRewards>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCClaimLeaderboardRewards::CMsgClientToGCClaimLeaderboardRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCClaimLeaderboardRewards)
}
CMsgClientToGCClaimLeaderboardRewards::CMsgClientToGCClaimLeaderboardRewards(const CMsgClientToGCClaimLeaderboardRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCClaimLeaderboardRewards)
}

void CMsgClientToGCClaimLeaderboardRewards::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
}

CMsgClientToGCClaimLeaderboardRewards::~CMsgClientToGCClaimLeaderboardRewards() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCClaimLeaderboardRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCClaimLeaderboardRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCClaimLeaderboardRewards::ArenaDtor(void* object) {
  CMsgClientToGCClaimLeaderboardRewards* _this = reinterpret_cast< CMsgClientToGCClaimLeaderboardRewards* >(object);
  (void)_this;
}
void CMsgClientToGCClaimLeaderboardRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCClaimLeaderboardRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCClaimLeaderboardRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCClaimLeaderboardRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCClaimLeaderboardRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCClaimLeaderboardRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCClaimLeaderboardRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCClaimLeaderboardRewards)
  return target;
}

size_t CMsgClientToGCClaimLeaderboardRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCClaimLeaderboardRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCClaimLeaderboardRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCClaimLeaderboardRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCClaimLeaderboardRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCClaimLeaderboardRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCClaimLeaderboardRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCClaimLeaderboardRewards)
    MergeFrom(*source);
  }
}

void CMsgClientToGCClaimLeaderboardRewards::MergeFrom(const CMsgClientToGCClaimLeaderboardRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCClaimLeaderboardRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCClaimLeaderboardRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCClaimLeaderboardRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCClaimLeaderboardRewards::CopyFrom(const CMsgClientToGCClaimLeaderboardRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCClaimLeaderboardRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCClaimLeaderboardRewards::IsInitialized() const {
  return true;
}

void CMsgClientToGCClaimLeaderboardRewards::InternalSwap(CMsgClientToGCClaimLeaderboardRewards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewards, event_id_)
      + sizeof(CMsgClientToGCClaimLeaderboardRewards::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewards, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCClaimLeaderboardRewards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCClaimLeaderboardRewardsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCClaimLeaderboardRewardsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCClaimLeaderboardRewardsResponse::CMsgClientToGCClaimLeaderboardRewardsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCClaimLeaderboardRewardsResponse)
}
CMsgClientToGCClaimLeaderboardRewardsResponse::CMsgClientToGCClaimLeaderboardRewardsResponse(const CMsgClientToGCClaimLeaderboardRewardsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_points_) -
    reinterpret_cast<char*>(&result_)) + sizeof(event_points_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCClaimLeaderboardRewardsResponse)
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_points_) -
    reinterpret_cast<char*>(&result_)) + sizeof(event_points_));
}

CMsgClientToGCClaimLeaderboardRewardsResponse::~CMsgClientToGCClaimLeaderboardRewardsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCClaimLeaderboardRewardsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::ArenaDtor(void* object) {
  CMsgClientToGCClaimLeaderboardRewardsResponse* _this = reinterpret_cast< CMsgClientToGCClaimLeaderboardRewardsResponse* >(object);
  (void)_this;
}
void CMsgClientToGCClaimLeaderboardRewardsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCClaimLeaderboardRewardsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_points_) -
        reinterpret_cast<char*>(&result_)) + sizeof(event_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCClaimLeaderboardRewardsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCClaimLeaderboardRewardsResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_points(&has_bits);
          event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCClaimLeaderboardRewardsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCClaimLeaderboardRewardsResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCClaimLeaderboardRewardsResponse)
  return target;
}

size_t CMsgClientToGCClaimLeaderboardRewardsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCClaimLeaderboardRewardsResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 event_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCClaimLeaderboardRewardsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCClaimLeaderboardRewardsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCClaimLeaderboardRewardsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCClaimLeaderboardRewardsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::MergeFrom(const CMsgClientToGCClaimLeaderboardRewardsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_points_ = from.event_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::CopyFrom(const CMsgClientToGCClaimLeaderboardRewardsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCClaimLeaderboardRewardsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::InternalSwap(CMsgClientToGCClaimLeaderboardRewardsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewardsResponse, event_points_)
      + sizeof(CMsgClientToGCClaimLeaderboardRewardsResponse::event_points_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewardsResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCClaimLeaderboardRewardsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgGuildContract* Arena::CreateMaybeMessage< ::CMsgGuildContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildContract >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildContractSlot* Arena::CreateMaybeMessage< ::CMsgGuildContractSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildContractSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAccountGuildEventData* Arena::CreateMaybeMessage< ::CMsgAccountGuildEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAccountGuildEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildActiveContracts* Arena::CreateMaybeMessage< ::CMsgGuildActiveContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildActiveContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildChallenge* Arena::CreateMaybeMessage< ::CMsgGuildChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildEventMember* Arena::CreateMaybeMessage< ::CMsgGuildEventMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildEventMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestAccountGuildEventData* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestAccountGuildEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestAccountGuildEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestAccountGuildEventDataResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestAccountGuildEventDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestAccountGuildEventDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientAccountGuildEventDataUpdated* Arena::CreateMaybeMessage< ::CMsgGCToClientAccountGuildEventDataUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientAccountGuildEventDataUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildContracts* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildContractsResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildContractsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildContractsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientActiveGuildContractsUpdated* Arena::CreateMaybeMessage< ::CMsgGCToClientActiveGuildContractsUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientActiveGuildContractsUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSelectGuildContract* Arena::CreateMaybeMessage< ::CMsgClientToGCSelectGuildContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSelectGuildContract >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSelectGuildContractResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCSelectGuildContractResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSelectGuildContractResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildChallenge* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildChallengeResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildChallengeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientActiveGuildChallengeUpdated* Arena::CreateMaybeMessage< ::CMsgGCToClientActiveGuildChallengeUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientActiveGuildChallengeUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestGuildEventMembers* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestGuildEventMembers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestGuildEventMembers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestGuildEventMembersResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestGuildEventMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestGuildEventMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildLeaderboardCombinedResponse_Entry* Arena::CreateMaybeMessage< ::CMsgGuildLeaderboardCombinedResponse_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildLeaderboardCombinedResponse_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildLeaderboardCombinedResponse* Arena::CreateMaybeMessage< ::CMsgGuildLeaderboardCombinedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildLeaderboardCombinedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildLeaderboardCombinedResponseV2* Arena::CreateMaybeMessage< ::CMsgGuildLeaderboardCombinedResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildLeaderboardCombinedResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCClaimLeaderboardRewards* Arena::CreateMaybeMessage< ::CMsgClientToGCClaimLeaderboardRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCClaimLeaderboardRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCClaimLeaderboardRewardsResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCClaimLeaderboardRewardsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCClaimLeaderboardRewardsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
