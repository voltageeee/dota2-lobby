// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clientmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clientmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clientmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clientmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clientmessages_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_clientmessages_2eproto_metadata_getter(int index);
class CClientMsg_ClientUIEvent;
struct CClientMsg_ClientUIEventDefaultTypeInternal;
extern CClientMsg_ClientUIEventDefaultTypeInternal _CClientMsg_ClientUIEvent_default_instance_;
class CClientMsg_CustomGameEvent;
struct CClientMsg_CustomGameEventDefaultTypeInternal;
extern CClientMsg_CustomGameEventDefaultTypeInternal _CClientMsg_CustomGameEvent_default_instance_;
class CClientMsg_CustomGameEventBounce;
struct CClientMsg_CustomGameEventBounceDefaultTypeInternal;
extern CClientMsg_CustomGameEventBounceDefaultTypeInternal _CClientMsg_CustomGameEventBounce_default_instance_;
class CClientMsg_DevPaletteVisibilityChangedEvent;
struct CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal;
extern CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal _CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_;
class CClientMsg_RotateAnchor;
struct CClientMsg_RotateAnchorDefaultTypeInternal;
extern CClientMsg_RotateAnchorDefaultTypeInternal _CClientMsg_RotateAnchor_default_instance_;
class CClientMsg_WorldUIControllerHasPanelChangedEvent;
struct CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal;
extern CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal _CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CClientMsg_ClientUIEvent* Arena::CreateMaybeMessage<::CClientMsg_ClientUIEvent>(Arena*);
template<> ::CClientMsg_CustomGameEvent* Arena::CreateMaybeMessage<::CClientMsg_CustomGameEvent>(Arena*);
template<> ::CClientMsg_CustomGameEventBounce* Arena::CreateMaybeMessage<::CClientMsg_CustomGameEventBounce>(Arena*);
template<> ::CClientMsg_DevPaletteVisibilityChangedEvent* Arena::CreateMaybeMessage<::CClientMsg_DevPaletteVisibilityChangedEvent>(Arena*);
template<> ::CClientMsg_RotateAnchor* Arena::CreateMaybeMessage<::CClientMsg_RotateAnchor>(Arena*);
template<> ::CClientMsg_WorldUIControllerHasPanelChangedEvent* Arena::CreateMaybeMessage<::CClientMsg_WorldUIControllerHasPanelChangedEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EBaseClientMessages : int {
  CM_CustomGameEvent = 280,
  CM_CustomGameEventBounce = 281,
  CM_ClientUIEvent = 282,
  CM_DevPaletteVisibilityChanged = 283,
  CM_WorldUIControllerHasPanelChanged = 284,
  CM_RotateAnchor = 285,
  CM_MAX_BASE = 300
};
bool EBaseClientMessages_IsValid(int value);
constexpr EBaseClientMessages EBaseClientMessages_MIN = CM_CustomGameEvent;
constexpr EBaseClientMessages EBaseClientMessages_MAX = CM_MAX_BASE;
constexpr int EBaseClientMessages_ARRAYSIZE = EBaseClientMessages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseClientMessages_descriptor();
template<typename T>
inline const std::string& EBaseClientMessages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBaseClientMessages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBaseClientMessages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBaseClientMessages_descriptor(), enum_t_value);
}
inline bool EBaseClientMessages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBaseClientMessages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBaseClientMessages>(
    EBaseClientMessages_descriptor(), name, value);
}
enum EClientUIEvent : int {
  EClientUIEvent_Invalid = 0,
  EClientUIEvent_DialogFinished = 1,
  EClientUIEvent_FireOutput = 2
};
bool EClientUIEvent_IsValid(int value);
constexpr EClientUIEvent EClientUIEvent_MIN = EClientUIEvent_Invalid;
constexpr EClientUIEvent EClientUIEvent_MAX = EClientUIEvent_FireOutput;
constexpr int EClientUIEvent_ARRAYSIZE = EClientUIEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientUIEvent_descriptor();
template<typename T>
inline const std::string& EClientUIEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EClientUIEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EClientUIEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EClientUIEvent_descriptor(), enum_t_value);
}
inline bool EClientUIEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EClientUIEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EClientUIEvent>(
    EClientUIEvent_descriptor(), name, value);
}
// ===================================================================

class CClientMsg_CustomGameEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMsg_CustomGameEvent) */ {
 public:
  inline CClientMsg_CustomGameEvent() : CClientMsg_CustomGameEvent(nullptr) {}
  virtual ~CClientMsg_CustomGameEvent();
  explicit constexpr CClientMsg_CustomGameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMsg_CustomGameEvent(const CClientMsg_CustomGameEvent& from);
  CClientMsg_CustomGameEvent(CClientMsg_CustomGameEvent&& from) noexcept
    : CClientMsg_CustomGameEvent() {
    *this = ::std::move(from);
  }

  inline CClientMsg_CustomGameEvent& operator=(const CClientMsg_CustomGameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMsg_CustomGameEvent& operator=(CClientMsg_CustomGameEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClientMsg_CustomGameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMsg_CustomGameEvent* internal_default_instance() {
    return reinterpret_cast<const CClientMsg_CustomGameEvent*>(
               &_CClientMsg_CustomGameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CClientMsg_CustomGameEvent& a, CClientMsg_CustomGameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMsg_CustomGameEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMsg_CustomGameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClientMsg_CustomGameEvent* New() const final {
    return CreateMaybeMessage<CClientMsg_CustomGameEvent>(nullptr);
  }

  CClientMsg_CustomGameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClientMsg_CustomGameEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClientMsg_CustomGameEvent& from);
  void MergeFrom(const CClientMsg_CustomGameEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMsg_CustomGameEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMsg_CustomGameEvent";
  }
  protected:
  explicit CClientMsg_CustomGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_clientmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // optional string event_name = 1;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CClientMsg_CustomGameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_clientmessages_2eproto;
};
// -------------------------------------------------------------------

class CClientMsg_CustomGameEventBounce PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMsg_CustomGameEventBounce) */ {
 public:
  inline CClientMsg_CustomGameEventBounce() : CClientMsg_CustomGameEventBounce(nullptr) {}
  virtual ~CClientMsg_CustomGameEventBounce();
  explicit constexpr CClientMsg_CustomGameEventBounce(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMsg_CustomGameEventBounce(const CClientMsg_CustomGameEventBounce& from);
  CClientMsg_CustomGameEventBounce(CClientMsg_CustomGameEventBounce&& from) noexcept
    : CClientMsg_CustomGameEventBounce() {
    *this = ::std::move(from);
  }

  inline CClientMsg_CustomGameEventBounce& operator=(const CClientMsg_CustomGameEventBounce& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMsg_CustomGameEventBounce& operator=(CClientMsg_CustomGameEventBounce&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClientMsg_CustomGameEventBounce& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMsg_CustomGameEventBounce* internal_default_instance() {
    return reinterpret_cast<const CClientMsg_CustomGameEventBounce*>(
               &_CClientMsg_CustomGameEventBounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CClientMsg_CustomGameEventBounce& a, CClientMsg_CustomGameEventBounce& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMsg_CustomGameEventBounce* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMsg_CustomGameEventBounce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClientMsg_CustomGameEventBounce* New() const final {
    return CreateMaybeMessage<CClientMsg_CustomGameEventBounce>(nullptr);
  }

  CClientMsg_CustomGameEventBounce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClientMsg_CustomGameEventBounce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClientMsg_CustomGameEventBounce& from);
  void MergeFrom(const CClientMsg_CustomGameEventBounce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMsg_CustomGameEventBounce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMsg_CustomGameEventBounce";
  }
  protected:
  explicit CClientMsg_CustomGameEventBounce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_clientmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kPlayerIndexFieldNumber = 3,
  };
  // optional string event_name = 1;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 player_index = 3;
  bool has_player_index() const;
  private:
  bool _internal_has_player_index() const;
  public:
  void clear_player_index();
  ::PROTOBUF_NAMESPACE_ID::int32 player_index() const;
  void set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_index() const;
  void _internal_set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMsg_CustomGameEventBounce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_index_;
  friend struct ::TableStruct_clientmessages_2eproto;
};
// -------------------------------------------------------------------

class CClientMsg_ClientUIEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMsg_ClientUIEvent) */ {
 public:
  inline CClientMsg_ClientUIEvent() : CClientMsg_ClientUIEvent(nullptr) {}
  virtual ~CClientMsg_ClientUIEvent();
  explicit constexpr CClientMsg_ClientUIEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMsg_ClientUIEvent(const CClientMsg_ClientUIEvent& from);
  CClientMsg_ClientUIEvent(CClientMsg_ClientUIEvent&& from) noexcept
    : CClientMsg_ClientUIEvent() {
    *this = ::std::move(from);
  }

  inline CClientMsg_ClientUIEvent& operator=(const CClientMsg_ClientUIEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMsg_ClientUIEvent& operator=(CClientMsg_ClientUIEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClientMsg_ClientUIEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMsg_ClientUIEvent* internal_default_instance() {
    return reinterpret_cast<const CClientMsg_ClientUIEvent*>(
               &_CClientMsg_ClientUIEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CClientMsg_ClientUIEvent& a, CClientMsg_ClientUIEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMsg_ClientUIEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMsg_ClientUIEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClientMsg_ClientUIEvent* New() const final {
    return CreateMaybeMessage<CClientMsg_ClientUIEvent>(nullptr);
  }

  CClientMsg_ClientUIEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClientMsg_ClientUIEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClientMsg_ClientUIEvent& from);
  void MergeFrom(const CClientMsg_ClientUIEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMsg_ClientUIEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMsg_ClientUIEvent";
  }
  protected:
  explicit CClientMsg_ClientUIEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_clientmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kData1FieldNumber = 4,
    kData2FieldNumber = 5,
    kEventFieldNumber = 1,
    kEntEhandleFieldNumber = 2,
    kClientEhandleFieldNumber = 3,
  };
  // optional string data1 = 4;
  bool has_data1() const;
  private:
  bool _internal_has_data1() const;
  public:
  void clear_data1();
  const std::string& data1() const;
  void set_data1(const std::string& value);
  void set_data1(std::string&& value);
  void set_data1(const char* value);
  void set_data1(const char* value, size_t size);
  std::string* mutable_data1();
  std::string* release_data1();
  void set_allocated_data1(std::string* data1);
  private:
  const std::string& _internal_data1() const;
  void _internal_set_data1(const std::string& value);
  std::string* _internal_mutable_data1();
  public:

  // optional string data2 = 5;
  bool has_data2() const;
  private:
  bool _internal_has_data2() const;
  public:
  void clear_data2();
  const std::string& data2() const;
  void set_data2(const std::string& value);
  void set_data2(std::string&& value);
  void set_data2(const char* value);
  void set_data2(const char* value, size_t size);
  std::string* mutable_data2();
  std::string* release_data2();
  void set_allocated_data2(std::string* data2);
  private:
  const std::string& _internal_data2() const;
  void _internal_set_data2(const std::string& value);
  std::string* _internal_mutable_data2();
  public:

  // optional .EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::EClientUIEvent event() const;
  void set_event(::EClientUIEvent value);
  private:
  ::EClientUIEvent _internal_event() const;
  void _internal_set_event(::EClientUIEvent value);
  public:

  // optional uint32 ent_ehandle = 2;
  bool has_ent_ehandle() const;
  private:
  bool _internal_has_ent_ehandle() const;
  public:
  void clear_ent_ehandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 ent_ehandle() const;
  void set_ent_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ent_ehandle() const;
  void _internal_set_ent_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_ehandle = 3;
  bool has_client_ehandle() const;
  private:
  bool _internal_has_client_ehandle() const;
  public:
  void clear_client_ehandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_ehandle() const;
  void set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_ehandle() const;
  void _internal_set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMsg_ClientUIEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data2_;
  int event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ent_ehandle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_ehandle_;
  friend struct ::TableStruct_clientmessages_2eproto;
};
// -------------------------------------------------------------------

class CClientMsg_DevPaletteVisibilityChangedEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMsg_DevPaletteVisibilityChangedEvent) */ {
 public:
  inline CClientMsg_DevPaletteVisibilityChangedEvent() : CClientMsg_DevPaletteVisibilityChangedEvent(nullptr) {}
  virtual ~CClientMsg_DevPaletteVisibilityChangedEvent();
  explicit constexpr CClientMsg_DevPaletteVisibilityChangedEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMsg_DevPaletteVisibilityChangedEvent(const CClientMsg_DevPaletteVisibilityChangedEvent& from);
  CClientMsg_DevPaletteVisibilityChangedEvent(CClientMsg_DevPaletteVisibilityChangedEvent&& from) noexcept
    : CClientMsg_DevPaletteVisibilityChangedEvent() {
    *this = ::std::move(from);
  }

  inline CClientMsg_DevPaletteVisibilityChangedEvent& operator=(const CClientMsg_DevPaletteVisibilityChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMsg_DevPaletteVisibilityChangedEvent& operator=(CClientMsg_DevPaletteVisibilityChangedEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClientMsg_DevPaletteVisibilityChangedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMsg_DevPaletteVisibilityChangedEvent* internal_default_instance() {
    return reinterpret_cast<const CClientMsg_DevPaletteVisibilityChangedEvent*>(
               &_CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CClientMsg_DevPaletteVisibilityChangedEvent& a, CClientMsg_DevPaletteVisibilityChangedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMsg_DevPaletteVisibilityChangedEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMsg_DevPaletteVisibilityChangedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClientMsg_DevPaletteVisibilityChangedEvent* New() const final {
    return CreateMaybeMessage<CClientMsg_DevPaletteVisibilityChangedEvent>(nullptr);
  }

  CClientMsg_DevPaletteVisibilityChangedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClientMsg_DevPaletteVisibilityChangedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from);
  void MergeFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMsg_DevPaletteVisibilityChangedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMsg_DevPaletteVisibilityChangedEvent";
  }
  protected:
  explicit CClientMsg_DevPaletteVisibilityChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_clientmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibleFieldNumber = 1,
  };
  // optional bool visible = 1;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMsg_DevPaletteVisibilityChangedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool visible_;
  friend struct ::TableStruct_clientmessages_2eproto;
};
// -------------------------------------------------------------------

class CClientMsg_WorldUIControllerHasPanelChangedEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMsg_WorldUIControllerHasPanelChangedEvent) */ {
 public:
  inline CClientMsg_WorldUIControllerHasPanelChangedEvent() : CClientMsg_WorldUIControllerHasPanelChangedEvent(nullptr) {}
  virtual ~CClientMsg_WorldUIControllerHasPanelChangedEvent();
  explicit constexpr CClientMsg_WorldUIControllerHasPanelChangedEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMsg_WorldUIControllerHasPanelChangedEvent(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from);
  CClientMsg_WorldUIControllerHasPanelChangedEvent(CClientMsg_WorldUIControllerHasPanelChangedEvent&& from) noexcept
    : CClientMsg_WorldUIControllerHasPanelChangedEvent() {
    *this = ::std::move(from);
  }

  inline CClientMsg_WorldUIControllerHasPanelChangedEvent& operator=(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMsg_WorldUIControllerHasPanelChangedEvent& operator=(CClientMsg_WorldUIControllerHasPanelChangedEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClientMsg_WorldUIControllerHasPanelChangedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMsg_WorldUIControllerHasPanelChangedEvent* internal_default_instance() {
    return reinterpret_cast<const CClientMsg_WorldUIControllerHasPanelChangedEvent*>(
               &_CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CClientMsg_WorldUIControllerHasPanelChangedEvent& a, CClientMsg_WorldUIControllerHasPanelChangedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClientMsg_WorldUIControllerHasPanelChangedEvent* New() const final {
    return CreateMaybeMessage<CClientMsg_WorldUIControllerHasPanelChangedEvent>(nullptr);
  }

  CClientMsg_WorldUIControllerHasPanelChangedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClientMsg_WorldUIControllerHasPanelChangedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from);
  void MergeFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMsg_WorldUIControllerHasPanelChangedEvent";
  }
  protected:
  explicit CClientMsg_WorldUIControllerHasPanelChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_clientmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasPanelFieldNumber = 1,
    kClientEhandleFieldNumber = 2,
    kLiteralHandTypeFieldNumber = 3,
  };
  // optional bool has_panel = 1;
  bool has_has_panel() const;
  private:
  bool _internal_has_has_panel() const;
  public:
  void clear_has_panel();
  bool has_panel() const;
  void set_has_panel(bool value);
  private:
  bool _internal_has_panel() const;
  void _internal_set_has_panel(bool value);
  public:

  // optional uint32 client_ehandle = 2;
  bool has_client_ehandle() const;
  private:
  bool _internal_has_client_ehandle() const;
  public:
  void clear_client_ehandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_ehandle() const;
  void set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_ehandle() const;
  void _internal_set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 literal_hand_type = 3;
  bool has_literal_hand_type() const;
  private:
  bool _internal_has_literal_hand_type() const;
  public:
  void clear_literal_hand_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 literal_hand_type() const;
  void set_literal_hand_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_literal_hand_type() const;
  void _internal_set_literal_hand_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMsg_WorldUIControllerHasPanelChangedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool has_panel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_ehandle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 literal_hand_type_;
  friend struct ::TableStruct_clientmessages_2eproto;
};
// -------------------------------------------------------------------

class CClientMsg_RotateAnchor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMsg_RotateAnchor) */ {
 public:
  inline CClientMsg_RotateAnchor() : CClientMsg_RotateAnchor(nullptr) {}
  virtual ~CClientMsg_RotateAnchor();
  explicit constexpr CClientMsg_RotateAnchor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMsg_RotateAnchor(const CClientMsg_RotateAnchor& from);
  CClientMsg_RotateAnchor(CClientMsg_RotateAnchor&& from) noexcept
    : CClientMsg_RotateAnchor() {
    *this = ::std::move(from);
  }

  inline CClientMsg_RotateAnchor& operator=(const CClientMsg_RotateAnchor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMsg_RotateAnchor& operator=(CClientMsg_RotateAnchor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClientMsg_RotateAnchor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMsg_RotateAnchor* internal_default_instance() {
    return reinterpret_cast<const CClientMsg_RotateAnchor*>(
               &_CClientMsg_RotateAnchor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CClientMsg_RotateAnchor& a, CClientMsg_RotateAnchor& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMsg_RotateAnchor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMsg_RotateAnchor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClientMsg_RotateAnchor* New() const final {
    return CreateMaybeMessage<CClientMsg_RotateAnchor>(nullptr);
  }

  CClientMsg_RotateAnchor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClientMsg_RotateAnchor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClientMsg_RotateAnchor& from);
  void MergeFrom(const CClientMsg_RotateAnchor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMsg_RotateAnchor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMsg_RotateAnchor";
  }
  protected:
  explicit CClientMsg_RotateAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_clientmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
  };
  // optional float angle = 1;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMsg_RotateAnchor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float angle_;
  friend struct ::TableStruct_clientmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CClientMsg_CustomGameEvent

// optional string event_name = 1;
inline bool CClientMsg_CustomGameEvent::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMsg_CustomGameEvent::has_event_name() const {
  return _internal_has_event_name();
}
inline void CClientMsg_CustomGameEvent::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMsg_CustomGameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEvent.event_name)
  return _internal_event_name();
}
inline void CClientMsg_CustomGameEvent::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEvent.event_name)
}
inline std::string* CClientMsg_CustomGameEvent::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEvent.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& CClientMsg_CustomGameEvent::_internal_event_name() const {
  return event_name_.Get();
}
inline void CClientMsg_CustomGameEvent::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClientMsg_CustomGameEvent::set_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClientMsg_CustomGameEvent.event_name)
}
inline void CClientMsg_CustomGameEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEvent.event_name)
}
inline void CClientMsg_CustomGameEvent::set_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEvent.event_name)
}
inline std::string* CClientMsg_CustomGameEvent::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClientMsg_CustomGameEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:CClientMsg_CustomGameEvent.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClientMsg_CustomGameEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEvent.event_name)
}

// optional bytes data = 2;
inline bool CClientMsg_CustomGameEvent::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMsg_CustomGameEvent::has_data() const {
  return _internal_has_data();
}
inline void CClientMsg_CustomGameEvent::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMsg_CustomGameEvent::data() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEvent.data)
  return _internal_data();
}
inline void CClientMsg_CustomGameEvent::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEvent.data)
}
inline std::string* CClientMsg_CustomGameEvent::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEvent.data)
  return _internal_mutable_data();
}
inline const std::string& CClientMsg_CustomGameEvent::_internal_data() const {
  return data_.Get();
}
inline void CClientMsg_CustomGameEvent::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClientMsg_CustomGameEvent::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClientMsg_CustomGameEvent.data)
}
inline void CClientMsg_CustomGameEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEvent.data)
}
inline void CClientMsg_CustomGameEvent::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEvent.data)
}
inline std::string* CClientMsg_CustomGameEvent::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClientMsg_CustomGameEvent::release_data() {
  // @@protoc_insertion_point(field_release:CClientMsg_CustomGameEvent.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClientMsg_CustomGameEvent::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEvent.data)
}

// -------------------------------------------------------------------

// CClientMsg_CustomGameEventBounce

// optional string event_name = 1;
inline bool CClientMsg_CustomGameEventBounce::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMsg_CustomGameEventBounce::has_event_name() const {
  return _internal_has_event_name();
}
inline void CClientMsg_CustomGameEventBounce::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMsg_CustomGameEventBounce::event_name() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEventBounce.event_name)
  return _internal_event_name();
}
inline void CClientMsg_CustomGameEventBounce::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEventBounce.event_name)
}
inline std::string* CClientMsg_CustomGameEventBounce::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEventBounce.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& CClientMsg_CustomGameEventBounce::_internal_event_name() const {
  return event_name_.Get();
}
inline void CClientMsg_CustomGameEventBounce::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClientMsg_CustomGameEventBounce::set_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClientMsg_CustomGameEventBounce.event_name)
}
inline void CClientMsg_CustomGameEventBounce::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEventBounce.event_name)
}
inline void CClientMsg_CustomGameEventBounce::set_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEventBounce.event_name)
}
inline std::string* CClientMsg_CustomGameEventBounce::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClientMsg_CustomGameEventBounce::release_event_name() {
  // @@protoc_insertion_point(field_release:CClientMsg_CustomGameEventBounce.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClientMsg_CustomGameEventBounce::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEventBounce.event_name)
}

// optional bytes data = 2;
inline bool CClientMsg_CustomGameEventBounce::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMsg_CustomGameEventBounce::has_data() const {
  return _internal_has_data();
}
inline void CClientMsg_CustomGameEventBounce::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMsg_CustomGameEventBounce::data() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEventBounce.data)
  return _internal_data();
}
inline void CClientMsg_CustomGameEventBounce::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEventBounce.data)
}
inline std::string* CClientMsg_CustomGameEventBounce::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEventBounce.data)
  return _internal_mutable_data();
}
inline const std::string& CClientMsg_CustomGameEventBounce::_internal_data() const {
  return data_.Get();
}
inline void CClientMsg_CustomGameEventBounce::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClientMsg_CustomGameEventBounce::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClientMsg_CustomGameEventBounce.data)
}
inline void CClientMsg_CustomGameEventBounce::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEventBounce.data)
}
inline void CClientMsg_CustomGameEventBounce::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEventBounce.data)
}
inline std::string* CClientMsg_CustomGameEventBounce::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClientMsg_CustomGameEventBounce::release_data() {
  // @@protoc_insertion_point(field_release:CClientMsg_CustomGameEventBounce.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClientMsg_CustomGameEventBounce::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEventBounce.data)
}

// optional int32 player_index = 3;
inline bool CClientMsg_CustomGameEventBounce::_internal_has_player_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMsg_CustomGameEventBounce::has_player_index() const {
  return _internal_has_player_index();
}
inline void CClientMsg_CustomGameEventBounce::clear_player_index() {
  player_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClientMsg_CustomGameEventBounce::_internal_player_index() const {
  return player_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClientMsg_CustomGameEventBounce::player_index() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEventBounce.player_index)
  return _internal_player_index();
}
inline void CClientMsg_CustomGameEventBounce::_internal_set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_index_ = value;
}
inline void CClientMsg_CustomGameEventBounce::set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEventBounce.player_index)
}

// -------------------------------------------------------------------

// CClientMsg_ClientUIEvent

// optional .EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
inline bool CClientMsg_ClientUIEvent::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMsg_ClientUIEvent::has_event() const {
  return _internal_has_event();
}
inline void CClientMsg_ClientUIEvent::clear_event() {
  event_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EClientUIEvent CClientMsg_ClientUIEvent::_internal_event() const {
  return static_cast< ::EClientUIEvent >(event_);
}
inline ::EClientUIEvent CClientMsg_ClientUIEvent::event() const {
  // @@protoc_insertion_point(field_get:CClientMsg_ClientUIEvent.event)
  return _internal_event();
}
inline void CClientMsg_ClientUIEvent::_internal_set_event(::EClientUIEvent value) {
  assert(::EClientUIEvent_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  event_ = value;
}
inline void CClientMsg_ClientUIEvent::set_event(::EClientUIEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:CClientMsg_ClientUIEvent.event)
}

// optional uint32 ent_ehandle = 2;
inline bool CClientMsg_ClientUIEvent::_internal_has_ent_ehandle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientMsg_ClientUIEvent::has_ent_ehandle() const {
  return _internal_has_ent_ehandle();
}
inline void CClientMsg_ClientUIEvent::clear_ent_ehandle() {
  ent_ehandle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_ClientUIEvent::_internal_ent_ehandle() const {
  return ent_ehandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_ClientUIEvent::ent_ehandle() const {
  // @@protoc_insertion_point(field_get:CClientMsg_ClientUIEvent.ent_ehandle)
  return _internal_ent_ehandle();
}
inline void CClientMsg_ClientUIEvent::_internal_set_ent_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ent_ehandle_ = value;
}
inline void CClientMsg_ClientUIEvent::set_ent_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ent_ehandle(value);
  // @@protoc_insertion_point(field_set:CClientMsg_ClientUIEvent.ent_ehandle)
}

// optional uint32 client_ehandle = 3;
inline bool CClientMsg_ClientUIEvent::_internal_has_client_ehandle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClientMsg_ClientUIEvent::has_client_ehandle() const {
  return _internal_has_client_ehandle();
}
inline void CClientMsg_ClientUIEvent::clear_client_ehandle() {
  client_ehandle_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_ClientUIEvent::_internal_client_ehandle() const {
  return client_ehandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_ClientUIEvent::client_ehandle() const {
  // @@protoc_insertion_point(field_get:CClientMsg_ClientUIEvent.client_ehandle)
  return _internal_client_ehandle();
}
inline void CClientMsg_ClientUIEvent::_internal_set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  client_ehandle_ = value;
}
inline void CClientMsg_ClientUIEvent::set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_ehandle(value);
  // @@protoc_insertion_point(field_set:CClientMsg_ClientUIEvent.client_ehandle)
}

// optional string data1 = 4;
inline bool CClientMsg_ClientUIEvent::_internal_has_data1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMsg_ClientUIEvent::has_data1() const {
  return _internal_has_data1();
}
inline void CClientMsg_ClientUIEvent::clear_data1() {
  data1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMsg_ClientUIEvent::data1() const {
  // @@protoc_insertion_point(field_get:CClientMsg_ClientUIEvent.data1)
  return _internal_data1();
}
inline void CClientMsg_ClientUIEvent::set_data1(const std::string& value) {
  _internal_set_data1(value);
  // @@protoc_insertion_point(field_set:CClientMsg_ClientUIEvent.data1)
}
inline std::string* CClientMsg_ClientUIEvent::mutable_data1() {
  // @@protoc_insertion_point(field_mutable:CClientMsg_ClientUIEvent.data1)
  return _internal_mutable_data1();
}
inline const std::string& CClientMsg_ClientUIEvent::_internal_data1() const {
  return data1_.Get();
}
inline void CClientMsg_ClientUIEvent::_internal_set_data1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClientMsg_ClientUIEvent::set_data1(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClientMsg_ClientUIEvent.data1)
}
inline void CClientMsg_ClientUIEvent::set_data1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClientMsg_ClientUIEvent.data1)
}
inline void CClientMsg_ClientUIEvent::set_data1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_ClientUIEvent.data1)
}
inline std::string* CClientMsg_ClientUIEvent::_internal_mutable_data1() {
  _has_bits_[0] |= 0x00000001u;
  return data1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClientMsg_ClientUIEvent::release_data1() {
  // @@protoc_insertion_point(field_release:CClientMsg_ClientUIEvent.data1)
  if (!_internal_has_data1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClientMsg_ClientUIEvent::set_allocated_data1(std::string* data1) {
  if (data1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_ClientUIEvent.data1)
}

// optional string data2 = 5;
inline bool CClientMsg_ClientUIEvent::_internal_has_data2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMsg_ClientUIEvent::has_data2() const {
  return _internal_has_data2();
}
inline void CClientMsg_ClientUIEvent::clear_data2() {
  data2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMsg_ClientUIEvent::data2() const {
  // @@protoc_insertion_point(field_get:CClientMsg_ClientUIEvent.data2)
  return _internal_data2();
}
inline void CClientMsg_ClientUIEvent::set_data2(const std::string& value) {
  _internal_set_data2(value);
  // @@protoc_insertion_point(field_set:CClientMsg_ClientUIEvent.data2)
}
inline std::string* CClientMsg_ClientUIEvent::mutable_data2() {
  // @@protoc_insertion_point(field_mutable:CClientMsg_ClientUIEvent.data2)
  return _internal_mutable_data2();
}
inline const std::string& CClientMsg_ClientUIEvent::_internal_data2() const {
  return data2_.Get();
}
inline void CClientMsg_ClientUIEvent::_internal_set_data2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClientMsg_ClientUIEvent::set_data2(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClientMsg_ClientUIEvent.data2)
}
inline void CClientMsg_ClientUIEvent::set_data2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClientMsg_ClientUIEvent.data2)
}
inline void CClientMsg_ClientUIEvent::set_data2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_ClientUIEvent.data2)
}
inline std::string* CClientMsg_ClientUIEvent::_internal_mutable_data2() {
  _has_bits_[0] |= 0x00000002u;
  return data2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClientMsg_ClientUIEvent::release_data2() {
  // @@protoc_insertion_point(field_release:CClientMsg_ClientUIEvent.data2)
  if (!_internal_has_data2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClientMsg_ClientUIEvent::set_allocated_data2(std::string* data2) {
  if (data2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_ClientUIEvent.data2)
}

// -------------------------------------------------------------------

// CClientMsg_DevPaletteVisibilityChangedEvent

// optional bool visible = 1;
inline bool CClientMsg_DevPaletteVisibilityChangedEvent::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMsg_DevPaletteVisibilityChangedEvent::has_visible() const {
  return _internal_has_visible();
}
inline void CClientMsg_DevPaletteVisibilityChangedEvent::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CClientMsg_DevPaletteVisibilityChangedEvent::_internal_visible() const {
  return visible_;
}
inline bool CClientMsg_DevPaletteVisibilityChangedEvent::visible() const {
  // @@protoc_insertion_point(field_get:CClientMsg_DevPaletteVisibilityChangedEvent.visible)
  return _internal_visible();
}
inline void CClientMsg_DevPaletteVisibilityChangedEvent::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000001u;
  visible_ = value;
}
inline void CClientMsg_DevPaletteVisibilityChangedEvent::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:CClientMsg_DevPaletteVisibilityChangedEvent.visible)
}

// -------------------------------------------------------------------

// CClientMsg_WorldUIControllerHasPanelChangedEvent

// optional bool has_panel = 1;
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_has_has_panel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_has_panel() const {
  return _internal_has_has_panel();
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_has_panel() {
  has_panel_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_has_panel() const {
  return has_panel_;
}
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_panel() const {
  // @@protoc_insertion_point(field_get:CClientMsg_WorldUIControllerHasPanelChangedEvent.has_panel)
  return _internal_has_panel();
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_set_has_panel(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_panel_ = value;
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_has_panel(bool value) {
  _internal_set_has_panel(value);
  // @@protoc_insertion_point(field_set:CClientMsg_WorldUIControllerHasPanelChangedEvent.has_panel)
}

// optional uint32 client_ehandle = 2;
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_has_client_ehandle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_client_ehandle() const {
  return _internal_has_client_ehandle();
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_client_ehandle() {
  client_ehandle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_client_ehandle() const {
  return client_ehandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_WorldUIControllerHasPanelChangedEvent::client_ehandle() const {
  // @@protoc_insertion_point(field_get:CClientMsg_WorldUIControllerHasPanelChangedEvent.client_ehandle)
  return _internal_client_ehandle();
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_ehandle_ = value;
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_client_ehandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_ehandle(value);
  // @@protoc_insertion_point(field_set:CClientMsg_WorldUIControllerHasPanelChangedEvent.client_ehandle)
}

// optional uint32 literal_hand_type = 3;
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_has_literal_hand_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_literal_hand_type() const {
  return _internal_has_literal_hand_type();
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_literal_hand_type() {
  literal_hand_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_literal_hand_type() const {
  return literal_hand_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientMsg_WorldUIControllerHasPanelChangedEvent::literal_hand_type() const {
  // @@protoc_insertion_point(field_get:CClientMsg_WorldUIControllerHasPanelChangedEvent.literal_hand_type)
  return _internal_literal_hand_type();
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::_internal_set_literal_hand_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  literal_hand_type_ = value;
}
inline void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_literal_hand_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_literal_hand_type(value);
  // @@protoc_insertion_point(field_set:CClientMsg_WorldUIControllerHasPanelChangedEvent.literal_hand_type)
}

// -------------------------------------------------------------------

// CClientMsg_RotateAnchor

// optional float angle = 1;
inline bool CClientMsg_RotateAnchor::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMsg_RotateAnchor::has_angle() const {
  return _internal_has_angle();
}
inline void CClientMsg_RotateAnchor::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CClientMsg_RotateAnchor::_internal_angle() const {
  return angle_;
}
inline float CClientMsg_RotateAnchor::angle() const {
  // @@protoc_insertion_point(field_get:CClientMsg_RotateAnchor.angle)
  return _internal_angle();
}
inline void CClientMsg_RotateAnchor::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000001u;
  angle_ = value;
}
inline void CClientMsg_RotateAnchor::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:CClientMsg_RotateAnchor.angle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EBaseClientMessages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBaseClientMessages>() {
  return ::EBaseClientMessages_descriptor();
}
template <> struct is_proto_enum< ::EClientUIEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EClientUIEvent>() {
  return ::EClientUIEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clientmessages_2eproto
