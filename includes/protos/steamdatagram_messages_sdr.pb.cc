// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_sdr.proto

#include "steamdatagram_messages_sdr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_center_id_(0u)
  , flags_(0u)
  , penalty_(0u){}
struct CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal {
  constexpr CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply_RouteException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_RouteException_default_instance_;
constexpr CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipv4_(0u)
  , port_(0u)
  , penalty_(0u)
  , protocol_(0)
{}
struct CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal {
  constexpr CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply_AltAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_;
constexpr CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latency_datacenter_ids_()
  , _latency_datacenter_ids_cached_byte_size_()
  , latency_ping_ms_()
  , _latency_ping_ms_cached_byte_size_()
  , route_exceptions_()
  , alt_addresses_()
  , latency_datacenter_ids_p2p_()
  , _latency_datacenter_ids_p2p_cached_byte_size_()
  , latency_ping_ms_p2p_()
  , _latency_ping_ms_p2p_cached_byte_size_()
  , client_timestamp_(0u)
  , your_public_ip_(0u)
  , challenge_(PROTOBUF_ULONGLONG(0))
  , server_time_(0u)
  , seconds_until_shutdown_(0u)
  , client_cookie_(0u)
  , scoring_penalty_relay_cluster_(0u)
  , your_public_port_(0u)
  , flags_(0u){}
struct CMsgSteamDatagramRouterPingReplyDefaultTypeInternal {
  constexpr CMsgSteamDatagramRouterPingReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramRouterPingReplyDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_default_instance_;
constexpr CMsgSteamDatagramGameserverPingRequest::CMsgSteamDatagramGameserverPingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : your_public_ip_(0u)
  , server_time_(0u)
  , challenge_(PROTOBUF_ULONGLONG(0))
  , router_timestamp_(0u)
  , your_public_port_(0u){}
struct CMsgSteamDatagramGameserverPingRequestDefaultTypeInternal {
  constexpr CMsgSteamDatagramGameserverPingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramGameserverPingRequestDefaultTypeInternal _CMsgSteamDatagramGameserverPingRequest_default_instance_;
constexpr CMsgSteamDatagramLegacyGameserverPingReply::CMsgSteamDatagramLegacyGameserverPingReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : router_timestamp_(0u)
  , dummy_pad_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSteamDatagramLegacyGameserverPingReplyDefaultTypeInternal {
  constexpr CMsgSteamDatagramLegacyGameserverPingReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramLegacyGameserverPingReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramLegacyGameserverPingReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramLegacyGameserverPingReplyDefaultTypeInternal _CMsgSteamDatagramLegacyGameserverPingReply_default_instance_;
constexpr CMsgSteamDatagramGameserverPingReply_SignedData::CMsgSteamDatagramGameserverPingReply_SignedData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : challenge_(PROTOBUF_ULONGLONG(0))
  , challenge_time_(0u)
  , router_timestamp_(0u)
  , data_center_id_(0u)
  , appid_(0u){}
struct CMsgSteamDatagramGameserverPingReply_SignedDataDefaultTypeInternal {
  constexpr CMsgSteamDatagramGameserverPingReply_SignedDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingReply_SignedDataDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingReply_SignedData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramGameserverPingReply_SignedDataDefaultTypeInternal _CMsgSteamDatagramGameserverPingReply_SignedData_default_instance_;
constexpr CMsgSteamDatagramGameserverPingReply::CMsgSteamDatagramGameserverPingReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signed_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_(nullptr){}
struct CMsgSteamDatagramGameserverPingReplyDefaultTypeInternal {
  constexpr CMsgSteamDatagramGameserverPingReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramGameserverPingReplyDefaultTypeInternal _CMsgSteamDatagramGameserverPingReply_default_instance_;
constexpr CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : your_public_ip_(0u)
  , server_time_(0u)
  , challenge_(PROTOBUF_ULONGLONG(0))
  , seconds_until_shutdown_(0u)
  , your_public_port_(0u)
  , connection_id_(0u){}
struct CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal {
  constexpr CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoSessionRelayToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToClient_default_instance_;
constexpr CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : legacy_relay_session_id_(0u)
  , from_relay_session_id_(0u)
  , from_connection_id_(0u)
  , kludge_pad_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal {
  constexpr CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoSessionRelayToPeer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToPeer_default_instance_;
constexpr CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_id_(0u){}
struct CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal {
  constexpr CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal _CMsgSteamDatagramClientPingSampleRequest_default_instance_;
constexpr CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , front_ping_ms_(0u)
  , penalty_(0u){}
struct CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal {
  constexpr CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_POP_AltAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_;
constexpr CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alt_addresses_()
  , pop_id_(0u)
  , default_front_ping_ms_(0u)
  , default_e2e_ping_ms_(0u)
  , cluster_penalty_(0u)
  , default_e2e_score_(0u)
  , p2p_via_peer_relay_pop_id_(0u)
  , best_dc_ping_ms_(0u)
  , best_dc_score_(0u)
  , best_dc_via_relay_pop_id_(0u)
  , default_dc_ping_ms_(0u)
  , default_dc_score_(0u)
  , default_dc_via_relay_pop_id_(0u)
  , test_dc_ping_ms_(0u)
  , test_dc_score_(0u)
  , test_dc_via_relay_pop_id_(0u){}
struct CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal {
  constexpr CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_POP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_POP_default_instance_;
constexpr CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_center_id_(0u)
  , best_dc_via_relay_pop_id_(0u)
  , best_dc_ping_ms_(0u){}
struct CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal {
  constexpr CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_;
constexpr CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pops_()
  , legacy_data_centers_()
  , connection_id_(0u)
  , override_active_(false){}
struct CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal {
  constexpr CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_default_instance_;
constexpr CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : score_(0u)
  , front_ping_(0u)
  , back_ping_(0u)
  , seconds_until_down_(0u){}
struct CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal {
  constexpr CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientSwitchedPrimary_RouterQuality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;
constexpr CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_dropped_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_quality_now_(nullptr)
  , to_quality_now_(nullptr)
  , from_quality_then_(nullptr)
  , to_quality_then_(nullptr)
  , connection_id_(0u)
  , from_ip_(0u)
  , from_port_(0u)
  , from_router_cluster_(0u)
  , from_active_time_(0u)
  , from_active_packets_recv_(0u)
  , gap_ms_(0u){}
struct CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal {
  constexpr CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientSwitchedPrimary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_default_instance_;
constexpr CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crypt_(nullptr)
  , cert_(nullptr)
  , connection_id_(0u)
  , gameserver_relay_session_id_(0u)
  , legacy_client_steam_id_(PROTOBUF_ULONGLONG(0))
  , my_timestamp_(PROTOBUF_ULONGLONG(0))
  , ping_est_ms_(0u)
  , virtual_port_(0u)
  , routing_secret_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSteamDatagramConnectRequestDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectRequestDefaultTypeInternal _CMsgSteamDatagramConnectRequest_default_instance_;
constexpr CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crypt_(nullptr)
  , cert_(nullptr)
  , client_connection_id_(0u)
  , gameserver_relay_session_id_(0u)
  , your_timestamp_(PROTOBUF_ULONGLONG(0))
  , delay_time_usec_(0u)
  , server_connection_id_(0u){}
struct CMsgSteamDatagramConnectOKDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectOKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectOKDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectOK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectOKDefaultTypeInternal _CMsgSteamDatagramConnectOK_default_instance_;
constexpr CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : initial_ping_(0u)
  , initial_ping_front_local_(0u)
  , initial_ping_front_remote_(0u)
  , initial_score_(0u)
  , initial_pop_local_(0u)
  , initial_pop_remote_(0u)
  , negotiation_ms_(0u)
  , selected_seconds_(0u)
  , best_ping_(0u)
  , best_ping_front_local_(0u)
  , best_ping_front_remote_(0u)
  , best_score_(0u)
  , best_pop_local_(0u)
  , best_pop_remote_(0u)
  , best_time_(0u){}
struct CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal {
  constexpr CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingP2PSDRRoutingSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal _CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_;
constexpr CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ice_(nullptr)
  , sdr_(nullptr){}
struct CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutingSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal _CMsgSteamDatagramP2PRoutingSummary_default_instance_;
constexpr CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : debug_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , forward_target_relay_routing_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_from_identity_binary_(nullptr)
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , p2p_routing_summary_(nullptr)
  , legacy_from_steam_id_(PROTOBUF_ULONGLONG(0))
  , legacy_gameserver_relay_session_id_(0u)
  , relay_mode_(0)

  , reason_code_(0u)
  , to_connection_id_(0u)
  , from_connection_id_(0u)
  , to_relay_session_id_(0u)
  , from_relay_session_id_(0u)
  , forward_target_revision_(0u)
  , routing_secret_(PROTOBUF_ULONGLONG(0))
  , not_primary_session_(false)
  , not_primary_transport_(false){}
struct CMsgSteamDatagramConnectionClosedDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectionClosedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionClosedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionClosed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectionClosedDefaultTypeInternal _CMsgSteamDatagramConnectionClosed_default_instance_;
constexpr CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , p2p_routing_summary_(nullptr)
  , legacy_from_steam_id_(PROTOBUF_ULONGLONG(0))
  , legacy_gameserver_relay_session_id_(0u)
  , to_connection_id_(0u)
  , from_connection_id_(0u)
  , to_relay_session_id_(0u)
  , from_relay_session_id_(0u)
  , end_to_end_(false)
  , not_primary_session_(false)
  , not_primary_transport_(false)
  , routing_secret_(PROTOBUF_ULONGLONG(0))
  , dummy_pad_(0u){}
struct CMsgSteamDatagramNoConnectionDefaultTypeInternal {
  constexpr CMsgSteamDatagramNoConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoConnectionDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramNoConnectionDefaultTypeInternal _CMsgSteamDatagramNoConnection_default_instance_;
constexpr CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , build_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , challenge_(PROTOBUF_ULONGLONG(0))
  , challenge_time_(0u)
  , client_connection_id_(0u)
  , network_config_version_(0u)
  , protocol_version_(0u)
  , server_connection_id_(0u){}
struct CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal {
  constexpr CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal _CMsgSteamDatagramGameserverSessionRequest_default_instance_;
constexpr CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameserver_identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dummy_legacy_identity_binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_id_(0u)
  , seconds_until_shutdown_(0u)
  , legacy_gameserver_steamid_(PROTOBUF_ULONGLONG(0))
  , seq_num_r2c_(0u){}
struct CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal {
  constexpr CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverSessionEstablished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramGameserverSessionEstablished_default_instance_;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_relay_()
  , legacy_ack_e2e_()
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , flags_(0u)
  , client_connection_id_(0u)
  , seq_num_c2r_(0u)
  , seq_num_e2e_(0u){}
struct CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsClientToRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_relay_()
  , legacy_ack_e2e_()
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , seconds_until_shutdown_(0u)
  , client_connection_id_(0u)
  , seq_num_r2c_(0u)
  , seq_num_e2e_(0u)
  , migrate_request_ip_(0u)
  , migrate_request_port_(0u)
  , scoring_penalty_relay_cluster_(0u)
  , flags_(0u){}
struct CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsRouterToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_relay_()
  , legacy_ack_e2e_()
  , client_identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , seq_num_r2s_(0u)
  , seq_num_e2e_(0u)
  , legacy_client_steam_id_(PROTOBUF_ULONGLONG(0))
  , relay_session_id_(0u)
  , client_connection_id_(0u)
  , flags_(0u)
  , server_connection_id_(0u)
  , routing_secret_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsRouterToServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_relay_()
  , legacy_ack_e2e_()
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , seq_num_s2r_(0u)
  , seq_num_e2e_(0u)
  , relay_session_id_(0u)
  , client_connection_id_(0u)
  , flags_(0u)
  , server_connection_id_(0u){}
struct CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsServerToRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;
constexpr CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , build_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , challenge_(PROTOBUF_ULONGLONG(0))
  , challenge_time_(0u)
  , client_connection_id_(0u)
  , legacy_peer_steam_id_(PROTOBUF_ULONGLONG(0))
  , peer_connection_id_(0u)
  , protocol_version_(0u)
  , network_config_version_(0u)
  , unused_public_ip_(0u){}
struct CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequestBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequestBody_default_instance_;
constexpr CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_(nullptr){}
struct CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequest_default_instance_;
constexpr CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relay_routing_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_id_(0u)
  , seconds_until_shutdown_(0u)
  , seq_num_r2c_(0u){}
struct CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionEstablished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramP2PSessionEstablished_default_instance_;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_relay_()
  , legacy_ack_e2e_()
  , forward_target_relay_routing_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , routes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , p2p_routing_summary_(nullptr)
  , flags_(0u)
  , forward_target_revision_(0u)
  , ack_peer_routes_revision_(0u)
  , connection_id_(0u)
  , seq_num_c2r_(0u)
  , seq_num_e2e_(0u){}
struct CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsP2PClientToRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_relay_()
  , legacy_ack_e2e_()
  , routes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_relay_(nullptr)
  , quality_e2e_(nullptr)
  , seconds_until_shutdown_(0u)
  , migrate_request_ip_(0u)
  , migrate_request_port_(0u)
  , scoring_penalty_relay_cluster_(0u)
  , flags_(0u)
  , ack_forward_target_revision_(0u)
  , ack_peer_routes_revision_(0u)
  , connection_id_(0u)
  , seq_num_r2c_(0u)
  , seq_num_e2e_(0u){}
struct CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal {
  constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsP2PRouterToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_;
constexpr CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : failed_relay_routing_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_id_(0u)
  , ack_forward_target_revision_(0u)
  , kludge_pad_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PBadRouteRouterToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal _CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_;
constexpr CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_relay_routing_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pop_id_(0u)
  , ping_ms_(0u)
  , score_penalty_(0u){}
struct CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes_RelayCluster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_;
constexpr CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : my_pop_id_(0u)
  , your_pop_id_(0u)
  , legacy_score_(0u)
  , interior_score_(0u){}
struct CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes_Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_Route_default_instance_;
constexpr CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relay_clusters_()
  , routes_()
  , revision_(0u){}
struct CMsgSteamDatagramP2PRoutesDefaultTypeInternal {
  constexpr CMsgSteamDatagramP2PRoutesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutesDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramP2PRoutesDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_default_instance_;
constexpr CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_identity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kludge_pad_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_main_ip_(0u)
  , client_main_port_(0u)
  , client_connection_id_(0u)
  , request_send_duplication_(false){}
struct CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal {
  constexpr CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSetSecondaryAddressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal _CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_;
constexpr CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal {
  constexpr CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSetSecondaryAddressResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal _CMsgSteamDatagramSetSecondaryAddressResult_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, data_center_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, penalty_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, ipv4_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, penalty_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, protocol_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, id_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, client_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, latency_datacenter_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, latency_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, latency_datacenter_ids_p2p_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, latency_ping_ms_p2p_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, your_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, your_public_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, server_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, client_cookie_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, scoring_penalty_relay_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, route_exceptions_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, alt_addresses_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  7,
  3,
  2,
  4,
  5,
  6,
  8,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequest, your_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequest, your_public_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequest, server_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequest, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequest, router_timestamp_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLegacyGameserverPingReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLegacyGameserverPingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLegacyGameserverPingReply, router_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLegacyGameserverPingReply, dummy_pad_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply_SignedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply_SignedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply_SignedData, challenge_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply_SignedData, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply_SignedData, router_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply_SignedData, data_center_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply_SignedData, appid_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply, signed_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReply, signature_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, your_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, your_public_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, server_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, seconds_until_shutdown_),
  5,
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, legacy_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, kludge_pad_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, connection_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, front_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, penalty_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, default_front_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, cluster_penalty_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, alt_addresses_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, default_e2e_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, default_e2e_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, p2p_via_peer_relay_pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, best_dc_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, best_dc_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, best_dc_via_relay_pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, default_dc_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, default_dc_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, default_dc_via_relay_pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, test_dc_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, test_dc_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, test_dc_via_relay_pop_id_),
  0,
  1,
  3,
  ~0u,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, data_center_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, best_dc_via_relay_pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, best_dc_ping_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, override_active_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, pops_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, legacy_data_centers_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, front_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, back_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, seconds_until_down_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_router_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_active_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_active_packets_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_dropped_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, gap_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_quality_now_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, to_quality_now_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_quality_then_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, to_quality_then_),
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  11,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, my_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, ping_est_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, virtual_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, crypt_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, routing_secret_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, legacy_client_steam_id_),
  2,
  5,
  6,
  7,
  3,
  0,
  1,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, server_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, your_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, delay_time_usec_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, crypt_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, cert_),
  2,
  6,
  4,
  5,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, initial_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, initial_ping_front_local_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, initial_ping_front_remote_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, initial_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, initial_pop_local_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, initial_pop_remote_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, best_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, best_ping_front_local_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, best_ping_front_remote_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, best_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, best_pop_local_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, best_pop_remote_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, best_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, negotiation_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, selected_seconds_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, ice_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, sdr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, to_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, from_identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, legacy_from_identity_binary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, legacy_from_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, legacy_gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, to_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, forward_target_relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, relay_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, debug_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, reason_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, routing_secret_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, not_primary_session_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, not_primary_transport_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, p2p_routing_summary_),
  11,
  12,
  2,
  3,
  7,
  8,
  13,
  14,
  1,
  15,
  9,
  0,
  10,
  16,
  17,
  18,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, to_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, legacy_gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, to_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, from_identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, legacy_from_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, end_to_end_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, not_primary_session_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, not_primary_transport_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, p2p_routing_summary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, routing_secret_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, dummy_pad_),
  6,
  7,
  5,
  8,
  9,
  0,
  4,
  10,
  11,
  12,
  1,
  2,
  3,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, challenge_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, server_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, network_config_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, platform_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, build_),
  0,
  4,
  3,
  5,
  8,
  6,
  7,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, gameserver_identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, seq_num_r2c_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, dummy_legacy_identity_binary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, legacy_gameserver_steamid_),
  2,
  0,
  3,
  5,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2r_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_e2e_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, scoring_penalty_relay_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_r2c_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_e2e_),
  0,
  1,
  2,
  6,
  7,
  8,
  ~0u,
  ~0u,
  9,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_r2s_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, client_identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, legacy_client_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, server_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, routing_secret_),
  1,
  2,
  ~0u,
  ~0u,
  8,
  3,
  4,
  0,
  5,
  6,
  7,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2r_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, server_connection_id_),
  0,
  1,
  ~0u,
  ~0u,
  6,
  2,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, challenge_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, legacy_peer_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, peer_identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, peer_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, network_config_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, unused_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, platform_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, build_),
  4,
  3,
  5,
  6,
  0,
  7,
  8,
  9,
  10,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, body_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, signature_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, seq_num_r2c_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, p2p_routing_summary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, forward_target_relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, routes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, ack_peer_routes_revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, seq_num_c2r_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, seq_num_e2e_),
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  0,
  6,
  1,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, migrate_request_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, migrate_request_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, scoring_penalty_relay_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, routes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_peer_routes_revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, seq_num_r2c_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, seq_num_e2e_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  7,
  8,
  0,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, failed_relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, ack_forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, kludge_pad_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, score_penalty_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, session_relay_routing_token_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, my_pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, your_pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, legacy_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, interior_score_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, relay_clusters_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, routes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, revision_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, client_main_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, client_main_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, client_identity_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, request_send_duplication_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, kludge_pad_),
  2,
  3,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, success_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, message_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgSteamDatagramRouterPingReply_RouteException)},
  { 11, 21, sizeof(::CMsgSteamDatagramRouterPingReply_AltAddress)},
  { 26, 46, sizeof(::CMsgSteamDatagramRouterPingReply)},
  { 61, 71, sizeof(::CMsgSteamDatagramGameserverPingRequest)},
  { 76, 83, sizeof(::CMsgSteamDatagramLegacyGameserverPingReply)},
  { 85, 95, sizeof(::CMsgSteamDatagramGameserverPingReply_SignedData)},
  { 100, 108, sizeof(::CMsgSteamDatagramGameserverPingReply)},
  { 111, 122, sizeof(::CMsgSteamDatagramNoSessionRelayToClient)},
  { 128, 137, sizeof(::CMsgSteamDatagramNoSessionRelayToPeer)},
  { 141, 147, sizeof(::CMsgSteamDatagramClientPingSampleRequest)},
  { 148, 156, sizeof(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress)},
  { 159, 180, sizeof(::CMsgSteamDatagramClientPingSampleReply_POP)},
  { 196, 204, sizeof(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter)},
  { 207, 216, sizeof(::CMsgSteamDatagramClientPingSampleReply)},
  { 220, 229, sizeof(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)},
  { 233, 250, sizeof(::CMsgSteamDatagramClientSwitchedPrimary)},
  { 262, 276, sizeof(::CMsgSteamDatagramConnectRequest)},
  { 285, 297, sizeof(::CMsgSteamDatagramConnectOK)},
  { 304, 324, sizeof(::CMsgSteamNetworkingP2PSDRRoutingSummary)},
  { 339, 346, sizeof(::CMsgSteamDatagramP2PRoutingSummary)},
  { 348, 372, sizeof(::CMsgSteamDatagramConnectionClosed)},
  { 391, 411, sizeof(::CMsgSteamDatagramNoConnection)},
  { 426, 440, sizeof(::CMsgSteamDatagramGameserverSessionRequest)},
  { 449, 460, sizeof(::CMsgSteamDatagramGameserverSessionEstablished)},
  { 466, 479, sizeof(::CMsgSteamDatagramConnectionStatsClientToRouter)},
  { 487, 504, sizeof(::CMsgSteamDatagramConnectionStatsRouterToClient)},
  { 516, 534, sizeof(::CMsgSteamDatagramConnectionStatsRouterToServer)},
  { 547, 562, sizeof(::CMsgSteamDatagramConnectionStatsServerToRouter)},
  { 572, 588, sizeof(::CMsgSteamDatagramP2PSessionRequestBody)},
  { 599, 607, sizeof(::CMsgSteamDatagramP2PSessionRequest)},
  { 610, 619, sizeof(::CMsgSteamDatagramP2PSessionEstablished)},
  { 623, 641, sizeof(::CMsgSteamDatagramConnectionStatsP2PClientToRouter)},
  { 654, 674, sizeof(::CMsgSteamDatagramConnectionStatsP2PRouterToClient)},
  { 689, 698, sizeof(::CMsgSteamDatagramP2PBadRouteRouterToClient)},
  { 702, 711, sizeof(::CMsgSteamDatagramP2PRoutes_RelayCluster)},
  { 715, 724, sizeof(::CMsgSteamDatagramP2PRoutes_Route)},
  { 728, 736, sizeof(::CMsgSteamDatagramP2PRoutes)},
  { 739, 750, sizeof(::CMsgSteamDatagramSetSecondaryAddressRequest)},
  { 756, 763, sizeof(::CMsgSteamDatagramSetSecondaryAddressResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramRouterPingReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramGameserverPingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramLegacyGameserverPingReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramGameserverPingReply_SignedData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramGameserverPingReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramNoSessionRelayToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramClientPingSampleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramClientPingSampleReply_POP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramClientPingSampleReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectOK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PRoutingSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionClosed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramNoConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramGameserverSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramGameserverSessionEstablished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PSessionRequestBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PSessionEstablished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PRoutes_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramP2PRoutes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramSetSecondaryAddressResult_default_instance_),
};

const char descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n steamdatagram_messages_sdr.proto\032+stea"
  "mnetworkingsockets_messages_certs.proto\032"
  "%steamnetworkingsockets_messages.proto\"\212"
  "\007\n CMsgSteamDatagramRouterPingReply\022\030\n\020c"
  "lient_timestamp\030\001 \001(\007\022\"\n\026latency_datacen"
  "ter_ids\030\002 \003(\007B\002\020\001\022\033\n\017latency_ping_ms\030\003 \003"
  "(\rB\002\020\001\022&\n\032latency_datacenter_ids_p2p\030\016 \003"
  "(\007B\002\020\001\022\037\n\023latency_ping_ms_p2p\030\017 \003(\rB\002\020\001\022"
  "\026\n\016your_public_ip\030\004 \001(\007\022\030\n\020your_public_p"
  "ort\030\013 \001(\007\022\023\n\013server_time\030\005 \001(\007\022\021\n\tchalle"
  "nge\030\006 \001(\006\022\036\n\026seconds_until_shutdown\030\007 \001("
  "\r\022\025\n\rclient_cookie\030\010 \001(\007\022%\n\035scoring_pena"
  "lty_relay_cluster\030\t \001(\r\022\r\n\005flags\030\014 \001(\r\022J"
  "\n\020route_exceptions\030\n \003(\01320.CMsgSteamData"
  "gramRouterPingReply.RouteException\022C\n\ral"
  "t_addresses\030\r \003(\0132,.CMsgSteamDatagramRou"
  "terPingReply.AltAddress\032H\n\016RouteExceptio"
  "n\022\026\n\016data_center_id\030\001 \001(\007\022\r\n\005flags\030\002 \001(\r"
  "\022\017\n\007penalty\030\003 \001(\r\032\321\001\n\nAltAddress\022\014\n\004ipv4"
  "\030\001 \001(\007\022\014\n\004port\030\002 \001(\r\022\017\n\007penalty\030\003 \001(\r\022X\n"
  "\010protocol\030\004 \001(\01625.CMsgSteamDatagramRoute"
  "rPingReply.AltAddress.Protocol:\017DefaultP"
  "rotocol\022\n\n\002id\030\005 \001(\t\"0\n\010Protocol\022\023\n\017Defau"
  "ltProtocol\020\000\022\017\n\013NetworkNext\020\001\"L\n\005Flags\022 "
  "\n\034FLAG_MAYBE_MORE_DATA_CENTERS\020\001\022!\n\035FLAG"
  "_MAYBE_MORE_ALT_ADDRESSES\020\002\"\234\001\n&CMsgStea"
  "mDatagramGameserverPingRequest\022\026\n\016your_p"
  "ublic_ip\030\001 \001(\007\022\030\n\020your_public_port\030\005 \001(\007"
  "\022\023\n\013server_time\030\002 \001(\007\022\021\n\tchallenge\030\003 \001(\006"
  "\022\030\n\020router_timestamp\030\004 \001(\007\"Y\n*CMsgSteamD"
  "atagramLegacyGameserverPingReply\022\030\n\020rout"
  "er_timestamp\030\004 \001(\007\022\021\n\tdummy_pad\030c \001(\006\"\373\001"
  "\n$CMsgSteamDatagramGameserverPingReply\0221"
  "\n\004cert\030\001 \001(\0132#.CMsgSteamDatagramCertific"
  "ateSigned\022\023\n\013signed_data\030\002 \001(\014\022\021\n\tsignat"
  "ure\030\003 \001(\014\032x\n\nSignedData\022\026\n\016challenge_tim"
  "e\030\002 \001(\007\022\021\n\tchallenge\030\003 \001(\006\022\030\n\020router_tim"
  "estamp\030\004 \001(\007\022\026\n\016data_center_id\030\005 \001(\007\022\r\n\005"
  "appid\030\006 \001(\r\"\272\001\n\'CMsgSteamDatagramNoSessi"
  "onRelayToClient\022\025\n\rconnection_id\030\007 \001(\007\022\026"
  "\n\016your_public_ip\030\002 \001(\007\022\030\n\020your_public_po"
  "rt\030\006 \001(\007\022\023\n\013server_time\030\003 \001(\007\022\021\n\tchallen"
  "ge\030\004 \001(\006\022\036\n\026seconds_until_shutdown\030\005 \001(\r"
  "\"\227\001\n%CMsgSteamDatagramNoSessionRelayToPe"
  "er\022\037\n\027legacy_relay_session_id\030\001 \001(\r\022\035\n\025f"
  "rom_relay_session_id\030\002 \001(\007\022\032\n\022from_conne"
  "ction_id\030\007 \001(\007\022\022\n\nkludge_pad\030c \001(\006\"A\n(CM"
  "sgSteamDatagramClientPingSampleRequest\022\025"
  "\n\rconnection_id\030\001 \001(\007\"\214\007\n&CMsgSteamDatag"
  "ramClientPingSampleReply\022\025\n\rconnection_i"
  "d\030\001 \001(\007\022\027\n\017override_active\030\004 \001(\010\0229\n\004pops"
  "\030\002 \003(\0132+.CMsgSteamDatagramClientPingSamp"
  "leReply.POP\022U\n\023legacy_data_centers\030\003 \003(\013"
  "28.CMsgSteamDatagramClientPingSampleRepl"
  "y.LegacyDataCenter\032\270\004\n\003POP\022\016\n\006pop_id\030\001 \001"
  "(\007\022\035\n\025default_front_ping_ms\030\002 \001(\r\022\027\n\017clu"
  "ster_penalty\030\004 \001(\r\022M\n\ralt_addresses\030\007 \003("
  "\01326.CMsgSteamDatagramClientPingSampleRep"
  "ly.POP.AltAddress\022\033\n\023default_e2e_ping_ms"
  "\030\003 \001(\r\022\031\n\021default_e2e_score\030\005 \001(\r\022!\n\031p2p"
  "_via_peer_relay_pop_id\030\006 \001(\007\022\027\n\017best_dc_"
  "ping_ms\030\t \001(\r\022\025\n\rbest_dc_score\030\n \001(\r\022 \n\030"
  "best_dc_via_relay_pop_id\030\013 \001(\007\022\032\n\022defaul"
  "t_dc_ping_ms\030\014 \001(\r\022\030\n\020default_dc_score\030\r"
  " \001(\r\022#\n\033default_dc_via_relay_pop_id\030\016 \001("
  "\007\022\027\n\017test_dc_ping_ms\030\017 \001(\r\022\025\n\rtest_dc_sc"
  "ore\030\020 \001(\r\022 \n\030test_dc_via_relay_pop_id\030\021 "
  "\001(\007\032@\n\nAltAddress\022\n\n\002id\030\001 \001(\t\022\025\n\rfront_p"
  "ing_ms\030\002 \001(\r\022\017\n\007penalty\030\003 \001(\r\032e\n\020LegacyD"
  "ataCenter\022\026\n\016data_center_id\030\001 \001(\007\022 \n\030bes"
  "t_dc_via_relay_pop_id\030\002 \001(\007\022\027\n\017best_dc_p"
  "ing_ms\030\003 \001(\r\"\216\005\n&CMsgSteamDatagramClient"
  "SwitchedPrimary\022\025\n\rconnection_id\030\001 \001(\007\022\017"
  "\n\007from_ip\030\002 \001(\007\022\021\n\tfrom_port\030\003 \001(\r\022\033\n\023fr"
  "om_router_cluster\030\004 \001(\007\022\030\n\020from_active_t"
  "ime\030\005 \001(\r\022 \n\030from_active_packets_recv\030\006 "
  "\001(\r\022\033\n\023from_dropped_reason\030\007 \001(\t\022\016\n\006gap_"
  "ms\030\010 \001(\r\022O\n\020from_quality_now\030\t \001(\01325.CMs"
  "gSteamDatagramClientSwitchedPrimary.Rout"
  "erQuality\022M\n\016to_quality_now\030\n \001(\01325.CMsg"
  "SteamDatagramClientSwitchedPrimary.Route"
  "rQuality\022P\n\021from_quality_then\030\013 \001(\01325.CM"
  "sgSteamDatagramClientSwitchedPrimary.Rou"
  "terQuality\022N\n\017to_quality_then\030\014 \001(\01325.CM"
  "sgSteamDatagramClientSwitchedPrimary.Rou"
  "terQuality\032a\n\rRouterQuality\022\r\n\005score\030\001 \001"
  "(\r\022\022\n\nfront_ping\030\002 \001(\r\022\021\n\tback_ping\030\003 \001("
  "\r\022\032\n\022seconds_until_down\030\004 \001(\r\"\302\002\n\037CMsgSt"
  "eamDatagramConnectRequest\022\025\n\rconnection_"
  "id\030\001 \001(\007\022\024\n\014my_timestamp\030\004 \001(\006\022\023\n\013ping_e"
  "st_ms\030\005 \001(\r\022\024\n\014virtual_port\030\t \001(\r\022#\n\033gam"
  "eserver_relay_session_id\030\002 \001(\r\0227\n\005crypt\030"
  "\006 \001(\0132(.CMsgSteamDatagramSessionCryptInf"
  "oSigned\0221\n\004cert\030\007 \001(\0132#.CMsgSteamDatagra"
  "mCertificateSigned\022\026\n\016routing_secret\030\n \001"
  "(\006\022\036\n\026legacy_client_steam_id\030\003 \001(\006\"\232\002\n\032C"
  "MsgSteamDatagramConnectOK\022\034\n\024client_conn"
  "ection_id\030\001 \001(\007\022\034\n\024server_connection_id\030"
  "\007 \001(\007\022\026\n\016your_timestamp\030\003 \001(\006\022\027\n\017delay_t"
  "ime_usec\030\004 \001(\r\022#\n\033gameserver_relay_sessi"
  "on_id\030\002 \001(\r\0227\n\005crypt\030\005 \001(\0132(.CMsgSteamDa"
  "tagramSessionCryptInfoSigned\0221\n\004cert\030\006 \001"
  "(\0132#.CMsgSteamDatagramCertificateSigned\""
  "\256\003\n\'CMsgSteamNetworkingP2PSDRRoutingSumm"
  "ary\022\024\n\014initial_ping\030\001 \001(\r\022 \n\030initial_pin"
  "g_front_local\030\002 \001(\r\022!\n\031initial_ping_fron"
  "t_remote\030\003 \001(\r\022\025\n\rinitial_score\030\004 \001(\r\022\031\n"
  "\021initial_pop_local\030\005 \001(\007\022\032\n\022initial_pop_"
  "remote\030\006 \001(\007\022\021\n\tbest_ping\030\013 \001(\r\022\035\n\025best_"
  "ping_front_local\030\014 \001(\r\022\036\n\026best_ping_fron"
  "t_remote\030\r \001(\r\022\022\n\nbest_score\030\016 \001(\r\022\026\n\016be"
  "st_pop_local\030\017 \001(\007\022\027\n\017best_pop_remote\030\020 "
  "\001(\007\022\021\n\tbest_time\030\021 \001(\r\022\026\n\016negotiation_ms"
  "\030\007 \001(\r\022\030\n\020selected_seconds\030\010 \001(\r\"\217\001\n\"CMs"
  "gSteamDatagramP2PRoutingSummary\0222\n\003ice\030\002"
  " \001(\0132%.CMsgSteamNetworkingICESessionSumm"
  "ary\0225\n\003sdr\030\003 \001(\0132(.CMsgSteamNetworkingP2"
  "PSDRRoutingSummary\"\312\006\n!CMsgSteamDatagram"
  "ConnectionClosed\022\030\n\020to_connection_id\030\007 \001"
  "(\007\022\032\n\022from_connection_id\030\010 \001(\007\022\034\n\024from_i"
  "dentity_string\030\017 \001(\t\022M\n\033legacy_from_iden"
  "tity_binary\030\r \001(\0132(.CMsgSteamNetworkingI"
  "dentityLegacyBinary\022\034\n\024legacy_from_steam"
  "_id\030\003 \001(\006\022*\n\"legacy_gameserver_relay_ses"
  "sion_id\030\002 \001(\r\022\033\n\023to_relay_session_id\030\t \001"
  "(\007\022\035\n\025from_relay_session_id\030\n \001(\007\022*\n\"for"
  "ward_target_relay_routing_token\030\013 \001(\014\022\037\n"
  "\027forward_target_revision\030\014 \001(\r\022G\n\nrelay_"
  "mode\030\004 \001(\0162-.CMsgSteamDatagramConnection"
  "Closed.ERelayMode:\004None\022\r\n\005debug\030\005 \001(\t\022\023"
  "\n\013reason_code\030\006 \001(\r\022\026\n\016routing_secret\030\016 "
  "\001(\006\022\033\n\023not_primary_session\030\020 \001(\010\022\035\n\025not_"
  "primary_transport\030\023 \001(\010\022:\n\rquality_relay"
  "\030\021 \001(\0132#.CMsgSteamDatagramConnectionQual"
  "ity\0228\n\013quality_e2e\030\022 \001(\0132#.CMsgSteamData"
  "gramConnectionQuality\022@\n\023p2p_routing_sum"
  "mary\030\025 \001(\0132#.CMsgSteamDatagramP2PRouting"
  "Summary\"6\n\nERelayMode\022\010\n\004None\020\000\022\014\n\010EndTo"
  "End\020\001\022\020\n\014ClosedByPeer\020\002\"\255\004\n\035CMsgSteamDat"
  "agramNoConnection\022\030\n\020to_connection_id\030\005 "
  "\001(\007\022\032\n\022from_connection_id\030\006 \001(\007\022*\n\"legac"
  "y_gameserver_relay_session_id\030\002 \001(\r\022\033\n\023t"
  "o_relay_session_id\030\t \001(\007\022\035\n\025from_relay_s"
  "ession_id\030\n \001(\007\022\034\n\024from_identity_string\030"
  "\007 \001(\t\022\034\n\024legacy_from_steam_id\030\003 \001(\006\022\022\n\ne"
  "nd_to_end\030\004 \001(\010\022\033\n\023not_primary_session\030\014"
  " \001(\010\022\035\n\025not_primary_transport\030\017 \001(\010\022:\n\rq"
  "uality_relay\030\r \001(\0132#.CMsgSteamDatagramCo"
  "nnectionQuality\0228\n\013quality_e2e\030\016 \001(\0132#.C"
  "MsgSteamDatagramConnectionQuality\022@\n\023p2p"
  "_routing_summary\030\020 \001(\0132#.CMsgSteamDatagr"
  "amP2PRoutingSummary\022\026\n\016routing_secret\030\013 "
  "\001(\006\022\022\n\tdummy_pad\030\377\007 \001(\007\"\375\001\n)CMsgSteamDat"
  "agramGameserverSessionRequest\022\016\n\006ticket\030"
  "\001 \001(\014\022\026\n\016challenge_time\030\003 \001(\007\022\021\n\tchallen"
  "ge\030\004 \001(\006\022\034\n\024client_connection_id\030\005 \001(\007\022\034"
  "\n\024server_connection_id\030\010 \001(\007\022\036\n\026network_"
  "config_version\030\006 \001(\r\022\030\n\020protocol_version"
  "\030\007 \001(\r\022\020\n\010platform\030\t \001(\t\022\r\n\005build\030\n \001(\t\""
  "\350\001\n-CMsgSteamDatagramGameserverSessionEs"
  "tablished\022\025\n\rconnection_id\030\001 \001(\007\022\"\n\032game"
  "server_identity_string\030\002 \001(\t\022\036\n\026seconds_"
  "until_shutdown\030\004 \001(\r\022\023\n\013seq_num_r2c\030\006 \001("
  "\r\022$\n\034dummy_legacy_identity_binary\030\007 \001(\014\022"
  "!\n\031legacy_gameserver_steamid\030\003 \001(\006\"\221\003\n.C"
  "MsgSteamDatagramConnectionStatsClientToR"
  "outer\022:\n\rquality_relay\030\001 \001(\0132#.CMsgSteam"
  "DatagramConnectionQuality\0228\n\013quality_e2e"
  "\030\002 \001(\0132#.CMsgSteamDatagramConnectionQual"
  "ity\022\021\n\tack_relay\030\004 \003(\007\022\026\n\016legacy_ack_e2e"
  "\030\005 \003(\007\022\r\n\005flags\030\006 \001(\r\022\034\n\024client_connecti"
  "on_id\030\010 \001(\007\022\023\n\013seq_num_c2r\030\t \001(\r\022\023\n\013seq_"
  "num_e2e\030\n \001(\r\"g\n\005Flags\022\025\n\021ACK_REQUEST_RE"
  "LAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUES"
  "T_IMMEDIATE\020\004\022\027\n\023NOT_PRIMARY_SESSION\020\010\"\371"
  "\003\n.CMsgSteamDatagramConnectionStatsRoute"
  "rToClient\022:\n\rquality_relay\030\001 \001(\0132#.CMsgS"
  "teamDatagramConnectionQuality\0228\n\013quality"
  "_e2e\030\002 \001(\0132#.CMsgSteamDatagramConnection"
  "Quality\022\036\n\026seconds_until_shutdown\030\006 \001(\r\022"
  "\032\n\022migrate_request_ip\030\n \001(\007\022\034\n\024migrate_r"
  "equest_port\030\013 \001(\r\022%\n\035scoring_penalty_rel"
  "ay_cluster\030\014 \001(\r\022\021\n\tack_relay\030\r \003(\007\022\026\n\016l"
  "egacy_ack_e2e\030\016 \003(\007\022\r\n\005flags\030\017 \001(\r\022\034\n\024cl"
  "ient_connection_id\030\007 \001(\007\022\023\n\013seq_num_r2c\030"
  "\010 \001(\r\022\023\n\013seq_num_e2e\030\t \001(\r\"N\n\005Flags\022\025\n\021A"
  "CK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022"
  "\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\210\004\n.CMsgSteam"
  "DatagramConnectionStatsRouterToServer\022:\n"
  "\rquality_relay\030\001 \001(\0132#.CMsgSteamDatagram"
  "ConnectionQuality\0228\n\013quality_e2e\030\002 \001(\0132#"
  ".CMsgSteamDatagramConnectionQuality\022\021\n\ta"
  "ck_relay\030\n \003(\007\022\026\n\016legacy_ack_e2e\030\013 \003(\007\022\r"
  "\n\005flags\030\014 \001(\r\022\023\n\013seq_num_r2s\030\005 \001(\r\022\023\n\013se"
  "q_num_e2e\030\006 \001(\r\022\036\n\026client_identity_strin"
  "g\030\017 \001(\t\022\036\n\026legacy_client_steam_id\030\007 \001(\006\022"
  "\030\n\020relay_session_id\030\010 \001(\r\022\034\n\024client_conn"
  "ection_id\030\t \001(\007\022\034\n\024server_connection_id\030"
  "\r \001(\007\022\026\n\016routing_secret\030\016 \001(\006\"N\n\005Flags\022\025"
  "\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E"
  "\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\260\003\n.CMsgSt"
  "eamDatagramConnectionStatsServerToRouter"
  "\022:\n\rquality_relay\030\001 \001(\0132#.CMsgSteamDatag"
  "ramConnectionQuality\0228\n\013quality_e2e\030\002 \001("
  "\0132#.CMsgSteamDatagramConnectionQuality\022\021"
  "\n\tack_relay\030\010 \003(\007\022\026\n\016legacy_ack_e2e\030\t \003("
  "\007\022\r\n\005flags\030\n \001(\r\022\023\n\013seq_num_s2r\030\003 \001(\r\022\023\n"
  "\013seq_num_e2e\030\004 \001(\r\022\030\n\020relay_session_id\030\006"
  " \001(\r\022\034\n\024client_connection_id\030\007 \001(\007\022\034\n\024se"
  "rver_connection_id\030\013 \001(\007\"N\n\005Flags\022\025\n\021ACK"
  "_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n"
  "\025ACK_REQUEST_IMMEDIATE\020\004\"\276\002\n&CMsgSteamDa"
  "tagramP2PSessionRequestBody\022\026\n\016challenge"
  "_time\030\001 \001(\007\022\021\n\tchallenge\030\002 \001(\006\022\034\n\024client"
  "_connection_id\030\003 \001(\007\022\034\n\024legacy_peer_stea"
  "m_id\030\004 \001(\006\022\034\n\024peer_identity_string\030\013 \001(\t"
  "\022\032\n\022peer_connection_id\030\005 \001(\007\022\030\n\020protocol"
  "_version\030\010 \001(\r\022\036\n\026network_config_version"
  "\030\t \001(\r\022\030\n\020unused_public_ip\030\n \001(\007\022\020\n\010plat"
  "form\030\014 \001(\t\022\r\n\005build\030\r \001(\t\"x\n\"CMsgSteamDa"
  "tagramP2PSessionRequest\0221\n\004cert\030\001 \001(\0132#."
  "CMsgSteamDatagramCertificateSigned\022\014\n\004bo"
  "dy\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\"\221\001\n&CMsgStea"
  "mDatagramP2PSessionEstablished\022\025\n\rconnec"
  "tion_id\030\001 \001(\007\022\036\n\026seconds_until_shutdown\030"
  "\003 \001(\r\022\033\n\023relay_routing_token\030\004 \001(\014\022\023\n\013se"
  "q_num_r2c\030\005 \001(\r\"\356\004\n1CMsgSteamDatagramCon"
  "nectionStatsP2PClientToRouter\022:\n\rquality"
  "_relay\030\001 \001(\0132#.CMsgSteamDatagramConnecti"
  "onQuality\0228\n\013quality_e2e\030\002 \001(\0132#.CMsgSte"
  "amDatagramConnectionQuality\022@\n\023p2p_routi"
  "ng_summary\030\016 \001(\0132#.CMsgSteamDatagramP2PR"
  "outingSummary\022\021\n\tack_relay\030\003 \003(\007\022\026\n\016lega"
  "cy_ack_e2e\030\004 \003(\007\022\r\n\005flags\030\005 \001(\r\022*\n\"forwa"
  "rd_target_relay_routing_token\030\006 \001(\014\022\037\n\027f"
  "orward_target_revision\030\007 \001(\r\022\016\n\006routes\030\010"
  " \001(\014\022 \n\030ack_peer_routes_revision\030\t \001(\r\022\025"
  "\n\rconnection_id\030\n \001(\007\022\023\n\013seq_num_c2r\030\013 \001"
  "(\r\022\023\n\013seq_num_e2e\030\014 \001(\r\"\206\001\n\005Flags\022\025\n\021ACK"
  "_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n"
  "\025ACK_REQUEST_IMMEDIATE\020\004\022\027\n\023NOT_PRIMARY_"
  "SESSION\020\010\022\035\n\031NOT_PRIMARY_TRANSPORT_E2E\020\020"
  "\"\353\004\n1CMsgSteamDatagramConnectionStatsP2P"
  "RouterToClient\022:\n\rquality_relay\030\001 \001(\0132#."
  "CMsgSteamDatagramConnectionQuality\0228\n\013qu"
  "ality_e2e\030\002 \001(\0132#.CMsgSteamDatagramConne"
  "ctionQuality\022\036\n\026seconds_until_shutdown\030\003"
  " \001(\r\022\032\n\022migrate_request_ip\030\004 \001(\007\022\034\n\024migr"
  "ate_request_port\030\005 \001(\r\022%\n\035scoring_penalt"
  "y_relay_cluster\030\006 \001(\r\022\021\n\tack_relay\030\007 \003(\007"
  "\022\026\n\016legacy_ack_e2e\030\010 \003(\007\022\r\n\005flags\030\t \001(\r\022"
  "#\n\033ack_forward_target_revision\030\n \001(\r\022\016\n\006"
  "routes\030\013 \001(\014\022 \n\030ack_peer_routes_revision"
  "\030\014 \001(\r\022\025\n\rconnection_id\030\r \001(\007\022\023\n\013seq_num"
  "_r2c\030\016 \001(\r\022\023\n\013seq_num_e2e\030\017 \001(\r\"m\n\005Flags"
  "\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E"
  "2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\022\035\n\031NOT_P"
  "RIMARY_TRANSPORT_E2E\020\020\"\240\001\n*CMsgSteamData"
  "gramP2PBadRouteRouterToClient\022\025\n\rconnect"
  "ion_id\030\001 \001(\007\022\"\n\032failed_relay_routing_tok"
  "en\030\002 \001(\014\022#\n\033ack_forward_target_revision\030"
  "\003 \001(\r\022\022\n\nkludge_pad\030c \001(\006\"\357\002\n\032CMsgSteamD"
  "atagramP2PRoutes\022@\n\016relay_clusters\030\001 \003(\013"
  "2(.CMsgSteamDatagramP2PRoutes.RelayClust"
  "er\0221\n\006routes\030\002 \003(\0132!.CMsgSteamDatagramP2"
  "PRoutes.Route\022\020\n\010revision\030\003 \001(\r\032k\n\014Relay"
  "Cluster\022\016\n\006pop_id\030\001 \001(\007\022\017\n\007ping_ms\030\002 \001(\r"
  "\022\025\n\rscore_penalty\030\003 \001(\r\022#\n\033session_relay"
  "_routing_token\030\004 \001(\014\032]\n\005Route\022\021\n\tmy_pop_"
  "id\030\001 \001(\007\022\023\n\013your_pop_id\030\002 \001(\007\022\024\n\014legacy_"
  "score\030\003 \001(\r\022\026\n\016interior_score\030\004 \001(\r\"\314\001\n+"
  "CMsgSteamDatagramSetSecondaryAddressRequ"
  "est\022\026\n\016client_main_ip\030\001 \001(\007\022\030\n\020client_ma"
  "in_port\030\002 \001(\007\022\034\n\024client_connection_id\030\003 "
  "\001(\007\022\027\n\017client_identity\030\004 \001(\t\022 \n\030request_"
  "send_duplication\030\005 \001(\010\022\022\n\nkludge_pad\030c \001"
  "(\014\"N\n*CMsgSteamDatagramSetSecondaryAddre"
  "ssResult\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001"
  "(\t*\263\013\n\023ESteamDatagramMsgID\022\037\n\033k_ESteamDa"
  "tagramMsg_Invalid\020\000\022)\n%k_ESteamDatagramM"
  "sg_RouterPingRequest\020\001\022\'\n#k_ESteamDatagr"
  "amMsg_RouterPingReply\020\002\022-\n)k_ESteamDatag"
  "ramMsg_GameserverPingRequest\020\003\0221\n-k_ESte"
  "amDatagramMsg_LegacyGameserverPingReply\020"
  "\004\0220\n,k_ESteamDatagramMsg_GameserverSessi"
  "onRequest\020\005\0224\n0k_ESteamDatagramMsg_Games"
  "erverSessionEstablished\020\006\022!\n\035k_ESteamDat"
  "agramMsg_NoSession\020\007\022\"\n\036k_ESteamDatagram"
  "Msg_Diagnostic\020\010\022*\n&k_ESteamDatagramMsg_"
  "DataClientToRouter\020\t\022*\n&k_ESteamDatagram"
  "Msg_DataRouterToServer\020\n\022*\n&k_ESteamData"
  "gramMsg_DataServerToRouter\020\013\022*\n&k_ESteam"
  "DatagramMsg_DataRouterToClient\020\014\022\035\n\031k_ES"
  "teamDatagramMsg_Stats\020\r\022/\n+k_ESteamDatag"
  "ramMsg_ClientPingSampleRequest\020\016\022-\n)k_ES"
  "teamDatagramMsg_ClientPingSampleReply\020\017\022"
  "5\n1k_ESteamDatagramMsg_ClientToRouterSwi"
  "tchedPrimary\020\020\022#\n\037k_ESteamDatagramMsg_Re"
  "layHealth\020\021\022&\n\"k_ESteamDatagramMsg_Conne"
  "ctRequest\020\022\022!\n\035k_ESteamDatagramMsg_Conne"
  "ctOK\020\023\022(\n$k_ESteamDatagramMsg_Connection"
  "Closed\020\024\022$\n k_ESteamDatagramMsg_NoConnec"
  "tion\020\025\022/\n+k_ESteamDatagramMsg_RelayToRel"
  "ayPingRequest\020\026\022-\n)k_ESteamDatagramMsg_R"
  "elayToRelayPingReply\020\027\022)\n%k_ESteamDatagr"
  "amMsg_P2PSessionRequest\020\030\022-\n)k_ESteamDat"
  "agramMsg_P2PSessionEstablished\020\031\022&\n\"k_ES"
  "teamDatagramMsg_P2PStatsClient\020\032\022%\n!k_ES"
  "teamDatagramMsg_P2PStatsRelay\020\033\022#\n\037k_ESt"
  "eamDatagramMsg_P2PBadRoute\020\034\022+\n\'k_ESteam"
  "DatagramMsg_GameserverPingReply\020\035\022.\n*k_E"
  "SteamDatagramMsg_GameserverRegistration\020"
  "\036\0222\n.k_ESteamDatagramMsg_SetSecondaryAdd"
  "ressRequest\020\037\0221\n-k_ESteamDatagramMsg_Set"
  "SecondaryAddressResult\020 B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_deps[2] = {
  &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
  &::descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto = {
  false, false, 12591, descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto, "steamdatagram_messages_sdr.proto", 
  &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once, descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_deps, 2, 39,
  schemas, file_default_instances, TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets,
  file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto, file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto, file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steamdatagram_5fmessages_5fsdr_2eproto(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[0];
}
bool CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::DefaultProtocol;
constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::NetworkNext;
constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::Protocol_MIN;
constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::Protocol_MAX;
constexpr int CMsgSteamDatagramRouterPingReply_AltAddress::Protocol_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramRouterPingReply_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[1];
}
bool CMsgSteamDatagramRouterPingReply_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::FLAG_MAYBE_MORE_DATA_CENTERS;
constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::FLAG_MAYBE_MORE_ALT_ADDRESSES;
constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::Flags_MIN;
constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::Flags_MAX;
constexpr int CMsgSteamDatagramRouterPingReply::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[2];
}
bool CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::None;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::EndToEnd;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ClosedByPeer;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MIN;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MAX;
constexpr int CMsgSteamDatagramConnectionClosed::ERelayMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[3];
}
bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::NOT_PRIMARY_SESSION;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsClientToRouter::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[4];
}
bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsRouterToClient::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[5];
}
bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsRouterToServer::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[6];
}
bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsServerToRouter::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[7];
}
bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::NOT_PRIMARY_SESSION;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::NOT_PRIMARY_TRANSPORT_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[8];
}
bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::NOT_PRIMARY_TRANSPORT_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDatagramMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[9];
}
bool ESteamDatagramMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgSteamDatagramRouterPingReply_RouteException::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRouterPingReply_RouteException>()._has_bits_);
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply.RouteException)
}
CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(const CMsgSteamDatagramRouterPingReply_RouteException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_center_id_, &from.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(penalty_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply.RouteException)
}

void CMsgSteamDatagramRouterPingReply_RouteException::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_center_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&penalty_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(penalty_));
}

CMsgSteamDatagramRouterPingReply_RouteException::~CMsgSteamDatagramRouterPingReply_RouteException() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply.RouteException)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramRouterPingReply_RouteException::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramRouterPingReply_RouteException::ArenaDtor(void* object) {
  CMsgSteamDatagramRouterPingReply_RouteException* _this = reinterpret_cast< CMsgSteamDatagramRouterPingReply_RouteException* >(object);
  (void)_this;
}
void CMsgSteamDatagramRouterPingReply_RouteException::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramRouterPingReply_RouteException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramRouterPingReply_RouteException::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_) -
        reinterpret_cast<char*>(&data_center_id_)) + sizeof(penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRouterPingReply_RouteException::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 data_center_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_data_center_id(&has_bits);
          data_center_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_penalty(&has_bits);
          penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramRouterPingReply_RouteException::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_data_center_id(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply.RouteException)
  return target;
}

size_t CMsgSteamDatagramRouterPingReply_RouteException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply.RouteException)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 penalty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRouterPingReply_RouteException::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply_RouteException* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramRouterPingReply_RouteException>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRouterPingReply.RouteException)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRouterPingReply.RouteException)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply_RouteException::MergeFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      penalty_ = from.penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply_RouteException::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply_RouteException::InternalSwap(CMsgSteamDatagramRouterPingReply_RouteException* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, penalty_)
      + sizeof(CMsgSteamDatagramRouterPingReply_RouteException::penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, data_center_id_)>(
          reinterpret_cast<char*>(&data_center_id_),
          reinterpret_cast<char*>(&other->data_center_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramRouterPingReply_RouteException::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramRouterPingReply_AltAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRouterPingReply_AltAddress>()._has_bits_);
  static void set_has_ipv4(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply.AltAddress)
}
CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(const CMsgSteamDatagramRouterPingReply_AltAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&ipv4_, &from.ipv4_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&ipv4_)) + sizeof(protocol_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply.AltAddress)
}

void CMsgSteamDatagramRouterPingReply_AltAddress::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipv4_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&ipv4_)) + sizeof(protocol_));
}

CMsgSteamDatagramRouterPingReply_AltAddress::~CMsgSteamDatagramRouterPingReply_AltAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply.AltAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramRouterPingReply_AltAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramRouterPingReply_AltAddress::ArenaDtor(void* object) {
  CMsgSteamDatagramRouterPingReply_AltAddress* _this = reinterpret_cast< CMsgSteamDatagramRouterPingReply_AltAddress* >(object);
  (void)_this;
}
void CMsgSteamDatagramRouterPingReply_AltAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramRouterPingReply_AltAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramRouterPingReply_AltAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ipv4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_) -
        reinterpret_cast<char*>(&ipv4_)) + sizeof(protocol_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRouterPingReply_AltAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 ipv4 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ipv4(&has_bits);
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_penalty(&has_bits);
          penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_IsValid(val))) {
            _internal_set_protocol(static_cast<::CMsgSteamDatagramRouterPingReply_AltAddress_Protocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramRouterPingReply.AltAddress.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramRouterPingReply_AltAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ipv4 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_ipv4(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_penalty(), target);
  }

  // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_protocol(), target);
  }

  // optional string id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRouterPingReply.AltAddress.id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply.AltAddress)
  return target;
}

size_t CMsgSteamDatagramRouterPingReply_AltAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional fixed32 ipv4 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_port());
    }

    // optional uint32 penalty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty());
    }

    // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRouterPingReply_AltAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply_AltAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramRouterPingReply_AltAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRouterPingReply.AltAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRouterPingReply.AltAddress)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply_AltAddress::MergeFrom(const CMsgSteamDatagramRouterPingReply_AltAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      ipv4_ = from.ipv4_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      penalty_ = from.penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      protocol_ = from.protocol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterPingReply_AltAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply_AltAddress::CopyFrom(const CMsgSteamDatagramRouterPingReply_AltAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply_AltAddress::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply_AltAddress::InternalSwap(CMsgSteamDatagramRouterPingReply_AltAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, protocol_)
      + sizeof(CMsgSteamDatagramRouterPingReply_AltAddress::protocol_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, ipv4_)>(
          reinterpret_cast<char*>(&ipv4_),
          reinterpret_cast<char*>(&other->ipv4_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramRouterPingReply_AltAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramRouterPingReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRouterPingReply>()._has_bits_);
  static void set_has_client_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_your_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_your_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scoring_penalty_relay_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  latency_datacenter_ids_(arena),
  latency_ping_ms_(arena),
  route_exceptions_(arena),
  alt_addresses_(arena),
  latency_datacenter_ids_p2p_(arena),
  latency_ping_ms_p2p_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply)
}
CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      latency_datacenter_ids_(from.latency_datacenter_ids_),
      latency_ping_ms_(from.latency_ping_ms_),
      route_exceptions_(from.route_exceptions_),
      alt_addresses_(from.alt_addresses_),
      latency_datacenter_ids_p2p_(from.latency_datacenter_ids_p2p_),
      latency_ping_ms_p2p_(from.latency_ping_ms_p2p_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_timestamp_, &from.client_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&client_timestamp_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply)
}

void CMsgSteamDatagramRouterPingReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&client_timestamp_)) + sizeof(flags_));
}

CMsgSteamDatagramRouterPingReply::~CMsgSteamDatagramRouterPingReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramRouterPingReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramRouterPingReply::ArenaDtor(void* object) {
  CMsgSteamDatagramRouterPingReply* _this = reinterpret_cast< CMsgSteamDatagramRouterPingReply* >(object);
  (void)_this;
}
void CMsgSteamDatagramRouterPingReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramRouterPingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramRouterPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latency_datacenter_ids_.Clear();
  latency_ping_ms_.Clear();
  route_exceptions_.Clear();
  alt_addresses_.Clear();
  latency_datacenter_ids_p2p_.Clear();
  latency_ping_ms_p2p_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&client_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&your_public_port_) -
        reinterpret_cast<char*>(&client_timestamp_)) + sizeof(your_public_port_));
  }
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRouterPingReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 client_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_client_timestamp(&has_bits);
          client_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_latency_datacenter_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_latency_datacenter_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint32 latency_ping_ms = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_latency_ping_ms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_latency_ping_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 your_public_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_your_public_ip(&has_bits);
          your_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_until_shutdown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_seconds_until_shutdown(&has_bits);
          seconds_until_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_cookie = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_client_cookie(&has_bits);
          client_cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 scoring_penalty_relay_cluster = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_scoring_penalty_relay_cluster(&has_bits);
          scoring_penalty_relay_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route_exceptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed32 your_public_port = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_your_public_port(&has_bits);
          your_public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alt_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_latency_datacenter_ids_p2p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117) {
          _internal_add_latency_datacenter_ids_p2p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_latency_ping_ms_p2p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_latency_ping_ms_p2p(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramRouterPingReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_client_timestamp(), target);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->_internal_latency_datacenter_ids_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_latency_datacenter_ids(), target);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    int byte_size = _latency_ping_ms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_latency_ping_ms(), byte_size, target);
    }
  }

  // optional fixed32 your_public_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_your_public_ip(), target);
  }

  // optional fixed32 server_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_server_time(), target);
  }

  // optional fixed64 challenge = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_client_cookie(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_exceptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_route_exceptions(i), target, stream);
  }

  // optional fixed32 your_public_port = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_your_public_port(), target);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_flags(), target);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alt_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_alt_addresses(i), target, stream);
  }

  // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
  if (this->_internal_latency_datacenter_ids_p2p_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_latency_datacenter_ids_p2p(), target);
  }

  // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
  {
    int byte_size = _latency_ping_ms_p2p_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_latency_ping_ms_p2p(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply)
  return target;
}

size_t CMsgSteamDatagramRouterPingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_latency_datacenter_ids_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latency_datacenter_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->latency_ping_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latency_ping_ms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  total_size += 1UL * this->_internal_route_exceptions_size();
  for (const auto& msg : this->route_exceptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
  total_size += 1UL * this->_internal_alt_addresses_size();
  for (const auto& msg : this->alt_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_latency_datacenter_ids_p2p_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latency_datacenter_ids_p2p_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->latency_ping_ms_p2p_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latency_ping_ms_p2p_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed32 client_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_ip = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 scoring_penalty_relay_cluster = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scoring_penalty_relay_cluster());
    }

    // optional fixed32 your_public_port = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRouterPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramRouterPingReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRouterPingReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRouterPingReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latency_datacenter_ids_.MergeFrom(from.latency_datacenter_ids_);
  latency_ping_ms_.MergeFrom(from.latency_ping_ms_);
  route_exceptions_.MergeFrom(from.route_exceptions_);
  alt_addresses_.MergeFrom(from.alt_addresses_);
  latency_datacenter_ids_p2p_.MergeFrom(from.latency_datacenter_ids_p2p_);
  latency_ping_ms_p2p_.MergeFrom(from.latency_ping_ms_p2p_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      client_timestamp_ = from.client_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      your_public_ip_ = from.your_public_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000040u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    if (cached_has_bits & 0x00000080u) {
      your_public_port_ = from.your_public_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_flags(from._internal_flags());
  }
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply::InternalSwap(CMsgSteamDatagramRouterPingReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  latency_datacenter_ids_.InternalSwap(&other->latency_datacenter_ids_);
  latency_ping_ms_.InternalSwap(&other->latency_ping_ms_);
  route_exceptions_.InternalSwap(&other->route_exceptions_);
  alt_addresses_.InternalSwap(&other->alt_addresses_);
  latency_datacenter_ids_p2p_.InternalSwap(&other->latency_datacenter_ids_p2p_);
  latency_ping_ms_p2p_.InternalSwap(&other->latency_ping_ms_p2p_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, flags_)
      + sizeof(CMsgSteamDatagramRouterPingReply::flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, client_timestamp_)>(
          reinterpret_cast<char*>(&client_timestamp_),
          reinterpret_cast<char*>(&other->client_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramRouterPingReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramGameserverPingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverPingRequest>()._has_bits_);
  static void set_has_your_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_your_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_router_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramGameserverPingRequest::CMsgSteamDatagramGameserverPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingRequest)
}
CMsgSteamDatagramGameserverPingRequest::CMsgSteamDatagramGameserverPingRequest(const CMsgSteamDatagramGameserverPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&your_public_ip_, &from.your_public_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&your_public_port_) -
    reinterpret_cast<char*>(&your_public_ip_)) + sizeof(your_public_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingRequest)
}

void CMsgSteamDatagramGameserverPingRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&your_public_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&your_public_port_) -
    reinterpret_cast<char*>(&your_public_ip_)) + sizeof(your_public_port_));
}

CMsgSteamDatagramGameserverPingRequest::~CMsgSteamDatagramGameserverPingRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramGameserverPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramGameserverPingRequest::ArenaDtor(void* object) {
  CMsgSteamDatagramGameserverPingRequest* _this = reinterpret_cast< CMsgSteamDatagramGameserverPingRequest* >(object);
  (void)_this;
}
void CMsgSteamDatagramGameserverPingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramGameserverPingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramGameserverPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&your_public_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&your_public_port_) -
        reinterpret_cast<char*>(&your_public_ip_)) + sizeof(your_public_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverPingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 your_public_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_your_public_ip(&has_bits);
          your_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 router_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_router_timestamp(&has_bits);
          router_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 your_public_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_your_public_port(&has_bits);
          your_public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramGameserverPingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 your_public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_your_public_ip(), target);
  }

  // optional fixed32 server_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_server_time(), target);
  }

  // optional fixed64 challenge = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_challenge(), target);
  }

  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_router_timestamp(), target);
  }

  // optional fixed32 your_public_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_your_public_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingRequest)
  return target;
}

size_t CMsgSteamDatagramGameserverPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed32 your_public_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 router_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverPingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverPingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramGameserverPingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverPingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverPingRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverPingRequest::MergeFrom(const CMsgSteamDatagramGameserverPingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      your_public_ip_ = from.your_public_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      router_timestamp_ = from.router_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      your_public_port_ = from.your_public_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverPingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPingRequest::CopyFrom(const CMsgSteamDatagramGameserverPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverPingRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPingRequest::InternalSwap(CMsgSteamDatagramGameserverPingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequest, your_public_port_)
      + sizeof(CMsgSteamDatagramGameserverPingRequest::your_public_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequest, your_public_ip_)>(
          reinterpret_cast<char*>(&your_public_ip_),
          reinterpret_cast<char*>(&other->your_public_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramGameserverPingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramLegacyGameserverPingReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramLegacyGameserverPingReply>()._has_bits_);
  static void set_has_router_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dummy_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamDatagramLegacyGameserverPingReply::CMsgSteamDatagramLegacyGameserverPingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramLegacyGameserverPingReply)
}
CMsgSteamDatagramLegacyGameserverPingReply::CMsgSteamDatagramLegacyGameserverPingReply(const CMsgSteamDatagramLegacyGameserverPingReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&router_timestamp_, &from.router_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&dummy_pad_) -
    reinterpret_cast<char*>(&router_timestamp_)) + sizeof(dummy_pad_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramLegacyGameserverPingReply)
}

void CMsgSteamDatagramLegacyGameserverPingReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&router_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dummy_pad_) -
    reinterpret_cast<char*>(&router_timestamp_)) + sizeof(dummy_pad_));
}

CMsgSteamDatagramLegacyGameserverPingReply::~CMsgSteamDatagramLegacyGameserverPingReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramLegacyGameserverPingReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramLegacyGameserverPingReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramLegacyGameserverPingReply::ArenaDtor(void* object) {
  CMsgSteamDatagramLegacyGameserverPingReply* _this = reinterpret_cast< CMsgSteamDatagramLegacyGameserverPingReply* >(object);
  (void)_this;
}
void CMsgSteamDatagramLegacyGameserverPingReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramLegacyGameserverPingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramLegacyGameserverPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramLegacyGameserverPingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&router_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy_pad_) -
        reinterpret_cast<char*>(&router_timestamp_)) + sizeof(dummy_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramLegacyGameserverPingReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 router_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_router_timestamp(&has_bits);
          router_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 dummy_pad = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_dummy_pad(&has_bits);
          dummy_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramLegacyGameserverPingReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramLegacyGameserverPingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_router_timestamp(), target);
  }

  // optional fixed64 dummy_pad = 99;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(99, this->_internal_dummy_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramLegacyGameserverPingReply)
  return target;
}

size_t CMsgSteamDatagramLegacyGameserverPingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramLegacyGameserverPingReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 router_timestamp = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed64 dummy_pad = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramLegacyGameserverPingReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramLegacyGameserverPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLegacyGameserverPingReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramLegacyGameserverPingReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramLegacyGameserverPingReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramLegacyGameserverPingReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLegacyGameserverPingReply::MergeFrom(const CMsgSteamDatagramLegacyGameserverPingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramLegacyGameserverPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      router_timestamp_ = from.router_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      dummy_pad_ = from.dummy_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLegacyGameserverPingReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramLegacyGameserverPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLegacyGameserverPingReply::CopyFrom(const CMsgSteamDatagramLegacyGameserverPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramLegacyGameserverPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLegacyGameserverPingReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLegacyGameserverPingReply::InternalSwap(CMsgSteamDatagramLegacyGameserverPingReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramLegacyGameserverPingReply, dummy_pad_)
      + sizeof(CMsgSteamDatagramLegacyGameserverPingReply::dummy_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramLegacyGameserverPingReply, router_timestamp_)>(
          reinterpret_cast<char*>(&router_timestamp_),
          reinterpret_cast<char*>(&other->router_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramLegacyGameserverPingReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramGameserverPingReply_SignedData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverPingReply_SignedData>()._has_bits_);
  static void set_has_challenge_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_router_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSteamDatagramGameserverPingReply_SignedData::CMsgSteamDatagramGameserverPingReply_SignedData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingReply.SignedData)
}
CMsgSteamDatagramGameserverPingReply_SignedData::CMsgSteamDatagramGameserverPingReply_SignedData(const CMsgSteamDatagramGameserverPingReply_SignedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingReply.SignedData)
}

void CMsgSteamDatagramGameserverPingReply_SignedData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&challenge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(appid_));
}

CMsgSteamDatagramGameserverPingReply_SignedData::~CMsgSteamDatagramGameserverPingReply_SignedData() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingReply.SignedData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramGameserverPingReply_SignedData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramGameserverPingReply_SignedData::ArenaDtor(void* object) {
  CMsgSteamDatagramGameserverPingReply_SignedData* _this = reinterpret_cast< CMsgSteamDatagramGameserverPingReply_SignedData* >(object);
  (void)_this;
}
void CMsgSteamDatagramGameserverPingReply_SignedData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramGameserverPingReply_SignedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramGameserverPingReply_SignedData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingReply.SignedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverPingReply_SignedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 challenge_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_challenge_time(&has_bits);
          challenge_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 router_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_router_timestamp(&has_bits);
          router_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 data_center_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_data_center_id(&has_bits);
          data_center_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramGameserverPingReply_SignedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingReply.SignedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 challenge_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_challenge_time(), target);
  }

  // optional fixed64 challenge = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_challenge(), target);
  }

  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_router_timestamp(), target);
  }

  // optional fixed32 data_center_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_data_center_id(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingReply.SignedData)
  return target;
}

size_t CMsgSteamDatagramGameserverPingReply_SignedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingReply.SignedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 challenge = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed32 challenge_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 router_timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 data_center_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverPingReply_SignedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverPingReply.SignedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverPingReply_SignedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramGameserverPingReply_SignedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverPingReply.SignedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverPingReply.SignedData)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverPingReply_SignedData::MergeFrom(const CMsgSteamDatagramGameserverPingReply_SignedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingReply.SignedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_time_ = from.challenge_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      router_timestamp_ = from.router_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverPingReply_SignedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverPingReply.SignedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPingReply_SignedData::CopyFrom(const CMsgSteamDatagramGameserverPingReply_SignedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingReply.SignedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverPingReply_SignedData::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPingReply_SignedData::InternalSwap(CMsgSteamDatagramGameserverPingReply_SignedData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReply_SignedData, appid_)
      + sizeof(CMsgSteamDatagramGameserverPingReply_SignedData::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReply_SignedData, challenge_)>(
          reinterpret_cast<char*>(&challenge_),
          reinterpret_cast<char*>(&other->challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramGameserverPingReply_SignedData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramGameserverPingReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverPingReply>()._has_bits_);
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramGameserverPingReply* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signed_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramGameserverPingReply::_Internal::cert(const CMsgSteamDatagramGameserverPingReply* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramGameserverPingReply::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramGameserverPingReply::CMsgSteamDatagramGameserverPingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingReply)
}
CMsgSteamDatagramGameserverPingReply::CMsgSteamDatagramGameserverPingReply(const CMsgSteamDatagramGameserverPingReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signed_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signed_data()) {
    signed_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signed_data(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingReply)
}

void CMsgSteamDatagramGameserverPingReply::SharedCtor() {
signed_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cert_ = nullptr;
}

CMsgSteamDatagramGameserverPingReply::~CMsgSteamDatagramGameserverPingReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramGameserverPingReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signed_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramGameserverPingReply::ArenaDtor(void* object) {
  CMsgSteamDatagramGameserverPingReply* _this = reinterpret_cast< CMsgSteamDatagramGameserverPingReply* >(object);
  (void)_this;
}
void CMsgSteamDatagramGameserverPingReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramGameserverPingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramGameserverPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      signed_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverPingReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificateSigned cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signed_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signed_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramGameserverPingReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cert(this), target, stream);
  }

  // optional bytes signed_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signed_data(), target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingReply)
  return target;
}

size_t CMsgSteamDatagramGameserverPingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes signed_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signed_data());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverPingReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverPingReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramGameserverPingReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverPingReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverPingReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverPingReply::MergeFrom(const CMsgSteamDatagramGameserverPingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signed_data(from._internal_signed_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
  }
}

void CMsgSteamDatagramGameserverPingReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPingReply::CopyFrom(const CMsgSteamDatagramGameserverPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverPingReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPingReply::InternalSwap(CMsgSteamDatagramGameserverPingReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signed_data_.Swap(&other->signed_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cert_, other->cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramGameserverPingReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramNoSessionRelayToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramNoSessionRelayToClient>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_your_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_your_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoSessionRelayToClient)
}
CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(const CMsgSteamDatagramNoSessionRelayToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&your_public_ip_, &from.your_public_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&connection_id_) -
    reinterpret_cast<char*>(&your_public_ip_)) + sizeof(connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoSessionRelayToClient)
}

void CMsgSteamDatagramNoSessionRelayToClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&your_public_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connection_id_) -
    reinterpret_cast<char*>(&your_public_ip_)) + sizeof(connection_id_));
}

CMsgSteamDatagramNoSessionRelayToClient::~CMsgSteamDatagramNoSessionRelayToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoSessionRelayToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramNoSessionRelayToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramNoSessionRelayToClient::ArenaDtor(void* object) {
  CMsgSteamDatagramNoSessionRelayToClient* _this = reinterpret_cast< CMsgSteamDatagramNoSessionRelayToClient* >(object);
  (void)_this;
}
void CMsgSteamDatagramNoSessionRelayToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramNoSessionRelayToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramNoSessionRelayToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&your_public_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connection_id_) -
        reinterpret_cast<char*>(&your_public_ip_)) + sizeof(connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramNoSessionRelayToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 your_public_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_your_public_ip(&has_bits);
          your_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_until_shutdown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_seconds_until_shutdown(&has_bits);
          seconds_until_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 your_public_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_your_public_port(&has_bits);
          your_public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 connection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramNoSessionRelayToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 your_public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_your_public_ip(), target);
  }

  // optional fixed32 server_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_server_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 your_public_port = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_your_public_port(), target);
  }

  // optional fixed32 connection_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoSessionRelayToClient)
  return target;
}

size_t CMsgSteamDatagramNoSessionRelayToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoSessionRelayToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed32 your_public_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 your_public_port = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 connection_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramNoSessionRelayToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramNoSessionRelayToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramNoSessionRelayToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramNoSessionRelayToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramNoSessionRelayToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSessionRelayToClient::MergeFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      your_public_ip_ = from.your_public_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      your_public_port_ = from.your_public_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      connection_id_ = from.connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSessionRelayToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoSessionRelayToClient::InternalSwap(CMsgSteamDatagramNoSessionRelayToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, connection_id_)
      + sizeof(CMsgSteamDatagramNoSessionRelayToClient::connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, your_public_ip_)>(
          reinterpret_cast<char*>(&your_public_ip_),
          reinterpret_cast<char*>(&other->your_public_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramNoSessionRelayToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramNoSessionRelayToPeer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramNoSessionRelayToPeer>()._has_bits_);
  static void set_has_legacy_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kludge_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoSessionRelayToPeer)
}
CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(const CMsgSteamDatagramNoSessionRelayToPeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&legacy_relay_session_id_, &from.legacy_relay_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kludge_pad_) -
    reinterpret_cast<char*>(&legacy_relay_session_id_)) + sizeof(kludge_pad_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoSessionRelayToPeer)
}

void CMsgSteamDatagramNoSessionRelayToPeer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legacy_relay_session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kludge_pad_) -
    reinterpret_cast<char*>(&legacy_relay_session_id_)) + sizeof(kludge_pad_));
}

CMsgSteamDatagramNoSessionRelayToPeer::~CMsgSteamDatagramNoSessionRelayToPeer() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoSessionRelayToPeer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramNoSessionRelayToPeer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramNoSessionRelayToPeer::ArenaDtor(void* object) {
  CMsgSteamDatagramNoSessionRelayToPeer* _this = reinterpret_cast< CMsgSteamDatagramNoSessionRelayToPeer* >(object);
  (void)_this;
}
void CMsgSteamDatagramNoSessionRelayToPeer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramNoSessionRelayToPeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramNoSessionRelayToPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&legacy_relay_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kludge_pad_) -
        reinterpret_cast<char*>(&legacy_relay_session_id_)) + sizeof(kludge_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramNoSessionRelayToPeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_relay_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_legacy_relay_session_id(&has_bits);
          legacy_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_relay_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_from_relay_session_id(&has_bits);
          from_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_connection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_from_connection_id(&has_bits);
          from_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 kludge_pad = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_kludge_pad(&has_bits);
          kludge_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramNoSessionRelayToPeer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_relay_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_legacy_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_from_relay_session_id(), target);
  }

  // optional fixed32 from_connection_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_from_connection_id(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(99, this->_internal_kludge_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoSessionRelayToPeer)
  return target;
}

size_t CMsgSteamDatagramNoSessionRelayToPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoSessionRelayToPeer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 legacy_relay_session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_relay_session_id());
    }

    // optional fixed32 from_relay_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed64 kludge_pad = 99;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramNoSessionRelayToPeer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramNoSessionRelayToPeer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramNoSessionRelayToPeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramNoSessionRelayToPeer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramNoSessionRelayToPeer)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSessionRelayToPeer::MergeFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      legacy_relay_session_id_ = from.legacy_relay_session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      kludge_pad_ = from.kludge_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSessionRelayToPeer::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoSessionRelayToPeer::InternalSwap(CMsgSteamDatagramNoSessionRelayToPeer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, kludge_pad_)
      + sizeof(CMsgSteamDatagramNoSessionRelayToPeer::kludge_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, legacy_relay_session_id_)>(
          reinterpret_cast<char*>(&legacy_relay_session_id_),
          reinterpret_cast<char*>(&other->legacy_relay_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramNoSessionRelayToPeer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramClientPingSampleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleRequest>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleRequest)
}
CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_ = from.connection_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleRequest)
}

void CMsgSteamDatagramClientPingSampleRequest::SharedCtor() {
connection_id_ = 0u;
}

CMsgSteamDatagramClientPingSampleRequest::~CMsgSteamDatagramClientPingSampleRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramClientPingSampleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramClientPingSampleRequest::ArenaDtor(void* object) {
  CMsgSteamDatagramClientPingSampleRequest* _this = reinterpret_cast< CMsgSteamDatagramClientPingSampleRequest* >(object);
  (void)_this;
}
void CMsgSteamDatagramClientPingSampleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramClientPingSampleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramClientPingSampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramClientPingSampleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleRequest)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed32 connection_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_id()) {
    _internal_set_connection_id(from._internal_connection_id());
  }
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleRequest::InternalSwap(CMsgSteamDatagramClientPingSampleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(connection_id_, other->connection_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramClientPingSampleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
}
CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&front_ping_ms_, &from.front_ping_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_) -
    reinterpret_cast<char*>(&front_ping_ms_)) + sizeof(penalty_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&front_ping_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&penalty_) -
    reinterpret_cast<char*>(&front_ping_ms_)) + sizeof(penalty_));
}

CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::~CMsgSteamDatagramClientPingSampleReply_POP_AltAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::ArenaDtor(void* object) {
  CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* _this = reinterpret_cast< CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* >(object);
  (void)_this;
}
void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&front_ping_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_) -
        reinterpret_cast<char*>(&front_ping_ms_)) + sizeof(penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 front_ping_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_front_ping_ms(&has_bits);
          front_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_penalty(&has_bits);
          penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_front_ping_ms(), target);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional uint32 front_ping_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_front_ping_ms());
    }

    // optional uint32 penalty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      front_ping_ms_ = from.front_ping_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      penalty_ = from.penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::InternalSwap(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, penalty_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, front_ping_ms_)>(
          reinterpret_cast<char*>(&front_ping_ms_),
          reinterpret_cast<char*>(&other->front_ping_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_POP::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_POP>()._has_bits_);
  static void set_has_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_front_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cluster_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_e2e_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_e2e_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_p2p_via_peer_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_best_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_dc_score(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_default_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_default_dc_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_default_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_test_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_test_dc_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_test_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alt_addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.POP)
}
CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(const CMsgSteamDatagramClientPingSampleReply_POP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      alt_addresses_(from.alt_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pop_id_, &from.pop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_dc_via_relay_pop_id_) -
    reinterpret_cast<char*>(&pop_id_)) + sizeof(test_dc_via_relay_pop_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.POP)
}

void CMsgSteamDatagramClientPingSampleReply_POP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pop_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&test_dc_via_relay_pop_id_) -
    reinterpret_cast<char*>(&pop_id_)) + sizeof(test_dc_via_relay_pop_id_));
}

CMsgSteamDatagramClientPingSampleReply_POP::~CMsgSteamDatagramClientPingSampleReply_POP() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.POP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramClientPingSampleReply_POP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramClientPingSampleReply_POP::ArenaDtor(void* object) {
  CMsgSteamDatagramClientPingSampleReply_POP* _this = reinterpret_cast< CMsgSteamDatagramClientPingSampleReply_POP* >(object);
  (void)_this;
}
void CMsgSteamDatagramClientPingSampleReply_POP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramClientPingSampleReply_POP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramClientPingSampleReply_POP::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alt_addresses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_dc_score_) -
        reinterpret_cast<char*>(&pop_id_)) + sizeof(best_dc_score_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&best_dc_via_relay_pop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_dc_via_relay_pop_id_) -
        reinterpret_cast<char*>(&best_dc_via_relay_pop_id_)) + sizeof(test_dc_via_relay_pop_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply_POP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 pop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pop_id(&has_bits);
          pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_front_ping_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_default_front_ping_ms(&has_bits);
          default_front_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_e2e_ping_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_default_e2e_ping_ms(&has_bits);
          default_e2e_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cluster_penalty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cluster_penalty(&has_bits);
          cluster_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_e2e_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_default_e2e_score(&has_bits);
          default_e2e_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 p2p_via_peer_relay_pop_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_p2p_via_peer_relay_pop_id(&has_bits);
          p2p_via_peer_relay_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alt_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 best_dc_ping_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_best_dc_ping_ms(&has_bits);
          best_dc_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_dc_score = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_best_dc_score(&has_bits);
          best_dc_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 best_dc_via_relay_pop_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_best_dc_via_relay_pop_id(&has_bits);
          best_dc_via_relay_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_dc_ping_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_default_dc_ping_ms(&has_bits);
          default_dc_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_dc_score = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_default_dc_score(&has_bits);
          default_dc_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 default_dc_via_relay_pop_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_default_dc_via_relay_pop_id(&has_bits);
          default_dc_via_relay_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 test_dc_ping_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_test_dc_ping_ms(&has_bits);
          test_dc_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 test_dc_score = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_test_dc_score(&has_bits);
          test_dc_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 test_dc_via_relay_pop_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_test_dc_via_relay_pop_id(&has_bits);
          test_dc_via_relay_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramClientPingSampleReply_POP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 pop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_pop_id(), target);
  }

  // optional uint32 default_front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_default_front_ping_ms(), target);
  }

  // optional uint32 default_e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_default_e2e_ping_ms(), target);
  }

  // optional uint32 cluster_penalty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cluster_penalty(), target);
  }

  // optional uint32 default_e2e_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_default_e2e_score(), target);
  }

  // optional fixed32 p2p_via_peer_relay_pop_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_p2p_via_peer_relay_pop_id(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alt_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_alt_addresses(i), target, stream);
  }

  // optional uint32 best_dc_ping_ms = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_best_dc_ping_ms(), target);
  }

  // optional uint32 best_dc_score = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_best_dc_score(), target);
  }

  // optional fixed32 best_dc_via_relay_pop_id = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_best_dc_via_relay_pop_id(), target);
  }

  // optional uint32 default_dc_ping_ms = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_default_dc_ping_ms(), target);
  }

  // optional uint32 default_dc_score = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_default_dc_score(), target);
  }

  // optional fixed32 default_dc_via_relay_pop_id = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(14, this->_internal_default_dc_via_relay_pop_id(), target);
  }

  // optional uint32 test_dc_ping_ms = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_test_dc_ping_ms(), target);
  }

  // optional uint32 test_dc_score = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_test_dc_score(), target);
  }

  // optional fixed32 test_dc_via_relay_pop_id = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(17, this->_internal_test_dc_via_relay_pop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.POP)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply_POP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.POP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
  total_size += 1UL * this->_internal_alt_addresses_size();
  for (const auto& msg : this->alt_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed32 pop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 default_front_ping_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_front_ping_ms());
    }

    // optional uint32 default_e2e_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_e2e_ping_ms());
    }

    // optional uint32 cluster_penalty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cluster_penalty());
    }

    // optional uint32 default_e2e_score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_e2e_score());
    }

    // optional fixed32 p2p_via_peer_relay_pop_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 best_dc_ping_ms = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_dc_ping_ms());
    }

    // optional uint32 best_dc_score = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_dc_score());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional fixed32 best_dc_via_relay_pop_id = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 default_dc_ping_ms = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_dc_ping_ms());
    }

    // optional uint32 default_dc_score = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_dc_score());
    }

    // optional fixed32 default_dc_via_relay_pop_id = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 test_dc_ping_ms = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_test_dc_ping_ms());
    }

    // optional uint32 test_dc_score = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_test_dc_score());
    }

    // optional fixed32 test_dc_via_relay_pop_id = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_POP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_POP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleReply_POP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleReply.POP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleReply.POP)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_POP::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_POP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alt_addresses_.MergeFrom(from.alt_addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pop_id_ = from.pop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_front_ping_ms_ = from.default_front_ping_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_e2e_ping_ms_ = from.default_e2e_ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      cluster_penalty_ = from.cluster_penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_e2e_score_ = from.default_e2e_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      p2p_via_peer_relay_pop_id_ = from.p2p_via_peer_relay_pop_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      best_dc_ping_ms_ = from.best_dc_ping_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_dc_score_ = from.best_dc_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      best_dc_via_relay_pop_id_ = from.best_dc_via_relay_pop_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_dc_ping_ms_ = from.default_dc_ping_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      default_dc_score_ = from.default_dc_score_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_dc_via_relay_pop_id_ = from.default_dc_via_relay_pop_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      test_dc_ping_ms_ = from.test_dc_ping_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      test_dc_score_ = from.test_dc_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      test_dc_via_relay_pop_id_ = from.test_dc_via_relay_pop_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply_POP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_POP::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_POP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_POP::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_POP::InternalSwap(CMsgSteamDatagramClientPingSampleReply_POP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  alt_addresses_.InternalSwap(&other->alt_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, test_dc_via_relay_pop_id_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_POP::test_dc_via_relay_pop_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, pop_id_)>(
          reinterpret_cast<char*>(&pop_id_),
          reinterpret_cast<char*>(&other->pop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramClientPingSampleReply_POP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>()._has_bits_);
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_best_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_best_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
}
CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_center_id_, &from.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_dc_ping_ms_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(best_dc_ping_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_center_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&best_dc_ping_ms_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(best_dc_ping_ms_));
}

CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::~CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::ArenaDtor(void* object) {
  CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter* _this = reinterpret_cast< CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter* >(object);
  (void)_this;
}
void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_dc_ping_ms_) -
        reinterpret_cast<char*>(&data_center_id_)) + sizeof(best_dc_ping_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 data_center_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_data_center_id(&has_bits);
          data_center_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 best_dc_via_relay_pop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_best_dc_via_relay_pop_id(&has_bits);
          best_dc_via_relay_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_dc_ping_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_best_dc_ping_ms(&has_bits);
          best_dc_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_data_center_id(), target);
  }

  // optional fixed32 best_dc_via_relay_pop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_best_dc_via_relay_pop_id(), target);
  }

  // optional uint32 best_dc_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_best_dc_ping_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 best_dc_via_relay_pop_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 best_dc_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_dc_ping_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      best_dc_via_relay_pop_id_ = from.best_dc_via_relay_pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      best_dc_ping_ms_ = from.best_dc_ping_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::InternalSwap(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, best_dc_ping_ms_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::best_dc_ping_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, data_center_id_)>(
          reinterpret_cast<char*>(&data_center_id_),
          reinterpret_cast<char*>(&other->data_center_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramClientPingSampleReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pops_(arena),
  legacy_data_centers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply)
}
CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pops_(from.pops_),
      legacy_data_centers_(from.legacy_data_centers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&override_active_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(override_active_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply)
}

void CMsgSteamDatagramClientPingSampleReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_active_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(override_active_));
}

CMsgSteamDatagramClientPingSampleReply::~CMsgSteamDatagramClientPingSampleReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramClientPingSampleReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramClientPingSampleReply::ArenaDtor(void* object) {
  CMsgSteamDatagramClientPingSampleReply* _this = reinterpret_cast< CMsgSteamDatagramClientPingSampleReply* >(object);
  (void)_this;
}
void CMsgSteamDatagramClientPingSampleReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramClientPingSampleReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramClientPingSampleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pops_.Clear();
  legacy_data_centers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&override_active_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(override_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_legacy_data_centers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramClientPingSampleReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pops(i), target, stream);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_legacy_data_centers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_legacy_data_centers(i), target, stream);
  }

  // optional bool override_active = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_override_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
  total_size += 1UL * this->_internal_pops_size();
  for (const auto& msg : this->pops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
  total_size += 1UL * this->_internal_legacy_data_centers_size();
  for (const auto& msg : this->legacy_data_centers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool override_active = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pops_.MergeFrom(from.pops_);
  legacy_data_centers_.MergeFrom(from.legacy_data_centers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_active_ = from.override_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply::InternalSwap(CMsgSteamDatagramClientPingSampleReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pops_.InternalSwap(&other->pops_);
  legacy_data_centers_.InternalSwap(&other->legacy_data_centers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, override_active_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply::override_active_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, connection_id_)>(
          reinterpret_cast<char*>(&connection_id_),
          reinterpret_cast<char*>(&other->connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramClientPingSampleReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_back_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_until_down(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_until_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_until_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ArenaDtor(void* object) {
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* _this = reinterpret_cast< CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* >(object);
  (void)_this;
}
void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_until_down_) -
        reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 front_ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_front_ping(&has_bits);
          front_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 back_ping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_back_ping(&has_bits);
          back_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_until_down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seconds_until_down(&has_bits);
          seconds_until_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_score(), target);
  }

  // optional uint32 front_ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_front_ping(), target);
  }

  // optional uint32 back_ping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_back_ping(), target);
  }

  // optional uint32 seconds_until_down = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seconds_until_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return target;
}

size_t CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 front_ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_front_ping());
    }

    // optional uint32 back_ping = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_back_ping());
    }

    // optional uint32 seconds_until_down = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_until_down());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_ping_ = from.front_ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_ping_ = from.back_ping_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_down_ = from.seconds_until_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, seconds_until_down_)
      + sizeof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::seconds_until_down_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramClientSwitchedPrimary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientSwitchedPrimary>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_from_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_from_router_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_from_active_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_from_active_packets_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_from_dropped_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gap_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_from_quality_now(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_to_quality_now(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_from_quality_then(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_to_quality_then(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::_Internal::from_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->from_quality_now_;
}
const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::_Internal::to_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->to_quality_now_;
}
const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::_Internal::from_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->from_quality_then_;
}
const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::_Internal::to_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->to_quality_then_;
}
CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientSwitchedPrimary)
}
CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_dropped_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_dropped_reason()) {
    from_dropped_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_dropped_reason(), 
      GetArena());
  }
  if (from._internal_has_from_quality_now()) {
    from_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.from_quality_now_);
  } else {
    from_quality_now_ = nullptr;
  }
  if (from._internal_has_to_quality_now()) {
    to_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.to_quality_now_);
  } else {
    to_quality_now_ = nullptr;
  }
  if (from._internal_has_from_quality_then()) {
    from_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.from_quality_then_);
  } else {
    from_quality_then_ = nullptr;
  }
  if (from._internal_has_to_quality_then()) {
    to_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.to_quality_then_);
  } else {
    to_quality_then_ = nullptr;
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gap_ms_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(gap_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientSwitchedPrimary)
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedCtor() {
from_dropped_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_quality_now_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gap_ms_) -
    reinterpret_cast<char*>(&from_quality_now_)) + sizeof(gap_ms_));
}

CMsgSteamDatagramClientSwitchedPrimary::~CMsgSteamDatagramClientSwitchedPrimary() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_dropped_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_quality_now_;
  if (this != internal_default_instance()) delete to_quality_now_;
  if (this != internal_default_instance()) delete from_quality_then_;
  if (this != internal_default_instance()) delete to_quality_then_;
}

void CMsgSteamDatagramClientSwitchedPrimary::ArenaDtor(void* object) {
  CMsgSteamDatagramClientSwitchedPrimary* _this = reinterpret_cast< CMsgSteamDatagramClientSwitchedPrimary* >(object);
  (void)_this;
}
void CMsgSteamDatagramClientSwitchedPrimary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramClientSwitchedPrimary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramClientSwitchedPrimary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      from_dropped_reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(from_quality_now_ != nullptr);
      from_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(to_quality_now_ != nullptr);
      to_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(from_quality_then_ != nullptr);
      from_quality_then_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(to_quality_then_ != nullptr);
      to_quality_then_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_port_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(from_port_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&from_router_cluster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gap_ms_) -
        reinterpret_cast<char*>(&from_router_cluster_)) + sizeof(gap_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientSwitchedPrimary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_from_ip(&has_bits);
          from_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_router_cluster = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_from_router_cluster(&has_bits);
          from_router_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 from_active_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_from_active_time(&has_bits);
          from_active_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 from_active_packets_recv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_from_active_packets_recv(&has_bits);
          from_active_packets_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_dropped_reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_from_dropped_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gap_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gap_ms(&has_bits);
          gap_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_quality_now(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_quality_now(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_quality_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_quality_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramClientSwitchedPrimary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // optional fixed32 from_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_from_ip(), target);
  }

  // optional uint32 from_port = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional fixed32 from_router_cluster = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_from_router_cluster(), target);
  }

  // optional uint32 from_active_time = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_from_active_time(), target);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_from_active_packets_recv(), target);
  }

  // optional string from_dropped_reason = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_dropped_reason().data(), static_cast<int>(this->_internal_from_dropped_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_from_dropped_reason(), target);
  }

  // optional uint32 gap_ms = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_gap_ms(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::from_quality_now(this), target, stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::to_quality_now(this), target, stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::from_quality_then(this), target, stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::to_quality_then(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary)
  return target;
}

size_t CMsgSteamDatagramClientSwitchedPrimary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string from_dropped_reason = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_dropped_reason());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *from_quality_now_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_quality_now_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *from_quality_then_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_quality_then_);
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_ip = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 from_port = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_from_port());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed32 from_router_cluster = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 from_active_time = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_from_active_time());
    }

    // optional uint32 from_active_packets_recv = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_from_active_packets_recv());
    }

    // optional uint32 gap_ms = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gap_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramClientSwitchedPrimary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientSwitchedPrimary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientSwitchedPrimary)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_dropped_reason(from._internal_from_dropped_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_from_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from._internal_from_quality_now());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_to_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from._internal_to_quality_now());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_from_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from._internal_from_quality_then());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_to_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from._internal_to_quality_then());
    }
    if (cached_has_bits & 0x00000020u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      from_ip_ = from.from_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_port_ = from.from_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      from_router_cluster_ = from.from_router_cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      from_active_time_ = from.from_active_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      from_active_packets_recv_ = from.from_active_packets_recv_;
    }
    if (cached_has_bits & 0x00000800u) {
      gap_ms_ = from.gap_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_dropped_reason_.Swap(&other->from_dropped_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, gap_ms_)
      + sizeof(CMsgSteamDatagramClientSwitchedPrimary::gap_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_quality_now_)>(
          reinterpret_cast<char*>(&from_quality_now_),
          reinterpret_cast<char*>(&other->from_quality_now_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramClientSwitchedPrimary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectRequest>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_my_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ping_est_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_virtual_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamDatagramConnectRequest* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramConnectRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_legacy_client_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamDatagramConnectRequest::_Internal::crypt(const CMsgSteamDatagramConnectRequest* msg) {
  return *msg->crypt_;
}
const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramConnectRequest::_Internal::cert(const CMsgSteamDatagramConnectRequest* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramConnectRequest::clear_crypt() {
  if (crypt_ != nullptr) crypt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectRequest::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectRequest)
}
CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(const CMsgSteamDatagramConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&routing_secret_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(routing_secret_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectRequest)
}

void CMsgSteamDatagramConnectRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crypt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routing_secret_) -
    reinterpret_cast<char*>(&crypt_)) + sizeof(routing_secret_));
}

CMsgSteamDatagramConnectRequest::~CMsgSteamDatagramConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramConnectRequest::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectRequest* _this = reinterpret_cast< CMsgSteamDatagramConnectRequest* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_port_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(virtual_port_));
  }
  routing_secret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 gameserver_relay_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gameserver_relay_session_id(&has_bits);
          gameserver_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_client_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_legacy_client_steam_id(&has_bits);
          legacy_client_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 my_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_my_timestamp(&has_bits);
          my_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_est_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ping_est_ms(&has_bits);
          ping_est_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramCertificateSigned cert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 virtual_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_virtual_port(&has_bits);
          virtual_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 routing_secret = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_routing_secret(&has_bits);
          routing_secret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_legacy_client_steam_id(), target);
  }

  // optional fixed64 my_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::crypt(this), target, stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cert(this), target, stream);
  }

  // optional uint32 virtual_port = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_virtual_port(), target);
  }

  // optional fixed64 routing_secret = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_routing_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectRequest)
  return target;
}

size_t CMsgSteamDatagramConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gameserver_relay_session_id());
    }

    // optional fixed64 legacy_client_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 my_timestamp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 ping_est_ms = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_est_ms());
    }

    // optional uint32 virtual_port = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_virtual_port());
    }

  }
  // optional fixed64 routing_secret = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectRequest::MergeFrom(const CMsgSteamDatagramConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from._internal_crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameserver_relay_session_id_ = from.gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_client_steam_id_ = from.legacy_client_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      my_timestamp_ = from.my_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      ping_est_ms_ = from.ping_est_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      virtual_port_ = from.virtual_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_routing_secret(from._internal_routing_secret());
  }
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const CMsgSteamDatagramConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectRequest::InternalSwap(CMsgSteamDatagramConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, routing_secret_)
      + sizeof(CMsgSteamDatagramConnectRequest::routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, crypt_)>(
          reinterpret_cast<char*>(&crypt_),
          reinterpret_cast<char*>(&other->crypt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectOK::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectOK>()._has_bits_);
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_your_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delay_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamDatagramConnectOK* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramConnectOK* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamDatagramConnectOK::_Internal::crypt(const CMsgSteamDatagramConnectOK* msg) {
  return *msg->crypt_;
}
const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramConnectOK::_Internal::cert(const CMsgSteamDatagramConnectOK* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramConnectOK::clear_crypt() {
  if (crypt_ != nullptr) crypt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectOK::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectOK)
}
CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(const CMsgSteamDatagramConnectOK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  ::memcpy(&client_connection_id_, &from.client_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&client_connection_id_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectOK)
}

void CMsgSteamDatagramConnectOK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crypt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&crypt_)) + sizeof(server_connection_id_));
}

CMsgSteamDatagramConnectOK::~CMsgSteamDatagramConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectOK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectOK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramConnectOK::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectOK* _this = reinterpret_cast< CMsgSteamDatagramConnectOK* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectOK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectOK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectOK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&client_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_connection_id_) -
        reinterpret_cast<char*>(&client_connection_id_)) + sizeof(server_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectOK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 client_connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 gameserver_relay_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gameserver_relay_session_id(&has_bits);
          gameserver_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 your_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_your_timestamp(&has_bits);
          your_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay_time_usec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_delay_time_usec(&has_bits);
          delay_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramCertificateSigned cert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_connection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_server_connection_id(&has_bits);
          server_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectOK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectOK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_client_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameserver_relay_session_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_delay_time_usec(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::crypt(this), target, stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cert(this), target, stream);
  }

  // optional fixed32 server_connection_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_server_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectOK)
  return target;
}

size_t CMsgSteamDatagramConnectOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectOK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional fixed32 client_connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gameserver_relay_session_id());
    }

    // optional fixed64 your_timestamp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 delay_time_usec = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay_time_usec());
    }

    // optional fixed32 server_connection_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectOK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectOK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectOK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectOK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectOK)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectOK::MergeFrom(const CMsgSteamDatagramConnectOK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from._internal_crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameserver_relay_session_id_ = from.gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      your_timestamp_ = from.your_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_time_usec_ = from.delay_time_usec_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_connection_id_ = from.server_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectOK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectOK::CopyFrom(const CMsgSteamDatagramConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectOK::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectOK::InternalSwap(CMsgSteamDatagramConnectOK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, server_connection_id_)
      + sizeof(CMsgSteamDatagramConnectOK::server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, crypt_)>(
          reinterpret_cast<char*>(&crypt_),
          reinterpret_cast<char*>(&other->crypt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectOK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamNetworkingP2PSDRRoutingSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PSDRRoutingSummary>()._has_bits_);
  static void set_has_initial_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_ping_front_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial_ping_front_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_pop_local(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_initial_pop_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_best_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_ping_front_local(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_best_ping_front_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_best_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_best_pop_local(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_best_pop_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_best_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_negotiation_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selected_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
}
CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(const CMsgSteamNetworkingP2PSDRRoutingSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&initial_ping_, &from.initial_ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_time_) -
    reinterpret_cast<char*>(&initial_ping_)) + sizeof(best_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initial_ping_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&best_time_) -
    reinterpret_cast<char*>(&initial_ping_)) + sizeof(best_time_));
}

CMsgSteamNetworkingP2PSDRRoutingSummary::~CMsgSteamNetworkingP2PSDRRoutingSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::ArenaDtor(void* object) {
  CMsgSteamNetworkingP2PSDRRoutingSummary* _this = reinterpret_cast< CMsgSteamNetworkingP2PSDRRoutingSummary* >(object);
  (void)_this;
}
void CMsgSteamNetworkingP2PSDRRoutingSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingP2PSDRRoutingSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&initial_ping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_seconds_) -
        reinterpret_cast<char*>(&initial_ping_)) + sizeof(selected_seconds_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&best_ping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_time_) -
        reinterpret_cast<char*>(&best_ping_)) + sizeof(best_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PSDRRoutingSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 initial_ping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_initial_ping(&has_bits);
          initial_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_ping_front_local = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_initial_ping_front_local(&has_bits);
          initial_ping_front_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_ping_front_remote = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_initial_ping_front_remote(&has_bits);
          initial_ping_front_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_initial_score(&has_bits);
          initial_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 initial_pop_local = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_initial_pop_local(&has_bits);
          initial_pop_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 initial_pop_remote = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_initial_pop_remote(&has_bits);
          initial_pop_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 negotiation_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_negotiation_ms(&has_bits);
          negotiation_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selected_seconds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_selected_seconds(&has_bits);
          selected_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_ping = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_best_ping(&has_bits);
          best_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_ping_front_local = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_best_ping_front_local(&has_bits);
          best_ping_front_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_ping_front_remote = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_best_ping_front_remote(&has_bits);
          best_ping_front_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_score = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_best_score(&has_bits);
          best_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 best_pop_local = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_best_pop_local(&has_bits);
          best_pop_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 best_pop_remote = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_best_pop_remote(&has_bits);
          best_pop_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_best_time(&has_bits);
          best_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingP2PSDRRoutingSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 initial_ping = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_initial_ping(), target);
  }

  // optional uint32 initial_ping_front_local = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_initial_ping_front_local(), target);
  }

  // optional uint32 initial_ping_front_remote = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_initial_ping_front_remote(), target);
  }

  // optional uint32 initial_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_initial_score(), target);
  }

  // optional fixed32 initial_pop_local = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_initial_pop_local(), target);
  }

  // optional fixed32 initial_pop_remote = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_initial_pop_remote(), target);
  }

  // optional uint32 negotiation_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_negotiation_ms(), target);
  }

  // optional uint32 selected_seconds = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_selected_seconds(), target);
  }

  // optional uint32 best_ping = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_best_ping(), target);
  }

  // optional uint32 best_ping_front_local = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_best_ping_front_local(), target);
  }

  // optional uint32 best_ping_front_remote = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_best_ping_front_remote(), target);
  }

  // optional uint32 best_score = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_best_score(), target);
  }

  // optional fixed32 best_pop_local = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(15, this->_internal_best_pop_local(), target);
  }

  // optional fixed32 best_pop_remote = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(16, this->_internal_best_pop_remote(), target);
  }

  // optional uint32 best_time = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_best_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PSDRRoutingSummary)
  return target;
}

size_t CMsgSteamNetworkingP2PSDRRoutingSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 initial_ping = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_ping());
    }

    // optional uint32 initial_ping_front_local = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_ping_front_local());
    }

    // optional uint32 initial_ping_front_remote = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_ping_front_remote());
    }

    // optional uint32 initial_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_score());
    }

    // optional fixed32 initial_pop_local = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 initial_pop_remote = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 negotiation_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_negotiation_ms());
    }

    // optional uint32 selected_seconds = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selected_seconds());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 best_ping = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_ping());
    }

    // optional uint32 best_ping_front_local = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_ping_front_local());
    }

    // optional uint32 best_ping_front_remote = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_ping_front_remote());
    }

    // optional uint32 best_score = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_score());
    }

    // optional fixed32 best_pop_local = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 best_pop_remote = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional uint32 best_time = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PSDRRoutingSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingP2PSDRRoutingSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PSDRRoutingSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PSDRRoutingSummary)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::MergeFrom(const CMsgSteamNetworkingP2PSDRRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      initial_ping_ = from.initial_ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      initial_ping_front_local_ = from.initial_ping_front_local_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_ping_front_remote_ = from.initial_ping_front_remote_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_score_ = from.initial_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_pop_local_ = from.initial_pop_local_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_pop_remote_ = from.initial_pop_remote_;
    }
    if (cached_has_bits & 0x00000040u) {
      negotiation_ms_ = from.negotiation_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      selected_seconds_ = from.selected_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      best_ping_ = from.best_ping_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_ping_front_local_ = from.best_ping_front_local_;
    }
    if (cached_has_bits & 0x00000400u) {
      best_ping_front_remote_ = from.best_ping_front_remote_;
    }
    if (cached_has_bits & 0x00000800u) {
      best_score_ = from.best_score_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_pop_local_ = from.best_pop_local_;
    }
    if (cached_has_bits & 0x00002000u) {
      best_pop_remote_ = from.best_pop_remote_;
    }
    if (cached_has_bits & 0x00004000u) {
      best_time_ = from.best_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::CopyFrom(const CMsgSteamNetworkingP2PSDRRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PSDRRoutingSummary::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::InternalSwap(CMsgSteamNetworkingP2PSDRRoutingSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, best_time_)
      + sizeof(CMsgSteamNetworkingP2PSDRRoutingSummary::best_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, initial_ping_)>(
          reinterpret_cast<char*>(&initial_ping_),
          reinterpret_cast<char*>(&other->initial_ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingP2PSDRRoutingSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PRoutingSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutingSummary>()._has_bits_);
  static const ::CMsgSteamNetworkingICESessionSummary& ice(const CMsgSteamDatagramP2PRoutingSummary* msg);
  static void set_has_ice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamNetworkingP2PSDRRoutingSummary& sdr(const CMsgSteamDatagramP2PRoutingSummary* msg);
  static void set_has_sdr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamNetworkingICESessionSummary&
CMsgSteamDatagramP2PRoutingSummary::_Internal::ice(const CMsgSteamDatagramP2PRoutingSummary* msg) {
  return *msg->ice_;
}
const ::CMsgSteamNetworkingP2PSDRRoutingSummary&
CMsgSteamDatagramP2PRoutingSummary::_Internal::sdr(const CMsgSteamDatagramP2PRoutingSummary* msg) {
  return *msg->sdr_;
}
void CMsgSteamDatagramP2PRoutingSummary::clear_ice() {
  if (ice_ != nullptr) ice_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutingSummary)
}
CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(const CMsgSteamDatagramP2PRoutingSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ice()) {
    ice_ = new ::CMsgSteamNetworkingICESessionSummary(*from.ice_);
  } else {
    ice_ = nullptr;
  }
  if (from._internal_has_sdr()) {
    sdr_ = new ::CMsgSteamNetworkingP2PSDRRoutingSummary(*from.sdr_);
  } else {
    sdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutingSummary)
}

void CMsgSteamDatagramP2PRoutingSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ice_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sdr_) -
    reinterpret_cast<char*>(&ice_)) + sizeof(sdr_));
}

CMsgSteamDatagramP2PRoutingSummary::~CMsgSteamDatagramP2PRoutingSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutingSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PRoutingSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ice_;
  if (this != internal_default_instance()) delete sdr_;
}

void CMsgSteamDatagramP2PRoutingSummary::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PRoutingSummary* _this = reinterpret_cast< CMsgSteamDatagramP2PRoutingSummary* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PRoutingSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PRoutingSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PRoutingSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutingSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ice_ != nullptr);
      ice_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sdr_ != nullptr);
      sdr_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutingSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PRoutingSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutingSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ice(this), target, stream);
  }

  // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutingSummary)
  return target;
}

size_t CMsgSteamDatagramP2PRoutingSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutingSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ice_);
    }

    // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sdr_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRoutingSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PRoutingSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutingSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PRoutingSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PRoutingSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PRoutingSummary)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutingSummary::MergeFrom(const CMsgSteamDatagramP2PRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutingSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ice()->::CMsgSteamNetworkingICESessionSummary::MergeFrom(from._internal_ice());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sdr()->::CMsgSteamNetworkingP2PSDRRoutingSummary::MergeFrom(from._internal_sdr());
    }
  }
}

void CMsgSteamDatagramP2PRoutingSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutingSummary::CopyFrom(const CMsgSteamDatagramP2PRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutingSummary::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutingSummary::InternalSwap(CMsgSteamDatagramP2PRoutingSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, sdr_)
      + sizeof(CMsgSteamDatagramP2PRoutingSummary::sdr_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, ice_)>(
          reinterpret_cast<char*>(&ice_),
          reinterpret_cast<char*>(&other->ice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PRoutingSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectionClosed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionClosed>()._has_bits_);
  static void set_has_to_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_from_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_from_identity_binary(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_legacy_from_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_legacy_from_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_legacy_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_to_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_from_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_forward_target_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_relay_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_not_primary_session(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_not_primary_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing_summary(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_p2p_routing_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgSteamNetworkingIdentityLegacyBinary&
CMsgSteamDatagramConnectionClosed::_Internal::legacy_from_identity_binary(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->legacy_from_identity_binary_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionClosed::_Internal::quality_relay(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionClosed::_Internal::quality_e2e(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->quality_e2e_;
}
const ::CMsgSteamDatagramP2PRoutingSummary&
CMsgSteamDatagramConnectionClosed::_Internal::p2p_routing_summary(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->p2p_routing_summary_;
}
void CMsgSteamDatagramConnectionClosed::clear_legacy_from_identity_binary() {
  if (legacy_from_identity_binary_ != nullptr) legacy_from_identity_binary_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSteamDatagramConnectionClosed::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSteamDatagramConnectionClosed::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionClosed)
}
CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(const CMsgSteamDatagramConnectionClosed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_debug()) {
    debug_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_debug(), 
      GetArena());
  }
  forward_target_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_forward_target_relay_routing_token()) {
    forward_target_relay_routing_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_forward_target_relay_routing_token(), 
      GetArena());
  }
  from_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_identity_string()) {
    from_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_identity_string(), 
      GetArena());
  }
  if (from._internal_has_legacy_from_identity_binary()) {
    legacy_from_identity_binary_ = new ::CMsgSteamNetworkingIdentityLegacyBinary(*from.legacy_from_identity_binary_);
  } else {
    legacy_from_identity_binary_ = nullptr;
  }
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  if (from._internal_has_p2p_routing_summary()) {
    p2p_routing_summary_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from.p2p_routing_summary_);
  } else {
    p2p_routing_summary_ = nullptr;
  }
  ::memcpy(&legacy_from_steam_id_, &from.legacy_from_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_primary_transport_) -
    reinterpret_cast<char*>(&legacy_from_steam_id_)) + sizeof(not_primary_transport_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionClosed)
}

void CMsgSteamDatagramConnectionClosed::SharedCtor() {
debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
forward_target_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legacy_from_identity_binary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_primary_transport_) -
    reinterpret_cast<char*>(&legacy_from_identity_binary_)) + sizeof(not_primary_transport_));
}

CMsgSteamDatagramConnectionClosed::~CMsgSteamDatagramConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionClosed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionClosed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  debug_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forward_target_relay_routing_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete legacy_from_identity_binary_;
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
  if (this != internal_default_instance()) delete p2p_routing_summary_;
}

void CMsgSteamDatagramConnectionClosed::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionClosed* _this = reinterpret_cast< CMsgSteamDatagramConnectionClosed* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionClosed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionClosed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      debug_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      forward_target_relay_routing_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      from_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(legacy_from_identity_binary_ != nullptr);
      legacy_from_identity_binary_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(p2p_routing_summary_ != nullptr);
      p2p_routing_summary_->Clear();
    }
  }
  legacy_from_steam_id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&legacy_gameserver_relay_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&forward_target_revision_) -
        reinterpret_cast<char*>(&legacy_gameserver_relay_session_id_)) + sizeof(forward_target_revision_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&routing_secret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&not_primary_transport_) -
        reinterpret_cast<char*>(&routing_secret_)) + sizeof(not_primary_transport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionClosed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_legacy_gameserver_relay_session_id(&has_bits);
          legacy_gameserver_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_from_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_legacy_from_steam_id(&has_bits);
          legacy_from_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(val))) {
            _internal_set_relay_mode(static_cast<::CMsgSteamDatagramConnectionClosed_ERelayMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_debug();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramConnectionClosed.debug");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reason_code(&has_bits);
          reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 to_connection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_to_connection_id(&has_bits);
          to_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_connection_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_from_connection_id(&has_bits);
          from_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 to_relay_session_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_to_relay_session_id(&has_bits);
          to_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_relay_session_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_from_relay_session_id(&has_bits);
          from_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes forward_target_relay_routing_token = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_forward_target_relay_routing_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 forward_target_revision = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_forward_target_revision(&has_bits);
          forward_target_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_from_identity_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 routing_secret = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_routing_secret(&has_bits);
          routing_secret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string from_identity_string = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_from_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramConnectionClosed.from_identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool not_primary_session = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_not_primary_session(&has_bits);
          not_primary_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool not_primary_transport = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_not_primary_transport(&has_bits);
          not_primary_transport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_p2p_routing_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionClosed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_legacy_from_steam_id(), target);
  }

  // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_relay_mode(), target);
  }

  // optional string debug = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug().data(), static_cast<int>(this->_internal_debug().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramConnectionClosed.debug");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_debug(), target);
  }

  // optional uint32 reason_code = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_reason_code(), target);
  }

  // optional fixed32 to_connection_id = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_from_connection_id(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_from_relay_session_id(), target);
  }

  // optional bytes forward_target_relay_routing_token = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_forward_target_relay_routing_token(), target);
  }

  // optional uint32 forward_target_revision = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_forward_target_revision(), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::legacy_from_identity_binary(this), target, stream);
  }

  // optional fixed64 routing_secret = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(14, this->_internal_routing_secret(), target);
  }

  // optional string from_identity_string = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_identity_string().data(), static_cast<int>(this->_internal_from_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramConnectionClosed.from_identity_string");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_from_identity_string(), target);
  }

  // optional bool not_primary_session = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_not_primary_session(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::quality_e2e(this), target, stream);
  }

  // optional bool not_primary_transport = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_not_primary_transport(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::p2p_routing_summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionClosed)
  return target;
}

size_t CMsgSteamDatagramConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionClosed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string debug = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug());
    }

    // optional bytes forward_target_relay_routing_token = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_forward_target_relay_routing_token());
    }

    // optional string from_identity_string = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_identity_string());
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacy_from_identity_binary_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *p2p_routing_summary_);
    }

    // optional fixed64 legacy_from_steam_id = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_gameserver_relay_session_id());
    }

    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relay_mode());
    }

    // optional uint32 reason_code = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason_code());
    }

    // optional fixed32 to_connection_id = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 to_relay_session_id = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 forward_target_revision = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_forward_target_revision());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional fixed64 routing_secret = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional bool not_primary_session = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool not_primary_transport = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionClosed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionClosed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionClosed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionClosed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionClosed)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionClosed::MergeFrom(const CMsgSteamDatagramConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_debug(from._internal_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_forward_target_relay_routing_token(from._internal_forward_target_relay_routing_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_from_identity_string(from._internal_from_identity_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_legacy_from_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(from._internal_legacy_from_identity_binary());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_p2p_routing_summary()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(from._internal_p2p_routing_summary());
    }
    if (cached_has_bits & 0x00000080u) {
      legacy_from_steam_id_ = from.legacy_from_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      legacy_gameserver_relay_session_id_ = from.legacy_gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      relay_mode_ = from.relay_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      reason_code_ = from.reason_code_;
    }
    if (cached_has_bits & 0x00000800u) {
      to_connection_id_ = from.to_connection_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      to_relay_session_id_ = from.to_relay_session_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      forward_target_revision_ = from.forward_target_revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      routing_secret_ = from.routing_secret_;
    }
    if (cached_has_bits & 0x00020000u) {
      not_primary_session_ = from.not_primary_session_;
    }
    if (cached_has_bits & 0x00040000u) {
      not_primary_transport_ = from.not_primary_transport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const CMsgSteamDatagramConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionClosed::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionClosed::InternalSwap(CMsgSteamDatagramConnectionClosed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debug_.Swap(&other->debug_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  forward_target_relay_routing_token_.Swap(&other->forward_target_relay_routing_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_identity_string_.Swap(&other->from_identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, not_primary_transport_)
      + sizeof(CMsgSteamDatagramConnectionClosed::not_primary_transport_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, legacy_from_identity_binary_)>(
          reinterpret_cast<char*>(&legacy_from_identity_binary_),
          reinterpret_cast<char*>(&other->legacy_from_identity_binary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionClosed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramNoConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramNoConnection>()._has_bits_);
  static void set_has_to_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_legacy_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_to_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_from_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_from_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_from_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_to_end(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_not_primary_session(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_not_primary_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramNoConnection* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramNoConnection* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing_summary(const CMsgSteamDatagramNoConnection* msg);
  static void set_has_p2p_routing_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dummy_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramNoConnection::_Internal::quality_relay(const CMsgSteamDatagramNoConnection* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramNoConnection::_Internal::quality_e2e(const CMsgSteamDatagramNoConnection* msg) {
  return *msg->quality_e2e_;
}
const ::CMsgSteamDatagramP2PRoutingSummary&
CMsgSteamDatagramNoConnection::_Internal::p2p_routing_summary(const CMsgSteamDatagramNoConnection* msg) {
  return *msg->p2p_routing_summary_;
}
void CMsgSteamDatagramNoConnection::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramNoConnection::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoConnection)
}
CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(const CMsgSteamDatagramNoConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_identity_string()) {
    from_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_identity_string(), 
      GetArena());
  }
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  if (from._internal_has_p2p_routing_summary()) {
    p2p_routing_summary_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from.p2p_routing_summary_);
  } else {
    p2p_routing_summary_ = nullptr;
  }
  ::memcpy(&legacy_from_steam_id_, &from.legacy_from_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dummy_pad_) -
    reinterpret_cast<char*>(&legacy_from_steam_id_)) + sizeof(dummy_pad_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoConnection)
}

void CMsgSteamDatagramNoConnection::SharedCtor() {
from_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_relay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dummy_pad_) -
    reinterpret_cast<char*>(&quality_relay_)) + sizeof(dummy_pad_));
}

CMsgSteamDatagramNoConnection::~CMsgSteamDatagramNoConnection() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramNoConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
  if (this != internal_default_instance()) delete p2p_routing_summary_;
}

void CMsgSteamDatagramNoConnection::ArenaDtor(void* object) {
  CMsgSteamDatagramNoConnection* _this = reinterpret_cast< CMsgSteamDatagramNoConnection* >(object);
  (void)_this;
}
void CMsgSteamDatagramNoConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramNoConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramNoConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      from_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(p2p_routing_summary_ != nullptr);
      p2p_routing_summary_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&legacy_from_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_connection_id_) -
        reinterpret_cast<char*>(&legacy_from_steam_id_)) + sizeof(from_connection_id_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&to_relay_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy_pad_) -
        reinterpret_cast<char*>(&to_relay_session_id_)) + sizeof(dummy_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramNoConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_legacy_gameserver_relay_session_id(&has_bits);
          legacy_gameserver_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_from_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_legacy_from_steam_id(&has_bits);
          legacy_from_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool end_to_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_end_to_end(&has_bits);
          end_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 to_connection_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_to_connection_id(&has_bits);
          to_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_connection_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_from_connection_id(&has_bits);
          from_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string from_identity_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_from_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramNoConnection.from_identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 to_relay_session_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_to_relay_session_id(&has_bits);
          to_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_relay_session_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_from_relay_session_id(&has_bits);
          from_relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 routing_secret = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_routing_secret(&has_bits);
          routing_secret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool not_primary_session = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_not_primary_session(&has_bits);
          not_primary_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool not_primary_transport = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_not_primary_transport(&has_bits);
          not_primary_transport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_p2p_routing_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 dummy_pad = 1023;
      case 1023:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_dummy_pad(&has_bits);
          dummy_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramNoConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_legacy_from_steam_id(), target);
  }

  // optional bool end_to_end = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_end_to_end(), target);
  }

  // optional fixed32 to_connection_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_from_connection_id(), target);
  }

  // optional string from_identity_string = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_identity_string().data(), static_cast<int>(this->_internal_from_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramNoConnection.from_identity_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_from_identity_string(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_from_relay_session_id(), target);
  }

  // optional fixed64 routing_secret = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_routing_secret(), target);
  }

  // optional bool not_primary_session = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_not_primary_session(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::quality_e2e(this), target, stream);
  }

  // optional bool not_primary_transport = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_not_primary_transport(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::p2p_routing_summary(this), target, stream);
  }

  // optional fixed32 dummy_pad = 1023;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1023, this->_internal_dummy_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoConnection)
  return target;
}

size_t CMsgSteamDatagramNoConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string from_identity_string = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_identity_string());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *p2p_routing_summary_);
    }

    // optional fixed64 legacy_from_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_gameserver_relay_session_id());
    }

    // optional fixed32 to_connection_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional fixed32 to_relay_session_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional bool end_to_end = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool not_primary_session = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool not_primary_transport = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional fixed64 routing_secret = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional fixed32 dummy_pad = 1023;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramNoConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramNoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramNoConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramNoConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramNoConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramNoConnection)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoConnection::MergeFrom(const CMsgSteamDatagramNoConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_identity_string(from._internal_from_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_p2p_routing_summary()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(from._internal_p2p_routing_summary());
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_from_steam_id_ = from.legacy_from_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      legacy_gameserver_relay_session_id_ = from.legacy_gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      to_connection_id_ = from.to_connection_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_connection_id_ = from.from_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      to_relay_session_id_ = from.to_relay_session_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      end_to_end_ = from.end_to_end_;
    }
    if (cached_has_bits & 0x00000800u) {
      not_primary_session_ = from.not_primary_session_;
    }
    if (cached_has_bits & 0x00001000u) {
      not_primary_transport_ = from.not_primary_transport_;
    }
    if (cached_has_bits & 0x00002000u) {
      routing_secret_ = from.routing_secret_;
    }
    if (cached_has_bits & 0x00004000u) {
      dummy_pad_ = from.dummy_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramNoConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramNoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoConnection::CopyFrom(const CMsgSteamDatagramNoConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoConnection::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoConnection::InternalSwap(CMsgSteamDatagramNoConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_identity_string_.Swap(&other->from_identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, dummy_pad_)
      + sizeof(CMsgSteamDatagramNoConnection::dummy_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, quality_relay_)>(
          reinterpret_cast<char*>(&quality_relay_),
          reinterpret_cast<char*>(&other->quality_relay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramNoConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramGameserverSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverSessionRequest>()._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_network_config_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverSessionRequest)
}
CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArena());
  }
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_build()) {
    build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_build(), 
      GetArena());
  }
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionRequest)
}

void CMsgSteamDatagramGameserverSessionRequest::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&challenge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(server_connection_id_));
}

CMsgSteamDatagramGameserverSessionRequest::~CMsgSteamDatagramGameserverSessionRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramGameserverSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramGameserverSessionRequest::ArenaDtor(void* object) {
  CMsgSteamDatagramGameserverSessionRequest* _this = reinterpret_cast< CMsgSteamDatagramGameserverSessionRequest* >(object);
  (void)_this;
}
void CMsgSteamDatagramGameserverSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramGameserverSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramGameserverSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      build_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(protocol_version_));
  }
  server_connection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 challenge_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_challenge_time(&has_bits);
          challenge_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_connection_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_config_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_network_config_version(&has_bits);
          network_config_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_connection_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_server_connection_id(&has_bits);
          server_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string platform = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramGameserverSessionRequest.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string build = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramGameserverSessionRequest.build");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramGameserverSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  // optional fixed32 challenge_time = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_challenge_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_challenge(), target);
  }

  // optional fixed32 client_connection_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_client_connection_id(), target);
  }

  // optional uint32 network_config_version = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_network_config_version(), target);
  }

  // optional uint32 protocol_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_protocol_version(), target);
  }

  // optional fixed32 server_connection_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_server_connection_id(), target);
  }

  // optional string platform = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameserverSessionRequest.platform");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_platform(), target);
  }

  // optional string build = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameserverSessionRequest.build");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_build(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionRequest)
  return target;
}

size_t CMsgSteamDatagramGameserverSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ticket());
    }

    // optional string platform = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string build = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build());
    }

    // optional fixed64 challenge = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed32 challenge_time = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_connection_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 network_config_version = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_network_config_version());
    }

    // optional uint32 protocol_version = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

  }
  // optional fixed32 server_connection_id = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramGameserverSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverSessionRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_time_ = from.challenge_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      network_config_version_ = from.network_config_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_server_connection_id(from._internal_server_connection_id());
  }
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionRequest::InternalSwap(CMsgSteamDatagramGameserverSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, server_connection_id_)
      + sizeof(CMsgSteamDatagramGameserverSessionRequest::server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, challenge_)>(
          reinterpret_cast<char*>(&challenge_),
          reinterpret_cast<char*>(&other->challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramGameserverSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramGameserverSessionEstablished::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverSessionEstablished>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameserver_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dummy_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_gameserver_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverSessionEstablished)
}
CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameserver_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameserver_identity_string()) {
    gameserver_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameserver_identity_string(), 
      GetArena());
  }
  dummy_legacy_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dummy_legacy_identity_binary()) {
    dummy_legacy_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dummy_legacy_identity_binary(), 
      GetArena());
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_r2c_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionEstablished)
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedCtor() {
gameserver_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dummy_legacy_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_num_r2c_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
}

CMsgSteamDatagramGameserverSessionEstablished::~CMsgSteamDatagramGameserverSessionEstablished() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionEstablished)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameserver_identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dummy_legacy_identity_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramGameserverSessionEstablished::ArenaDtor(void* object) {
  CMsgSteamDatagramGameserverSessionEstablished* _this = reinterpret_cast< CMsgSteamDatagramGameserverSessionEstablished* >(object);
  (void)_this;
}
void CMsgSteamDatagramGameserverSessionEstablished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramGameserverSessionEstablished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramGameserverSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameserver_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dummy_legacy_identity_binary_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_r2c_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverSessionEstablished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string gameserver_identity_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gameserver_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramGameserverSessionEstablished.gameserver_identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_gameserver_steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_legacy_gameserver_steamid(&has_bits);
          legacy_gameserver_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_until_shutdown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seconds_until_shutdown(&has_bits);
          seconds_until_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_r2c = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_seq_num_r2c(&has_bits);
          seq_num_r2c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes dummy_legacy_identity_binary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_dummy_legacy_identity_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramGameserverSessionEstablished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // optional string gameserver_identity_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameserver_identity_string().data(), static_cast<int>(this->_internal_gameserver_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameserverSessionEstablished.gameserver_identity_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gameserver_identity_string(), target);
  }

  // optional fixed64 legacy_gameserver_steamid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_legacy_gameserver_steamid(), target);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seconds_until_shutdown(), target);
  }

  // optional uint32 seq_num_r2c = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_seq_num_r2c(), target);
  }

  // optional bytes dummy_legacy_identity_binary = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_dummy_legacy_identity_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionEstablished)
  return target;
}

size_t CMsgSteamDatagramGameserverSessionEstablished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionEstablished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string gameserver_identity_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameserver_identity_string());
    }

    // optional bytes dummy_legacy_identity_binary = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_dummy_legacy_identity_binary());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed64 legacy_gameserver_steamid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 seq_num_r2c = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_r2c());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionEstablished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramGameserverSessionEstablished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverSessionEstablished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverSessionEstablished)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameserver_identity_string(from._internal_gameserver_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dummy_legacy_identity_binary(from._internal_dummy_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000004u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_gameserver_steamid_ = from.legacy_gameserver_steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionEstablished::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionEstablished::InternalSwap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameserver_identity_string_.Swap(&other->gameserver_identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dummy_legacy_identity_binary_.Swap(&other->dummy_legacy_identity_binary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, seq_num_r2c_)
      + sizeof(CMsgSteamDatagramGameserverSessionEstablished::seq_num_r2c_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, connection_id_)>(
          reinterpret_cast<char*>(&connection_id_),
          reinterpret_cast<char*>(&other->connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramGameserverSessionEstablished::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectionStatsClientToRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsClientToRouter>()._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsClientToRouter* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsClientToRouter* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_c2r(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsClientToRouter::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsClientToRouter::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ack_relay_(arena),
  legacy_ack_e2e_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}
CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(seq_num_e2e_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_relay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&quality_relay_)) + sizeof(seq_num_e2e_));
}

CMsgSteamDatagramConnectionStatsClientToRouter::~CMsgSteamDatagramConnectionStatsClientToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsClientToRouter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionStatsClientToRouter* _this = reinterpret_cast< CMsgSteamDatagramConnectionStatsClientToRouter* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionStatsClientToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_e2e_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(seq_num_e2e_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsClientToRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 ack_relay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack_relay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ack_relay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 legacy_ack_e2e = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_legacy_ack_e2e(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_legacy_ack_e2e(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_connection_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_c2r = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_seq_num_c2r(&has_bits);
          seq_num_c2r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_e2e = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_seq_num_e2e(&has_bits);
          seq_num_e2e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionStatsClientToRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality_e2e(this), target, stream);
  }

  // repeated fixed32 ack_relay = 4;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flags(), target);
  }

  // optional fixed32 client_connection_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_client_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_seq_num_e2e(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsClientToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsClientToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 flags = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional fixed32 client_connection_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_c2r = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_c2r());
    }

    // optional uint32 seq_num_e2e = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_e2e());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsClientToRouter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsClientToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsClientToRouter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsClientToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      seq_num_c2r_ = from.seq_num_c2r_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsClientToRouter::seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, quality_relay_)>(
          reinterpret_cast<char*>(&quality_relay_),
          reinterpret_cast<char*>(&other->quality_relay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionStatsClientToRouter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectionStatsRouterToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsRouterToClient>()._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsRouterToClient* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToClient* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_migrate_request_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_migrate_request_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scoring_penalty_relay_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToClient::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToClient::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ack_relay_(arena),
  legacy_ack_e2e_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}
CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seconds_until_shutdown_, &from.seconds_until_shutdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_relay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&quality_relay_)) + sizeof(flags_));
}

CMsgSteamDatagramConnectionStatsRouterToClient::~CMsgSteamDatagramConnectionStatsRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionStatsRouterToClient* _this = reinterpret_cast< CMsgSteamDatagramConnectionStatsRouterToClient* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionStatsRouterToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&seconds_until_shutdown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&migrate_request_port_) -
        reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(migrate_request_port_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&scoring_penalty_relay_cluster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&scoring_penalty_relay_cluster_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsRouterToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_until_shutdown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_seconds_until_shutdown(&has_bits);
          seconds_until_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_connection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_r2c = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_seq_num_r2c(&has_bits);
          seq_num_r2c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_e2e = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_seq_num_e2e(&has_bits);
          seq_num_e2e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 migrate_request_ip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_migrate_request_ip(&has_bits);
          migrate_request_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 migrate_request_port = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_migrate_request_port(&has_bits);
          migrate_request_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scoring_penalty_relay_cluster = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_scoring_penalty_relay_cluster(&has_bits);
          scoring_penalty_relay_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 ack_relay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack_relay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ack_relay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 legacy_ack_e2e = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_legacy_ack_e2e(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<117>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_legacy_ack_e2e(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionStatsRouterToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality_e2e(this), target, stream);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_client_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_seq_num_e2e(), target);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 13;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(13, this->_internal_ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(14, this->_internal_legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToClient)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seconds_until_shutdown = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 client_connection_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_r2c());
    }

    // optional uint32 seq_num_e2e = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_e2e());
    }

    // optional fixed32 migrate_request_ip = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_migrate_request_port());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 scoring_penalty_relay_cluster = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scoring_penalty_relay_cluster());
    }

    // optional uint32 flags = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsRouterToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsRouterToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsRouterToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    if (cached_has_bits & 0x00000040u) {
      migrate_request_ip_ = from.migrate_request_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      migrate_request_port_ = from.migrate_request_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, flags_)
      + sizeof(CMsgSteamDatagramConnectionStatsRouterToClient::flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, quality_relay_)>(
          reinterpret_cast<char*>(&quality_relay_),
          reinterpret_cast<char*>(&other->quality_relay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionStatsRouterToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectionStatsRouterToServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsRouterToServer>()._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsRouterToServer* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToServer* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_seq_num_r2s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_client_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToServer::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToServer::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ack_relay_(arena),
  legacy_ack_e2e_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}
CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_identity_string()) {
    client_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_identity_string(), 
      GetArena());
  }
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seq_num_r2s_, &from.seq_num_r2s_,
    static_cast<size_t>(reinterpret_cast<char*>(&routing_secret_) -
    reinterpret_cast<char*>(&seq_num_r2s_)) + sizeof(routing_secret_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedCtor() {
client_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_relay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routing_secret_) -
    reinterpret_cast<char*>(&quality_relay_)) + sizeof(routing_secret_));
}

CMsgSteamDatagramConnectionStatsRouterToServer::~CMsgSteamDatagramConnectionStatsRouterToServer() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionStatsRouterToServer* _this = reinterpret_cast< CMsgSteamDatagramConnectionStatsRouterToServer* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionStatsRouterToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      client_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&seq_num_r2s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_connection_id_) -
        reinterpret_cast<char*>(&seq_num_r2s_)) + sizeof(client_connection_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&routing_secret_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(routing_secret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsRouterToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_r2s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_seq_num_r2s(&has_bits);
          seq_num_r2s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_e2e = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_seq_num_e2e(&has_bits);
          seq_num_e2e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_client_steam_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_legacy_client_steam_id(&has_bits);
          legacy_client_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 relay_session_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_relay_session_id(&has_bits);
          relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_connection_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 ack_relay = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack_relay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<85>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ack_relay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 legacy_ack_e2e = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_legacy_ack_e2e(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_legacy_ack_e2e(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_connection_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_server_connection_id(&has_bits);
          server_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 routing_secret = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_routing_secret(&has_bits);
          routing_secret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string client_identity_string = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_client_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramConnectionStatsRouterToServer.client_identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionStatsRouterToServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality_e2e(this), target, stream);
  }

  // optional uint32 seq_num_r2s = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq_num_r2s(), target);
  }

  // optional uint32 seq_num_e2e = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_seq_num_e2e(), target);
  }

  // optional fixed64 legacy_client_steam_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_legacy_client_steam_id(), target);
  }

  // optional uint32 relay_session_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 10;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_flags(), target);
  }

  // optional fixed32 server_connection_id = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(13, this->_internal_server_connection_id(), target);
  }

  // optional fixed64 routing_secret = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(14, this->_internal_routing_secret(), target);
  }

  // optional string client_identity_string = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_identity_string().data(), static_cast<int>(this->_internal_client_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramConnectionStatsRouterToServer.client_identity_string");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_client_identity_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToServer)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsRouterToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string client_identity_string = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_identity_string());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seq_num_r2s = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_r2s());
    }

    // optional uint32 seq_num_e2e = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_e2e());
    }

    // optional fixed64 legacy_client_steam_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 relay_session_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relay_session_id());
    }

    // optional fixed32 client_connection_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 flags = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional fixed32 server_connection_id = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional fixed64 routing_secret = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsRouterToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsRouterToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsRouterToServer)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_identity_string(from._internal_client_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_r2s_ = from.seq_num_r2s_;
    }
    if (cached_has_bits & 0x00000010u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    if (cached_has_bits & 0x00000020u) {
      legacy_client_steam_id_ = from.legacy_client_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      relay_session_id_ = from.relay_session_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_connection_id_ = from.client_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_connection_id_ = from.server_connection_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      routing_secret_ = from.routing_secret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  client_identity_string_.Swap(&other->client_identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, routing_secret_)
      + sizeof(CMsgSteamDatagramConnectionStatsRouterToServer::routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, quality_relay_)>(
          reinterpret_cast<char*>(&quality_relay_),
          reinterpret_cast<char*>(&other->quality_relay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionStatsRouterToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectionStatsServerToRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsServerToRouter>()._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsServerToRouter* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsServerToRouter* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seq_num_s2r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsServerToRouter::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsServerToRouter::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ack_relay_(arena),
  legacy_ack_e2e_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}
CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seq_num_s2r_, &from.seq_num_s2r_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&seq_num_s2r_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_relay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&quality_relay_)) + sizeof(server_connection_id_));
}

CMsgSteamDatagramConnectionStatsServerToRouter::~CMsgSteamDatagramConnectionStatsServerToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsServerToRouter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionStatsServerToRouter* _this = reinterpret_cast< CMsgSteamDatagramConnectionStatsServerToRouter* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionStatsServerToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&seq_num_s2r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_connection_id_) -
        reinterpret_cast<char*>(&seq_num_s2r_)) + sizeof(server_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsServerToRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_s2r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seq_num_s2r(&has_bits);
          seq_num_s2r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_e2e = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seq_num_e2e(&has_bits);
          seq_num_e2e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relay_session_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_relay_session_id(&has_bits);
          relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_connection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 ack_relay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack_relay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ack_relay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 legacy_ack_e2e = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_legacy_ack_e2e(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_legacy_ack_e2e(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_connection_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_server_connection_id(&has_bits);
          server_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionStatsServerToRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality_e2e(this), target, stream);
  }

  // optional uint32 seq_num_s2r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seq_num_s2r(), target);
  }

  // optional uint32 seq_num_e2e = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seq_num_e2e(), target);
  }

  // optional uint32 relay_session_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 8;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_flags(), target);
  }

  // optional fixed32 server_connection_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_server_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsServerToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsServerToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seq_num_s2r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_s2r());
    }

    // optional uint32 seq_num_e2e = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_e2e());
    }

    // optional uint32 relay_session_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relay_session_id());
    }

    // optional fixed32 client_connection_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional fixed32 server_connection_id = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsServerToRouter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsServerToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsServerToRouter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsServerToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      seq_num_s2r_ = from.seq_num_s2r_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    if (cached_has_bits & 0x00000010u) {
      relay_session_id_ = from.relay_session_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_connection_id_ = from.server_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, server_connection_id_)
      + sizeof(CMsgSteamDatagramConnectionStatsServerToRouter::server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, quality_relay_)>(
          reinterpret_cast<char*>(&quality_relay_),
          reinterpret_cast<char*>(&other->quality_relay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionStatsServerToRouter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PSessionRequestBody::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PSessionRequestBody>()._has_bits_);
  static void set_has_challenge_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_legacy_peer_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_peer_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_peer_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_network_config_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unused_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequestBody)
}
CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(const CMsgSteamDatagramP2PSessionRequestBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peer_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_peer_identity_string()) {
    peer_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_identity_string(), 
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArena());
  }
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_build()) {
    build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_build(), 
      GetArena());
  }
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&unused_public_ip_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(unused_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequestBody)
}

void CMsgSteamDatagramP2PSessionRequestBody::SharedCtor() {
peer_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&challenge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unused_public_ip_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(unused_public_ip_));
}

CMsgSteamDatagramP2PSessionRequestBody::~CMsgSteamDatagramP2PSessionRequestBody() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequestBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PSessionRequestBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  peer_identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramP2PSessionRequestBody::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PSessionRequestBody* _this = reinterpret_cast< CMsgSteamDatagramP2PSessionRequestBody* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PSessionRequestBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PSessionRequestBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PSessionRequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      peer_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      build_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peer_connection_id_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(peer_connection_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unused_public_ip_) -
        reinterpret_cast<char*>(&protocol_version_)) + sizeof(unused_public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PSessionRequestBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 challenge_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_challenge_time(&has_bits);
          challenge_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_connection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_peer_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_legacy_peer_steam_id(&has_bits);
          legacy_peer_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 peer_connection_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_peer_connection_id(&has_bits);
          peer_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_config_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_network_config_version(&has_bits);
          network_config_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 unused_public_ip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_unused_public_ip(&has_bits);
          unused_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string peer_identity_string = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_peer_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramP2PSessionRequestBody.peer_identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramP2PSessionRequestBody.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string build = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramP2PSessionRequestBody.build");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PSessionRequestBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 challenge_time = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_challenge_time(), target);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_challenge(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_client_connection_id(), target);
  }

  // optional fixed64 legacy_peer_steam_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_legacy_peer_steam_id(), target);
  }

  // optional fixed32 peer_connection_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_peer_connection_id(), target);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_protocol_version(), target);
  }

  // optional uint32 network_config_version = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_network_config_version(), target);
  }

  // optional fixed32 unused_public_ip = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_unused_public_ip(), target);
  }

  // optional string peer_identity_string = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_peer_identity_string().data(), static_cast<int>(this->_internal_peer_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramP2PSessionRequestBody.peer_identity_string");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_peer_identity_string(), target);
  }

  // optional string platform = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramP2PSessionRequestBody.platform");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_platform(), target);
  }

  // optional string build = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramP2PSessionRequestBody.build");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_build(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequestBody)
  return target;
}

size_t CMsgSteamDatagramP2PSessionRequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequestBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string peer_identity_string = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_peer_identity_string());
    }

    // optional string platform = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string build = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build());
    }

    // optional fixed64 challenge = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed32 challenge_time = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_connection_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed64 legacy_peer_steam_id = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional fixed32 peer_connection_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 protocol_version = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

    // optional uint32 network_config_version = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_network_config_version());
    }

    // optional fixed32 unused_public_ip = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PSessionRequestBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionRequestBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PSessionRequestBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PSessionRequestBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PSessionRequestBody)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionRequestBody::MergeFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_peer_identity_string(from._internal_peer_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_time_ = from.challenge_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      legacy_peer_steam_id_ = from.legacy_peer_steam_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      peer_connection_id_ = from.peer_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      network_config_version_ = from.network_config_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      unused_public_ip_ = from.unused_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionRequestBody::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionRequestBody::InternalSwap(CMsgSteamDatagramP2PSessionRequestBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  peer_identity_string_.Swap(&other->peer_identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, unused_public_ip_)
      + sizeof(CMsgSteamDatagramP2PSessionRequestBody::unused_public_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, challenge_)>(
          reinterpret_cast<char*>(&challenge_),
          reinterpret_cast<char*>(&other->challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PSessionRequestBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PSessionRequest>()._has_bits_);
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramP2PSessionRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramP2PSessionRequest::_Internal::cert(const CMsgSteamDatagramP2PSessionRequest* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramP2PSessionRequest::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequest)
}
CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(const CMsgSteamDatagramP2PSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequest)
}

void CMsgSteamDatagramP2PSessionRequest::SharedCtor() {
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cert_ = nullptr;
}

CMsgSteamDatagramP2PSessionRequest::~CMsgSteamDatagramP2PSessionRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramP2PSessionRequest::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PSessionRequest* _this = reinterpret_cast< CMsgSteamDatagramP2PSessionRequest* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificateSigned cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cert(this), target, stream);
  }

  // optional bytes body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequest)
  return target;
}

size_t CMsgSteamDatagramP2PSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PSessionRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionRequest::MergeFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
  }
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionRequest::InternalSwap(CMsgSteamDatagramP2PSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cert_, other->cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PSessionEstablished::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PSessionEstablished>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionEstablished)
}
CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(const CMsgSteamDatagramP2PSessionEstablished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_relay_routing_token()) {
    relay_routing_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relay_routing_token(), 
      GetArena());
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_r2c_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionEstablished)
}

void CMsgSteamDatagramP2PSessionEstablished::SharedCtor() {
relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_num_r2c_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
}

CMsgSteamDatagramP2PSessionEstablished::~CMsgSteamDatagramP2PSessionEstablished() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionEstablished)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PSessionEstablished::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  relay_routing_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramP2PSessionEstablished::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PSessionEstablished* _this = reinterpret_cast< CMsgSteamDatagramP2PSessionEstablished* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PSessionEstablished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PSessionEstablished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionEstablished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_r2c_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PSessionEstablished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_until_shutdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds_until_shutdown(&has_bits);
          seconds_until_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes relay_routing_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_relay_routing_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_r2c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_seq_num_r2c(&has_bits);
          seq_num_r2c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PSessionEstablished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionEstablished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds_until_shutdown(), target);
  }

  // optional bytes relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_relay_routing_token(), target);
  }

  // optional uint32 seq_num_r2c = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq_num_r2c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionEstablished)
  return target;
}

size_t CMsgSteamDatagramP2PSessionEstablished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionEstablished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes relay_routing_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_relay_routing_token());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_until_shutdown());
    }

    // optional uint32 seq_num_r2c = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_r2c());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PSessionEstablished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionEstablished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PSessionEstablished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PSessionEstablished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PSessionEstablished)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionEstablished::MergeFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_relay_routing_token(from._internal_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionEstablished::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionEstablished::InternalSwap(CMsgSteamDatagramP2PSessionEstablished* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_routing_token_.Swap(&other->relay_routing_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, seq_num_r2c_)
      + sizeof(CMsgSteamDatagramP2PSessionEstablished::seq_num_r2c_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, connection_id_)>(
          reinterpret_cast<char*>(&connection_id_),
          reinterpret_cast<char*>(&other->connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PSessionEstablished::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsP2PClientToRouter>()._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing_summary(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_p2p_routing_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_forward_target_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ack_peer_routes_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_seq_num_c2r(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->quality_e2e_;
}
const ::CMsgSteamDatagramP2PRoutingSummary&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal::p2p_routing_summary(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->p2p_routing_summary_;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ack_relay_(arena),
  legacy_ack_e2e_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  forward_target_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_forward_target_relay_routing_token()) {
    forward_target_relay_routing_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_forward_target_relay_routing_token(), 
      GetArena());
  }
  routes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_routes()) {
    routes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routes(), 
      GetArena());
  }
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  if (from._internal_has_p2p_routing_summary()) {
    p2p_routing_summary_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from.p2p_routing_summary_);
  } else {
    p2p_routing_summary_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(seq_num_e2e_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedCtor() {
forward_target_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
routes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_relay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&quality_relay_)) + sizeof(seq_num_e2e_));
}

CMsgSteamDatagramConnectionStatsP2PClientToRouter::~CMsgSteamDatagramConnectionStatsP2PClientToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  forward_target_relay_routing_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
  if (this != internal_default_instance()) delete p2p_routing_summary_;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionStatsP2PClientToRouter* _this = reinterpret_cast< CMsgSteamDatagramConnectionStatsP2PClientToRouter* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      forward_target_relay_routing_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      routes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(p2p_routing_summary_ != nullptr);
      p2p_routing_summary_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ack_peer_routes_revision_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(ack_peer_routes_revision_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_e2e_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_e2e_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 ack_relay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack_relay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ack_relay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 legacy_ack_e2e = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_legacy_ack_e2e(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_legacy_ack_e2e(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes forward_target_relay_routing_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_forward_target_relay_routing_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 forward_target_revision = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_forward_target_revision(&has_bits);
          forward_target_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes routes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_routes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_peer_routes_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ack_peer_routes_revision(&has_bits);
          ack_peer_routes_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 connection_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_c2r = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_seq_num_c2r(&has_bits);
          seq_num_c2r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_e2e = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_seq_num_e2e(&has_bits);
          seq_num_e2e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_p2p_routing_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality_e2e(this), target, stream);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // optional bytes forward_target_relay_routing_token = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_forward_target_relay_routing_token(), target);
  }

  // optional uint32 forward_target_revision = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_forward_target_revision(), target);
  }

  // optional bytes routes = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_seq_num_e2e(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::p2p_routing_summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsP2PClientToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes forward_target_relay_routing_token = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_forward_target_relay_routing_token());
    }

    // optional bytes routes = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_routes());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *p2p_routing_summary_);
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 forward_target_revision = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_forward_target_revision());
    }

    // optional uint32 ack_peer_routes_revision = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_peer_routes_revision());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional fixed32 connection_id = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_c2r = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_c2r());
    }

    // optional uint32 seq_num_e2e = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_e2e());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PClientToRouter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_forward_target_relay_routing_token(from._internal_forward_target_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_routes(from._internal_routes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_p2p_routing_summary()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(from._internal_p2p_routing_summary());
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      forward_target_revision_ = from.forward_target_revision_;
    }
    if (cached_has_bits & 0x00000080u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      seq_num_c2r_ = from.seq_num_c2r_;
    }
    if (cached_has_bits & 0x00000400u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  forward_target_relay_routing_token_.Swap(&other->forward_target_relay_routing_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  routes_.Swap(&other->routes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsP2PClientToRouter::seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, quality_relay_)>(
          reinterpret_cast<char*>(&quality_relay_),
          reinterpret_cast<char*>(&other->quality_relay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionStatsP2PClientToRouter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramConnectionStatsP2PRouterToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsP2PRouterToClient>()._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_migrate_request_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_migrate_request_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scoring_penalty_relay_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ack_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_peer_routes_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
  return *msg->quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ack_relay_(arena),
  legacy_ack_e2e_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_routes()) {
    routes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routes(), 
      GetArena());
  }
  if (from._internal_has_quality_relay()) {
    quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from._internal_has_quality_e2e()) {
    quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seconds_until_shutdown_, &from.seconds_until_shutdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(seq_num_e2e_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedCtor() {
routes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_relay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&quality_relay_)) + sizeof(seq_num_e2e_));
}

CMsgSteamDatagramConnectionStatsP2PRouterToClient::~CMsgSteamDatagramConnectionStatsP2PRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  routes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionStatsP2PRouterToClient* _this = reinterpret_cast< CMsgSteamDatagramConnectionStatsP2PRouterToClient* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      routes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&seconds_until_shutdown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(flags_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&ack_forward_target_revision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_e2e_) -
        reinterpret_cast<char*>(&ack_forward_target_revision_)) + sizeof(seq_num_e2e_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_relay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_e2e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_until_shutdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds_until_shutdown(&has_bits);
          seconds_until_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 migrate_request_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_migrate_request_ip(&has_bits);
          migrate_request_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 migrate_request_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_migrate_request_port(&has_bits);
          migrate_request_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scoring_penalty_relay_cluster = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_scoring_penalty_relay_cluster(&has_bits);
          scoring_penalty_relay_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 ack_relay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack_relay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ack_relay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 legacy_ack_e2e = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_legacy_ack_e2e(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_legacy_ack_e2e(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_forward_target_revision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ack_forward_target_revision(&has_bits);
          ack_forward_target_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes routes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_routes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_peer_routes_revision = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ack_peer_routes_revision(&has_bits);
          ack_peer_routes_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 connection_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_r2c = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_seq_num_r2c(&has_bits);
          seq_num_r2c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq_num_e2e = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_seq_num_e2e(&has_bits);
          seq_num_e2e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quality_relay(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality_e2e(this), target, stream);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 migrate_request_ip = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 7;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  // optional uint32 ack_forward_target_revision = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ack_forward_target_revision(), target);
  }

  // optional bytes routes = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(13, this->_internal_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_seq_num_e2e(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsP2PRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes routes = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_routes());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 migrate_request_ip = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_migrate_request_port());
    }

    // optional uint32 scoring_penalty_relay_cluster = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scoring_penalty_relay_cluster());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 ack_forward_target_revision = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_forward_target_revision());
    }

    // optional uint32 ack_peer_routes_revision = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_peer_routes_revision());
    }

    // optional fixed32 connection_id = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_r2c());
    }

    // optional uint32 seq_num_e2e = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seq_num_e2e());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PRouterToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_routes(from._internal_routes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      migrate_request_ip_ = from.migrate_request_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      migrate_request_port_ = from.migrate_request_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ack_forward_target_revision_ = from.ack_forward_target_revision_;
    }
    if (cached_has_bits & 0x00000200u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    if (cached_has_bits & 0x00000400u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    if (cached_has_bits & 0x00001000u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  routes_.Swap(&other->routes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsP2PRouterToClient::seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, quality_relay_)>(
          reinterpret_cast<char*>(&quality_relay_),
          reinterpret_cast<char*>(&other->quality_relay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionStatsP2PRouterToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PBadRouteRouterToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PBadRouteRouterToClient>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_failed_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kludge_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
}
CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(const CMsgSteamDatagramP2PBadRouteRouterToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  failed_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_failed_relay_routing_token()) {
    failed_relay_routing_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failed_relay_routing_token(), 
      GetArena());
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kludge_pad_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(kludge_pad_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedCtor() {
failed_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kludge_pad_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(kludge_pad_));
}

CMsgSteamDatagramP2PBadRouteRouterToClient::~CMsgSteamDatagramP2PBadRouteRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  failed_relay_routing_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PBadRouteRouterToClient* _this = reinterpret_cast< CMsgSteamDatagramP2PBadRouteRouterToClient* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PBadRouteRouterToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PBadRouteRouterToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    failed_relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kludge_pad_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(kludge_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes failed_relay_routing_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_failed_relay_routing_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_forward_target_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ack_forward_target_revision(&has_bits);
          ack_forward_target_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 kludge_pad = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_kludge_pad(&has_bits);
          kludge_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // optional bytes failed_relay_routing_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_failed_relay_routing_token(), target);
  }

  // optional uint32 ack_forward_target_revision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ack_forward_target_revision(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(99, this->_internal_kludge_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PBadRouteRouterToClient)
  return target;
}

size_t CMsgSteamDatagramP2PBadRouteRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes failed_relay_routing_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_failed_relay_routing_token());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 ack_forward_target_revision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_forward_target_revision());
    }

    // optional fixed64 kludge_pad = 99;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PBadRouteRouterToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PBadRouteRouterToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PBadRouteRouterToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PBadRouteRouterToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_failed_relay_routing_token(from._internal_failed_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ack_forward_target_revision_ = from.ack_forward_target_revision_;
    }
    if (cached_has_bits & 0x00000008u) {
      kludge_pad_ = from.kludge_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PBadRouteRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::InternalSwap(CMsgSteamDatagramP2PBadRouteRouterToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  failed_relay_routing_token_.Swap(&other->failed_relay_routing_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, kludge_pad_)
      + sizeof(CMsgSteamDatagramP2PBadRouteRouterToClient::kludge_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, connection_id_)>(
          reinterpret_cast<char*>(&connection_id_),
          reinterpret_cast<char*>(&other->connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PBadRouteRouterToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PRoutes_RelayCluster::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutes_RelayCluster>()._has_bits_);
  static void set_has_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_session_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
}
CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(const CMsgSteamDatagramP2PRoutes_RelayCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session_relay_routing_token()) {
    session_relay_routing_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_relay_routing_token(), 
      GetArena());
  }
  ::memcpy(&pop_id_, &from.pop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_penalty_) -
    reinterpret_cast<char*>(&pop_id_)) + sizeof(score_penalty_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedCtor() {
session_relay_routing_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pop_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_penalty_) -
    reinterpret_cast<char*>(&pop_id_)) + sizeof(score_penalty_));
}

CMsgSteamDatagramP2PRoutes_RelayCluster::~CMsgSteamDatagramP2PRoutes_RelayCluster() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_relay_routing_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PRoutes_RelayCluster* _this = reinterpret_cast< CMsgSteamDatagramP2PRoutes_RelayCluster* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PRoutes_RelayCluster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PRoutes_RelayCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&pop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_penalty_) -
        reinterpret_cast<char*>(&pop_id_)) + sizeof(score_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 pop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pop_id(&has_bits);
          pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ping_ms(&has_bits);
          ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_penalty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_score_penalty(&has_bits);
          score_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes session_relay_routing_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_session_relay_routing_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 pop_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_pop_id(), target);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping_ms(), target);
  }

  // optional uint32 score_penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_score_penalty(), target);
  }

  // optional bytes session_relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_session_relay_routing_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes.RelayCluster)
  return target;
}

size_t CMsgSteamDatagramP2PRoutes_RelayCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes session_relay_routing_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_session_relay_routing_token());
    }

    // optional fixed32 pop_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 ping_ms = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_ms());
    }

    // optional uint32 score_penalty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_penalty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes_RelayCluster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PRoutes_RelayCluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PRoutes.RelayCluster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PRoutes.RelayCluster)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_relay_routing_token(from._internal_session_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      pop_id_ = from.pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_ms_ = from.ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_penalty_ = from.score_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes_RelayCluster::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::InternalSwap(CMsgSteamDatagramP2PRoutes_RelayCluster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_relay_routing_token_.Swap(&other->session_relay_routing_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, score_penalty_)
      + sizeof(CMsgSteamDatagramP2PRoutes_RelayCluster::score_penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, pop_id_)>(
          reinterpret_cast<char*>(&pop_id_),
          reinterpret_cast<char*>(&other->pop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PRoutes_RelayCluster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PRoutes_Route::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutes_Route>()._has_bits_);
  static void set_has_my_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_your_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interior_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes.Route)
}
CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(const CMsgSteamDatagramP2PRoutes_Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&my_pop_id_, &from.my_pop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&interior_score_) -
    reinterpret_cast<char*>(&my_pop_id_)) + sizeof(interior_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes.Route)
}

void CMsgSteamDatagramP2PRoutes_Route::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&my_pop_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interior_score_) -
    reinterpret_cast<char*>(&my_pop_id_)) + sizeof(interior_score_));
}

CMsgSteamDatagramP2PRoutes_Route::~CMsgSteamDatagramP2PRoutes_Route() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes.Route)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PRoutes_Route::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramP2PRoutes_Route::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PRoutes_Route* _this = reinterpret_cast< CMsgSteamDatagramP2PRoutes_Route* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PRoutes_Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PRoutes_Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PRoutes_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&my_pop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interior_score_) -
        reinterpret_cast<char*>(&my_pop_id_)) + sizeof(interior_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutes_Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 my_pop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_my_pop_id(&has_bits);
          my_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 your_pop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_your_pop_id(&has_bits);
          your_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 legacy_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_legacy_score(&has_bits);
          legacy_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 interior_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_interior_score(&has_bits);
          interior_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PRoutes_Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 my_pop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_my_pop_id(), target);
  }

  // optional fixed32 your_pop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_your_pop_id(), target);
  }

  // optional uint32 legacy_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_legacy_score(), target);
  }

  // optional uint32 interior_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_interior_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes.Route)
  return target;
}

size_t CMsgSteamDatagramP2PRoutes_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes.Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 my_pop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_pop_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 legacy_score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_score());
    }

    // optional uint32 interior_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_interior_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRoutes_Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PRoutes.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes_Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PRoutes_Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PRoutes.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PRoutes.Route)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes_Route::MergeFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      my_pop_id_ = from.my_pop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      your_pop_id_ = from.your_pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_score_ = from.legacy_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      interior_score_ = from.interior_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PRoutes.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes_Route::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes_Route::InternalSwap(CMsgSteamDatagramP2PRoutes_Route* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, interior_score_)
      + sizeof(CMsgSteamDatagramP2PRoutes_Route::interior_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, my_pop_id_)>(
          reinterpret_cast<char*>(&my_pop_id_),
          reinterpret_cast<char*>(&other->my_pop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PRoutes_Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramP2PRoutes::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutes>()._has_bits_);
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relay_clusters_(arena),
  routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes)
}
CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(const CMsgSteamDatagramP2PRoutes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      relay_clusters_(from.relay_clusters_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  revision_ = from.revision_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes)
}

void CMsgSteamDatagramP2PRoutes::SharedCtor() {
revision_ = 0u;
}

CMsgSteamDatagramP2PRoutes::~CMsgSteamDatagramP2PRoutes() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramP2PRoutes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramP2PRoutes::ArenaDtor(void* object) {
  CMsgSteamDatagramP2PRoutes* _this = reinterpret_cast< CMsgSteamDatagramP2PRoutes* >(object);
  (void)_this;
}
void CMsgSteamDatagramP2PRoutes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramP2PRoutes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramP2PRoutes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_clusters_.Clear();
  routes_.Clear();
  revision_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relay_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_revision(&has_bits);
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramP2PRoutes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relay_clusters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_relay_clusters(i), target, stream);
  }

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_routes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 revision = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes)
  return target;
}

size_t CMsgSteamDatagramP2PRoutes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  total_size += 1UL * this->_internal_relay_clusters_size();
  for (const auto& msg : this->relay_clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 revision = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRoutes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramP2PRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramP2PRoutes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramP2PRoutes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramP2PRoutes)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes::MergeFrom(const CMsgSteamDatagramP2PRoutes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relay_clusters_.MergeFrom(from.relay_clusters_);
  routes_.MergeFrom(from.routes_);
  if (from._internal_has_revision()) {
    _internal_set_revision(from._internal_revision());
  }
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramP2PRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const CMsgSteamDatagramP2PRoutes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes::InternalSwap(CMsgSteamDatagramP2PRoutes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_clusters_.InternalSwap(&other->relay_clusters_);
  routes_.InternalSwap(&other->routes_);
  swap(revision_, other->revision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramP2PRoutes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramSetSecondaryAddressRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSetSecondaryAddressRequest>()._has_bits_);
  static void set_has_client_main_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_main_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_send_duplication(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kludge_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSetSecondaryAddressRequest)
}
CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(const CMsgSteamDatagramSetSecondaryAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_identity()) {
    client_identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_identity(), 
      GetArena());
  }
  kludge_pad_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kludge_pad()) {
    kludge_pad_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kludge_pad(), 
      GetArena());
  }
  ::memcpy(&client_main_ip_, &from.client_main_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_send_duplication_) -
    reinterpret_cast<char*>(&client_main_ip_)) + sizeof(request_send_duplication_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSetSecondaryAddressRequest)
}

void CMsgSteamDatagramSetSecondaryAddressRequest::SharedCtor() {
client_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kludge_pad_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_main_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_send_duplication_) -
    reinterpret_cast<char*>(&client_main_ip_)) + sizeof(request_send_duplication_));
}

CMsgSteamDatagramSetSecondaryAddressRequest::~CMsgSteamDatagramSetSecondaryAddressRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSetSecondaryAddressRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramSetSecondaryAddressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kludge_pad_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSetSecondaryAddressRequest::ArenaDtor(void* object) {
  CMsgSteamDatagramSetSecondaryAddressRequest* _this = reinterpret_cast< CMsgSteamDatagramSetSecondaryAddressRequest* >(object);
  (void)_this;
}
void CMsgSteamDatagramSetSecondaryAddressRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramSetSecondaryAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramSetSecondaryAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      kludge_pad_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&client_main_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_send_duplication_) -
        reinterpret_cast<char*>(&client_main_ip_)) + sizeof(request_send_duplication_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSetSecondaryAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 client_main_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_client_main_ip(&has_bits);
          client_main_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_main_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_client_main_port(&has_bits);
          client_main_port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 client_connection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string client_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramSetSecondaryAddressRequest.client_identity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool request_send_duplication = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_request_send_duplication(&has_bits);
          request_send_duplication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes kludge_pad = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kludge_pad();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramSetSecondaryAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_main_ip = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_client_main_ip(), target);
  }

  // optional fixed32 client_main_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_client_main_port(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_client_connection_id(), target);
  }

  // optional string client_identity = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramSetSecondaryAddressRequest.client_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_identity(), target);
  }

  // optional bool request_send_duplication = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_request_send_duplication(), target);
  }

  // optional bytes kludge_pad = 99;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        99, this->_internal_kludge_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSetSecondaryAddressRequest)
  return target;
}

size_t CMsgSteamDatagramSetSecondaryAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string client_identity = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_identity());
    }

    // optional bytes kludge_pad = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kludge_pad());
    }

    // optional fixed32 client_main_ip = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_main_port = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_connection_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool request_send_duplication = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSetSecondaryAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSetSecondaryAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramSetSecondaryAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramSetSecondaryAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramSetSecondaryAddressRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSetSecondaryAddressRequest::MergeFrom(const CMsgSteamDatagramSetSecondaryAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_identity(from._internal_client_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_kludge_pad(from._internal_kludge_pad());
    }
    if (cached_has_bits & 0x00000004u) {
      client_main_ip_ = from.client_main_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_main_port_ = from.client_main_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      request_send_duplication_ = from.request_send_duplication_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramSetSecondaryAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSetSecondaryAddressRequest::CopyFrom(const CMsgSteamDatagramSetSecondaryAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSetSecondaryAddressRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSetSecondaryAddressRequest::InternalSwap(CMsgSteamDatagramSetSecondaryAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_identity_.Swap(&other->client_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kludge_pad_.Swap(&other->kludge_pad_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, request_send_duplication_)
      + sizeof(CMsgSteamDatagramSetSecondaryAddressRequest::request_send_duplication_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, client_main_ip_)>(
          reinterpret_cast<char*>(&client_main_ip_),
          reinterpret_cast<char*>(&other->client_main_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramSetSecondaryAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamDatagramSetSecondaryAddressResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSetSecondaryAddressResult>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSetSecondaryAddressResult)
}
CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(const CMsgSteamDatagramSetSecondaryAddressResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSetSecondaryAddressResult)
}

void CMsgSteamDatagramSetSecondaryAddressResult::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

CMsgSteamDatagramSetSecondaryAddressResult::~CMsgSteamDatagramSetSecondaryAddressResult() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSetSecondaryAddressResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramSetSecondaryAddressResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSetSecondaryAddressResult::ArenaDtor(void* object) {
  CMsgSteamDatagramSetSecondaryAddressResult* _this = reinterpret_cast< CMsgSteamDatagramSetSecondaryAddressResult* >(object);
  (void)_this;
}
void CMsgSteamDatagramSetSecondaryAddressResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramSetSecondaryAddressResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramSetSecondaryAddressResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSetSecondaryAddressResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramSetSecondaryAddressResult.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramSetSecondaryAddressResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramSetSecondaryAddressResult.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSetSecondaryAddressResult)
  return target;
}

size_t CMsgSteamDatagramSetSecondaryAddressResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSetSecondaryAddressResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSetSecondaryAddressResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSetSecondaryAddressResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramSetSecondaryAddressResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramSetSecondaryAddressResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramSetSecondaryAddressResult)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSetSecondaryAddressResult::MergeFrom(const CMsgSteamDatagramSetSecondaryAddressResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramSetSecondaryAddressResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSetSecondaryAddressResult::CopyFrom(const CMsgSteamDatagramSetSecondaryAddressResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSetSecondaryAddressResult::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSetSecondaryAddressResult::InternalSwap(CMsgSteamDatagramSetSecondaryAddressResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramSetSecondaryAddressResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramRouterPingReply_RouteException* Arena::CreateMaybeMessage< ::CMsgSteamDatagramRouterPingReply_RouteException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramRouterPingReply_RouteException >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramRouterPingReply_AltAddress* Arena::CreateMaybeMessage< ::CMsgSteamDatagramRouterPingReply_AltAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramRouterPingReply_AltAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramRouterPingReply* Arena::CreateMaybeMessage< ::CMsgSteamDatagramRouterPingReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramRouterPingReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramGameserverPingRequest* Arena::CreateMaybeMessage< ::CMsgSteamDatagramGameserverPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramGameserverPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramLegacyGameserverPingReply* Arena::CreateMaybeMessage< ::CMsgSteamDatagramLegacyGameserverPingReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramLegacyGameserverPingReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramGameserverPingReply_SignedData* Arena::CreateMaybeMessage< ::CMsgSteamDatagramGameserverPingReply_SignedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramGameserverPingReply_SignedData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramGameserverPingReply* Arena::CreateMaybeMessage< ::CMsgSteamDatagramGameserverPingReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramGameserverPingReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramNoSessionRelayToClient* Arena::CreateMaybeMessage< ::CMsgSteamDatagramNoSessionRelayToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramNoSessionRelayToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramNoSessionRelayToPeer* Arena::CreateMaybeMessage< ::CMsgSteamDatagramNoSessionRelayToPeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramNoSessionRelayToPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramClientPingSampleRequest* Arena::CreateMaybeMessage< ::CMsgSteamDatagramClientPingSampleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramClientPingSampleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* Arena::CreateMaybeMessage< ::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramClientPingSampleReply_POP* Arena::CreateMaybeMessage< ::CMsgSteamDatagramClientPingSampleReply_POP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramClientPingSampleReply_POP >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter* Arena::CreateMaybeMessage< ::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramClientPingSampleReply* Arena::CreateMaybeMessage< ::CMsgSteamDatagramClientPingSampleReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramClientPingSampleReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* Arena::CreateMaybeMessage< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramClientSwitchedPrimary* Arena::CreateMaybeMessage< ::CMsgSteamDatagramClientSwitchedPrimary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramClientSwitchedPrimary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectRequest* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectOK* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectOK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectOK >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingP2PSDRRoutingSummary* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingP2PSDRRoutingSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingP2PSDRRoutingSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PRoutingSummary* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PRoutingSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PRoutingSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionClosed* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionClosed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionClosed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramNoConnection* Arena::CreateMaybeMessage< ::CMsgSteamDatagramNoConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramNoConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramGameserverSessionRequest* Arena::CreateMaybeMessage< ::CMsgSteamDatagramGameserverSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramGameserverSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramGameserverSessionEstablished* Arena::CreateMaybeMessage< ::CMsgSteamDatagramGameserverSessionEstablished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramGameserverSessionEstablished >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionStatsClientToRouter* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionStatsClientToRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionStatsClientToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionStatsRouterToClient* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionStatsRouterToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionStatsRouterToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionStatsRouterToServer* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionStatsRouterToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionStatsRouterToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionStatsServerToRouter* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionStatsServerToRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionStatsServerToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PSessionRequestBody* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PSessionRequestBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PSessionRequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PSessionRequest* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PSessionEstablished* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PSessionEstablished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PSessionEstablished >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionStatsP2PClientToRouter* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionStatsP2PClientToRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionStatsP2PClientToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionStatsP2PRouterToClient* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionStatsP2PRouterToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionStatsP2PRouterToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PBadRouteRouterToClient* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PBadRouteRouterToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PBadRouteRouterToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PRoutes_RelayCluster* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PRoutes_RelayCluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PRoutes_RelayCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PRoutes_Route* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PRoutes_Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PRoutes_Route >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramP2PRoutes* Arena::CreateMaybeMessage< ::CMsgSteamDatagramP2PRoutes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramP2PRoutes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramSetSecondaryAddressRequest* Arena::CreateMaybeMessage< ::CMsgSteamDatagramSetSecondaryAddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramSetSecondaryAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramSetSecondaryAddressResult* Arena::CreateMaybeMessage< ::CMsgSteamDatagramSetSecondaryAddressResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramSetSecondaryAddressResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
